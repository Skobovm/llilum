
STM32F411\mbed_simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001c988  08000000  08000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab    00000018  0801c988  0801c988  00024988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    000000c8  0801c9a0  0801c9a0  000249a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000978  200001a0  0801ca68  000281a0  2**4
                  CONTENTS, ALLOC, LOAD, DATA
  4 .got.plt      0000000c  20000b18  0801d3e0  00028b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000029c  20000b24  0801d3ec  00028b24  2**2
                  ALLOC
  6 .ARM.attributes 00000032  00000000  00000000  00028b24  2**0
                  CONTENTS, READONLY
  7 .comment      000000e0  00000000  00000000  00028b56  2**0
                  CONTENTS, READONLY
  8 .debug_str    00170c64  00000000  00000000  00028c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000019b0  00000000  00000000  0019989a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000195a  00000000  00000000  0019b24a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000fedb  00000000  00000000  0019cba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000760  00000000  00000000  001aca7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00003150  00000000  00000000  001ad1df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000031af  00000000  00000000  001b032f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000598c  00000000  00000000  001b34e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00007c27  00000000  00000000  001b8e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000005f8  00000000  00000000  001c0a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  000230c9  00000000  00000000  001c108b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000076  00000000  00000000  001e4154  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 00 02 20 01 9c 00 08 4d 9c 00 08 ad 99 00 08     ... ....M.......
 8000010:	c1 99 00 08 d5 99 00 08 e9 99 00 08 00 00 00 00     ................
	...
 800002c:	59 97 00 08 4d 9c 00 08 00 00 00 00 c5 97 00 08     Y...M...........
 800003c:	f1 9b 00 08 4d 9c 00 08 4d 9c 00 08 4d 9c 00 08     ....M...M...M...
 800004c:	4d 9c 00 08 4d 9c 00 08 4d 9c 00 08 4d 9c 00 08     M...M...M...M...
 800005c:	4d 9c 00 08 4d 9c 00 08 4d 9c 00 08 4d 9c 00 08     M...M...M...M...
 800006c:	4d 9c 00 08 4d 9c 00 08 4d 9c 00 08 4d 9c 00 08     M...M...M...M...
 800007c:	4d 9c 00 08 4d 9c 00 08 4d 9c 00 08 4d 9c 00 08     M...M...M...M...
	...
 800009c:	4d 9c 00 08 4d 9c 00 08 4d 9c 00 08 4d 9c 00 08     M...M...M...M...
 80000ac:	4d 9c 00 08 4d 9c 00 08 4d 9c 00 08 4d 9c 00 08     M...M...M...M...
 80000bc:	4d 9c 00 08 4d 9c 00 08 4d 9c 00 08 4d 9c 00 08     M...M...M...M...
 80000cc:	4d 9c 00 08 4d 9c 00 08 4d 9c 00 08 4d 9c 00 08     M...M...M...M...
 80000dc:	00 00 00 00 4d 9c 00 08 4d 9c 00 08 4d 9c 00 08     ....M...M...M...
	...
 80000fc:	4d 9c 00 08 00 00 00 00 4d 9c 00 08 4d 9c 00 08     M.......M...M...
 800010c:	4d 9c 00 08 00 00 00 00 00 00 00 00 00 00 00 00     M...............
 800011c:	00 00 00 00 4d 9c 00 08 4d 9c 00 08 4d 9c 00 08     ....M...M...M...
 800012c:	4d 9c 00 08 4d 9c 00 08 00 00 00 00 00 00 00 00     M...M...........
	...
 800014c:	4d 9c 00 08 4d 9c 00 08 4d 9c 00 08 4d 9c 00 08     M...M...M...M...
 800015c:	4d 9c 00 08 4d 9c 00 08 4d 9c 00 08 00 00 00 00     M...M...M.......
	...
 8000184:	4d 9c 00 08 00 00 00 00 00 00 00 00 4d 9c 00 08     M...........M...
 8000194:	4d 9c 00 08                                         M...

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000b24 	.word	0x20000b24
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0801c984 	.word	0x0801c984

080001bc <frame_dummy>:
 80001bc:	4b08      	ldr	r3, [pc, #32]	; (80001e0 <frame_dummy+0x24>)
 80001be:	b510      	push	{r4, lr}
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4808      	ldr	r0, [pc, #32]	; (80001e4 <frame_dummy+0x28>)
 80001c4:	4908      	ldr	r1, [pc, #32]	; (80001e8 <frame_dummy+0x2c>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	4808      	ldr	r0, [pc, #32]	; (80001ec <frame_dummy+0x30>)
 80001cc:	6803      	ldr	r3, [r0, #0]
 80001ce:	b903      	cbnz	r3, 80001d2 <frame_dummy+0x16>
 80001d0:	bd10      	pop	{r4, pc}
 80001d2:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <frame_dummy+0x34>)
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d0fb      	beq.n	80001d0 <frame_dummy+0x14>
 80001d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001dc:	4718      	bx	r3
 80001de:	bf00      	nop
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0801c984 	.word	0x0801c984
 80001e8:	20000b28 	.word	0x20000b28
 80001ec:	20000b14 	.word	0x20000b14
 80001f0:	00000000 	.word	0x00000000

080001f4 <_mainCRTStartup>:
 80001f4:	4b15      	ldr	r3, [pc, #84]	; (800024c <_mainCRTStartup+0x58>)
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	bf08      	it	eq
 80001fa:	4b13      	ldreq	r3, [pc, #76]	; (8000248 <_mainCRTStartup+0x54>)
 80001fc:	469d      	mov	sp, r3
 80001fe:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 8000202:	2100      	movs	r1, #0
 8000204:	468b      	mov	fp, r1
 8000206:	460f      	mov	r7, r1
 8000208:	4813      	ldr	r0, [pc, #76]	; (8000258 <_mainCRTStartup+0x64>)
 800020a:	4a14      	ldr	r2, [pc, #80]	; (800025c <_mainCRTStartup+0x68>)
 800020c:	1a12      	subs	r2, r2, r0
 800020e:	f00b fbe3 	bl	800b9d8 <memset>
 8000212:	4b0f      	ldr	r3, [pc, #60]	; (8000250 <_mainCRTStartup+0x5c>)
 8000214:	2b00      	cmp	r3, #0
 8000216:	d000      	beq.n	800021a <_mainCRTStartup+0x26>
 8000218:	4798      	blx	r3
 800021a:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <_mainCRTStartup+0x60>)
 800021c:	2b00      	cmp	r3, #0
 800021e:	d000      	beq.n	8000222 <_mainCRTStartup+0x2e>
 8000220:	4798      	blx	r3
 8000222:	2000      	movs	r0, #0
 8000224:	2100      	movs	r1, #0
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	480d      	ldr	r0, [pc, #52]	; (8000260 <_mainCRTStartup+0x6c>)
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <_mainCRTStartup+0x42>
 8000230:	480c      	ldr	r0, [pc, #48]	; (8000264 <_mainCRTStartup+0x70>)
 8000232:	f3af 8000 	nop.w
 8000236:	f00b fb87 	bl	800b948 <__libc_init_array>
 800023a:	0020      	movs	r0, r4
 800023c:	0029      	movs	r1, r5
 800023e:	f009 fe79 	bl	8009f34 <__wrap_main>
 8000242:	f00b f9e5 	bl	800b610 <exit>
 8000246:	bf00      	nop
 8000248:	00080000 	.word	0x00080000
 800024c:	20020000 	.word	0x20020000
	...
 8000258:	20000b24 	.word	0x20000b24
 800025c:	20000dc0 	.word	0x20000dc0
	...

08000268 <HardFault_Handler_Zelig>:
 8000268:	b580      	push	{r7, lr}
 800026a:	f000 f811 	bl	8000290 <ProcessorARMv7M::DebuggerConnected#3649>
 800026e:	f010 0fff 	tst.w	r0, #255	; 0xff
 8000272:	d102      	bne.n	800027a <HardFault_Handler_Zelig+0x12>
 8000274:	f009 fa56 	bl	8009724 <CMSIS_STUB_POWER_WaitForEvent>
 8000278:	e7fc      	b.n	8000274 <HardFault_Handler_Zelig+0xc>
 800027a:	f000 f810 	bl	800029e <ProcessorARMv7M::WasHardFaultOnVectorTableRead#3644>
 800027e:	f010 0fff 	tst.w	r0, #255	; 0xff
 8000282:	d002      	beq.n	800028a <HardFault_Handler_Zelig+0x22>
 8000284:	2017      	movs	r0, #23
 8000286:	f000 f811 	bl	80002ac <BugCheck::Raise#5282>
 800028a:	2018      	movs	r0, #24
 800028c:	f000 f80e 	bl	80002ac <BugCheck::Raise#5282>

08000290 <ProcessorARMv7M::DebuggerConnected#3649>:
 8000290:	b580      	push	{r7, lr}
 8000292:	f009 fb6b 	bl	800996c <CUSTOM_STUB_DebuggerConnected>
 8000296:	2801      	cmp	r0, #1
 8000298:	bf18      	it	ne
 800029a:	2000      	movne	r0, #0
 800029c:	bd80      	pop	{r7, pc}

0800029e <ProcessorARMv7M::WasHardFaultOnVectorTableRead#3644>:
 800029e:	b580      	push	{r7, lr}
 80002a0:	f009 fb72 	bl	8009988 <CUSTOM_STUB_SCB__get_HFSR>
 80002a4:	f000 0002 	and.w	r0, r0, #2
 80002a8:	0840      	lsrs	r0, r0, #1
 80002aa:	bd80      	pop	{r7, pc}

080002ac <BugCheck::Raise#5282>:
 80002ac:	b580      	push	{r7, lr}
 80002ae:	4904      	ldr	r1, [pc, #16]	; (80002c0 <BugCheck::Raise#5282+0x14>)
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <BugCheck::Raise#5282+0x18>)
 80002b2:	4479      	add	r1, pc
 80002b4:	4411      	add	r1, r2
 80002b6:	6748      	str	r0, [r1, #116]	; 0x74
 80002b8:	f009 faa8 	bl	800980c <Breakpoint>
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	18000862 	.word	0x18000862
 80002c4:	fffffcf8 	.word	0xfffffcf8

080002c8 <MemManage_Handler_Zelig>:
 80002c8:	b580      	push	{r7, lr}
 80002ca:	f000 f801 	bl	80002d0 <ProcessorARMv7M::MemManage_Handler#3653>
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <ProcessorARMv7M::MemManage_Handler#3653>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	4e16      	ldr	r6, [pc, #88]	; (800032c <ProcessorARMv7M::MemManage_Handler#3653+0x5c>)
 80002d4:	4604      	mov	r4, r0
 80002d6:	4816      	ldr	r0, [pc, #88]	; (8000330 <ProcessorARMv7M::MemManage_Handler#3653+0x60>)
 80002d8:	447e      	add	r6, pc
 80002da:	1985      	adds	r5, r0, r6
 80002dc:	f009 fb4e 	bl	800997c <CUSTOM_STUB_SCB__get_CFSR>
 80002e0:	4601      	mov	r1, r0
 80002e2:	4628      	mov	r0, r5
 80002e4:	f000 f83e 	bl	8000364 <BugCheck::Log#5284>
 80002e8:	4812      	ldr	r0, [pc, #72]	; (8000334 <ProcessorARMv7M::MemManage_Handler#3653+0x64>)
 80002ea:	1985      	adds	r5, r0, r6
 80002ec:	f009 fb52 	bl	8009994 <CUSTOM_STUB_SCB__get_MMFAR>
 80002f0:	4601      	mov	r1, r0
 80002f2:	4628      	mov	r0, r5
 80002f4:	f000 f836 	bl	8000364 <BugCheck::Log#5284>
 80002f8:	480f      	ldr	r0, [pc, #60]	; (8000338 <ProcessorARMv7M::MemManage_Handler#3653+0x68>)
 80002fa:	6821      	ldr	r1, [r4, #0]
 80002fc:	4430      	add	r0, r6
 80002fe:	f000 f831 	bl	8000364 <BugCheck::Log#5284>
 8000302:	f003 f90b 	bl	800351c <ProcessorARMv7M::IsBusFaultAddressValid#3646>
 8000306:	f010 0fff 	tst.w	r0, #255	; 0xff
 800030a:	d009      	beq.n	8000320 <ProcessorARMv7M::MemManage_Handler#3653+0x50>
 800030c:	f003 f90d 	bl	800352a <ProcessorARMv7M::IsBusFaultAddressPrecise#3647>
 8000310:	f010 0fff 	tst.w	r0, #255	; 0xff
 8000314:	d004      	beq.n	8000320 <ProcessorARMv7M::MemManage_Handler#3653+0x50>
 8000316:	f009 fb3d 	bl	8009994 <CUSTOM_STUB_SCB__get_MMFAR>
 800031a:	f009 fa77 	bl	800980c <Breakpoint>
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f009 fb2c 	bl	800997c <CUSTOM_STUB_SCB__get_CFSR>
 8000324:	f009 fa72 	bl	800980c <Breakpoint>
 8000328:	bd70      	pop	{r4, r5, r6, pc}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	1800083c 	.word	0x1800083c
 8000330:	e80110c8 	.word	0xe80110c8
 8000334:	e80110f8 	.word	0xe80110f8
 8000338:	e8011128 	.word	0xe8011128

0800033c <UsageFault_Handler_Zelig>:
 800033c:	b510      	push	{r4, lr}
 800033e:	4807      	ldr	r0, [pc, #28]	; (800035c <UsageFault_Handler_Zelig+0x20>)
 8000340:	4907      	ldr	r1, [pc, #28]	; (8000360 <UsageFault_Handler_Zelig+0x24>)
 8000342:	4478      	add	r0, pc
 8000344:	180c      	adds	r4, r1, r0
 8000346:	f009 fb19 	bl	800997c <CUSTOM_STUB_SCB__get_CFSR>
 800034a:	4601      	mov	r1, r0
 800034c:	4620      	mov	r0, r4
 800034e:	f000 f809 	bl	8000364 <BugCheck::Log#5284>
 8000352:	f009 fb13 	bl	800997c <CUSTOM_STUB_SCB__get_CFSR>
 8000356:	f009 fa59 	bl	800980c <Breakpoint>
 800035a:	bd10      	pop	{r4, pc}
 800035c:	180007d2 	.word	0x180007d2
 8000360:	e8010f48 	.word	0xe8010f48

08000364 <BugCheck::Log#5284>:
        {
            Device.Instance.ProcessLog(format);
        }

        public static void Log(string format, int p1)
        {
 8000364:	b580      	push	{r7, lr}
 8000366:	460a      	mov	r2, r1
 8000368:	4601      	mov	r1, r0
 800036a:	4803      	ldr	r0, [pc, #12]	; (8000378 <BugCheck::Log#5284+0x14>)
            Device.Instance.ProcessLog(format, p1);
 800036c:	4b03      	ldr	r3, [pc, #12]	; (800037c <BugCheck::Log#5284+0x18>)
 800036e:	4478      	add	r0, pc
 8000370:	4418      	add	r0, r3
 8000372:	f004 fa6d 	bl	8004850 <Device::ProcessLog#18574>
 8000376:	bd80      	pop	{r7, pc}
 8000378:	180007a6 	.word	0x180007a6
 800037c:	e8014a84 	.word	0xe8014a84

08000380 <BusFault_Handler_Zelig>:
 8000380:	b580      	push	{r7, lr}
 8000382:	f000 f801 	bl	8000388 <ProcessorARMv7M::BusFault_Handler#3655>
 8000386:	bd80      	pop	{r7, pc}

08000388 <ProcessorARMv7M::BusFault_Handler#3655>:
 8000388:	b570      	push	{r4, r5, r6, lr}
 800038a:	4e16      	ldr	r6, [pc, #88]	; (80003e4 <ProcessorARMv7M::BusFault_Handler#3655+0x5c>)
 800038c:	4604      	mov	r4, r0
 800038e:	4816      	ldr	r0, [pc, #88]	; (80003e8 <ProcessorARMv7M::BusFault_Handler#3655+0x60>)
 8000390:	447e      	add	r6, pc
 8000392:	1985      	adds	r5, r0, r6
 8000394:	f009 faf2 	bl	800997c <CUSTOM_STUB_SCB__get_CFSR>
 8000398:	4601      	mov	r1, r0
 800039a:	4628      	mov	r0, r5
 800039c:	f7ff ffe2 	bl	8000364 <BugCheck::Log#5284>
 80003a0:	4812      	ldr	r0, [pc, #72]	; (80003ec <ProcessorARMv7M::BusFault_Handler#3655+0x64>)
 80003a2:	1985      	adds	r5, r0, r6
 80003a4:	f009 fafc 	bl	80099a0 <CUSTOM_STUB_SCB__get_BFAR>
 80003a8:	4601      	mov	r1, r0
 80003aa:	4628      	mov	r0, r5
 80003ac:	f7ff ffda 	bl	8000364 <BugCheck::Log#5284>
 80003b0:	480f      	ldr	r0, [pc, #60]	; (80003f0 <ProcessorARMv7M::BusFault_Handler#3655+0x68>)
 80003b2:	6821      	ldr	r1, [r4, #0]
 80003b4:	4430      	add	r0, r6
 80003b6:	f7ff ffd5 	bl	8000364 <BugCheck::Log#5284>
 80003ba:	f003 f8af 	bl	800351c <ProcessorARMv7M::IsBusFaultAddressValid#3646>
 80003be:	f010 0fff 	tst.w	r0, #255	; 0xff
 80003c2:	d009      	beq.n	80003d8 <ProcessorARMv7M::BusFault_Handler#3655+0x50>
 80003c4:	f003 f8b1 	bl	800352a <ProcessorARMv7M::IsBusFaultAddressPrecise#3647>
 80003c8:	f010 0fff 	tst.w	r0, #255	; 0xff
 80003cc:	d004      	beq.n	80003d8 <ProcessorARMv7M::BusFault_Handler#3655+0x50>
 80003ce:	f009 fae7 	bl	80099a0 <CUSTOM_STUB_SCB__get_BFAR>
 80003d2:	f009 fa1b 	bl	800980c <Breakpoint>
 80003d6:	bd70      	pop	{r4, r5, r6, pc}
 80003d8:	f009 fad0 	bl	800997c <CUSTOM_STUB_SCB__get_CFSR>
 80003dc:	f009 fa16 	bl	800980c <Breakpoint>
 80003e0:	bd70      	pop	{r4, r5, r6, pc}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	18000784 	.word	0x18000784
 80003e8:	e8010f48 	.word	0xe8010f48
 80003ec:	e8011158 	.word	0xe8011158
 80003f0:	e8011188 	.word	0xe8011188

080003f4 <main>:

        [NoInline]
        [NoReturn]
        [TS.WellKnownMethod( "Bootstrap_Initialization" )]
        private static unsafe void Initialization()
        {
 80003f4:	b5b0      	push	{r4, r5, r7, lr}
 80003f6:	4c0b      	ldr	r4, [pc, #44]	; (8000424 <main+0x30>)
            HardwareInitialization();
            
            //
            // This only initializes the heap.
            //
            HeapInitialization();
 80003f8:	480b      	ldr	r0, [pc, #44]	; (8000428 <main+0x34>)
 80003fa:	447c      	add	r4, pc
 80003fc:	1905      	adds	r5, r0, r4
            // This should only minimally setup hardware so that the system is functional.
            // For example, all the peripherals have been added to the address space,
            // memory has been initialized and operated at the nominal rate, the CPU runs at
            // the correct clock frequency, etc.
            //
            HardwareInitialization();
 80003fe:	f003 fb45 	bl	8003a8c <Bootstrap::HardwareInitialization#4066>
            
            //
            // This only initializes the heap.
            //
            HeapInitialization();
 8000402:	f003 fb77 	bl	8003af4 <Bootstrap::HeapInitialization#4067>
 8000406:	6d68      	ldr	r0, [r5, #84]	; 0x54

            //
            // This initializes the main software services, like object allocation, type system, thread manager, etc.
            //
            SoftwareInitialization( Device.Instance.BootstrapStack );
 8000408:	f003 fb84 	bl	8003b14 <Bootstrap::SoftwareInitialization#4069>

            //
            // Once all the software services have been initialized, we can activate the hardware.
            // Activating the hardware might require starting threads, associated delegate with callbacks, etc.
            //
            HardwareActivation();
 800040c:	f003 fb96 	bl	8003b3c <Bootstrap::HardwareActivation#4070>

            //
            // After the hardware is ready, we can start the software services, which will use the hardware one.
            //
            SoftwareActivation();
 8000410:	f003 fba0 	bl	8003b54 <Bootstrap::SoftwareActivation#4071>
 8000414:	2006      	movs	r0, #6
 8000416:	f009 f94b 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 800041a:	4804      	ldr	r0, [pc, #16]	; (800042c <main+0x38>)
 800041c:	4420      	add	r0, r4
 800041e:	f002 fe91 	bl	8003144 <ThreadManager::StartThreads#3524>
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	1800071a 	.word	0x1800071a
 8000428:	fffffcf8 	.word	0xfffffcf8
 800042c:	fffffe18 	.word	0xfffffe18

08000430 <SVC_Handler_Zelig>:
            
            [RT.HardwareExceptionHandler( RT.HardwareException.Service )]
            [RT.ExportedMethod]
            private static unsafe void SVC_Handler_Zelig( uint* args )
            {
                SVC_Code svc_number = (SVC_Code)((byte*)args[6])[-2]; // svc number is at stacked PC offset - 2 bytes
 8000430:	b580      	push	{r7, lr}
 8000432:	3018      	adds	r0, #24
 8000434:	bf1c      	itt	ne
 8000436:	6800      	ldrne	r0, [r0, #0]
 8000438:	f1b0 0002 	subsne.w	r0, r0, #2
 800043c:	d012      	beq.n	8000464 <SVC_Handler_Zelig+0x34>

                switch(svc_number)
 800043e:	7800      	ldrb	r0, [r0, #0]
 8000440:	3811      	subs	r0, #17
 8000442:	2803      	cmp	r0, #3
 8000444:	d80b      	bhi.n	800045e <SVC_Handler_Zelig+0x2e>
 8000446:	e8df f000 	tbb	[pc, r0]
 800044a:	0202      	.short	0x0202
 800044c:	0502      	.short	0x0502
                {
                    case SVC_Code.SupervisorCall__LongJump:
                        LongJump( );
 800044e:	f000 f84b 	bl	80004e8 <Context::LongJump#6353>
 8000452:	bd80      	pop	{r7, pc}
                        break;
                    case SVC_Code.SupervisorCall__RetireThread:
                        LongJumpForRetireThread( );
                        break;
                    case SVC_Code.SupervisorCall__SnapshotProcessModeRegisters:
                        UpdateFrame( ref ProcessorARMv7M.Snapshot, CUSTOM_STUB_FetchSoftwareFrameSnapshot( ) ); 
 8000454:	f009 f97c 	bl	8009750 <CUSTOM_STUB_FetchSoftwareFrameSnapshot>
 8000458:	f000 f81c 	bl	8000494 <ProcessorARMv7M::UpdateFrame#3704>
 800045c:	bd80      	pop	{r7, pc}
 800045e:	2016      	movs	r0, #22
 8000460:	f7ff ff24 	bl	80002ac <BugCheck::Raise#5282>
            
            [RT.HardwareExceptionHandler( RT.HardwareException.Service )]
            [RT.ExportedMethod]
            private static unsafe void SVC_Handler_Zelig( uint* args )
            {
                SVC_Code svc_number = (SVC_Code)((byte*)args[6])[-2]; // svc number is at stacked PC offset - 2 bytes
 8000464:	f000 f800 	bl	8000468 <Thread::ThrowNullException#4411>

08000468 <Thread::ThrowNullException#4411>:

        [NoInline]
        [NoReturn]
        [TS.WellKnownMethod( "ThreadImpl_ThrowNullException" )]
        internal static void ThrowNullException()
        {
 8000468:	b510      	push	{r4, lr}
 800046a:	4807      	ldr	r0, [pc, #28]	; (8000488 <Thread::ThrowNullException#4411+0x20>)
            throw new NullReferenceException();
 800046c:	4907      	ldr	r1, [pc, #28]	; (800048c <Thread::ThrowNullException#4411+0x24>)
 800046e:	4478      	add	r0, pc
 8000470:	180c      	adds	r4, r1, r0
 8000472:	4907      	ldr	r1, [pc, #28]	; (8000490 <Thread::ThrowNullException#4411+0x28>)
 8000474:	4401      	add	r1, r0
 8000476:	4620      	mov	r0, r4
 8000478:	f000 fa0c 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 800047c:	4601      	mov	r1, r0
 800047e:	2000      	movs	r0, #0
 8000480:	6088      	str	r0, [r1, #8]
 8000482:	4620      	mov	r0, r4
 8000484:	f000 fa1c 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8000488:	180006a6 	.word	0x180006a6
 800048c:	fffffe0c 	.word	0xfffffe0c
 8000490:	e8019928 	.word	0xe8019928

08000494 <ProcessorARMv7M::UpdateFrame#3704>:

            UpdateFrame( ref Snapshot, registers ); 
        }

        protected static unsafe void UpdateFrame( ref Context.RegistersOnStack snapshot, uint* registers )
        {
 8000494:	b510      	push	{r4, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	4604      	mov	r4, r0
 800049a:	b31c      	cbz	r4, 80004e4 <ProcessorARMv7M::UpdateFrame#3704+0x50>
            BugCheck.Log( "[Last Active Frame] EXC=0x%08x, PSR=0x%08x, PC=0x%08x",
 800049c:	f114 0f44 	cmn.w	r4, #68	; 0x44
 80004a0:	bf18      	it	ne
 80004a2:	f114 0f40 	cmnne.w	r4, #64	; 0x40
 80004a6:	d01d      	beq.n	80004e4 <ProcessorARMv7M::UpdateFrame#3704+0x50>
 80004a8:	6820      	ldr	r0, [r4, #0]
 80004aa:	e9d4 2110 	ldrd	r2, r1, [r4, #64]	; 0x40
 80004ae:	f003 f851 	bl	8003554 <BugCheck::Log#5286>
                    (int)registers[ 0 ],
                    (int)registers[ 17 ],
                    (int)registers[ 16 ]
                    );

            BugCheck.Log( "[Last Active Frame] R0=0x%08x, R1=0x%08x, R2=0x%08x, R3=0x%08x, R12=0x%08x",
 80004b2:	f114 0f28 	cmn.w	r4, #40	; 0x28
 80004b6:	d015      	beq.n	80004e4 <ProcessorARMv7M::UpdateFrame#3704+0x50>
 80004b8:	f114 0f2c 	cmn.w	r4, #44	; 0x2c
 80004bc:	bf18      	it	ne
 80004be:	f114 0f30 	cmnne.w	r4, #48	; 0x30
 80004c2:	d00f      	beq.n	80004e4 <ProcessorARMv7M::UpdateFrame#3704+0x50>
 80004c4:	f114 0f34 	cmn.w	r4, #52	; 0x34
 80004c8:	bf18      	it	ne
 80004ca:	f114 0c38 	addsne.w	ip, r4, #56	; 0x38
 80004ce:	d009      	beq.n	80004e4 <ProcessorARMv7M::UpdateFrame#3704+0x50>
 80004d0:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80004d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004d6:	f8dc 4000 	ldr.w	r4, [ip]
 80004da:	9400      	str	r4, [sp, #0]
 80004dc:	f003 f852 	bl	8003584 <BugCheck::Log#5288>
 80004e0:	b002      	add	sp, #8
 80004e2:	bd10      	pop	{r4, pc}
            UpdateFrame( ref Snapshot, registers ); 
        }

        protected static unsafe void UpdateFrame( ref Context.RegistersOnStack snapshot, uint* registers )
        {
            BugCheck.Log( "[Last Active Frame] EXC=0x%08x, PSR=0x%08x, PC=0x%08x",
 80004e4:	f7ff ffc0 	bl	8000468 <Thread::ThrowNullException#4411>

080004e8 <Context::LongJump#6353>:
            {
                LongJump( ); 
            }
            
            private static unsafe void LongJump( )
            {
 80004e8:	b510      	push	{r4, lr}
 80004ea:	480d      	ldr	r0, [pc, #52]	; (8000520 <Context::LongJump#6353+0x38>)
 80004ec:	490d      	ldr	r1, [pc, #52]	; (8000524 <Context::LongJump#6353+0x3c>)
 80004ee:	4478      	add	r0, pc
 80004f0:	4408      	add	r0, r1
 80004f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80004f4:	b190      	cbz	r0, 800051c <Context::LongJump#6353+0x34>
 80004f6:	490c      	ldr	r1, [pc, #48]	; (8000528 <Context::LongJump#6353+0x40>)
                //
                // Retrieve next context from ThreadManager
                //
                Context currentThreadCtx = (ProcessorARMv7M.Context)ThreadManager.Instance.CurrentThread.SwappedOutContext;
 80004f8:	4a0c      	ldr	r2, [pc, #48]	; (800052c <Context::LongJump#6353+0x44>)
 80004fa:	69c0      	ldr	r0, [r0, #28]
 80004fc:	4479      	add	r1, pc
 80004fe:	4411      	add	r1, r2
 8000500:	f003 fa6e 	bl	80039e0 <TypeSystemManager::CastToType#5590>
 8000504:	4604      	mov	r4, r0
                                
                //
                // Set the PSP at R0 so that returning from the SVC handler will complete the work
                //
                SetProcessStackPointer(
 8000506:	2c00      	cmp	r4, #0
 8000508:	d008      	beq.n	800051c <Context::LongJump#6353+0x34>
 800050a:	d007      	beq.n	800051c <Context::LongJump#6353+0x34>
 800050c:	68e0      	ldr	r0, [r4, #12]
 800050e:	3028      	adds	r0, #40	; 0x28
 8000510:	f009 f8c4 	bl	800969c <CMSIS_STUB_SCB__set_PSP>
                    AddressMath.Increment( currentThreadCtx.StackPointer, ProcessorARMv7M.Context.RegistersOnStack.SwitcherFrameSize )
                    );

                SetExcReturn( currentThreadCtx.EXC_RETURN ); 
 8000514:	6920      	ldr	r0, [r4, #16]
 8000516:	f009 f915 	bl	8009744 <CUSTOM_STUB_SetExcReturn>
 800051a:	bd10      	pop	{r4, pc}
            private static unsafe void LongJump( )
            {
                //
                // Retrieve next context from ThreadManager
                //
                Context currentThreadCtx = (ProcessorARMv7M.Context)ThreadManager.Instance.CurrentThread.SwappedOutContext;
 800051c:	f7ff ffa4 	bl	8000468 <Thread::ThrowNullException#4411>
 8000520:	18000626 	.word	0x18000626
 8000524:	fffffe18 	.word	0xfffffe18
 8000528:	18000618 	.word	0x18000618
 800052c:	e8019bf8 	.word	0xe8019bf8

08000530 <PendSV_Handler_Zelig>:
            }
            
            [RT.HardwareExceptionHandler( RT.HardwareException.Interrupt )]
            [RT.ExportedMethod]
            private static UIntPtr PendSV_Handler_Zelig( UIntPtr stackPtr )
            {
 8000530:	b5b0      	push	{r4, r5, r7, lr}
 8000532:	4604      	mov	r4, r0
 8000534:	2001      	movs	r0, #1
 8000536:	f009 f8bb 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 800053a:	4605      	mov	r5, r0
                using(SmartHandles.InterruptState.Disable( ))
                {
                    unsafe
                    {
                        return ContextSwitch(ThreadManager.Instance, stackPtr );
 800053c:	4620      	mov	r0, r4
 800053e:	f000 f80d 	bl	800055c <Context::ContextSwitch#6351>
 8000542:	4604      	mov	r4, r0
 8000544:	4628      	mov	r0, r5
 8000546:	f009 f8b3 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 800054a:	4620      	mov	r0, r4
 800054c:	bdb0      	pop	{r4, r5, r7, pc}

0800054e <TypeSystemManager::Rethrow#5597>:
        [NoReturn]
        [NoInline]
        [TS.WellKnownMethod("TypeSystemManager_Rethrow")]
        public virtual void Rethrow()
        {
            DeliverException(ThreadImpl.GetCurrentException());
 800054e:	b580      	push	{r7, lr}
 8000550:	f002 f984 	bl	800285c <Thread::GetCurrentException#4410>
 8000554:	f004 fc1a 	bl	8004d8c <TypeSystemManager::DeliverException#5599>
 8000558:	bd80      	pop	{r7, pc}
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <Context::ContextSwitch#6351>:

#endregion


            private static UIntPtr ContextSwitch( ThreadManager tm, UIntPtr stackPointer )
            {
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	4605      	mov	r5, r0
 8000560:	4818      	ldr	r0, [pc, #96]	; (80005c4 <Context::ContextSwitch#6351+0x68>)
 8000562:	4919      	ldr	r1, [pc, #100]	; (80005c8 <Context::ContextSwitch#6351+0x6c>)
 8000564:	4478      	add	r0, pc
 8000566:	4401      	add	r1, r0
 8000568:	e9d1 0409 	ldrd	r0, r4, [r1, #36]	; 0x24
 800056c:	b168      	cbz	r0, 800058a <Context::ContextSwitch#6351+0x2e>
 800056e:	4917      	ldr	r1, [pc, #92]	; (80005cc <Context::ContextSwitch#6351+0x70>)
                ThreadImpl nextThread    = tm.NextThread;
                Context    ctx;

                if(currentThread != null)
                {
                    ctx = (Context)currentThread.SwappedOutContext;
 8000570:	4a17      	ldr	r2, [pc, #92]	; (80005d0 <Context::ContextSwitch#6351+0x74>)
 8000572:	69c0      	ldr	r0, [r0, #28]
 8000574:	4479      	add	r1, pc
 8000576:	4411      	add	r1, r2
 8000578:	f003 fa32 	bl	80039e0 <TypeSystemManager::CastToType#5590>
 800057c:	b1fd      	cbz	r5, 80005be <Context::ContextSwitch#6351+0x62>
                    //
                    // update SP as well as the EXC_RETURN address
                    //
                    unsafe
                    {
                        ctx.EXC_RETURN = GetFrame(stackPointer)->SoftwareFrameRegisters.EXC_RETURN;
 800057e:	2800      	cmp	r0, #0
 8000580:	bf1c      	itt	ne
 8000582:	6829      	ldrne	r1, [r5, #0]
 8000584:	6101      	strne	r1, [r0, #16]
 8000586:	d01a      	beq.n	80005be <Context::ContextSwitch#6351+0x62>
 8000588:	60c5      	str	r5, [r0, #12]
 800058a:	b1c4      	cbz	r4, 80005be <Context::ContextSwitch#6351+0x62>
 800058c:	4811      	ldr	r0, [pc, #68]	; (80005d4 <Context::ContextSwitch#6351+0x78>)
                    }

                    ctx.StackPointer = stackPointer;
                }

                ctx = (Context)nextThread.SwappedOutContext;
 800058e:	4910      	ldr	r1, [pc, #64]	; (80005d0 <Context::ContextSwitch#6351+0x74>)
 8000590:	4478      	add	r0, pc
 8000592:	4401      	add	r1, r0
 8000594:	69e0      	ldr	r0, [r4, #28]
 8000596:	f003 fa23 	bl	80039e0 <TypeSystemManager::CastToType#5590>
 800059a:	4605      	mov	r5, r0
 800059c:	b17d      	cbz	r5, 80005be <Context::ContextSwitch#6351+0x62>

                //
                // Pass EXC_RETURN down to the native portion of the 
                // PendSV handler we need to offset to the beginning of the frame
                //
                SetExcReturn( ctx.EXC_RETURN ); 
 800059e:	6928      	ldr	r0, [r5, #16]
 80005a0:	f009 f8d0 	bl	8009744 <CUSTOM_STUB_SetExcReturn>
                    
                //
                // Update thread manager state and Thread.CurrentThread static field
                //
                tm.CurrentThread = nextThread;
 80005a4:	4620      	mov	r0, r4
 80005a6:	f002 ff37 	bl	8003418 <ThreadManager::set_CurrentThread#3556>
 80005aa:	480b      	ldr	r0, [pc, #44]	; (80005d8 <Context::ContextSwitch#6351+0x7c>)
 80005ac:	490b      	ldr	r1, [pc, #44]	; (80005dc <Context::ContextSwitch#6351+0x80>)
 80005ae:	2d00      	cmp	r5, #0
 80005b0:	4478      	add	r0, pc
 80005b2:	4408      	add	r0, r1
 80005b4:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
 80005b8:	bf1c      	itt	ne
 80005ba:	68e8      	ldrne	r0, [r5, #12]
 80005bc:	bdb0      	popne	{r4, r5, r7, pc}
#endregion


            private static UIntPtr ContextSwitch( ThreadManager tm, UIntPtr stackPointer )
            {
                ThreadImpl currentThread = tm.CurrentThread;
 80005be:	f7ff ff53 	bl	8000468 <Thread::ThrowNullException#4411>
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	180005b0 	.word	0x180005b0
 80005c8:	fffffe18 	.word	0xfffffe18
 80005cc:	180005a0 	.word	0x180005a0
 80005d0:	e8019bf8 	.word	0xe8019bf8
 80005d4:	18000584 	.word	0x18000584
 80005d8:	18000564 	.word	0x18000564
 80005dc:	fffffcf8 	.word	0xfffffcf8

080005e0 <AnyInterrupt>:
 80005e0:	4770      	bx	lr
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <SVC_Handler_Zelig_VFP_NoFPContext>:
            
            [RT.HardwareExceptionHandler( RT.HardwareException.Interrupt )]
            [RT.ExportedMethod]
            private static unsafe void SVC_Handler_Zelig_VFP_NoFPContext( uint* args )
            {
                SVC_Code svc_number = (SVC_Code)((byte*)args[6])[-2]; // svc number is at stacked PC offset - 2 bytes
 80005e4:	b580      	push	{r7, lr}
 80005e6:	3018      	adds	r0, #24
 80005e8:	bf1c      	itt	ne
 80005ea:	6800      	ldrne	r0, [r0, #0]
 80005ec:	f1b0 0002 	subsne.w	r0, r0, #2
 80005f0:	d012      	beq.n	8000618 <SVC_Handler_Zelig_VFP_NoFPContext+0x34>

                switch(svc_number)
 80005f2:	7800      	ldrb	r0, [r0, #0]
 80005f4:	3811      	subs	r0, #17
 80005f6:	2803      	cmp	r0, #3
 80005f8:	d80b      	bhi.n	8000612 <SVC_Handler_Zelig_VFP_NoFPContext+0x2e>
 80005fa:	e8df f000 	tbb	[pc, r0]
 80005fe:	0202      	.short	0x0202
 8000600:	0502      	.short	0x0502
                {
                    case SVC_Code.SupervisorCall__LongJump:
                        LongJump( ); 
 8000602:	f000 f80b 	bl	800061c <Context::LongJump#6390>
 8000606:	bd80      	pop	{r7, pc}
                        break;
                    case SVC_Code.SupervisorCall__RetireThread:
                        LongJumpForRetireThread( );
                        break;
                    case SVC_Code.SupervisorCall__SnapshotProcessModeRegisters:
                        UpdateFrame( ref ProcessorARMv7M.Snapshot, CUSTOM_STUB_FetchSoftwareFrameSnapshot( ) ); 
 8000608:	f009 f8a2 	bl	8009750 <CUSTOM_STUB_FetchSoftwareFrameSnapshot>
 800060c:	f7ff ff42 	bl	8000494 <ProcessorARMv7M::UpdateFrame#3704>
 8000610:	bd80      	pop	{r7, pc}
 8000612:	2016      	movs	r0, #22
 8000614:	f7ff fe4a 	bl	80002ac <BugCheck::Raise#5282>
            
            [RT.HardwareExceptionHandler( RT.HardwareException.Interrupt )]
            [RT.ExportedMethod]
            private static unsafe void SVC_Handler_Zelig_VFP_NoFPContext( uint* args )
            {
                SVC_Code svc_number = (SVC_Code)((byte*)args[6])[-2]; // svc number is at stacked PC offset - 2 bytes
 8000618:	f7ff ff26 	bl	8000468 <Thread::ThrowNullException#4411>

0800061c <Context::LongJump#6390>:
            {
                LongJump( ); 
            }
            
            private static unsafe void LongJump( )
            {
 800061c:	b510      	push	{r4, lr}
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <Context::LongJump#6390+0x34>)
 8000620:	490c      	ldr	r1, [pc, #48]	; (8000654 <Context::LongJump#6390+0x38>)
 8000622:	4478      	add	r0, pc
 8000624:	4408      	add	r0, r1
 8000626:	6a40      	ldr	r0, [r0, #36]	; 0x24
                //
                // Retrieve next context from ThreadManager
                //
                Context currentThreadCtx = (ProcessorARMv7M_VFP.Context)ThreadManager.Instance.CurrentThread.SwappedOutContext;
 8000628:	2800      	cmp	r0, #0
 800062a:	bf1c      	itt	ne
 800062c:	69c4      	ldrne	r4, [r0, #28]

                //
                // Set the PSP at R0 so that returning from the SVC handler will complete the work
                //
                SetProcessStackPointer( AddressMath.Increment( 
 800062e:	2c00      	cmpne	r4, #0
 8000630:	d00c      	beq.n	800064c <Context::LongJump#6390+0x30>
            }

            public bool IsFullContext
            {
                [RT.Inline]
                get { return this.m_isFullContext; }
 8000632:	7d20      	ldrb	r0, [r4, #20]
                Context currentThreadCtx = (ProcessorARMv7M_VFP.Context)ThreadManager.Instance.CurrentThread.SwappedOutContext;

                //
                // Set the PSP at R0 so that returning from the SVC handler will complete the work
                //
                SetProcessStackPointer( AddressMath.Increment( 
 8000634:	2128      	movs	r1, #40	; 0x28
 8000636:	2800      	cmp	r0, #0
 8000638:	bf18      	it	ne
 800063a:	2168      	movne	r1, #104	; 0x68
            //

            public override UIntPtr StackPointer
            {
                [RT.Inline]
                get { return this.SP; }
 800063c:	68e0      	ldr	r0, [r4, #12]
 800063e:	4408      	add	r0, r1
 8000640:	f009 f82c 	bl	800969c <CMSIS_STUB_SCB__set_PSP>
                    currentThreadCtx.StackPointer, 
                    currentThreadCtx.IsFullContext 
                        ? RegistersOnStackFullFPContext.SwitcherFrameSize 
                        : RegistersOnStackNoFPContext.SwitcherFrameSize ) );

                SetExcReturn( currentThreadCtx.EXC_RETURN );
 8000644:	6920      	ldr	r0, [r4, #16]
 8000646:	f009 f87d 	bl	8009744 <CUSTOM_STUB_SetExcReturn>
 800064a:	bd10      	pop	{r4, pc}
            private static unsafe void LongJump( )
            {
                //
                // Retrieve next context from ThreadManager
                //
                Context currentThreadCtx = (ProcessorARMv7M_VFP.Context)ThreadManager.Instance.CurrentThread.SwappedOutContext;
 800064c:	f7ff ff0c 	bl	8000468 <Thread::ThrowNullException#4411>
 8000650:	180004f2 	.word	0x180004f2
 8000654:	fffffe18 	.word	0xfffffe18

08000658 <PendSV_Handler_Zelig_VFP>:
            
            
            [RT.HardwareExceptionHandler( RT.HardwareException.Interrupt )]
            [RT.ExportedMethod]
            private static UIntPtr PendSV_Handler_Zelig_VFP( UIntPtr stackPointer, uint isParitalStack )
            {
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	4605      	mov	r5, r0
 800065c:	2001      	movs	r0, #1
 800065e:	460c      	mov	r4, r1
 8000660:	f009 f826 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
                using (SmartHandles.InterruptState.Disable( ))
                {
                    return ContextSwitch( ThreadManager.Instance, stackPointer, isParitalStack == 0 );
 8000664:	2100      	movs	r1, #0
 8000666:	2c00      	cmp	r4, #0
 8000668:	4606      	mov	r6, r0
 800066a:	4628      	mov	r0, r5
 800066c:	bf08      	it	eq
 800066e:	2101      	moveq	r1, #1
 8000670:	f000 f806 	bl	8000680 <Context::ContextSwitch#6388>
 8000674:	4604      	mov	r4, r0
 8000676:	4630      	mov	r0, r6
 8000678:	f009 f81a 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 800067c:	4620      	mov	r0, r4
 800067e:	bd70      	pop	{r4, r5, r6, pc}

08000680 <Context::ContextSwitch#6388>:
            }

            #endregion

            private static UIntPtr ContextSwitch( ThreadManager tm, UIntPtr stackPointer, bool isFullFrame )
            {
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <Context::ContextSwitch#6388+0x4c>)
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <Context::ContextSwitch#6388+0x50>)
 8000686:	447a      	add	r2, pc
 8000688:	4413      	add	r3, r2
 800068a:	e9d3 2409 	ldrd	r2, r4, [r3, #36]	; 0x24
 800068e:	b142      	cbz	r2, 80006a2 <Context::ContextSwitch#6388+0x22>
 8000690:	69d2      	ldr	r2, [r2, #28]
 8000692:	b1ca      	cbz	r2, 80006c8 <Context::ContextSwitch#6388+0x48>

                    //
                    // update SP as well as the EXC_RETURN address
                    //     
                    ctx.IsFullContext = isFullFrame;
                    ctx.EXC_RETURN = isFullFrame 
 8000694:	f011 0fff 	tst.w	r1, #255	; 0xff
 8000698:	7511      	strb	r1, [r2, #20]
 800069a:	b1a8      	cbz	r0, 80006c8 <Context::ContextSwitch#6388+0x48>
 800069c:	6801      	ldr	r1, [r0, #0]
 800069e:	e9c2 0103 	strd	r0, r1, [r2, #12]
                        ? GetFullFrame(stackPointer)  ->SoftwareFrameRegisters.EXC_RETURN
                        : GetSimpleFrame(stackPointer)->SoftwareFrameRegisters.EXC_RETURN;
                    ctx.StackPointer = stackPointer;
                }

                ctx = (Context)nextThread.SwappedOutContext;
 80006a2:	2c00      	cmp	r4, #0
 80006a4:	bf1c      	itt	ne
 80006a6:	69e5      	ldrne	r5, [r4, #28]

                //
                // Pass EXC_RETURN down to the native portion of the 
                // PendSV handler we need to offset to the beginning of the frame
                //
                SetExcReturn( ctx.EXC_RETURN );
 80006a8:	2d00      	cmpne	r5, #0
 80006aa:	d00d      	beq.n	80006c8 <Context::ContextSwitch#6388+0x48>
 80006ac:	6928      	ldr	r0, [r5, #16]
 80006ae:	f009 f849 	bl	8009744 <CUSTOM_STUB_SetExcReturn>

                //
                // Update thread manager state and Thread.CurrentThread static field
                //
                tm.CurrentThread = nextThread;
 80006b2:	4620      	mov	r0, r4
 80006b4:	f002 feb0 	bl	8003418 <ThreadManager::set_CurrentThread#3556>
 80006b8:	4806      	ldr	r0, [pc, #24]	; (80006d4 <Context::ContextSwitch#6388+0x54>)
 80006ba:	4907      	ldr	r1, [pc, #28]	; (80006d8 <Context::ContextSwitch#6388+0x58>)
 80006bc:	4478      	add	r0, pc
 80006be:	4408      	add	r0, r1
 80006c0:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
            //

            public override UIntPtr StackPointer
            {
                [RT.Inline]
                get { return this.SP; }
 80006c4:	68e8      	ldr	r0, [r5, #12]
 80006c6:	bdb0      	pop	{r4, r5, r7, pc}

            #endregion

            private static UIntPtr ContextSwitch( ThreadManager tm, UIntPtr stackPointer, bool isFullFrame )
            {
                ThreadImpl currentThread = tm.CurrentThread;
 80006c8:	f7ff fece 	bl	8000468 <Thread::ThrowNullException#4411>
 80006cc:	1800048e 	.word	0x1800048e
 80006d0:	fffffe18 	.word	0xfffffe18
 80006d4:	18000458 	.word	0x18000458
 80006d8:	fffffcf8 	.word	0xfffffcf8

080006dc <AnyInterrupt.1>:
 80006dc:	4770      	bx	lr
 80006de:	46c0      	nop			; (mov r8, r8)

080006e0 <Peripherals::ProcessInterrupt#18868>:
            //ProcessorARMv7M.InitiateContextSwitch( ); 
            //while(true) ;
        }

        public override void ProcessInterrupt()
        {
 80006e0:	b5b0      	push	{r4, r5, r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	4c0a      	ldr	r4, [pc, #40]	; (8000710 <Peripherals::ProcessInterrupt#18868+0x30>)
 80006e6:	480b      	ldr	r0, [pc, #44]	; (8000714 <Peripherals::ProcessInterrupt#18868+0x34>)
 80006e8:	447c      	add	r4, pc
 80006ea:	4420      	add	r0, r4
 80006ec:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80006ee:	2000      	movs	r0, #0
 80006f0:	9001      	str	r0, [sp, #4]
 80006f2:	a801      	add	r0, sp, #4
 80006f4:	f002 fba8 	bl	8002e48 <SwapCurrentThreadUnderInterrupt::.ctor#5699>
 80006f8:	4807      	ldr	r0, [pc, #28]	; (8000718 <Peripherals::ProcessInterrupt#18868+0x38>)
 80006fa:	9d01      	ldr	r5, [sp, #4]
 80006fc:	4404      	add	r4, r0
 80006fe:	f008 f9a7 	bl	8008a50 <InterruptController::ProcessInterrupt#18983>
            using (RT.SmartHandles.SwapCurrentThreadUnderInterrupt hnd = RT.ThreadManager.InstallInterruptThread())
            {
                Drivers.InterruptController.Instance.ProcessInterrupt();
            }
 8000702:	f002 f99d 	bl	8002a40 <BugCheck::AssertInterruptsOff#5289>
 8000706:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
 800070a:	b002      	add	sp, #8
 800070c:	bdb0      	pop	{r4, r5, r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	1800042c 	.word	0x1800042c
 8000714:	fffffe18 	.word	0xfffffe18
 8000718:	fffffcf8 	.word	0xfffffcf8

0800071c <Peripherals::ProcessFastInterrupt#18869>:
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	2011      	movs	r0, #17
 8000722:	f7ff fdc3 	bl	80002ac <BugCheck::Raise#5282>
 8000726:	46c0      	nop			; (mov r8, r8)

08000728 <ContextSwitchTimer_Handler_Zelig>:
        //--//
        
        [RT.HardwareExceptionHandler( RT.HardwareException.Interrupt )]
        [RT.ExportedMethod]
        private static void ContextSwitchTimer_Handler_Zelig( )
        {
 8000728:	b5b0      	push	{r4, r5, r7, lr}
 800072a:	2001      	movs	r0, #1
 800072c:	f008 ffc0 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8000730:	4604      	mov	r4, r0
 8000732:	4809      	ldr	r0, [pc, #36]	; (8000758 <ContextSwitchTimer_Handler_Zelig+0x30>)
 8000734:	4909      	ldr	r1, [pc, #36]	; (800075c <ContextSwitchTimer_Handler_Zelig+0x34>)
 8000736:	4478      	add	r0, pc
 8000738:	180d      	adds	r5, r1, r0
 800073a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800073c:	4628      	mov	r0, r5
 800073e:	f000 f80f 	bl	8000760 <ThreadManager::InsertInPriorityOrder#3551>
 8000742:	4628      	mov	r0, r5
 8000744:	f000 f830 	bl	80007a8 <ThreadManager::SelectNextThreadToRun#3536>
 8000748:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800074c:	f000 f846 	bl	80007dc <ProcessorARMv7M::RaiseSystemHandler#3605>
            using(RT.SmartHandles.InterruptState.Disable())
            {
                RT.ThreadManager.Instance.TimeQuantumExpired( );
            }
 8000750:	4620      	mov	r0, r4
 8000752:	f008 ffad 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8000756:	bdb0      	pop	{r4, r5, r7, pc}
 8000758:	180003de 	.word	0x180003de
 800075c:	fffffe18 	.word	0xfffffe18

08000760 <ThreadManager::InsertInPriorityOrder#3551>:
        }

        //--//

        protected void InsertInPriorityOrder( ThreadImpl thread )
        {
 8000760:	b510      	push	{r4, lr}
 8000762:	460c      	mov	r4, r1
            //
            // Idle thread must never enter the set of the ready threads
            //
            if(thread == m_idleThread)
 8000764:	6981      	ldr	r1, [r0, #24]
 8000766:	428c      	cmp	r4, r1
 8000768:	bf08      	it	eq
 800076a:	bd10      	popeq	{r4, pc}
            }

            //
            // Insert in order.
            //
            var node = m_readyThreads.StartOfForwardWalk;
 800076c:	68c0      	ldr	r0, [r0, #12]
 800076e:	b1c8      	cbz	r0, 80007a4 <ThreadManager::InsertInPriorityOrder#3551+0x44>
 8000770:	6880      	ldr	r0, [r0, #8]
 8000772:	6880      	ldr	r0, [r0, #8]
 8000774:	f002 fe14 	bl	80033a0 <KernelList`1::get_StartOfForwardWalk#19741>
 8000778:	4601      	mov	r1, r0
 800077a:	b19c      	cbz	r4, 80007a4 <ThreadManager::InsertInPriorityOrder#3551+0x44>
 800077c:	6920      	ldr	r0, [r4, #16]
 800077e:	e000      	b.n	8000782 <ThreadManager::InsertInPriorityOrder#3551+0x22>
 8000780:	6889      	ldr	r1, [r1, #8]
 8000782:	b179      	cbz	r1, 80007a4 <ThreadManager::InsertInPriorityOrder#3551+0x44>
 8000784:	688a      	ldr	r2, [r1, #8]
 8000786:	b122      	cbz	r2, 8000792 <ThreadManager::InsertInPriorityOrder#3551+0x32>
 8000788:	690a      	ldr	r2, [r1, #16]
 800078a:	b15a      	cbz	r2, 80007a4 <ThreadManager::InsertInPriorityOrder#3551+0x44>
 800078c:	6912      	ldr	r2, [r2, #16]
            var pri  = thread.Priority;

            while(node.IsValidForForwardMove)
            {
                if(node.Target.Priority < pri)
 800078e:	4282      	cmp	r2, r0
 8000790:	daf6      	bge.n	8000780 <ThreadManager::InsertInPriorityOrder#3551+0x20>
 8000792:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000794:	b130      	cbz	r0, 80007a4 <ThreadManager::InsertInPriorityOrder#3551+0x44>
                }

                node = node.Next;
            }

            thread.SchedulingLink.InsertBefore( node );
 8000796:	f002 fe23 	bl	80033e0 <KernelNode`1::InsertBefore#19765>
 800079a:	6a60      	ldr	r0, [r4, #36]	; 0x24

            thread.State &= ~System.Threading.ThreadState.WaitSleepJoin;
 800079c:	f020 0020 	bic.w	r0, r0, #32
 80007a0:	6260      	str	r0, [r4, #36]	; 0x24
 80007a2:	bd10      	pop	{r4, pc}
            }

            //
            // Insert in order.
            //
            var node = m_readyThreads.StartOfForwardWalk;
 80007a4:	f7ff fe60 	bl	8000468 <Thread::ThrowNullException#4411>

080007a8 <ThreadManager::SelectNextThreadToRun#3536>:
        {
            SelectNextThreadToRun();
        }

        public void SelectNextThreadToRun()
        {
 80007a8:	b5b0      	push	{r4, r5, r7, lr}
 80007aa:	4604      	mov	r4, r0
 80007ac:	2001      	movs	r0, #1
 80007ae:	f008 ff7f 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 80007b2:	4605      	mov	r5, r0
            using(SmartHandles.InterruptState.Disable())
            {
                ThreadImpl thread = m_readyThreads.FirstTarget();
 80007b4:	68e0      	ldr	r0, [r4, #12]
 80007b6:	b178      	cbz	r0, 80007d8 <ThreadManager::SelectNextThreadToRun#3536+0x30>
 80007b8:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
 80007bc:	6890      	ldr	r0, [r2, #8]
 80007be:	f002 fdbf 	bl	8003340 <KernelList`1::FirstTarget#19737>

                m_nextThread = thread != null ? thread : m_idleThread;
 80007c2:	2800      	cmp	r0, #0
 80007c4:	bf08      	it	eq
 80007c6:	69a0      	ldreq	r0, [r4, #24]
 80007c8:	62a0      	str	r0, [r4, #40]	; 0x28
                
                SetNextQuantumTimerIfNeeded();
 80007ca:	4620      	mov	r0, r4
 80007cc:	f002 fd78 	bl	80032c0 <ThreadManager::SetNextQuantumTimerIfNeeded#3533>
            }
 80007d0:	4628      	mov	r0, r5
 80007d2:	f008 ff6d 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 80007d6:	bdb0      	pop	{r4, r5, r7, pc}

        public void SelectNextThreadToRun()
        {
            using(SmartHandles.InterruptState.Disable())
            {
                ThreadImpl thread = m_readyThreads.FirstTarget();
 80007d8:	f7ff fe46 	bl	8000468 <Thread::ThrowNullException#4411>

080007dc <ProcessorARMv7M::RaiseSystemHandler#3605>:
 80007dc:	b580      	push	{r7, lr}
 80007de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80007e2:	2200      	movs	r2, #0
 80007e4:	f2c6 11bf 	movt	r1, #25023	; 0x61bf
 80007e8:	4208      	tst	r0, r1
 80007ea:	bf08      	it	eq
 80007ec:	2201      	moveq	r2, #1
 80007ee:	b112      	cbz	r2, 80007f6 <ProcessorARMv7M::RaiseSystemHandler#3605+0x1a>
 80007f0:	f008 ff8a 	bl	8009708 <CUSTOM_STUB_SCB_ICSR_RaiseSystemException>
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	2009      	movs	r0, #9
 80007f8:	f7ff fd58 	bl	80002ac <BugCheck::Raise#5282>

080007fc <Array::Copy#1752>:
        // Copies length elements from sourceArray, starting at index 0, to
        // destinationArray, starting at index 0.
        //
////    [ReliabilityContract( Consistency.MayCorruptInstance, Cer.MayFail )]
        public static void Copy( Array sourceArray, Array destinationArray, int length )
        {
 80007fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fe:	b081      	sub	sp, #4
 8000800:	4606      	mov	r6, r0
 8000802:	4615      	mov	r5, r2
 8000804:	460c      	mov	r4, r1
 8000806:	b186      	cbz	r6, 800082a <Array::Copy#1752+0x2e>
 8000808:	b194      	cbz	r4, 8000830 <Array::Copy#1752+0x34>
#else
                throw new ArgumentNullException();
#endif
            }

            Copy( sourceArray, sourceArray.GetLowerBound( 0 ), destinationArray, destinationArray.GetLowerBound( 0 ), length, false );
 800080a:	4630      	mov	r0, r6
 800080c:	f000 f870 	bl	80008f0 <Array::GetLowerBound#4075>
 8000810:	4607      	mov	r7, r0
 8000812:	4620      	mov	r0, r4
 8000814:	f000 f86c 	bl	80008f0 <Array::GetLowerBound#4075>
 8000818:	4603      	mov	r3, r0
 800081a:	4630      	mov	r0, r6
 800081c:	4639      	mov	r1, r7
 800081e:	4622      	mov	r2, r4
 8000820:	9500      	str	r5, [sp, #0]
 8000822:	f000 f895 	bl	8000950 <Array::Copy#4077>
 8000826:	b001      	add	sp, #4
 8000828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082a:	480c      	ldr	r0, [pc, #48]	; (800085c <Array::Copy#1752+0x60>)
 800082c:	4478      	add	r0, pc
 800082e:	e001      	b.n	8000834 <Array::Copy#1752+0x38>
 8000830:	4807      	ldr	r0, [pc, #28]	; (8000850 <Array::Copy#1752+0x54>)
 8000832:	4478      	add	r0, pc
            if(sourceArray == null)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentNullException( "sourceArray" );
#else
                throw new ArgumentNullException();
 8000834:	4907      	ldr	r1, [pc, #28]	; (8000854 <Array::Copy#1752+0x58>)
 8000836:	180c      	adds	r4, r1, r0
 8000838:	4907      	ldr	r1, [pc, #28]	; (8000858 <Array::Copy#1752+0x5c>)
 800083a:	4401      	add	r1, r0
 800083c:	4620      	mov	r0, r4
 800083e:	f000 f829 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8000842:	4601      	mov	r1, r0
 8000844:	2000      	movs	r0, #0
 8000846:	6088      	str	r0, [r1, #8]
 8000848:	4620      	mov	r0, r4
 800084a:	f000 f839 	bl	80008c0 <TypeSystemManager::Throw#5596>
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	180002e2 	.word	0x180002e2
 8000854:	fffffe0c 	.word	0xfffffe0c
 8000858:	e8019418 	.word	0xe8019418
 800085c:	180002e8 	.word	0x180002e8

08000860 <Exception::ToString#7754>:
////            m_source = value;
////        }
////    }

    public override String ToString()
    {
 8000860:	b580      	push	{r7, lr}
 8000862:	b120      	cbz	r0, 800086e <Exception::ToString#7754+0xe>
 8000864:	6841      	ldr	r1, [r0, #4]
        return Message;
 8000866:	69c9      	ldr	r1, [r1, #28]
 8000868:	6989      	ldr	r1, [r1, #24]
 800086a:	4788      	blx	r1
 800086c:	bd80      	pop	{r7, pc}
 800086e:	f7ff fdfb 	bl	8000468 <Thread::ThrowNullException#4411>

08000872 <Object::Equals#4194>:
            return obj;
        }

        public override bool Equals( Object obj )
        {
            return Object.ReferenceEquals( this, obj );
 8000872:	2200      	movs	r2, #0
 8000874:	4288      	cmp	r0, r1
 8000876:	bf08      	it	eq
 8000878:	2201      	moveq	r2, #1
 800087a:	4610      	mov	r0, r2
 800087c:	4770      	bx	lr

0800087e <Object::GetHashCode#4195>:
        }

        public override int GetHashCode()
        {
            return SyncBlockTable.GetHashCode( this );
 800087e:	b580      	push	{r7, lr}
 8000880:	f000 ff1c 	bl	80016bc <SyncBlockTable::GetHashCode#5131>
 8000884:	bd80      	pop	{r7, pc}

08000886 <ArgumentException::get_Message#6779>:

        public override String Message
        {
            get
            {
                return m_message + " " + m_paramName;
 8000886:	b580      	push	{r7, lr}
 8000888:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
 800088c:	4610      	mov	r0, r2
 800088e:	f001 fc1d 	bl	80020cc <String::Concat#2940>
 8000892:	bd80      	pop	{r7, pc}

08000894 <DefaultTypeSystemManager::AllocateObject#5602>:
    [TS.DisableAutomaticReferenceCounting]
    public abstract class DefaultTypeSystemManager : TypeSystemManager
    {
        [NoInline]
        public override Object AllocateObject( TS.VTable vTable )
        {
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	460c      	mov	r4, r1
            uint   size = ComputeObjectSize( vTable       );
 8000898:	4620      	mov	r0, r4
 800089a:	f004 fb07 	bl	8004eac <DefaultTypeSystemManager::ComputeObjectSize#5610>
 800089e:	4606      	mov	r6, r0
            UIntPtr ptr = AllocateInner    ( vTable, size );
 80008a0:	f004 fb0e 	bl	8004ec0 <DefaultTypeSystemManager::AllocateInner#5612>
 80008a4:	4631      	mov	r1, r6
 80008a6:	4605      	mov	r5, r0
 80008a8:	f00a fe24 	bl	800b4f4 <__aeabi_memclr>
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	bf1f      	itttt	ne
 80008b0:	2008      	movne	r0, #8
 80008b2:	e9c5 0400 	strdne	r0, r4, [r5]
 80008b6:	4628      	movne	r0, r5
 80008b8:	bd70      	popne	{r4, r5, r6, pc}
 80008ba:	f7ff fdd5 	bl	8000468 <Thread::ThrowNullException#4411>
 80008be:	46c0      	nop			; (mov r8, r8)

080008c0 <TypeSystemManager::Throw#5596>:

        [NoReturn]
        [NoInline]
        [TS.WellKnownMethod("TypeSystemManager_Throw")]
        public virtual void Throw(Exception obj)
        {
 80008c0:	b5b0      	push	{r4, r5, r7, lr}
 80008c2:	4d08      	ldr	r5, [pc, #32]	; (80008e4 <TypeSystemManager::Throw#5596+0x24>)

            //
            // Our LLVM port does not yet support throwing exceptions
            //

            BugCheck.Log("!!!                       WARNING                             !!!");
 80008c4:	4808      	ldr	r0, [pc, #32]	; (80008e8 <TypeSystemManager::Throw#5596+0x28>)
 80008c6:	447d      	add	r5, pc
 80008c8:	1944      	adds	r4, r0, r5
 80008ca:	4620      	mov	r0, r4
 80008cc:	f003 ffa6 	bl	800481c <BugCheck::Log#5283>
            BugCheck.Log("!!! Throwing Exceptions is not yet supported for LLVM CodeGen !!!");
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <TypeSystemManager::Throw#5596+0x2c>)
 80008d2:	4428      	add	r0, r5
 80008d4:	f003 ffa2 	bl	800481c <BugCheck::Log#5283>
            BugCheck.Log("!!!                       WARNING                             !!!");
 80008d8:	4620      	mov	r0, r4
 80008da:	f003 ff9f 	bl	800481c <BugCheck::Log#5283>

            BugCheck.Raise(BugCheck.StopCode.InvalidOperation);
 80008de:	2015      	movs	r0, #21
 80008e0:	f7ff fce4 	bl	80002ac <BugCheck::Raise#5282>
 80008e4:	1800024e 	.word	0x1800024e
 80008e8:	e8011748 	.word	0xe8011748
 80008ec:	e80117e8 	.word	0xe80117e8

080008f0 <Array::GetLowerBound#4075>:

            return (int)ts2.Dimensions[dimension].m_upperBound;
        }

        public int GetLowerBound( int dimension )
        {
 80008f0:	b510      	push	{r4, lr}
 80008f2:	2800      	cmp	r0, #0
 80008f4:	bf1c      	itt	ne
 80008f6:	6840      	ldrne	r0, [r0, #4]
            TS.VTable vTable = TS.VTable.Get( this );

            TS.TypeRepresentation ts = vTable.TypeInfo;
 80008f8:	2800      	cmpne	r0, #0
 80008fa:	d01e      	beq.n	800093a <Array::GetLowerBound#4075+0x4a>
 80008fc:	4910      	ldr	r1, [pc, #64]	; (8000940 <Array::GetLowerBound#4075+0x50>)
 80008fe:	6904      	ldr	r4, [r0, #16]

            if(ts is TS.SzArrayReferenceTypeRepresentation)
 8000900:	4a10      	ldr	r2, [pc, #64]	; (8000944 <Array::GetLowerBound#4075+0x54>)
 8000902:	4479      	add	r1, pc
 8000904:	4620      	mov	r0, r4
 8000906:	4411      	add	r1, r2
 8000908:	f000 f9a8 	bl	8000c5c <TypeSystemManager::CastToSealedTypeNoThrow#5593>
 800090c:	2800      	cmp	r0, #0
 800090e:	bf1c      	itt	ne
 8000910:	2000      	movne	r0, #0
 8000912:	bd10      	popne	{r4, pc}
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <Array::GetLowerBound#4075+0x58>)
            {
                return 0;
            }

            TS.MultiArrayReferenceTypeRepresentation ts2 = (TS.MultiArrayReferenceTypeRepresentation)ts;
 8000916:	490d      	ldr	r1, [pc, #52]	; (800094c <Array::GetLowerBound#4075+0x5c>)
 8000918:	4478      	add	r0, pc
 800091a:	4401      	add	r1, r0
 800091c:	4620      	mov	r0, r4
 800091e:	f000 faa9 	bl	8000e74 <TypeSystemManager::CastToSealedType#5592>

            return (int)ts2.Dimensions[dimension].m_lowerBound;
 8000922:	2800      	cmp	r0, #0
 8000924:	bf1c      	itt	ne
 8000926:	6b40      	ldrne	r0, [r0, #52]	; 0x34
 8000928:	2800      	cmpne	r0, #0
 800092a:	d006      	beq.n	800093a <Array::GetLowerBound#4075+0x4a>
 800092c:	6881      	ldr	r1, [r0, #8]
 800092e:	2900      	cmp	r1, #0
 8000930:	bf1c      	itt	ne
 8000932:	68c0      	ldrne	r0, [r0, #12]
 8000934:	bd10      	popne	{r4, pc}
 8000936:	f000 fabb 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 800093a:	f7ff fd95 	bl	8000468 <Thread::ThrowNullException#4411>
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	18000212 	.word	0x18000212
 8000944:	e80194d8 	.word	0xe80194d8
 8000948:	180001fc 	.word	0x180001fc
 800094c:	e8019508 	.word	0xe8019508

08000950 <Array::Copy#4077>:
                                          int       sourceIndex      ,
                                          ArrayImpl destinationArray ,
                                          int       destinationIndex ,
                                          int       length           ,
                                          bool      reliable         )
        {
 8000950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000954:	461c      	mov	r4, r3
            if(sourceIndex      < 0 ||
 8000956:	2900      	cmp	r1, #0
 8000958:	4615      	mov	r5, r2
 800095a:	bfa8      	it	ge
 800095c:	2c00      	cmpge	r4, #0
 800095e:	db42      	blt.n	80009e6 <Array::Copy#4077+0x96>
 8000960:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8000964:	f1b8 3fff 	cmp.w	r8, #4294967295
 8000968:	dd3d      	ble.n	80009e6 <Array::Copy#4077+0x96>
 800096a:	b338      	cbz	r0, 80009bc <Array::Copy#4077+0x6c>
        {
            [Inline]
            [TS.WellKnownMethod( "ArrayImpl_get_Length" )]
            get
            {
                return (int)m_numElements;
 800096c:	6883      	ldr	r3, [r0, #8]
               length           < 0  )
            {
                throw new IndexOutOfRangeException();
            }

            int sourceIndexEnd = sourceIndex + length;
 800096e:	eb01 0208 	add.w	r2, r1, r8
            if(sourceIndexEnd > sourceArray.Length)
 8000972:	429a      	cmp	r2, r3
 8000974:	dc24      	bgt.n	80009c0 <Array::Copy#4077+0x70>
 8000976:	b30d      	cbz	r5, 80009bc <Array::Copy#4077+0x6c>
        {
            [Inline]
            [TS.WellKnownMethod( "ArrayImpl_get_Length" )]
            get
            {
                return (int)m_numElements;
 8000978:	68ab      	ldr	r3, [r5, #8]
            if(sourceIndexEnd > sourceArray.Length)
            {
                throw new IndexOutOfRangeException();
            }

            int destinationIndexEnd = destinationIndex + length;
 800097a:	eb04 0208 	add.w	r2, r4, r8
            if(destinationIndexEnd > destinationArray.Length)
 800097e:	429a      	cmp	r2, r3
 8000980:	dc21      	bgt.n	80009c6 <Array::Copy#4077+0x76>
 8000982:	2800      	cmp	r0, #0
 8000984:	bf18      	it	ne
 8000986:	2d00      	cmpne	r5, #0
 8000988:	d018      	beq.n	80009bc <Array::Copy#4077+0x6c>
 800098a:	6847      	ldr	r7, [r0, #4]
            }

            TS.VTable vTableSource      = TS.VTable.Get( sourceArray      );
            TS.VTable vTableDestination = TS.VTable.Get( destinationArray );

            if(vTableSource != vTableDestination)
 800098c:	686a      	ldr	r2, [r5, #4]
 800098e:	4297      	cmp	r7, r2
 8000990:	d11c      	bne.n	80009cc <Array::Copy#4077+0x7c>
            {
                throw new NotSupportedException();
            }

            void* voidSourcePtr      = sourceArray     .GetPointerToElement( (uint)sourceIndex      );
 8000992:	f000 f849 	bl	8000a28 <Array::GetPointerToElement#4081>
 8000996:	4606      	mov	r6, r0
            void* voidDestinationPtr = destinationArray.GetPointerToElement( (uint)destinationIndex );

            if(voidSourcePtr != voidDestinationPtr)
 8000998:	4628      	mov	r0, r5
 800099a:	4621      	mov	r1, r4
 800099c:	f000 f844 	bl	8000a28 <Array::GetPointerToElement#4081>
 80009a0:	4601      	mov	r1, r0
 80009a2:	428e      	cmp	r6, r1
 80009a4:	bf08      	it	eq
 80009a6:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009aa:	b13f      	cbz	r7, 80009bc <Array::Copy#4077+0x6c>
            {
                BufferImpl.InternalMemoryMove( (byte*)voidSourcePtr, (byte*)voidDestinationPtr, length * (int)vTableSource.ElementSize );
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	fb08 f200 	mul.w	r2, r8, r0
 80009b2:	4630      	mov	r0, r6
 80009b4:	f000 f845 	bl	8000a42 <Buffer::InternalMemoryMove#4119>
 80009b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            {
                throw new IndexOutOfRangeException();
            }

            int sourceIndexEnd = sourceIndex + length;
            if(sourceIndexEnd > sourceArray.Length)
 80009bc:	f7ff fd54 	bl	8000468 <Thread::ThrowNullException#4411>
 80009c0:	4816      	ldr	r0, [pc, #88]	; (8000a1c <Array::Copy#4077+0xcc>)
 80009c2:	4478      	add	r0, pc
 80009c4:	e011      	b.n	80009ea <Array::Copy#4077+0x9a>
 80009c6:	4813      	ldr	r0, [pc, #76]	; (8000a14 <Array::Copy#4077+0xc4>)
 80009c8:	4478      	add	r0, pc
 80009ca:	e00e      	b.n	80009ea <Array::Copy#4077+0x9a>
 80009cc:	4d0d      	ldr	r5, [pc, #52]	; (8000a04 <Array::Copy#4077+0xb4>)
            TS.VTable vTableSource      = TS.VTable.Get( sourceArray      );
            TS.VTable vTableDestination = TS.VTable.Get( destinationArray );

            if(vTableSource != vTableDestination)
            {
                throw new NotSupportedException();
 80009ce:	480e      	ldr	r0, [pc, #56]	; (8000a08 <Array::Copy#4077+0xb8>)
 80009d0:	447d      	add	r5, pc
 80009d2:	1944      	adds	r4, r0, r5
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <Array::Copy#4077+0xbc>)
 80009d6:	1941      	adds	r1, r0, r5
 80009d8:	4620      	mov	r0, r4
 80009da:	f7ff ff5b 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80009de:	4601      	mov	r1, r0
 80009e0:	480b      	ldr	r0, [pc, #44]	; (8000a10 <Array::Copy#4077+0xc0>)
 80009e2:	4428      	add	r0, r5
 80009e4:	e00a      	b.n	80009fc <Array::Copy#4077+0xac>
 80009e6:	480e      	ldr	r0, [pc, #56]	; (8000a20 <Array::Copy#4077+0xd0>)
 80009e8:	4478      	add	r0, pc
        {
            if(sourceIndex      < 0 ||
               destinationIndex < 0 ||
               length           < 0  )
            {
                throw new IndexOutOfRangeException();
 80009ea:	4907      	ldr	r1, [pc, #28]	; (8000a08 <Array::Copy#4077+0xb8>)
 80009ec:	180c      	adds	r4, r1, r0
 80009ee:	490a      	ldr	r1, [pc, #40]	; (8000a18 <Array::Copy#4077+0xc8>)
 80009f0:	4401      	add	r1, r0
 80009f2:	4620      	mov	r0, r4
 80009f4:	f7ff ff4e 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80009f8:	4601      	mov	r1, r0
 80009fa:	2000      	movs	r0, #0
 80009fc:	6088      	str	r0, [r1, #8]
 80009fe:	4620      	mov	r0, r4
 8000a00:	f7ff ff5e 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8000a04:	18000144 	.word	0x18000144
 8000a08:	fffffe0c 	.word	0xfffffe0c
 8000a0c:	e8019478 	.word	0xe8019478
 8000a10:	e8010f78 	.word	0xe8010f78
 8000a14:	1800014c 	.word	0x1800014c
 8000a18:	e8019448 	.word	0xe8019448
 8000a1c:	18000152 	.word	0x18000152
 8000a20:	1800012c 	.word	0x1800012c

08000a24 <Exception::get_Message#7751>:
////
////                return String.Format( CultureInfo.CurrentCulture, Environment.GetResourceString( "Exception_WasThrown" ), m_className );
////            }
////            else
////            {
                    return m_message;
 8000a24:	6880      	ldr	r0, [r0, #8]
 8000a26:	4770      	bx	lr

08000a28 <Array::GetPointerToElement#4081>:
        {
            fixed(uint* ptr = &m_numElements)
            {
                return &ptr[1];
            }
        }
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf1c      	itt	ne
 8000a2e:	6842      	ldrne	r2, [r0, #4]
        public uint ElementSize
        {
            [Inline]
            get
            {
                return TS.VTable.Get( this ).ElementSize;
 8000a30:	2a00      	cmpne	r2, #0
 8000a32:	d004      	beq.n	8000a3e <Array::GetPointerToElement#4081+0x16>
 8000a34:	68d2      	ldr	r2, [r2, #12]
        [Inline]
        public unsafe uint* GetDataPointer()
        {
            fixed(uint* ptr = &m_numElements)
            {
                return &ptr[1];
 8000a36:	300c      	adds	r0, #12
        //
        public unsafe void* GetPointerToElement( uint index )
        {
            byte* ptr = (byte*)GetDataPointer();

            return &ptr[index * this.ElementSize];
 8000a38:	fb01 0002 	mla	r0, r1, r2, r0
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	f7ff fd13 	bl	8000468 <Thread::ThrowNullException#4411>

08000a42 <Buffer::InternalMemoryMove#4119>:
        //--//--//

        internal unsafe static void InternalMemoryMove( byte* src   ,
                                                        byte* dst   ,
                                                        int   count )
        {
 8000a42:	b580      	push	{r7, lr}
 8000a44:	4603      	mov	r3, r0
            BugCheck.Assert( count >= 0, BugCheck.StopCode.NegativeIndex );
 8000a46:	2000      	movs	r0, #0
 8000a48:	f1b2 3fff 	cmp.w	r2, #4294967295
 8000a4c:	bfc8      	it	gt
 8000a4e:	2001      	movgt	r0, #1
 8000a50:	b170      	cbz	r0, 8000a70 <Buffer::InternalMemoryMove#4119+0x2e>

            if(src <= dst && dst < &src[count])
 8000a52:	428b      	cmp	r3, r1
 8000a54:	bf9c      	itt	ls
 8000a56:	1898      	addls	r0, r3, r2
 8000a58:	4281      	cmpls	r1, r0
 8000a5a:	d204      	bcs.n	8000a66 <Buffer::InternalMemoryMove#4119+0x24>
 8000a5c:	4608      	mov	r0, r1
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f00a fd4d 	bl	800b4fe <__aeabi_memmove>
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	4608      	mov	r0, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f00a fd46 	bl	800b4fa <__aeabi_memcpy>
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	2008      	movs	r0, #8
 8000a72:	f7ff fc1b 	bl	80002ac <BugCheck::Raise#5282>
 8000a76:	46c0      	nop			; (mov r8, r8)

08000a78 <Array::GetValue#1756>:
////
////        return TypedReference.InternalToObject( &elemref );
////    }

        public unsafe Object GetValue( int index )
        {
 8000a78:	b510      	push	{r4, lr}
 8000a7a:	4807      	ldr	r0, [pc, #28]	; (8000a98 <Array::GetValue#1756+0x20>)
            throw new NotImplementedException();
 8000a7c:	4907      	ldr	r1, [pc, #28]	; (8000a9c <Array::GetValue#1756+0x24>)
 8000a7e:	4478      	add	r0, pc
 8000a80:	180c      	adds	r4, r1, r0
 8000a82:	4907      	ldr	r1, [pc, #28]	; (8000aa0 <Array::GetValue#1756+0x28>)
 8000a84:	4401      	add	r1, r0
 8000a86:	4620      	mov	r0, r4
 8000a88:	f7ff ff04 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8000a8c:	4601      	mov	r1, r0
 8000a8e:	2000      	movs	r0, #0
 8000a90:	6088      	str	r0, [r1, #8]
 8000a92:	4620      	mov	r0, r4
 8000a94:	f7ff ff14 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8000a98:	18000096 	.word	0x18000096
 8000a9c:	fffffe0c 	.word	0xfffffe0c
 8000aa0:	e80194a8 	.word	0xe80194a8

08000aa4 <Array::get_Rank#4090>:
        }

        public int Rank
        {
            get
            {
 8000aa4:	b510      	push	{r4, lr}
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	bf1c      	itt	ne
 8000aaa:	6840      	ldrne	r0, [r0, #4]
                TS.VTable vTable = TS.VTable.Get( this );

                TS.TypeRepresentation ts = vTable.TypeInfo;
 8000aac:	2800      	cmpne	r0, #0
 8000aae:	d018      	beq.n	8000ae2 <Array::get_Rank#4090+0x3e>
 8000ab0:	490d      	ldr	r1, [pc, #52]	; (8000ae8 <Array::get_Rank#4090+0x44>)
 8000ab2:	6904      	ldr	r4, [r0, #16]

                if(ts is TS.SzArrayReferenceTypeRepresentation)
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <Array::get_Rank#4090+0x48>)
 8000ab6:	4479      	add	r1, pc
 8000ab8:	4620      	mov	r0, r4
 8000aba:	4411      	add	r1, r2
 8000abc:	f000 f8ce 	bl	8000c5c <TypeSystemManager::CastToSealedTypeNoThrow#5593>
 8000ac0:	2800      	cmp	r0, #0
 8000ac2:	bf1c      	itt	ne
 8000ac4:	2001      	movne	r0, #1
 8000ac6:	bd10      	popne	{r4, pc}
 8000ac8:	4809      	ldr	r0, [pc, #36]	; (8000af0 <Array::get_Rank#4090+0x4c>)
                {
                    return 1;
                }

                TS.MultiArrayReferenceTypeRepresentation ts2 = (TS.MultiArrayReferenceTypeRepresentation)ts;
 8000aca:	490a      	ldr	r1, [pc, #40]	; (8000af4 <Array::get_Rank#4090+0x50>)
 8000acc:	4478      	add	r0, pc
 8000ace:	4401      	add	r1, r0
 8000ad0:	4620      	mov	r0, r4
 8000ad2:	f000 f9cf 	bl	8000e74 <TypeSystemManager::CastToSealedType#5592>

                return (int)ts2.Dimensions.Length;
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf1f      	itttt	ne
 8000ada:	6b40      	ldrne	r0, [r0, #52]	; 0x34
 8000adc:	2800      	cmpne	r0, #0
        {
            [Inline]
            [TS.WellKnownMethod( "ArrayImpl_get_Length" )]
            get
            {
                return (int)m_numElements;
 8000ade:	6880      	ldrne	r0, [r0, #8]
 8000ae0:	bd10      	popne	{r4, pc}
 8000ae2:	f7ff fcc1 	bl	8000468 <Thread::ThrowNullException#4411>
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	1800005e 	.word	0x1800005e
 8000aec:	e80194d8 	.word	0xe80194d8
 8000af0:	18000048 	.word	0x18000048
 8000af4:	e8019508 	.word	0xe8019508

08000af8 <SzArrayReferenceTypeRepresentation::ToString#16061>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 8000af8:	b570      	push	{r4, r5, r6, lr}
 8000afa:	4e0f      	ldr	r6, [pc, #60]	; (8000b38 <SzArrayReferenceTypeRepresentation::ToString#16061+0x40>)
 8000afc:	4604      	mov	r4, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "SzArrayReferenceTypeRepresentation(" );
 8000afe:	480f      	ldr	r0, [pc, #60]	; (8000b3c <SzArrayReferenceTypeRepresentation::ToString#16061+0x44>)
 8000b00:	490f      	ldr	r1, [pc, #60]	; (8000b40 <SzArrayReferenceTypeRepresentation::ToString#16061+0x48>)
 8000b02:	447e      	add	r6, pc
 8000b04:	4430      	add	r0, r6
 8000b06:	4431      	add	r1, r6
 8000b08:	f7ff fec4 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8000b0c:	4605      	mov	r5, r0
 8000b0e:	480d      	ldr	r0, [pc, #52]	; (8000b44 <SzArrayReferenceTypeRepresentation::ToString#16061+0x4c>)
 8000b10:	2210      	movs	r2, #16
 8000b12:	1981      	adds	r1, r0, r6
 8000b14:	4628      	mov	r0, r5
 8000b16:	f006 fa9c 	bl	8007052 <StringBuilder::.ctor#9221>

            PrettyToString( sb, true, false );
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	4629      	mov	r1, r5
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2300      	movs	r3, #0
 8000b22:	f000 f86d 	bl	8000c00 <SzArrayReferenceTypeRepresentation::PrettyToString#16062>

            sb.Append( ")" );
 8000b26:	4808      	ldr	r0, [pc, #32]	; (8000b48 <SzArrayReferenceTypeRepresentation::ToString#16061+0x50>)
 8000b28:	1981      	adds	r1, r0, r6
 8000b2a:	4628      	mov	r0, r5
 8000b2c:	f005 fc2e 	bl	800638c <StringBuilder::Append#9238>

            return sb.ToString();
 8000b30:	4628      	mov	r0, r5
 8000b32:	f001 f83f 	bl	8001bb4 <StringBuilder::ToString#9230>
 8000b36:	bd70      	pop	{r4, r5, r6, pc}
 8000b38:	18000012 	.word	0x18000012
 8000b3c:	fffffe0c 	.word	0xfffffe0c
 8000b40:	e8019718 	.word	0xe8019718
 8000b44:	e80120d8 	.word	0xe80120d8
 8000b48:	e8011d38 	.word	0xe8011d38

08000b4c <ArrayReferenceTypeRepresentation::Equals#15906>:

            return false;
        }

        public override bool Equals( object obj )
        {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b128      	cbz	r0, 8000b5c <ArrayReferenceTypeRepresentation::Equals#15906+0x10>
 8000b50:	6842      	ldr	r2, [r0, #4]
            return this.EqualsThroughEquivalence( obj, null );
 8000b52:	69d2      	ldr	r2, [r2, #28]
 8000b54:	6993      	ldr	r3, [r2, #24]
 8000b56:	2200      	movs	r2, #0
 8000b58:	4798      	blx	r3
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	f7ff fc84 	bl	8000468 <Thread::ThrowNullException#4411>

08000b60 <ArrayReferenceTypeRepresentation::GetHashCode#15907>:
        }

        public override int GetHashCode()
        {
            return m_elementType.GetHashCode();
 8000b60:	b580      	push	{r7, lr}
 8000b62:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000b64:	2800      	cmp	r0, #0
 8000b66:	d005      	beq.n	8000b74 <ArrayReferenceTypeRepresentation::GetHashCode#15907+0x14>
 8000b68:	d004      	beq.n	8000b74 <ArrayReferenceTypeRepresentation::GetHashCode#15907+0x14>
 8000b6a:	6841      	ldr	r1, [r0, #4]
 8000b6c:	69c9      	ldr	r1, [r1, #28]
 8000b6e:	6949      	ldr	r1, [r1, #20]
 8000b70:	4788      	blx	r1
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	f7ff fc78 	bl	8000468 <Thread::ThrowNullException#4411>

08000b78 <ArrayReferenceTypeRepresentation::EqualsThroughEquivalence#15905>:
        // MetaDataEquality Methods
        //

        public override bool EqualsThroughEquivalence( object         obj ,
                                                       EquivalenceSet set )
        {
 8000b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7a:	b081      	sub	sp, #4
 8000b7c:	4605      	mov	r5, r0
 8000b7e:	480f      	ldr	r0, [pc, #60]	; (8000bbc <ArrayReferenceTypeRepresentation::EqualsThroughEquivalence#15905+0x44>)
            if(obj is ArrayReferenceTypeRepresentation)
 8000b80:	4f0f      	ldr	r7, [pc, #60]	; (8000bc0 <ArrayReferenceTypeRepresentation::EqualsThroughEquivalence#15905+0x48>)
 8000b82:	460e      	mov	r6, r1
 8000b84:	4614      	mov	r4, r2
 8000b86:	4478      	add	r0, pc
 8000b88:	1839      	adds	r1, r7, r0
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	f000 fa4b 	bl	8001026 <TypeSystemManager::CastToTypeNoThrow#5591>
 8000b90:	2800      	cmp	r0, #0
 8000b92:	bf02      	ittt	eq
 8000b94:	2000      	moveq	r0, #0
 8000b96:	b001      	addeq	sp, #4
 8000b98:	bdf0      	popeq	{r4, r5, r6, r7, pc}
 8000b9a:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <ArrayReferenceTypeRepresentation::EqualsThroughEquivalence#15905+0x4c>)
 8000b9c:	4478      	add	r0, pc
            {
                ArrayReferenceTypeRepresentation other = (ArrayReferenceTypeRepresentation)obj;
 8000b9e:	1839      	adds	r1, r7, r0
 8000ba0:	4630      	mov	r0, r6
 8000ba2:	f002 ff1d 	bl	80039e0 <TypeSystemManager::CastToType#5590>

                return EqualsThroughEquivalence( m_elementType, other.m_elementType, set );
 8000ba6:	b138      	cbz	r0, 8000bb8 <ArrayReferenceTypeRepresentation::EqualsThroughEquivalence#15905+0x40>
 8000ba8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000baa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8000bac:	4610      	mov	r0, r2
 8000bae:	4622      	mov	r2, r4
 8000bb0:	f006 ff28 	bl	8007a04 <BaseRepresentation::EqualsThroughEquivalence#15050>
 8000bb4:	b001      	add	sp, #4
 8000bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bb8:	f7ff fc56 	bl	8000468 <Thread::ThrowNullException#4411>
 8000bbc:	17ffff8e 	.word	0x17ffff8e
 8000bc0:	e8019a18 	.word	0xe8019a18
 8000bc4:	17ffff78 	.word	0x17ffff78

08000bc8 <ArrayReferenceTypeRepresentation::get_ContainedType#15911>:

        public override TypeRepresentation ContainedType
        {
            get
            {
                return m_elementType;
 8000bc8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000bca:	4770      	bx	lr

08000bcc <TypeRepresentation::get_UnderlyingType#16182>:
 8000bcc:	4770      	bx	lr

08000bce <ArrayReferenceTypeRepresentation::get_IsOpenType#15912>:

        public override bool IsOpenType
        {
            get
            {
                return m_elementType.IsOpenType;
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	d005      	beq.n	8000be2 <ArrayReferenceTypeRepresentation::get_IsOpenType#15912+0x14>
 8000bd6:	d004      	beq.n	8000be2 <ArrayReferenceTypeRepresentation::get_IsOpenType#15912+0x14>
 8000bd8:	6841      	ldr	r1, [r0, #4]
 8000bda:	69c9      	ldr	r1, [r1, #28]
 8000bdc:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8000bde:	4788      	blx	r1
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	f7ff fc41 	bl	8000468 <Thread::ThrowNullException#4411>

08000be6 <ArrayReferenceTypeRepresentation::get_IsDelayedType#15913>:

        public override bool IsDelayedType
        {
            get
            {
                return m_elementType.IsDelayedType;
 8000be6:	b580      	push	{r7, lr}
 8000be8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000bea:	2800      	cmp	r0, #0
 8000bec:	d005      	beq.n	8000bfa <ArrayReferenceTypeRepresentation::get_IsDelayedType#15913+0x14>
 8000bee:	d004      	beq.n	8000bfa <ArrayReferenceTypeRepresentation::get_IsDelayedType#15913+0x14>
 8000bf0:	6841      	ldr	r1, [r0, #4]
 8000bf2:	69c9      	ldr	r1, [r1, #28]
 8000bf4:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000bf6:	4788      	blx	r1
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	f7ff fc35 	bl	8000468 <Thread::ThrowNullException#4411>
 8000bfe:	46c0      	nop			; (mov r8, r8)

08000c00 <SzArrayReferenceTypeRepresentation::PrettyToString#16062>:
        }

        internal override void PrettyToString( System.Text.StringBuilder sb                 ,
                                               bool                      fPrefix            ,
                                               bool                      fWithAbbreviations )
        {
 8000c00:	b510      	push	{r4, lr}
            m_elementType.PrettyToString( sb, fPrefix, fWithAbbreviations );
 8000c02:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000c04:	460c      	mov	r4, r1
 8000c06:	2800      	cmp	r0, #0
 8000c08:	d00f      	beq.n	8000c2a <SzArrayReferenceTypeRepresentation::PrettyToString#16062+0x2a>
 8000c0a:	d00e      	beq.n	8000c2a <SzArrayReferenceTypeRepresentation::PrettyToString#16062+0x2a>
 8000c0c:	6841      	ldr	r1, [r0, #4]
 8000c0e:	69c9      	ldr	r1, [r1, #28]
 8000c10:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
 8000c14:	4621      	mov	r1, r4
 8000c16:	47e0      	blx	ip
 8000c18:	b13c      	cbz	r4, 8000c2a <SzArrayReferenceTypeRepresentation::PrettyToString#16062+0x2a>
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <SzArrayReferenceTypeRepresentation::PrettyToString#16062+0x30>)

            sb.Append( "[]" );
 8000c1c:	4905      	ldr	r1, [pc, #20]	; (8000c34 <SzArrayReferenceTypeRepresentation::PrettyToString#16062+0x34>)
 8000c1e:	4478      	add	r0, pc
 8000c20:	4401      	add	r1, r0
 8000c22:	4620      	mov	r0, r4
 8000c24:	f005 fbb2 	bl	800638c <StringBuilder::Append#9238>
 8000c28:	bd10      	pop	{r4, pc}
 8000c2a:	f7ff fc1d 	bl	8000468 <Thread::ThrowNullException#4411>
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	17fffef6 	.word	0x17fffef6
 8000c34:	e8012138 	.word	0xe8012138

08000c38 <SzArrayReferenceTypeRepresentation::SameShape#16060>:
        }

        //--//

        public override bool SameShape( ArrayReferenceTypeRepresentation other )
        {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	4806      	ldr	r0, [pc, #24]	; (8000c54 <SzArrayReferenceTypeRepresentation::SameShape#16060+0x1c>)
            return other is SzArrayReferenceTypeRepresentation;
 8000c3c:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <SzArrayReferenceTypeRepresentation::SameShape#16060+0x20>)
 8000c3e:	4478      	add	r0, pc
 8000c40:	4402      	add	r2, r0
 8000c42:	4608      	mov	r0, r1
 8000c44:	4611      	mov	r1, r2
 8000c46:	f000 f809 	bl	8000c5c <TypeSystemManager::CastToSealedTypeNoThrow#5593>
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	bf18      	it	ne
 8000c4e:	2001      	movne	r0, #1
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	17fffed6 	.word	0x17fffed6
 8000c58:	e80194d8 	.word	0xe80194d8

08000c5c <TypeSystemManager::CastToSealedTypeNoThrow#5593>:

        [TS.WellKnownMethod("TypeSystemManager_CastToSealedTypeNoThrow")]
        public static object CastToSealedTypeNoThrow(object obj,
                                                      TS.VTable expected)
        {
            if (obj != null)
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	bf08      	it	eq
 8000c62:	bd80      	popeq	{r7, pc}
 8000c64:	d004      	beq.n	8000c70 <TypeSystemManager::CastToSealedTypeNoThrow#5593+0x14>
 8000c66:	6842      	ldr	r2, [r0, #4]
            {
                TS.VTable got = TS.VTable.Get(obj);

                if (got != expected)
                {
                    return null;
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	bf18      	it	ne
 8000c6c:	2000      	movne	r0, #0
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	f7ff fbfa 	bl	8000468 <Thread::ThrowNullException#4411>

08000c74 <MultiArrayReferenceTypeRepresentation::ToString#16013>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	4e0f      	ldr	r6, [pc, #60]	; (8000cb4 <MultiArrayReferenceTypeRepresentation::ToString#16013+0x40>)
 8000c78:	4604      	mov	r4, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "MultiArrayReferenceTypeRepresentation(" );
 8000c7a:	480f      	ldr	r0, [pc, #60]	; (8000cb8 <MultiArrayReferenceTypeRepresentation::ToString#16013+0x44>)
 8000c7c:	490f      	ldr	r1, [pc, #60]	; (8000cbc <MultiArrayReferenceTypeRepresentation::ToString#16013+0x48>)
 8000c7e:	447e      	add	r6, pc
 8000c80:	4430      	add	r0, r6
 8000c82:	4431      	add	r1, r6
 8000c84:	f7ff fe06 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8000c88:	4605      	mov	r5, r0
 8000c8a:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <MultiArrayReferenceTypeRepresentation::ToString#16013+0x4c>)
 8000c8c:	2210      	movs	r2, #16
 8000c8e:	1981      	adds	r1, r0, r6
 8000c90:	4628      	mov	r0, r5
 8000c92:	f006 f9de 	bl	8007052 <StringBuilder::.ctor#9221>

            PrettyToString( sb, true, false );
 8000c96:	4620      	mov	r0, r4
 8000c98:	4629      	mov	r1, r5
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f000 f84f 	bl	8000d40 <MultiArrayReferenceTypeRepresentation::PrettyToString#16014>

            sb.Append( ")" );
 8000ca2:	4808      	ldr	r0, [pc, #32]	; (8000cc4 <MultiArrayReferenceTypeRepresentation::ToString#16013+0x50>)
 8000ca4:	1981      	adds	r1, r0, r6
 8000ca6:	4628      	mov	r0, r5
 8000ca8:	f005 fb70 	bl	800638c <StringBuilder::Append#9238>

            return sb.ToString();
 8000cac:	4628      	mov	r0, r5
 8000cae:	f000 ff81 	bl	8001bb4 <StringBuilder::ToString#9230>
 8000cb2:	bd70      	pop	{r4, r5, r6, pc}
 8000cb4:	17fffe96 	.word	0x17fffe96
 8000cb8:	fffffe0c 	.word	0xfffffe0c
 8000cbc:	e8019718 	.word	0xe8019718
 8000cc0:	e8011fc8 	.word	0xe8011fc8
 8000cc4:	e8011d38 	.word	0xe8011d38

08000cc8 <MultiArrayReferenceTypeRepresentation::Equals#16005>:
            return false;
        }

        public override bool Equals( object obj )
        {
            return this.EqualsThroughEquivalence( obj, null );
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f000 f806 	bl	8000cdc <MultiArrayReferenceTypeRepresentation::EqualsThroughEquivalence#16004>
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <MultiArrayReferenceTypeRepresentation::GetHashCode#16006>:
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	f7ff ff44 	bl	8000b60 <ArrayReferenceTypeRepresentation::GetHashCode#15907>
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)

08000cdc <MultiArrayReferenceTypeRepresentation::EqualsThroughEquivalence#16004>:
        // MetaDataEquality Methods
        //

        public override bool EqualsThroughEquivalence( object         obj ,
                                                       EquivalenceSet set )
        {
 8000cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cde:	b081      	sub	sp, #4
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4814      	ldr	r0, [pc, #80]	; (8000d34 <MultiArrayReferenceTypeRepresentation::EqualsThroughEquivalence#16004+0x58>)
            if(obj is MultiArrayReferenceTypeRepresentation)
 8000ce4:	4f14      	ldr	r7, [pc, #80]	; (8000d38 <MultiArrayReferenceTypeRepresentation::EqualsThroughEquivalence#16004+0x5c>)
 8000ce6:	460d      	mov	r5, r1
 8000ce8:	4614      	mov	r4, r2
 8000cea:	4478      	add	r0, pc
 8000cec:	1839      	adds	r1, r7, r0
 8000cee:	4628      	mov	r0, r5
 8000cf0:	f7ff ffb4 	bl	8000c5c <TypeSystemManager::CastToSealedTypeNoThrow#5593>
 8000cf4:	b1c0      	cbz	r0, 8000d28 <MultiArrayReferenceTypeRepresentation::EqualsThroughEquivalence#16004+0x4c>
 8000cf6:	4811      	ldr	r0, [pc, #68]	; (8000d3c <MultiArrayReferenceTypeRepresentation::EqualsThroughEquivalence#16004+0x60>)
 8000cf8:	4478      	add	r0, pc
            {
                MultiArrayReferenceTypeRepresentation other = (MultiArrayReferenceTypeRepresentation)obj;
 8000cfa:	1839      	adds	r1, r7, r0
 8000cfc:	4628      	mov	r0, r5
 8000cfe:	f000 f8b9 	bl	8000e74 <TypeSystemManager::CastToSealedType#5592>

                if(m_rank == other.m_rank)
 8000d02:	b1a0      	cbz	r0, 8000d2e <MultiArrayReferenceTypeRepresentation::EqualsThroughEquivalence#16004+0x52>
 8000d04:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8000d06:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000d08:	4291      	cmp	r1, r2
 8000d0a:	d10d      	bne.n	8000d28 <MultiArrayReferenceTypeRepresentation::EqualsThroughEquivalence#16004+0x4c>
                {
                    if(ArrayUtility.ArrayEquals( m_dimensions, other.m_dimensions ))
 8000d0c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8000d0e:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8000d10:	f006 fdf0 	bl	80078f4 <ArrayUtility::ArrayEquals#37329>
 8000d14:	f010 0fff 	tst.w	r0, #255	; 0xff
 8000d18:	d006      	beq.n	8000d28 <MultiArrayReferenceTypeRepresentation::EqualsThroughEquivalence#16004+0x4c>
                    {
                        return base.EqualsThroughEquivalence( obj, set );
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	4629      	mov	r1, r5
 8000d1e:	4622      	mov	r2, r4
 8000d20:	f7ff ff2a 	bl	8000b78 <ArrayReferenceTypeRepresentation::EqualsThroughEquivalence#15905>
 8000d24:	b001      	add	sp, #4
 8000d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d28:	2000      	movs	r0, #0
 8000d2a:	b001      	add	sp, #4
 8000d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        {
            if(obj is MultiArrayReferenceTypeRepresentation)
            {
                MultiArrayReferenceTypeRepresentation other = (MultiArrayReferenceTypeRepresentation)obj;

                if(m_rank == other.m_rank)
 8000d2e:	f7ff fb9b 	bl	8000468 <Thread::ThrowNullException#4411>
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	17fffe2a 	.word	0x17fffe2a
 8000d38:	e8019508 	.word	0xe8019508
 8000d3c:	17fffe1c 	.word	0x17fffe1c

08000d40 <MultiArrayReferenceTypeRepresentation::PrettyToString#16014>:
        }

        internal override void PrettyToString( System.Text.StringBuilder sb                 ,
                                               bool                      fPrefix            ,
                                               bool                      fWithAbbreviations )
        {
 8000d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d44:	b081      	sub	sp, #4
 8000d46:	4605      	mov	r5, r0
 8000d48:	468b      	mov	fp, r1
            m_elementType.PrettyToString( sb, fPrefix, fWithAbbreviations );
 8000d4a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8000d4c:	2800      	cmp	r0, #0
 8000d4e:	d059      	beq.n	8000e04 <MultiArrayReferenceTypeRepresentation::PrettyToString#16014+0xc4>
 8000d50:	d058      	beq.n	8000e04 <MultiArrayReferenceTypeRepresentation::PrettyToString#16014+0xc4>
 8000d52:	6841      	ldr	r1, [r0, #4]
 8000d54:	69c9      	ldr	r1, [r1, #28]
 8000d56:	6acf      	ldr	r7, [r1, #44]	; 0x2c
 8000d58:	4659      	mov	r1, fp
 8000d5a:	47b8      	blx	r7

            sb.Append( "[" );
 8000d5c:	f1bb 0f00 	cmp.w	fp, #0
 8000d60:	d050      	beq.n	8000e04 <MultiArrayReferenceTypeRepresentation::PrettyToString#16014+0xc4>
 8000d62:	4c2a      	ldr	r4, [pc, #168]	; (8000e0c <MultiArrayReferenceTypeRepresentation::PrettyToString#16014+0xcc>)
 8000d64:	482a      	ldr	r0, [pc, #168]	; (8000e10 <MultiArrayReferenceTypeRepresentation::PrettyToString#16014+0xd0>)
 8000d66:	447c      	add	r4, pc
 8000d68:	1901      	adds	r1, r0, r4
 8000d6a:	4658      	mov	r0, fp
 8000d6c:	f005 fb0e 	bl	800638c <StringBuilder::Append#9238>
            for(int i = 0; i < m_rank; i++)
            {
                if(i != 0)
                {
                    sb.Append( "," );
 8000d70:	482a      	ldr	r0, [pc, #168]	; (8000e1c <MultiArrayReferenceTypeRepresentation::PrettyToString#16014+0xdc>)
 8000d72:	f04f 0900 	mov.w	r9, #0
 8000d76:	260c      	movs	r6, #12
 8000d78:	eb00 0a04 	add.w	sl, r0, r4
                    Dimension dm = m_dimensions[i];

                    if(dm.m_lowerBound != 0 || dm.m_upperBound != 0)
                    {
                        sb.Append( dm.m_lowerBound );
                        sb.Append( ".." );
 8000d7c:	4828      	ldr	r0, [pc, #160]	; (8000e20 <MultiArrayReferenceTypeRepresentation::PrettyToString#16014+0xe0>)
 8000d7e:	eb00 0804 	add.w	r8, r0, r4
 8000d82:	2400      	movs	r4, #0
 8000d84:	e001      	b.n	8000d8a <MultiArrayReferenceTypeRepresentation::PrettyToString#16014+0x4a>
                                               bool                      fWithAbbreviations )
        {
            m_elementType.PrettyToString( sb, fPrefix, fWithAbbreviations );

            sb.Append( "[" );
            for(int i = 0; i < m_rank; i++)
 8000d86:	3608      	adds	r6, #8
 8000d88:	3401      	adds	r4, #1
 8000d8a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8000d8c:	17e1      	asrs	r1, r4, #31
 8000d8e:	4284      	cmp	r4, r0
 8000d90:	f04f 0000 	mov.w	r0, #0
 8000d94:	bf28      	it	cs
 8000d96:	2001      	movcs	r0, #1
 8000d98:	f1b1 3fff 	cmp.w	r1, #4294967295
 8000d9c:	f04f 0100 	mov.w	r1, #0
 8000da0:	bfc8      	it	gt
 8000da2:	2101      	movgt	r1, #1
 8000da4:	ebb9 7fe4 	cmp.w	r9, r4, asr #31
 8000da8:	bf08      	it	eq
 8000daa:	4601      	moveq	r1, r0
 8000dac:	bb01      	cbnz	r1, 8000df0 <MultiArrayReferenceTypeRepresentation::PrettyToString#16014+0xb0>
 8000dae:	b11c      	cbz	r4, 8000db8 <MultiArrayReferenceTypeRepresentation::PrettyToString#16014+0x78>
            {
                if(i != 0)
                {
                    sb.Append( "," );
 8000db0:	4658      	mov	r0, fp
 8000db2:	4651      	mov	r1, sl
 8000db4:	f005 faea 	bl	800638c <StringBuilder::Append#9238>
                }

                if(i < m_dimensions.Length)
 8000db8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000dba:	b318      	cbz	r0, 8000e04 <MultiArrayReferenceTypeRepresentation::PrettyToString#16014+0xc4>
 8000dbc:	6880      	ldr	r0, [r0, #8]
 8000dbe:	4284      	cmp	r4, r0
 8000dc0:	dae1      	bge.n	8000d86 <MultiArrayReferenceTypeRepresentation::PrettyToString#16014+0x46>
                {
                    Dimension dm = m_dimensions[i];
 8000dc2:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000dc4:	b1f0      	cbz	r0, 8000e04 <MultiArrayReferenceTypeRepresentation::PrettyToString#16014+0xc4>
 8000dc6:	6881      	ldr	r1, [r0, #8]
 8000dc8:	428c      	cmp	r4, r1
 8000dca:	d21d      	bcs.n	8000e08 <MultiArrayReferenceTypeRepresentation::PrettyToString#16014+0xc8>
 8000dcc:	5981      	ldr	r1, [r0, r6]
 8000dce:	4430      	add	r0, r6
 8000dd0:	6847      	ldr	r7, [r0, #4]
 8000dd2:	ea51 0007 	orrs.w	r0, r1, r7
 8000dd6:	d0d6      	beq.n	8000d86 <MultiArrayReferenceTypeRepresentation::PrettyToString#16014+0x46>

                    if(dm.m_lowerBound != 0 || dm.m_upperBound != 0)
                    {
                        sb.Append( dm.m_lowerBound );
 8000dd8:	4658      	mov	r0, fp
 8000dda:	f006 faf1 	bl	80073c0 <StringBuilder::Append#9260>
                        sb.Append( ".." );
 8000dde:	4658      	mov	r0, fp
 8000de0:	4641      	mov	r1, r8
 8000de2:	f005 fad3 	bl	800638c <StringBuilder::Append#9238>
                        sb.Append( dm.m_upperBound );
 8000de6:	4658      	mov	r0, fp
 8000de8:	4639      	mov	r1, r7
 8000dea:	f006 fae9 	bl	80073c0 <StringBuilder::Append#9260>
 8000dee:	e7ca      	b.n	8000d86 <MultiArrayReferenceTypeRepresentation::PrettyToString#16014+0x46>
 8000df0:	4808      	ldr	r0, [pc, #32]	; (8000e14 <MultiArrayReferenceTypeRepresentation::PrettyToString#16014+0xd4>)
                    }
                }
            }
            sb.Append( "]" );
 8000df2:	4909      	ldr	r1, [pc, #36]	; (8000e18 <MultiArrayReferenceTypeRepresentation::PrettyToString#16014+0xd8>)
 8000df4:	4478      	add	r0, pc
 8000df6:	4401      	add	r1, r0
 8000df8:	4658      	mov	r0, fp
 8000dfa:	f005 fac7 	bl	800638c <StringBuilder::Append#9238>
 8000dfe:	b001      	add	sp, #4
 8000e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e04:	f7ff fb30 	bl	8000468 <Thread::ThrowNullException#4411>
                    sb.Append( "," );
                }

                if(i < m_dimensions.Length)
                {
                    Dimension dm = m_dimensions[i];
 8000e08:	f000 f852 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 8000e0c:	17fffdae 	.word	0x17fffdae
 8000e10:	e8012028 	.word	0xe8012028
 8000e14:	17fffd20 	.word	0x17fffd20
 8000e18:	e8012068 	.word	0xe8012068
 8000e1c:	e8011ac8 	.word	0xe8011ac8
 8000e20:	e8012048 	.word	0xe8012048

08000e24 <MultiArrayReferenceTypeRepresentation::SameShape#16010>:
        }

        //--//

        public override bool SameShape( ArrayReferenceTypeRepresentation other )
        {
 8000e24:	b5b0      	push	{r4, r5, r7, lr}
 8000e26:	4604      	mov	r4, r0
 8000e28:	4810      	ldr	r0, [pc, #64]	; (8000e6c <MultiArrayReferenceTypeRepresentation::SameShape#16010+0x48>)
            MultiArrayReferenceTypeRepresentation other2 = other as MultiArrayReferenceTypeRepresentation;
 8000e2a:	4a11      	ldr	r2, [pc, #68]	; (8000e70 <MultiArrayReferenceTypeRepresentation::SameShape#16010+0x4c>)
 8000e2c:	4478      	add	r0, pc
 8000e2e:	4402      	add	r2, r0
 8000e30:	4608      	mov	r0, r1
 8000e32:	4611      	mov	r1, r2
 8000e34:	f7ff ff12 	bl	8000c5c <TypeSystemManager::CastToSealedTypeNoThrow#5593>
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4605      	mov	r5, r0
 8000e3c:	f000 fc28 	bl	8001690 <Object::Equals#2586>

            if(other2 != null)
 8000e40:	f010 0fff 	tst.w	r0, #255	; 0xff
 8000e44:	d10d      	bne.n	8000e62 <MultiArrayReferenceTypeRepresentation::SameShape#16010+0x3e>
            {
                if(m_rank == other2.m_rank)
 8000e46:	b175      	cbz	r5, 8000e66 <MultiArrayReferenceTypeRepresentation::SameShape#16010+0x42>
 8000e48:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000e4a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	d108      	bne.n	8000e62 <MultiArrayReferenceTypeRepresentation::SameShape#16010+0x3e>
                {
                    if(ArrayUtility.ArrayEquals( m_dimensions, other2.m_dimensions ))
 8000e50:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8000e52:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000e54:	f006 fd4e 	bl	80078f4 <ArrayUtility::ArrayEquals#37329>
 8000e58:	b2c0      	uxtb	r0, r0
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	bf18      	it	ne
 8000e5e:	2001      	movne	r0, #1
 8000e60:	bdb0      	pop	{r4, r5, r7, pc}
 8000e62:	2000      	movs	r0, #0
 8000e64:	bdb0      	pop	{r4, r5, r7, pc}
        {
            MultiArrayReferenceTypeRepresentation other2 = other as MultiArrayReferenceTypeRepresentation;

            if(other2 != null)
            {
                if(m_rank == other2.m_rank)
 8000e66:	f7ff faff 	bl	8000468 <Thread::ThrowNullException#4411>
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	17fffce8 	.word	0x17fffce8
 8000e70:	e8019508 	.word	0xe8019508

08000e74 <TypeSystemManager::CastToSealedType#5592>:

        [TS.WellKnownMethod("TypeSystemManager_CastToSealedType")]
        public static object CastToSealedType(object obj,
                                               TS.VTable expected)
        {
            if (obj != null)
 8000e74:	b510      	push	{r4, lr}
 8000e76:	b198      	cbz	r0, 8000ea0 <TypeSystemManager::CastToSealedType#5592+0x2c>
            {
                obj = CastToSealedTypeNoThrow(obj, expected);
 8000e78:	f7ff fef0 	bl	8000c5c <TypeSystemManager::CastToSealedTypeNoThrow#5593>
                if (obj == null)
 8000e7c:	2800      	cmp	r0, #0
 8000e7e:	bf18      	it	ne
 8000e80:	bd10      	popne	{r4, pc}
 8000e82:	4808      	ldr	r0, [pc, #32]	; (8000ea4 <TypeSystemManager::CastToSealedType#5592+0x30>)
                {
                    throw new InvalidCastException();
 8000e84:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <TypeSystemManager::CastToSealedType#5592+0x34>)
 8000e86:	4478      	add	r0, pc
 8000e88:	180c      	adds	r4, r1, r0
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <TypeSystemManager::CastToSealedType#5592+0x38>)
 8000e8c:	4401      	add	r1, r0
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f7ff fd00 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8000e94:	4601      	mov	r1, r0
 8000e96:	2000      	movs	r0, #0
 8000e98:	6088      	str	r0, [r1, #8]
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f7ff fd10 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	bd10      	pop	{r4, pc}
 8000ea4:	17fffc8e 	.word	0x17fffc8e
 8000ea8:	fffffe0c 	.word	0xfffffe0c
 8000eac:	e8019b08 	.word	0xe8019b08

08000eb0 <Thread::ThrowIndexOutOfRangeException#4412>:

        [NoInline]
        [NoReturn]
        [TS.WellKnownMethod( "ThreadImpl_ThrowIndexOutOfRangeException" )]
        internal static void ThrowIndexOutOfRangeException()
        {
 8000eb0:	b510      	push	{r4, lr}
 8000eb2:	4807      	ldr	r0, [pc, #28]	; (8000ed0 <Thread::ThrowIndexOutOfRangeException#4412+0x20>)
            throw new IndexOutOfRangeException();
 8000eb4:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <Thread::ThrowIndexOutOfRangeException#4412+0x24>)
 8000eb6:	4478      	add	r0, pc
 8000eb8:	180c      	adds	r4, r1, r0
 8000eba:	4907      	ldr	r1, [pc, #28]	; (8000ed8 <Thread::ThrowIndexOutOfRangeException#4412+0x28>)
 8000ebc:	4401      	add	r1, r0
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	f7ff fce8 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	6088      	str	r0, [r1, #8]
 8000eca:	4620      	mov	r0, r4
 8000ecc:	f7ff fcf8 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8000ed0:	17fffc5e 	.word	0x17fffc5e
 8000ed4:	fffffe0c 	.word	0xfffffe0c
 8000ed8:	e8019448 	.word	0xe8019448

08000edc <Array::IndexOf#1813>:
        // elements of the array are compared to the given value using the
        // Object.Equals method.
        //
////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.MayFail )]
        public static int IndexOf( Array array, Object value, int startIndex, int count )
        {
 8000edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ee0:	b081      	sub	sp, #4
 8000ee2:	4605      	mov	r5, r0
 8000ee4:	4614      	mov	r4, r2
 8000ee6:	4689      	mov	r9, r1
            if(array == null)
 8000ee8:	2d00      	cmp	r5, #0
 8000eea:	d060      	beq.n	8000fae <Array::IndexOf#1813+0xd2>
#else
                throw new ArgumentNullException();
#endif
            }

            if(array.Rank != 1)
 8000eec:	4628      	mov	r0, r5
 8000eee:	f7ff fdd9 	bl	8000aa4 <Array::get_Rank#4090>
 8000ef2:	2801      	cmp	r0, #1
 8000ef4:	d167      	bne.n	8000fc6 <Array::IndexOf#1813+0xea>
#else
                throw new RankException();
#endif
            }

            int lb = array.GetLowerBound( 0 );
 8000ef6:	4628      	mov	r0, r5
 8000ef8:	f7ff fcfa 	bl	80008f0 <Array::GetLowerBound#4075>
 8000efc:	4680      	mov	r8, r0
            if(startIndex < lb || startIndex > array.Length + lb)
 8000efe:	f1b8 0f01 	cmp.w	r8, #1
 8000f02:	da4b      	bge.n	8000f9c <Array::IndexOf#1813+0xc0>
 8000f04:	68a8      	ldr	r0, [r5, #8]
 8000f06:	4440      	add	r0, r8
 8000f08:	2800      	cmp	r0, #0
 8000f0a:	db47      	blt.n	8000f9c <Array::IndexOf#1813+0xc0>
                throw new ArgumentOutOfRangeException( "startIndex", Environment.GetResourceString( "ArgumentOutOfRange_Index" ) );
#else
                throw new ArgumentOutOfRangeException();
#endif
            }
            if(count < 0 || count > array.Length - startIndex + lb)
 8000f0c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000f10:	dd47      	ble.n	8000fa2 <Array::IndexOf#1813+0xc6>
 8000f12:	68a8      	ldr	r0, [r5, #8]
 8000f14:	4440      	add	r0, r8
 8000f16:	4284      	cmp	r4, r0
 8000f18:	dc43      	bgt.n	8000fa2 <Array::IndexOf#1813+0xc6>
 8000f1a:	4833      	ldr	r0, [pc, #204]	; (8000fe8 <Array::IndexOf#1813+0x10c>)
////        if(r)
////        {
////            return retVal;
////        }

            Object[] objArray = array as Object[];
 8000f1c:	4933      	ldr	r1, [pc, #204]	; (8000fec <Array::IndexOf#1813+0x110>)
 8000f1e:	4478      	add	r0, pc
 8000f20:	4401      	add	r1, r0
 8000f22:	4628      	mov	r0, r5
 8000f24:	f000 f87f 	bl	8001026 <TypeSystemManager::CastToTypeNoThrow#5591>
 8000f28:	4607      	mov	r7, r0
            int      endIndex = startIndex + count;

            if(objArray != null)
 8000f2a:	b1d7      	cbz	r7, 8000f62 <Array::IndexOf#1813+0x86>
            {
                if(value == null)
 8000f2c:	f1b9 0f00 	cmp.w	r9, #0
 8000f30:	d01d      	beq.n	8000f6e <Array::IndexOf#1813+0x92>
                        if(objArray[i] == null) return i;
                    }
                }
                else
                {
                    for(int i = startIndex; i < endIndex; i++)
 8000f32:	f107 060c 	add.w	r6, r7, #12
 8000f36:	2500      	movs	r5, #0
 8000f38:	e000      	b.n	8000f3c <Array::IndexOf#1813+0x60>
 8000f3a:	3501      	adds	r5, #1
 8000f3c:	42a5      	cmp	r5, r4
 8000f3e:	da25      	bge.n	8000f8c <Array::IndexOf#1813+0xb0>
                    {
                        Object obj = objArray[i];
 8000f40:	68b8      	ldr	r0, [r7, #8]
 8000f42:	4285      	cmp	r5, r0
 8000f44:	d228      	bcs.n	8000f98 <Array::IndexOf#1813+0xbc>
 8000f46:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]

                        if(obj != null && obj.Equals( value )) return i;
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	d0f5      	beq.n	8000f3a <Array::IndexOf#1813+0x5e>
 8000f4e:	d00c      	beq.n	8000f6a <Array::IndexOf#1813+0x8e>
 8000f50:	6841      	ldr	r1, [r0, #4]
 8000f52:	69c9      	ldr	r1, [r1, #28]
 8000f54:	690a      	ldr	r2, [r1, #16]
 8000f56:	4649      	mov	r1, r9
 8000f58:	4790      	blx	r2
 8000f5a:	f010 0fff 	tst.w	r0, #255	; 0xff
 8000f5e:	d0ec      	beq.n	8000f3a <Array::IndexOf#1813+0x5e>
 8000f60:	e016      	b.n	8000f90 <Array::IndexOf#1813+0xb4>
                    }
                }
            }
            else
            {
                for(int i = startIndex; i < endIndex; i++)
 8000f62:	2c01      	cmp	r4, #1
 8000f64:	db12      	blt.n	8000f8c <Array::IndexOf#1813+0xb0>
                {
                    Object obj = array.GetValue( i );
 8000f66:	f7ff fd87 	bl	8000a78 <Array::GetValue#1756>
#else
                throw new ArgumentNullException();
#endif
            }

            if(array.Rank != 1)
 8000f6a:	f7ff fa7d 	bl	8000468 <Thread::ThrowNullException#4411>

            if(objArray != null)
            {
                if(value == null)
                {
                    for(int i = startIndex; i < endIndex; i++)
 8000f6e:	f107 000c 	add.w	r0, r7, #12
 8000f72:	2500      	movs	r5, #0
 8000f74:	e000      	b.n	8000f78 <Array::IndexOf#1813+0x9c>
 8000f76:	3501      	adds	r5, #1
 8000f78:	42a5      	cmp	r5, r4
 8000f7a:	da07      	bge.n	8000f8c <Array::IndexOf#1813+0xb0>
                    {
                        if(objArray[i] == null) return i;
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	428d      	cmp	r5, r1
 8000f80:	d20a      	bcs.n	8000f98 <Array::IndexOf#1813+0xbc>
 8000f82:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
 8000f86:	2900      	cmp	r1, #0
 8000f88:	d1f5      	bne.n	8000f76 <Array::IndexOf#1813+0x9a>
 8000f8a:	e001      	b.n	8000f90 <Array::IndexOf#1813+0xb4>

            // Return one less than the lower bound of the array.  This way,
            // for arrays with a lower bound of -1 we will not return -1 when the
            // item was not found.  And for SZArrays (the vast majority), -1 still
            // works for them.
            return lb - 1;
 8000f8c:	f1a8 0501 	sub.w	r5, r8, #1
 8000f90:	4628      	mov	r0, r5
 8000f92:	b001      	add	sp, #4
 8000f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                }
                else
                {
                    for(int i = startIndex; i < endIndex; i++)
                    {
                        Object obj = objArray[i];
 8000f98:	f7ff ff8a 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 8000f9c:	4817      	ldr	r0, [pc, #92]	; (8000ffc <Array::IndexOf#1813+0x120>)
 8000f9e:	4478      	add	r0, pc
 8000fa0:	e001      	b.n	8000fa6 <Array::IndexOf#1813+0xca>
 8000fa2:	4813      	ldr	r0, [pc, #76]	; (8000ff0 <Array::IndexOf#1813+0x114>)
 8000fa4:	4478      	add	r0, pc
            if(startIndex < lb || startIndex > array.Length + lb)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "startIndex", Environment.GetResourceString( "ArgumentOutOfRange_Index" ) );
#else
                throw new ArgumentOutOfRangeException();
 8000fa6:	4913      	ldr	r1, [pc, #76]	; (8000ff4 <Array::IndexOf#1813+0x118>)
 8000fa8:	180c      	adds	r4, r1, r0
 8000faa:	4913      	ldr	r1, [pc, #76]	; (8000ff8 <Array::IndexOf#1813+0x11c>)
 8000fac:	e004      	b.n	8000fb8 <Array::IndexOf#1813+0xdc>
 8000fae:	4817      	ldr	r0, [pc, #92]	; (800100c <Array::IndexOf#1813+0x130>)
            if(array == null)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentNullException( "array" );
#else
                throw new ArgumentNullException();
 8000fb0:	4910      	ldr	r1, [pc, #64]	; (8000ff4 <Array::IndexOf#1813+0x118>)
 8000fb2:	4478      	add	r0, pc
 8000fb4:	180c      	adds	r4, r1, r0
 8000fb6:	4916      	ldr	r1, [pc, #88]	; (8001010 <Array::IndexOf#1813+0x134>)
            if(startIndex < lb || startIndex > array.Length + lb)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "startIndex", Environment.GetResourceString( "ArgumentOutOfRange_Index" ) );
#else
                throw new ArgumentOutOfRangeException();
 8000fb8:	4401      	add	r1, r0
 8000fba:	4620      	mov	r0, r4
 8000fbc:	f7ff fc6a 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8000fc0:	4601      	mov	r1, r0
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	e00b      	b.n	8000fde <Array::IndexOf#1813+0x102>
 8000fc6:	4d0e      	ldr	r5, [pc, #56]	; (8001000 <Array::IndexOf#1813+0x124>)
            if(array.Rank != 1)
            {
#if EXCEPTION_STRINGS
                throw new RankException( Environment.GetResourceString( "Rank_MultiDimNotSupported" ) );
#else
                throw new RankException();
 8000fc8:	480a      	ldr	r0, [pc, #40]	; (8000ff4 <Array::IndexOf#1813+0x118>)
 8000fca:	447d      	add	r5, pc
 8000fcc:	1944      	adds	r4, r0, r5
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <Array::IndexOf#1813+0x128>)
 8000fd0:	1941      	adds	r1, r0, r5
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f7ff fc5e 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8000fd8:	4601      	mov	r1, r0
 8000fda:	480b      	ldr	r0, [pc, #44]	; (8001008 <Array::IndexOf#1813+0x12c>)
 8000fdc:	4428      	add	r0, r5
 8000fde:	6088      	str	r0, [r1, #8]
            if(startIndex < lb || startIndex > array.Length + lb)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "startIndex", Environment.GetResourceString( "ArgumentOutOfRange_Index" ) );
#else
                throw new ArgumentOutOfRangeException();
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	f7ff fc6d 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	17fffbf6 	.word	0x17fffbf6
 8000fec:	e8019598 	.word	0xe8019598
 8000ff0:	17fffb70 	.word	0x17fffb70
 8000ff4:	fffffe0c 	.word	0xfffffe0c
 8000ff8:	e8019568 	.word	0xe8019568
 8000ffc:	17fffb76 	.word	0x17fffb76
 8001000:	17fffb4a 	.word	0x17fffb4a
 8001004:	e8019538 	.word	0xe8019538
 8001008:	e8010fc8 	.word	0xe8010fc8
 800100c:	17fffb62 	.word	0x17fffb62
 8001010:	e8019418 	.word	0xe8019418

08001014 <Object::ToString#2584>:
        // Returns a String which represents the object instance.  The default
        // for an object is to return the fully qualified name of the class.
        //
        public virtual String ToString()
        {
            return GetType().ToString();
 8001014:	b580      	push	{r7, lr}
 8001016:	f000 fb25 	bl	8001664 <Object::GetType#4192>
 800101a:	b110      	cbz	r0, 8001022 <Object::ToString#2584+0xe>
 800101c:	f000 fb2c 	bl	8001678 <RuntimeType::get_Name#3459>
 8001020:	bd80      	pop	{r7, pc}
 8001022:	f7ff fa21 	bl	8000468 <Thread::ThrowNullException#4411>

08001026 <TypeSystemManager::CastToTypeNoThrow#5591>:
        }

        [TS.WellKnownMethod("TypeSystemManager_CastToTypeNoThrow")]
        public static object CastToTypeNoThrow(object obj,
                                                TS.VTable expected)
        {
 8001026:	b510      	push	{r4, lr}
 8001028:	4604      	mov	r4, r0
            if (obj != null)
 800102a:	2c00      	cmp	r4, #0
 800102c:	d00f      	beq.n	800104e <TypeSystemManager::CastToTypeNoThrow#5591+0x28>
            {
                TS.VTable got = TS.VTable.Get(obj);

                if (expected.CanBeAssignedFrom(got) == false)
 800102e:	bf18      	it	ne
 8001030:	2900      	cmpne	r1, #0
 8001032:	d00e      	beq.n	8001052 <TypeSystemManager::CastToTypeNoThrow#5591+0x2c>
 8001034:	6862      	ldr	r2, [r4, #4]
 8001036:	4291      	cmp	r1, r2
 8001038:	d004      	beq.n	8001044 <TypeSystemManager::CastToTypeNoThrow#5591+0x1e>
 800103a:	4608      	mov	r0, r1
 800103c:	4611      	mov	r1, r2
 800103e:	f002 fb1b 	bl	8003678 <VTable::CanBeAssignedFrom_Slow#4054>
 8001042:	e000      	b.n	8001046 <TypeSystemManager::CastToTypeNoThrow#5591+0x20>
 8001044:	2001      	movs	r0, #1
 8001046:	b2c0      	uxtb	r0, r0
                {
                    return null;
 8001048:	2800      	cmp	r0, #0
 800104a:	bf08      	it	eq
 800104c:	4604      	moveq	r4, r0
 800104e:	4620      	mov	r0, r4
 8001050:	bd10      	pop	{r4, pc}
 8001052:	f7ff fa09 	bl	8000468 <Thread::ThrowNullException#4411>
 8001056:	46c0      	nop			; (mov r8, r8)

08001058 <Byte::Equals#1997>:
            return m_value - value;
        }

        // Determines whether two Byte objects are equal.
        public override bool Equals( Object obj )
        {
 8001058:	b570      	push	{r4, r5, r6, lr}
 800105a:	4605      	mov	r5, r0
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <Byte::Equals#1997+0x3c>)
            if(!(obj is Byte))
 800105e:	4e0e      	ldr	r6, [pc, #56]	; (8001098 <Byte::Equals#1997+0x40>)
 8001060:	460c      	mov	r4, r1
 8001062:	4478      	add	r0, pc
 8001064:	1831      	adds	r1, r6, r0
 8001066:	4620      	mov	r0, r4
 8001068:	f7ff fdf8 	bl	8000c5c <TypeSystemManager::CastToSealedTypeNoThrow#5593>
 800106c:	2800      	cmp	r0, #0
 800106e:	bf04      	itt	eq
 8001070:	2000      	moveq	r0, #0
 8001072:	bd70      	popeq	{r4, r5, r6, pc}
 8001074:	4809      	ldr	r0, [pc, #36]	; (800109c <Byte::Equals#1997+0x44>)
            {
                return false;
            }

            return m_value == ((Byte)obj).m_value;
 8001076:	782d      	ldrb	r5, [r5, #0]
 8001078:	4478      	add	r0, pc
 800107a:	1831      	adds	r1, r6, r0
 800107c:	4620      	mov	r0, r4
 800107e:	f7ff fef9 	bl	8000e74 <TypeSystemManager::CastToSealedType#5592>
 8001082:	b128      	cbz	r0, 8001090 <Byte::Equals#1997+0x38>
 8001084:	7801      	ldrb	r1, [r0, #0]
 8001086:	2000      	movs	r0, #0
 8001088:	428d      	cmp	r5, r1
 800108a:	bf08      	it	eq
 800108c:	2001      	moveq	r0, #1
 800108e:	bd70      	pop	{r4, r5, r6, pc}
 8001090:	f7ff f9ea 	bl	8000468 <Thread::ThrowNullException#4411>
 8001094:	17fffab2 	.word	0x17fffab2
 8001098:	e80195c8 	.word	0xe80195c8
 800109c:	17fffa9c 	.word	0x17fffa9c

080010a0 <Byte::GetHashCode#2001>:
        }

        // Gets a hash code for this instance.
        public override int GetHashCode()
        {
            return m_value;
 80010a0:	7800      	ldrb	r0, [r0, #0]
 80010a2:	4770      	bx	lr

080010a4 <Byte::ToString#2020>:
            return true;
        }

        public override String ToString()
        {
            return Number.FormatInt32( m_value, /*null,*/ NumberFormatInfo.CurrentInfo );
 80010a4:	b510      	push	{r4, lr}
 80010a6:	7804      	ldrb	r4, [r0, #0]
 80010a8:	f000 f806 	bl	80010b8 <NumberFormatInfo::get_CurrentInfo#10451>
 80010ac:	4601      	mov	r1, r0
 80010ae:	4620      	mov	r0, r4
 80010b0:	f000 f830 	bl	8001114 <Number::FormatInt32#7962>
 80010b4:	bd10      	pop	{r4, pc}
 80010b6:	46c0      	nop			; (mov r8, r8)

080010b8 <NumberFormatInfo::get_CurrentInfo#10451>:
        //

        public static NumberFormatInfo CurrentInfo
        {
            get
            {
 80010b8:	b510      	push	{r4, lr}
 80010ba:	4910      	ldr	r1, [pc, #64]	; (80010fc <NumberFormatInfo::get_CurrentInfo#10451+0x44>)
 80010bc:	4810      	ldr	r0, [pc, #64]	; (8001100 <NumberFormatInfo::get_CurrentInfo#10451+0x48>)
 80010be:	4479      	add	r1, pc
 80010c0:	4401      	add	r1, r0
 80010c2:	f8d1 1108 	ldr.w	r1, [r1, #264]	; 0x108
 80010c6:	b1b1      	cbz	r1, 80010f6 <NumberFormatInfo::get_CurrentInfo#10451+0x3e>
 80010c8:	490e      	ldr	r1, [pc, #56]	; (8001104 <NumberFormatInfo::get_CurrentInfo#10451+0x4c>)
 80010ca:	4479      	add	r1, pc
 80010cc:	4408      	add	r0, r1
 80010ce:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 80010d2:	b180      	cbz	r0, 80010f6 <NumberFormatInfo::get_CurrentInfo#10451+0x3e>
                System.Globalization.CultureInfo culture = System.Threading.Thread.CurrentThread.CurrentCulture;
                if(!culture.m_isInherited)
 80010d4:	7f01      	ldrb	r1, [r0, #28]
 80010d6:	b909      	cbnz	r1, 80010dc <NumberFormatInfo::get_CurrentInfo#10451+0x24>
                {
                    NumberFormatInfo info = culture.numInfo;
 80010d8:	6901      	ldr	r1, [r0, #16]
 80010da:	b951      	cbnz	r1, 80010f2 <NumberFormatInfo::get_CurrentInfo#10451+0x3a>
 80010dc:	4c0a      	ldr	r4, [pc, #40]	; (8001108 <NumberFormatInfo::get_CurrentInfo#10451+0x50>)
                    if(info != null)
                    {
                        return info;
                    }
                }
                return ((NumberFormatInfo)culture.GetFormat( typeof( NumberFormatInfo ) ));
 80010de:	490b      	ldr	r1, [pc, #44]	; (800110c <NumberFormatInfo::get_CurrentInfo#10451+0x54>)
 80010e0:	447c      	add	r4, pc
 80010e2:	4421      	add	r1, r4
 80010e4:	f006 f9cc 	bl	8007480 <CultureInfo::GetFormat#10312>
 80010e8:	4909      	ldr	r1, [pc, #36]	; (8001110 <NumberFormatInfo::get_CurrentInfo#10451+0x58>)
 80010ea:	4421      	add	r1, r4
 80010ec:	f7ff fec2 	bl	8000e74 <TypeSystemManager::CastToSealedType#5592>
 80010f0:	4601      	mov	r1, r0
 80010f2:	4608      	mov	r0, r1
 80010f4:	bd10      	pop	{r4, pc}

        public static NumberFormatInfo CurrentInfo
        {
            get
            {
                System.Globalization.CultureInfo culture = System.Threading.Thread.CurrentThread.CurrentCulture;
 80010f6:	f7ff f9b7 	bl	8000468 <Thread::ThrowNullException#4411>
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	17fffa56 	.word	0x17fffa56
 8001100:	fffffcf8 	.word	0xfffffcf8
 8001104:	17fffa4a 	.word	0x17fffa4a
 8001108:	17fffa34 	.word	0x17fffa34
 800110c:	e8014e8c 	.word	0xe8014e8c
 8001110:	e8019ec8 	.word	0xe8019ec8

08001114 <Number::FormatInt32#7962>:
        }

        internal static String FormatInt32( int              value     ,
                                            char             formatChar,
                                            NumberFormatInfo info      )
        {
 8001114:	b570      	push	{r4, r5, r6, lr}
 8001116:	460c      	mov	r4, r1
 8001118:	490a      	ldr	r1, [pc, #40]	; (8001144 <Number::FormatInt32#7962+0x30>)
 800111a:	4605      	mov	r5, r0
            Number number = new Number( value );
 800111c:	480a      	ldr	r0, [pc, #40]	; (8001148 <Number::FormatInt32#7962+0x34>)
 800111e:	4a0b      	ldr	r2, [pc, #44]	; (800114c <Number::FormatInt32#7962+0x38>)
 8001120:	4479      	add	r1, pc
 8001122:	4408      	add	r0, r1
 8001124:	4411      	add	r1, r2
 8001126:	f7ff fbb5 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 800112a:	4629      	mov	r1, r5
 800112c:	4606      	mov	r6, r0
 800112e:	f004 fa8d 	bl	800564c <Number::.ctor#7949>
            return number.ToString( formatChar, -1, info );
 8001132:	4630      	mov	r0, r6
 8001134:	2147      	movs	r1, #71	; 0x47
 8001136:	f04f 32ff 	mov.w	r2, #4294967295
 800113a:	4623      	mov	r3, r4
 800113c:	f004 fb4c 	bl	80057d8 <Number::ToString#7973>
 8001140:	bd70      	pop	{r4, r5, r6, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	17fff9f4 	.word	0x17fff9f4
 8001148:	fffffe0c 	.word	0xfffffe0c
 800114c:	e8019cb8 	.word	0xe8019cb8

08001150 <Byte::ToString#2026>:
        {
            return Number.FormatInt32( m_value, /*null,*/ NumberFormatInfo.GetInstance( provider ) );
        }
    
        public String ToString( String format, IFormatProvider provider )
        {
 8001150:	b5b0      	push	{r4, r5, r7, lr}
            return Number.FormatInt32( m_value, format, NumberFormatInfo.GetInstance( provider ) );
 8001152:	7805      	ldrb	r5, [r0, #0]
 8001154:	460c      	mov	r4, r1
 8001156:	f7ff ffaf 	bl	80010b8 <NumberFormatInfo::get_CurrentInfo#10451>
 800115a:	4602      	mov	r2, r0
 800115c:	4628      	mov	r0, r5
 800115e:	4621      	mov	r1, r4
 8001160:	f000 f802 	bl	8001168 <Number::FormatInt32#7963>
 8001164:	bdb0      	pop	{r4, r5, r7, pc}
 8001166:	46c0      	nop			; (mov r8, r8)

08001168 <Number::FormatInt32#7963>:
        }

        public static String FormatInt32( int              value  ,
                                          String           format ,
                                          NumberFormatInfo info   )
        {
 8001168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800116c:	b081      	sub	sp, #4
 800116e:	460e      	mov	r6, r1
 8001170:	4681      	mov	r9, r0
 8001172:	2000      	movs	r0, #0
 8001174:	4669      	mov	r1, sp
 8001176:	4690      	mov	r8, r2
 8001178:	9000      	str	r0, [sp, #0]
            // rusa: see also Lightning\Src\VM\COMNumber.cpp::FormatInt32
            int digits;
            char fmt = ParseFormatSpecifier( format, out digits );
 800117a:	4630      	mov	r0, r6
 800117c:	f004 fcae 	bl	8005adc <Number::ParseFormatSpecifier#7974>
 8001180:	4607      	mov	r7, r0
            switch(fmt)
 8001182:	b2bd      	uxth	r5, r7
 8001184:	2d59      	cmp	r5, #89	; 0x59
 8001186:	d306      	bcc.n	8001196 <Number::FormatInt32#7963+0x2e>
 8001188:	2d64      	cmp	r5, #100	; 0x64
 800118a:	d017      	beq.n	80011bc <Number::FormatInt32#7963+0x54>
 800118c:	2d67      	cmp	r5, #103	; 0x67
 800118e:	d006      	beq.n	800119e <Number::FormatInt32#7963+0x36>
 8001190:	2d78      	cmp	r5, #120	; 0x78
 8001192:	d11f      	bne.n	80011d4 <Number::FormatInt32#7963+0x6c>
 8001194:	e007      	b.n	80011a6 <Number::FormatInt32#7963+0x3e>
 8001196:	2d58      	cmp	r5, #88	; 0x58
 8001198:	d005      	beq.n	80011a6 <Number::FormatInt32#7963+0x3e>
 800119a:	2d47      	cmp	r5, #71	; 0x47
 800119c:	d10c      	bne.n	80011b8 <Number::FormatInt32#7963+0x50>
            {
                case 'g':
                case 'G':
                    {
                        if(digits > 0) break;
 800119e:	9800      	ldr	r0, [sp, #0]
 80011a0:	2800      	cmp	r0, #0
 80011a2:	dc17      	bgt.n	80011d4 <Number::FormatInt32#7963+0x6c>
 80011a4:	e00a      	b.n	80011bc <Number::FormatInt32#7963+0x54>
                        return Int32ToDecString( value, digits, info.negativeSign );
                    }
                case 'x':
                case 'X':
                    {
                        return Int32ToHexString( unchecked( (uint)value ),
 80011a6:	9a00      	ldr	r2, [sp, #0]
 80011a8:	f1a5 0121 	sub.w	r1, r5, #33	; 0x21
 80011ac:	4648      	mov	r0, r9
 80011ae:	f004 fd45 	bl	8005c3c <Number::Int32ToHexString#7978>
 80011b2:	b001      	add	sp, #4
 80011b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011b8:	2d44      	cmp	r5, #68	; 0x44
 80011ba:	d10b      	bne.n	80011d4 <Number::FormatInt32#7963+0x6c>
                        goto case 'D';
                    }
                case 'd':
                case 'D':
                    {
                        return Int32ToDecString( value, digits, info.negativeSign );
 80011bc:	f1b8 0f00 	cmp.w	r8, #0
 80011c0:	d026      	beq.n	8001210 <Number::FormatInt32#7963+0xa8>
 80011c2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80011c6:	9900      	ldr	r1, [sp, #0]
 80011c8:	4648      	mov	r0, r9
 80011ca:	f004 fcd5 	bl	8005b78 <Number::Int32ToDecString#7977>
 80011ce:	b001      	add	sp, #4
 80011d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011d4:	490f      	ldr	r1, [pc, #60]	; (8001214 <Number::FormatInt32#7963+0xac>)
                default:
                    {
                        break;
                    }
            }
            Number number = new Number( value );
 80011d6:	4810      	ldr	r0, [pc, #64]	; (8001218 <Number::FormatInt32#7963+0xb0>)
 80011d8:	4a10      	ldr	r2, [pc, #64]	; (800121c <Number::FormatInt32#7963+0xb4>)
 80011da:	4479      	add	r1, pc
 80011dc:	4408      	add	r0, r1
 80011de:	4411      	add	r1, r2
 80011e0:	f7ff fb58 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80011e4:	4649      	mov	r1, r9
 80011e6:	4604      	mov	r4, r0
 80011e8:	f004 fa30 	bl	800564c <Number::.ctor#7949>
            if(fmt == 0)
 80011ec:	b145      	cbz	r5, 8001200 <Number::FormatInt32#7963+0x98>
            {
                return number.ToStringFormat( format, info );
            }
            else
            {
                return number.ToString( fmt, digits, info );
 80011ee:	9a00      	ldr	r2, [sp, #0]
 80011f0:	4620      	mov	r0, r4
 80011f2:	4639      	mov	r1, r7
 80011f4:	4643      	mov	r3, r8
 80011f6:	f004 faef 	bl	80057d8 <Number::ToString#7973>
 80011fa:	b001      	add	sp, #4
 80011fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    }
            }
            Number number = new Number( value );
            if(fmt == 0)
            {
                return number.ToStringFormat( format, info );
 8001200:	4620      	mov	r0, r4
 8001202:	4631      	mov	r1, r6
 8001204:	4642      	mov	r2, r8
 8001206:	f004 fd45 	bl	8005c94 <Number::ToStringFormat#7975>
 800120a:	b001      	add	sp, #4
 800120c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                default:
                    {
                        break;
                    }
            }
            Number number = new Number( value );
 8001210:	f7ff f92a 	bl	8000468 <Thread::ThrowNullException#4411>
 8001214:	17fff93a 	.word	0x17fff93a
 8001218:	fffffe0c 	.word	0xfffffe0c
 800121c:	e8019cb8 	.word	0xe8019cb8

08001220 <Char::GetHashCode#2066>:
        //

        // Calculate a hashcode for a 2 byte Unicode character.
        public override int GetHashCode()
        {
            return (int)m_value | ((int)m_value << 16);
 8001220:	8800      	ldrh	r0, [r0, #0]
 8001222:	ea40 4000 	orr.w	r0, r0, r0, lsl #16
 8001226:	4770      	bx	lr

08001228 <Char::Equals#2068>:
        }

        // Used for comparing two boxed Char objects.
        //
        public override bool Equals( Object obj )
        {
 8001228:	b570      	push	{r4, r5, r6, lr}
 800122a:	4605      	mov	r5, r0
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <Char::Equals#2068+0x3c>)
            if(!(obj is Char))
 800122e:	4e0e      	ldr	r6, [pc, #56]	; (8001268 <Char::Equals#2068+0x40>)
 8001230:	460c      	mov	r4, r1
 8001232:	4478      	add	r0, pc
 8001234:	1831      	adds	r1, r6, r0
 8001236:	4620      	mov	r0, r4
 8001238:	f7ff fd10 	bl	8000c5c <TypeSystemManager::CastToSealedTypeNoThrow#5593>
 800123c:	2800      	cmp	r0, #0
 800123e:	bf04      	itt	eq
 8001240:	2000      	moveq	r0, #0
 8001242:	bd70      	popeq	{r4, r5, r6, pc}
 8001244:	4809      	ldr	r0, [pc, #36]	; (800126c <Char::Equals#2068+0x44>)
            {
                return false;
            }

            return (m_value == ((Char)obj).m_value);
 8001246:	882d      	ldrh	r5, [r5, #0]
 8001248:	4478      	add	r0, pc
 800124a:	1831      	adds	r1, r6, r0
 800124c:	4620      	mov	r0, r4
 800124e:	f7ff fe11 	bl	8000e74 <TypeSystemManager::CastToSealedType#5592>
 8001252:	b128      	cbz	r0, 8001260 <Char::Equals#2068+0x38>
 8001254:	8801      	ldrh	r1, [r0, #0]
 8001256:	2000      	movs	r0, #0
 8001258:	428d      	cmp	r5, r1
 800125a:	bf08      	it	eq
 800125c:	2001      	moveq	r0, #1
 800125e:	bd70      	pop	{r4, r5, r6, pc}
 8001260:	f7ff f902 	bl	8000468 <Thread::ThrowNullException#4411>
 8001264:	17fff8e2 	.word	0x17fff8e2
 8001268:	e80195f8 	.word	0xe80195f8
 800126c:	17fff8cc 	.word	0x17fff8cc

08001270 <Char::ToString#2076>:
        }

        // Overrides System.Object.ToString.
        public override String ToString()
        {
            return Char.ToString( m_value );
 8001270:	b580      	push	{r7, lr}
 8001272:	8800      	ldrh	r0, [r0, #0]
 8001274:	f000 f801 	bl	800127a <Char::ToString#2080>
 8001278:	bd80      	pop	{r7, pc}

0800127a <Char::ToString#2080>:
        /*===================================ToString===================================
        **This static methods takes a character and returns the String representation of it.
        ==============================================================================*/
        // Provides a string representation of a character.
        public static String ToString( char c )
        {
 800127a:	b5b0      	push	{r4, r5, r7, lr}
 800127c:	4604      	mov	r4, r0
            return new String( c, 1 );
 800127e:	2001      	movs	r0, #1
 8001280:	f000 f806 	bl	8001290 <String::FastAllocateString#4262>
 8001284:	4621      	mov	r1, r4
 8001286:	4605      	mov	r5, r0
 8001288:	f000 f81a 	bl	80012c0 <String::.ctor#4261>
 800128c:	4628      	mov	r0, r5
 800128e:	bdb0      	pop	{r4, r5, r7, pc}

08001290 <String::FastAllocateString#4262>:
        // Helper Methods
        //

        [TS.WellKnownMethod( "StringImpl_FastAllocateString" )]
        private static StringImpl FastAllocateString( int length )
        {
 8001290:	b510      	push	{r4, lr}
 8001292:	4908      	ldr	r1, [pc, #32]	; (80012b4 <String::FastAllocateString#4262+0x24>)
 8001294:	4604      	mov	r4, r0
            StringImpl res = (StringImpl)(object)TypeSystemManager.Instance.AllocateString( TS.VTable.GetFromType( typeof(string) ), length + 1 );
 8001296:	4808      	ldr	r0, [pc, #32]	; (80012b8 <String::FastAllocateString#4262+0x28>)
 8001298:	4a08      	ldr	r2, [pc, #32]	; (80012bc <String::FastAllocateString#4262+0x2c>)
 800129a:	4479      	add	r1, pc
 800129c:	4408      	add	r0, r1
 800129e:	4411      	add	r1, r2
 80012a0:	1c62      	adds	r2, r4, #1
 80012a2:	f000 fbdb 	bl	8001a5c <DefaultTypeSystemManager::AllocateString#5608>

            res.m_stringLength = length;
 80012a6:	2800      	cmp	r0, #0
 80012a8:	bf1c      	itt	ne
 80012aa:	60c4      	strne	r4, [r0, #12]
 80012ac:	bd10      	popne	{r4, pc}
 80012ae:	f7ff f8db 	bl	8000468 <Thread::ThrowNullException#4411>
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	17fff87a 	.word	0x17fff87a
 80012b8:	fffffe0c 	.word	0xfffffe0c
 80012bc:	e80196b8 	.word	0xe80196b8

080012c0 <String::.ctor#4261>:
        [DiscardTargetImplementation]
        [TS.WellKnownMethod( "StringImpl_ctor_char_int" )]
        public unsafe StringImpl( char c     ,
                                  int  count )
        {
            if(count < 0 || count > m_stringLength)
 80012c0:	b580      	push	{r7, lr}
 80012c2:	68c2      	ldr	r2, [r0, #12]
 80012c4:	2a00      	cmp	r2, #0
 80012c6:	dd0e      	ble.n	80012e6 <String::.ctor#4261+0x26>
            {
                ThreadImpl.ThrowIndexOutOfRangeException();
            }

            fixed(char* dest = &this.m_firstChar)
 80012c8:	f100 0210 	add.w	r2, r0, #16
 80012cc:	2001      	movs	r0, #1
 80012ce:	e002      	b.n	80012d6 <String::.ctor#4261+0x16>
            {
                char* ptr = dest;

                while(--count >= 0)
                {
                    *ptr++ = c;
 80012d0:	1c93      	adds	r3, r2, #2
 80012d2:	8011      	strh	r1, [r2, #0]
 80012d4:	461a      	mov	r2, r3

            fixed(char* dest = &this.m_firstChar)
            {
                char* ptr = dest;

                while(--count >= 0)
 80012d6:	3801      	subs	r0, #1
 80012d8:	2800      	cmp	r0, #0
 80012da:	bfb8      	it	lt
 80012dc:	bd80      	poplt	{r7, pc}
                {
                    *ptr++ = c;
 80012de:	2a00      	cmp	r2, #0
 80012e0:	d1f6      	bne.n	80012d0 <String::.ctor#4261+0x10>
 80012e2:	f7ff f8c1 	bl	8000468 <Thread::ThrowNullException#4411>
        public unsafe StringImpl( char c     ,
                                  int  count )
        {
            if(count < 0 || count > m_stringLength)
            {
                ThreadImpl.ThrowIndexOutOfRangeException();
 80012e6:	f7ff fde3 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 80012ea:	46c0      	nop			; (mov r8, r8)

080012ec <Delegate::Equals#5247>:
        }

        //--//

        public override bool Equals( Object obj )
        {
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	460d      	mov	r5, r1
 80012f0:	4604      	mov	r4, r0
 80012f2:	b19d      	cbz	r5, 800131c <Delegate::Equals#5247+0x30>

        [Inline]
        protected static bool InternalEqualTypes( object a ,
                                                  object b )
        {
            return TS.VTable.SameType( a, b );
 80012f4:	4620      	mov	r0, r4
 80012f6:	4629      	mov	r1, r5
 80012f8:	f000 f826 	bl	8001348 <VTable::SameType#4047>

        //--//

        public override bool Equals( Object obj )
        {
            if(obj == null || !InternalEqualTypes( this, obj ))
 80012fc:	f010 0fff 	tst.w	r0, #255	; 0xff
 8001300:	d00c      	beq.n	800131c <Delegate::Equals#5247+0x30>
 8001302:	480f      	ldr	r0, [pc, #60]	; (8001340 <Delegate::Equals#5247+0x54>)
            {
                return false;
            }

            DelegateImpl d = obj as DelegateImpl;
 8001304:	490f      	ldr	r1, [pc, #60]	; (8001344 <Delegate::Equals#5247+0x58>)
 8001306:	4478      	add	r0, pc
 8001308:	4401      	add	r1, r0
 800130a:	4628      	mov	r0, r5
 800130c:	f7ff fe8b 	bl	8001026 <TypeSystemManager::CastToTypeNoThrow#5591>
 8001310:	4605      	mov	r5, r0
            if(d == null)
 8001312:	f000 f82d 	bl	8001370 <Delegate::op_Equality#5249>
 8001316:	f010 0fff 	tst.w	r0, #255	; 0xff
 800131a:	d001      	beq.n	8001320 <Delegate::Equals#5247+0x34>
 800131c:	2000      	movs	r0, #0
 800131e:	bdb0      	pop	{r4, r5, r7, pc}
 8001320:	b15d      	cbz	r5, 800133a <Delegate::Equals#5247+0x4e>
            {
                return false;
            }

            return (m_target == d.m_target && m_codePtr.Target == d.m_codePtr.Target);
 8001322:	68a1      	ldr	r1, [r4, #8]
 8001324:	68aa      	ldr	r2, [r5, #8]
 8001326:	2000      	movs	r0, #0
 8001328:	4291      	cmp	r1, r2
 800132a:	bf18      	it	ne
 800132c:	bdb0      	popne	{r4, r5, r7, pc}
 800132e:	68e9      	ldr	r1, [r5, #12]
 8001330:	68e2      	ldr	r2, [r4, #12]
 8001332:	428a      	cmp	r2, r1
 8001334:	bf08      	it	eq
 8001336:	2001      	moveq	r0, #1
 8001338:	bdb0      	pop	{r4, r5, r7, pc}
 800133a:	f7ff f895 	bl	8000468 <Thread::ThrowNullException#4411>
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	17fff80e 	.word	0x17fff80e
 8001344:	e8019628 	.word	0xe8019628

08001348 <VTable::SameType#4047>:
        // Helper Methods
        //

        public static bool SameType( object a ,
                                     object b )
        {
 8001348:	b580      	push	{r7, lr}
 800134a:	2800      	cmp	r0, #0
 800134c:	d00a      	beq.n	8001364 <VTable::SameType#4047+0x1c>
 800134e:	bf18      	it	ne
 8001350:	2900      	cmpne	r1, #0
 8001352:	d007      	beq.n	8001364 <VTable::SameType#4047+0x1c>
 8001354:	d006      	beq.n	8001364 <VTable::SameType#4047+0x1c>
 8001356:	6842      	ldr	r2, [r0, #4]
            return Get( a ) == Get( b );
 8001358:	6849      	ldr	r1, [r1, #4]
 800135a:	2000      	movs	r0, #0
 800135c:	428a      	cmp	r2, r1
 800135e:	bf08      	it	eq
 8001360:	2001      	moveq	r0, #1
 8001362:	bd80      	pop	{r7, pc}
 8001364:	f7ff f880 	bl	8000468 <Thread::ThrowNullException#4411>

08001368 <Delegate::GetHashCode#5248>:
        }

        public override int GetHashCode()
        {
            return m_codePtr.Target.GetHashCode();
 8001368:	68c0      	ldr	r0, [r0, #12]
 800136a:	4770      	bx	lr

0800136c <Delegate::GetTarget#5253>:

        //--//

        protected virtual Object GetTarget()
        {
            return m_target;
 800136c:	6880      	ldr	r0, [r0, #8]
 800136e:	4770      	bx	lr

08001370 <Delegate::op_Equality#5249>:
        //--//

        public static bool operator ==( DelegateImpl d1 ,
                                        DelegateImpl d2 )
        {
            if((Object)d1 == null)
 8001370:	b580      	push	{r7, lr}
 8001372:	2800      	cmp	r0, #0
 8001374:	bf04      	itt	eq
 8001376:	2001      	moveq	r0, #1
 8001378:	bd80      	popeq	{r7, pc}
 800137a:	d005      	beq.n	8001388 <Delegate::op_Equality#5249+0x18>
 800137c:	6841      	ldr	r1, [r0, #4]
            {
                return (Object)d2 == null;
            }

            return d1.Equals( d2 );
 800137e:	69c9      	ldr	r1, [r1, #28]
 8001380:	690a      	ldr	r2, [r1, #16]
 8001382:	2100      	movs	r1, #0
 8001384:	4790      	blx	r2
 8001386:	bd80      	pop	{r7, pc}
 8001388:	f7ff f86e 	bl	8000468 <Thread::ThrowNullException#4411>

0800138c <Delegate::.ctor#5246>:
 800138c:	e9c0 1202 	strd	r1, r2, [r0, #8]
 8001390:	4770      	bx	lr

08001392 <Enum::ToString#2269>:
        #endregion

        #region IFormattable
        [Obsolete( "The provider argument is not used. Please use ToString(String)." )]
        public String ToString( String format, IFormatProvider provider )
        {
 8001392:	b580      	push	{r7, lr}
 8001394:	b120      	cbz	r0, 80013a0 <Enum::ToString#2269+0xe>
 8001396:	6841      	ldr	r1, [r0, #4]
        #endregion

        #region Public Methods
        public String ToString( String format )
        {
            return ToString();
 8001398:	69c9      	ldr	r1, [r1, #28]
 800139a:	68c9      	ldr	r1, [r1, #12]
 800139c:	4788      	blx	r1
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	f7ff f862 	bl	8000468 <Thread::ThrowNullException#4411>

080013a4 <String::get_Chars#4269>:
        [System.Runtime.CompilerServices.IndexerName( "Chars" )]
        public unsafe char this[int index]
        {
            get
            {
                if(index >= 0 && index < m_stringLength)
 80013a4:	b510      	push	{r4, lr}
 80013a6:	f1b1 3fff 	cmp.w	r1, #4294967295
 80013aa:	dd0d      	ble.n	80013c8 <String::get_Chars#4269+0x24>
 80013ac:	68c2      	ldr	r2, [r0, #12]
 80013ae:	4291      	cmp	r1, r2
 80013b0:	da0a      	bge.n	80013c8 <String::get_Chars#4269+0x24>
                {
                    fixed(char* ptr = (string)(object)this)
 80013b2:	2800      	cmp	r0, #0
 80013b4:	bf18      	it	ne
 80013b6:	3010      	addne	r0, #16
                    {
                        return ptr[index];
 80013b8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80013bc:	2800      	cmp	r0, #0
 80013be:	bf1c      	itt	ne
 80013c0:	8800      	ldrhne	r0, [r0, #0]
 80013c2:	bd10      	popne	{r4, pc}
                    }
                }

                throw new IndexOutOfRangeException();
 80013c4:	f7ff f850 	bl	8000468 <Thread::ThrowNullException#4411>
 80013c8:	4807      	ldr	r0, [pc, #28]	; (80013e8 <String::get_Chars#4269+0x44>)
 80013ca:	4908      	ldr	r1, [pc, #32]	; (80013ec <String::get_Chars#4269+0x48>)
 80013cc:	4478      	add	r0, pc
 80013ce:	180c      	adds	r4, r1, r0
 80013d0:	4907      	ldr	r1, [pc, #28]	; (80013f0 <String::get_Chars#4269+0x4c>)
 80013d2:	4401      	add	r1, r0
 80013d4:	4620      	mov	r0, r4
 80013d6:	f7ff fa5d 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80013da:	4601      	mov	r1, r0
 80013dc:	2000      	movs	r0, #0
 80013de:	6088      	str	r0, [r1, #8]
 80013e0:	4620      	mov	r0, r4
 80013e2:	f7ff fa6d 	bl	80008c0 <TypeSystemManager::Throw#5596>
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	17fff748 	.word	0x17fff748
 80013ec:	fffffe0c 	.word	0xfffffe0c
 80013f0:	e8019448 	.word	0xe8019448

080013f4 <Number::FormatUInt32#7965>:
        }

        public static String FormatUInt32( uint             value  ,
                                           String           format ,
                                           NumberFormatInfo info   )
        {
 80013f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013f8:	b081      	sub	sp, #4
 80013fa:	460d      	mov	r5, r1
 80013fc:	4681      	mov	r9, r0
 80013fe:	2000      	movs	r0, #0
 8001400:	4669      	mov	r1, sp
 8001402:	4690      	mov	r8, r2
 8001404:	9000      	str	r0, [sp, #0]
            // rusa: see also Lightning\Src\VM\COMNumber.cpp::FormatUInt32
            int digits;
            char fmt = ParseFormatSpecifier( format, out digits );
 8001406:	4628      	mov	r0, r5
 8001408:	f004 fb68 	bl	8005adc <Number::ParseFormatSpecifier#7974>
 800140c:	4607      	mov	r7, r0
            switch(fmt)
 800140e:	b2be      	uxth	r6, r7
 8001410:	2e59      	cmp	r6, #89	; 0x59
 8001412:	d306      	bcc.n	8001422 <Number::FormatUInt32#7965+0x2e>
 8001414:	2e64      	cmp	r6, #100	; 0x64
 8001416:	d017      	beq.n	8001448 <Number::FormatUInt32#7965+0x54>
 8001418:	2e67      	cmp	r6, #103	; 0x67
 800141a:	d006      	beq.n	800142a <Number::FormatUInt32#7965+0x36>
 800141c:	2e78      	cmp	r6, #120	; 0x78
 800141e:	d11a      	bne.n	8001456 <Number::FormatUInt32#7965+0x62>
 8001420:	e007      	b.n	8001432 <Number::FormatUInt32#7965+0x3e>
 8001422:	2e58      	cmp	r6, #88	; 0x58
 8001424:	d005      	beq.n	8001432 <Number::FormatUInt32#7965+0x3e>
 8001426:	2e47      	cmp	r6, #71	; 0x47
 8001428:	d10c      	bne.n	8001444 <Number::FormatUInt32#7965+0x50>
            {
                case 'g':
                case 'G':
                    {
                        if(digits > 0) break;
 800142a:	9800      	ldr	r0, [sp, #0]
 800142c:	2800      	cmp	r0, #0
 800142e:	dc12      	bgt.n	8001456 <Number::FormatUInt32#7965+0x62>
 8001430:	e00a      	b.n	8001448 <Number::FormatUInt32#7965+0x54>
                        return UInt32ToDecString( value, digits );
                    }
                case 'x':
                case 'X':
                    {
                        return Int32ToHexString( value,
 8001432:	9a00      	ldr	r2, [sp, #0]
 8001434:	f1a6 0121 	sub.w	r1, r6, #33	; 0x21
 8001438:	4648      	mov	r0, r9
 800143a:	f004 fbff 	bl	8005c3c <Number::Int32ToHexString#7978>
 800143e:	b001      	add	sp, #4
 8001440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001444:	2e44      	cmp	r6, #68	; 0x44
 8001446:	d106      	bne.n	8001456 <Number::FormatUInt32#7965+0x62>
                        goto case 'D';
                    }
                case 'd':
                case 'D':
                    {
                        return UInt32ToDecString( value, digits );
 8001448:	9900      	ldr	r1, [sp, #0]
 800144a:	4648      	mov	r0, r9
 800144c:	f004 fefe 	bl	800624c <Number::UInt32ToDecString#7980>
 8001450:	b001      	add	sp, #4
 8001452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001456:	490f      	ldr	r1, [pc, #60]	; (8001494 <Number::FormatUInt32#7965+0xa0>)
                default:
                    {
                        break;
                    }
            }
            Number number = new Number( value );
 8001458:	480f      	ldr	r0, [pc, #60]	; (8001498 <Number::FormatUInt32#7965+0xa4>)
 800145a:	4a10      	ldr	r2, [pc, #64]	; (800149c <Number::FormatUInt32#7965+0xa8>)
 800145c:	4479      	add	r1, pc
 800145e:	4408      	add	r0, r1
 8001460:	4411      	add	r1, r2
 8001462:	f7ff fa17 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8001466:	4649      	mov	r1, r9
 8001468:	4604      	mov	r4, r0
 800146a:	f004 f963 	bl	8005734 <Number::.ctor#7950>
 800146e:	b146      	cbz	r6, 8001482 <Number::FormatUInt32#7965+0x8e>
            {
                return number.ToStringFormat( format, info );
            }
            else
            {
                return number.ToString( fmt, digits, info );
 8001470:	9a00      	ldr	r2, [sp, #0]
 8001472:	4620      	mov	r0, r4
 8001474:	4639      	mov	r1, r7
 8001476:	4643      	mov	r3, r8
 8001478:	f004 f9ae 	bl	80057d8 <Number::ToString#7973>
 800147c:	b001      	add	sp, #4
 800147e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    }
            }
            Number number = new Number( value );
            if(fmt == 0)
            {
                return number.ToStringFormat( format, info );
 8001482:	4620      	mov	r0, r4
 8001484:	4629      	mov	r1, r5
 8001486:	4642      	mov	r2, r8
 8001488:	f004 fc04 	bl	8005c94 <Number::ToStringFormat#7975>
 800148c:	b001      	add	sp, #4
 800148e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	17fff6b8 	.word	0x17fff6b8
 8001498:	fffffe0c 	.word	0xfffffe0c
 800149c:	e8019cb8 	.word	0xe8019cb8

080014a0 <Int32::Equals#2377>:

            return 0;
        }

        public override bool Equals( Object obj )
        {
 80014a0:	b570      	push	{r4, r5, r6, lr}
 80014a2:	4604      	mov	r4, r0
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <Int32::Equals#2377+0x3c>)
            if(!(obj is Int32))
 80014a6:	4e0e      	ldr	r6, [pc, #56]	; (80014e0 <Int32::Equals#2377+0x40>)
 80014a8:	460d      	mov	r5, r1
 80014aa:	4478      	add	r0, pc
 80014ac:	1831      	adds	r1, r6, r0
 80014ae:	4628      	mov	r0, r5
 80014b0:	f7ff fbd4 	bl	8000c5c <TypeSystemManager::CastToSealedTypeNoThrow#5593>
 80014b4:	2800      	cmp	r0, #0
 80014b6:	bf04      	itt	eq
 80014b8:	2000      	moveq	r0, #0
 80014ba:	bd70      	popeq	{r4, r5, r6, pc}
 80014bc:	4809      	ldr	r0, [pc, #36]	; (80014e4 <Int32::Equals#2377+0x44>)
 80014be:	4478      	add	r0, pc
            {
                return false;
            }

            return Equals( (Int32)obj );
 80014c0:	1831      	adds	r1, r6, r0
 80014c2:	4628      	mov	r0, r5
 80014c4:	f7ff fcd6 	bl	8000e74 <TypeSystemManager::CastToSealedType#5592>
 80014c8:	b130      	cbz	r0, 80014d8 <Int32::Equals#2377+0x38>
 80014ca:	6801      	ldr	r1, [r0, #0]
 80014cc:	6822      	ldr	r2, [r4, #0]
 80014ce:	2000      	movs	r0, #0
 80014d0:	428a      	cmp	r2, r1
 80014d2:	bf08      	it	eq
 80014d4:	2001      	moveq	r0, #1
 80014d6:	bd70      	pop	{r4, r5, r6, pc}
 80014d8:	f7fe ffc6 	bl	8000468 <Thread::ThrowNullException#4411>
 80014dc:	17fff66a 	.word	0x17fff66a
 80014e0:	e8019658 	.word	0xe8019658
 80014e4:	17fff656 	.word	0x17fff656

080014e8 <Int32::GetHashCode#2381>:
        }

        // The absolute value of the int contained.
        public override int GetHashCode()
        {
            return m_value;
 80014e8:	6800      	ldr	r0, [r0, #0]
 80014ea:	4770      	bx	lr

080014ec <Int32::ToString#2383>:
        }

        public override String ToString()
        {
            return Number.FormatInt32( m_value, /*null,*/ NumberFormatInfo.CurrentInfo );
 80014ec:	b510      	push	{r4, lr}
 80014ee:	6804      	ldr	r4, [r0, #0]
 80014f0:	f7ff fde2 	bl	80010b8 <NumberFormatInfo::get_CurrentInfo#10451>
 80014f4:	4601      	mov	r1, r0
 80014f6:	4620      	mov	r0, r4
 80014f8:	f7ff fe0c 	bl	8001114 <Number::FormatInt32#7962>
 80014fc:	bd10      	pop	{r4, pc}

080014fe <Int32::ToString#2389>:
            return Number.FormatInt32( m_value, format, NumberFormatInfo.CurrentInfo );
        }
    
        public String ToString( IFormatProvider provider )
        {
            return Number.FormatInt32( m_value, /*null,*/ NumberFormatInfo.GetInstance( provider ) );
 80014fe:	b510      	push	{r4, lr}
 8001500:	6804      	ldr	r4, [r0, #0]
 8001502:	f7ff fdd9 	bl	80010b8 <NumberFormatInfo::get_CurrentInfo#10451>
 8001506:	4601      	mov	r1, r0
 8001508:	4620      	mov	r0, r4
 800150a:	f7ff fe03 	bl	8001114 <Number::FormatInt32#7962>
 800150e:	bd10      	pop	{r4, pc}

08001510 <Int32::ToString#2391>:
        }
    
        public String ToString( String          format   ,
                                IFormatProvider provider )
        {
 8001510:	b5b0      	push	{r4, r5, r7, lr}
            return Number.FormatInt32( m_value, format, NumberFormatInfo.GetInstance( provider ) );
 8001512:	6805      	ldr	r5, [r0, #0]
 8001514:	460c      	mov	r4, r1
 8001516:	f7ff fdcf 	bl	80010b8 <NumberFormatInfo::get_CurrentInfo#10451>
 800151a:	4602      	mov	r2, r0
 800151c:	4628      	mov	r0, r5
 800151e:	4621      	mov	r1, r4
 8001520:	f7ff fe22 	bl	8001168 <Number::FormatInt32#7963>
 8001524:	bdb0      	pop	{r4, r5, r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)

08001528 <MulticastDelegate::Equals#5264>:
        //--//

        // equals returns true IIF the delegate is not null and has the
        //    same target, method and invocation list as this object
        public override bool Equals( Object obj )
        {
 8001528:	b5b0      	push	{r4, r5, r7, lr}
 800152a:	460d      	mov	r5, r1
 800152c:	4604      	mov	r4, r0
 800152e:	b305      	cbz	r5, 8001572 <MulticastDelegate::Equals#5264+0x4a>
 8001530:	4620      	mov	r0, r4
 8001532:	4629      	mov	r1, r5
 8001534:	f7ff ff08 	bl	8001348 <VTable::SameType#4047>
            if(obj == null || !InternalEqualTypes( this, obj ))
 8001538:	f010 0fff 	tst.w	r0, #255	; 0xff
 800153c:	d019      	beq.n	8001572 <MulticastDelegate::Equals#5264+0x4a>
 800153e:	480f      	ldr	r0, [pc, #60]	; (800157c <MulticastDelegate::Equals#5264+0x54>)
            {
                return false;
            }

            MulticastDelegateImpl d = obj as MulticastDelegateImpl;
 8001540:	490f      	ldr	r1, [pc, #60]	; (8001580 <MulticastDelegate::Equals#5264+0x58>)
 8001542:	4478      	add	r0, pc
 8001544:	4401      	add	r1, r0
 8001546:	4628      	mov	r0, r5
 8001548:	f7ff fd6d 	bl	8001026 <TypeSystemManager::CastToTypeNoThrow#5591>
 800154c:	4605      	mov	r5, r0
            if(d == null)
 800154e:	f7ff ff0f 	bl	8001370 <Delegate::op_Equality#5249>
 8001552:	f010 0fff 	tst.w	r0, #255	; 0xff
 8001556:	d10c      	bne.n	8001572 <MulticastDelegate::Equals#5264+0x4a>
            {
                return false;
            }

            if(ArrayUtility.ArrayEquals( m_invocationList, d.m_invocationList ) == false)
 8001558:	b16d      	cbz	r5, 8001576 <MulticastDelegate::Equals#5264+0x4e>
 800155a:	6920      	ldr	r0, [r4, #16]
 800155c:	6929      	ldr	r1, [r5, #16]
 800155e:	f000 f84a 	bl	80015f6 <ArrayUtility::ArrayEquals#36198>
 8001562:	f010 0fff 	tst.w	r0, #255	; 0xff
 8001566:	d004      	beq.n	8001572 <MulticastDelegate::Equals#5264+0x4a>
            {
                return false;
            }

            // now we can call on the base
            return base.Equals( d );
 8001568:	4620      	mov	r0, r4
 800156a:	4629      	mov	r1, r5
 800156c:	f7ff febe 	bl	80012ec <Delegate::Equals#5247>
 8001570:	bdb0      	pop	{r4, r5, r7, pc}
 8001572:	2000      	movs	r0, #0
 8001574:	bdb0      	pop	{r4, r5, r7, pc}
            if(d == null)
            {
                return false;
            }

            if(ArrayUtility.ArrayEquals( m_invocationList, d.m_invocationList ) == false)
 8001576:	f7fe ff77 	bl	8000468 <Thread::ThrowNullException#4411>
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	17fff5d2 	.word	0x17fff5d2
 8001580:	e8019688 	.word	0xe8019688

08001584 <MulticastDelegate::GetHashCode#5265>:
            return base.Equals( d );
        }

        public override int GetHashCode()
        {
            DelegateImpl[] invocationList = m_invocationList;
 8001584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001586:	b081      	sub	sp, #4
 8001588:	6904      	ldr	r4, [r0, #16]
            if(invocationList == null)
 800158a:	b1d4      	cbz	r4, 80015c2 <MulticastDelegate::GetHashCode#5265+0x3e>
 800158c:	f104 050c 	add.w	r5, r4, #12
 8001590:	2000      	movs	r0, #0
 8001592:	2600      	movs	r6, #0
 8001594:	e008      	b.n	80015a8 <MulticastDelegate::GetHashCode#5265+0x24>
            {
                int hash = 0;

                foreach(DelegateImpl d in invocationList)
                {
                    hash = hash * 33 + d.GetHashCode();
 8001596:	eb00 1740 	add.w	r7, r0, r0, lsl #5
 800159a:	6848      	ldr	r0, [r1, #4]
 800159c:	69c0      	ldr	r0, [r0, #28]
 800159e:	6942      	ldr	r2, [r0, #20]
 80015a0:	4608      	mov	r0, r1
 80015a2:	4790      	blx	r2
 80015a4:	4438      	add	r0, r7
                }
 80015a6:	3601      	adds	r6, #1
 80015a8:	68a1      	ldr	r1, [r4, #8]
            }
            else
            {
                int hash = 0;

                foreach(DelegateImpl d in invocationList)
 80015aa:	428e      	cmp	r6, r1
 80015ac:	da0b      	bge.n	80015c6 <MulticastDelegate::GetHashCode#5265+0x42>
 80015ae:	68a1      	ldr	r1, [r4, #8]
 80015b0:	428e      	cmp	r6, r1
 80015b2:	d20a      	bcs.n	80015ca <MulticastDelegate::GetHashCode#5265+0x46>
 80015b4:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
                {
                    hash = hash * 33 + d.GetHashCode();
 80015b8:	2900      	cmp	r1, #0
 80015ba:	d000      	beq.n	80015be <MulticastDelegate::GetHashCode#5265+0x3a>
 80015bc:	d1eb      	bne.n	8001596 <MulticastDelegate::GetHashCode#5265+0x12>
            }
            else
            {
                int hash = 0;

                foreach(DelegateImpl d in invocationList)
 80015be:	f7fe ff53 	bl	8000468 <Thread::ThrowNullException#4411>
        public override int GetHashCode()
        {
            DelegateImpl[] invocationList = m_invocationList;
            if(invocationList == null)
            {
                return base.GetHashCode();
 80015c2:	f7ff fed1 	bl	8001368 <Delegate::GetHashCode#5248>
 80015c6:	b001      	add	sp, #4
 80015c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            }
            else
            {
                int hash = 0;

                foreach(DelegateImpl d in invocationList)
 80015ca:	f7ff fc71 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>

080015ce <MulticastDelegate::GetTarget#5269>:

        protected override Object GetTarget()
        {
            DelegateImpl dlg;

            if(m_invocationList == null)
 80015ce:	b580      	push	{r7, lr}
 80015d0:	6901      	ldr	r1, [r0, #16]
 80015d2:	b141      	cbz	r1, 80015e6 <MulticastDelegate::GetTarget#5269+0x18>
            {
                dlg = this;
            }
            else
            {
                DelegateImpl[] lst = m_invocationList;
 80015d4:	6900      	ldr	r0, [r0, #16]
 80015d6:	b150      	cbz	r0, 80015ee <MulticastDelegate::GetTarget#5269+0x20>
 80015d8:	6882      	ldr	r2, [r0, #8]

                dlg = lst[lst.Length - 1];
 80015da:	1e51      	subs	r1, r2, #1
 80015dc:	4291      	cmp	r1, r2
 80015de:	d208      	bcs.n	80015f2 <MulticastDelegate::GetTarget#5269+0x24>
 80015e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80015e4:	68c0      	ldr	r0, [r0, #12]
            }

            return dlg.m_target;
 80015e6:	2800      	cmp	r0, #0
 80015e8:	bf1c      	itt	ne
 80015ea:	6880      	ldrne	r0, [r0, #8]
 80015ec:	bd80      	popne	{r7, pc}
            }
            else
            {
                DelegateImpl[] lst = m_invocationList;

                dlg = lst[lst.Length - 1];
 80015ee:	f7fe ff3b 	bl	8000468 <Thread::ThrowNullException#4411>
 80015f2:	f7ff fc5d 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>

080015f6 <ArrayUtility::ArrayEquals#36198>:
            return true;
        }

        public static bool ArrayEquals<T>( T[] s ,
                                           T[] d )
        {
 80015f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015fa:	b081      	sub	sp, #4
 80015fc:	4605      	mov	r5, r0
 80015fe:	460c      	mov	r4, r1
 8001600:	b115      	cbz	r5, 8001608 <ArrayUtility::ArrayEquals#36198+0x12>
 8001602:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8001606:	e001      	b.n	800160c <ArrayUtility::ArrayEquals#36198+0x16>
 8001608:	f04f 0800 	mov.w	r8, #0
 800160c:	b10c      	cbz	r4, 8001612 <ArrayUtility::ArrayEquals#36198+0x1c>
 800160e:	68a0      	ldr	r0, [r4, #8]
 8001610:	e000      	b.n	8001614 <ArrayUtility::ArrayEquals#36198+0x1e>
 8001612:	2000      	movs	r0, #0
            int sLen = s != null ? s.Length : 0;
            int dLen = d != null ? d.Length : 0;

            if(sLen == dLen)
 8001614:	4580      	cmp	r8, r0
 8001616:	d119      	bne.n	800164c <ArrayUtility::ArrayEquals#36198+0x56>
            {
                for(int i = 0; i < sLen; i++)
 8001618:	f105 090c 	add.w	r9, r5, #12
 800161c:	f104 060c 	add.w	r6, r4, #12
 8001620:	2700      	movs	r7, #0
 8001622:	e000      	b.n	8001626 <ArrayUtility::ArrayEquals#36198+0x30>
 8001624:	3701      	adds	r7, #1
 8001626:	4547      	cmp	r7, r8
 8001628:	da14      	bge.n	8001654 <ArrayUtility::ArrayEquals#36198+0x5e>
 800162a:	b1bd      	cbz	r5, 800165c <ArrayUtility::ArrayEquals#36198+0x66>
                {
                    if(Object.Equals( s[i], d[i] ) == false)
 800162c:	68a8      	ldr	r0, [r5, #8]
 800162e:	4287      	cmp	r7, r0
 8001630:	d216      	bcs.n	8001660 <ArrayUtility::ArrayEquals#36198+0x6a>
 8001632:	b19c      	cbz	r4, 800165c <ArrayUtility::ArrayEquals#36198+0x66>
 8001634:	68a0      	ldr	r0, [r4, #8]
 8001636:	4287      	cmp	r7, r0
 8001638:	d212      	bcs.n	8001660 <ArrayUtility::ArrayEquals#36198+0x6a>
 800163a:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
 800163e:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
 8001642:	f000 f825 	bl	8001690 <Object::Equals#2586>
 8001646:	f010 0fff 	tst.w	r0, #255	; 0xff
 800164a:	d1eb      	bne.n	8001624 <ArrayUtility::ArrayEquals#36198+0x2e>
 800164c:	2000      	movs	r0, #0
 800164e:	b001      	add	sp, #4
 8001650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001654:	2001      	movs	r0, #1
 8001656:	b001      	add	sp, #4
 8001658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800165c:	f7fe ff04 	bl	8000468 <Thread::ThrowNullException#4411>
 8001660:	f7ff fc26 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>

08001664 <Object::GetType#4192>:
        [MethodImpl( MethodImplOptions.InternalCall )]
        public extern virtual void FinalizeImpl();

        [NoInline]
        public new Type GetType()
        {
 8001664:	b580      	push	{r7, lr}
 8001666:	2800      	cmp	r0, #0
 8001668:	bf1c      	itt	ne
 800166a:	6840      	ldrne	r0, [r0, #4]
            return TS.VTable.Get( this ).Type;
 800166c:	2800      	cmpne	r0, #0
 800166e:	d001      	beq.n	8001674 <Object::GetType#4192+0x10>
 8001670:	6940      	ldr	r0, [r0, #20]
 8001672:	bd80      	pop	{r7, pc}
 8001674:	f7fe fef8 	bl	8000468 <Thread::ThrowNullException#4411>

08001678 <RuntimeType::get_Name#3459>:

        public override String Name
        {
            get
            {
                TS.TypeRepresentation td = m_handle.m_value.TypeInfo;
 8001678:	b580      	push	{r7, lr}
 800167a:	6880      	ldr	r0, [r0, #8]
 800167c:	2800      	cmp	r0, #0
 800167e:	bf1c      	itt	ne
 8001680:	6900      	ldrne	r0, [r0, #16]

                return td.FullName;
 8001682:	2800      	cmpne	r0, #0
 8001684:	d002      	beq.n	800168c <RuntimeType::get_Name#3459+0x14>
 8001686:	f000 f8bb 	bl	8001800 <TypeRepresentation::get_FullName#16179>
 800168a:	bd80      	pop	{r7, pc}

        public override String Name
        {
            get
            {
                TS.TypeRepresentation td = m_handle.m_value.TypeInfo;
 800168c:	f7fe feec 	bl	8000468 <Thread::ThrowNullException#4411>

08001690 <Object::Equals#2586>:
////    [MethodImpl( MethodImplOptions.InternalCall )]
////    internal static extern bool InternalEquals( Object objA, Object objB );

        public static bool Equals( Object objA, Object objB )
        {
            if(objA == objB)
 8001690:	b580      	push	{r7, lr}
 8001692:	4288      	cmp	r0, r1
 8001694:	bf02      	ittt	eq
 8001696:	2201      	moveq	r2, #1
 8001698:	4610      	moveq	r0, r2
 800169a:	bd80      	popeq	{r7, pc}
            {
                return true;
            }

            if(objA == null || objB == null)
 800169c:	2800      	cmp	r0, #0
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	bf18      	it	ne
 80016a4:	2900      	cmpne	r1, #0
 80016a6:	d005      	beq.n	80016b4 <Object::Equals#2586+0x24>
 80016a8:	b130      	cbz	r0, 80016b8 <Object::Equals#2586+0x28>
 80016aa:	6842      	ldr	r2, [r0, #4]
            {
                return false;
            }

            return objA.Equals( objB );
 80016ac:	69d2      	ldr	r2, [r2, #28]
 80016ae:	6912      	ldr	r2, [r2, #16]
 80016b0:	4790      	blx	r2
 80016b2:	4602      	mov	r2, r0
 80016b4:	4610      	mov	r0, r2
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	f7fe fed6 	bl	8000468 <Thread::ThrowNullException#4411>

080016bc <SyncBlockTable::GetHashCode#5131>:
        //
        // Helper Methods
        //

        public static int GetHashCode( object target )
        {
 80016bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016c0:	4604      	mov	r4, r0
            ObjectHeader oh = ObjectHeader.Unpack( target );
            int          hashCode;

            switch(oh.ExtensionKind)
 80016c2:	2c00      	cmp	r4, #0
 80016c4:	f000 8087 	beq.w	80017d6 <SyncBlockTable::GetHashCode#5131+0x11a>
 80016c8:	6820      	ldr	r0, [r4, #0]
 80016ca:	2101      	movs	r1, #1
 80016cc:	f400 7040 	and.w	r0, r0, #768	; 0x300
 80016d0:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
 80016d4:	d109      	bne.n	80016ea <SyncBlockTable::GetHashCode#5131+0x2e>
 80016d6:	6820      	ldr	r0, [r4, #0]
 80016d8:	f64f 4100 	movw	r1, #64512	; 0xfc00
 80016dc:	f2c0 01ff 	movt	r1, #255	; 0xff
 80016e0:	4008      	ands	r0, r1
 80016e2:	0a87      	lsrs	r7, r0, #10
 80016e4:	4638      	mov	r0, r7
 80016e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016ea:	0a00      	lsrs	r0, r0, #8
 80016ec:	bbb0      	cbnz	r0, 800175c <SyncBlockTable::GetHashCode#5131+0xa0>
 80016ee:	483c      	ldr	r0, [pc, #240]	; (80017e0 <SyncBlockTable::GetHashCode#5131+0x124>)
 80016f0:	493c      	ldr	r1, [pc, #240]	; (80017e4 <SyncBlockTable::GetHashCode#5131+0x128>)
 80016f2:	4478      	add	r0, pc
 80016f4:	180d      	adds	r5, r1, r0
            {
                case ObjectHeader.ExtensionKinds.HashCode:
                    return oh.Payload;

                case ObjectHeader.ExtensionKinds.Empty:
                    using(var hnd = new SmartHandles.YieldLockHolder( Instance.Lock ))
 80016f6:	f002 faef 	bl	8003cd8 <SyncBlockTable::get_Lock#5140>
 80016fa:	f8d5 5108 	ldr.w	r5, [r5, #264]	; 0x108
 80016fe:	4606      	mov	r6, r0
 8001700:	2d00      	cmp	r5, #0
 8001702:	d003      	beq.n	800170c <SyncBlockTable::GetHashCode#5131+0x50>
 8001704:	d067      	beq.n	80017d6 <SyncBlockTable::GetHashCode#5131+0x11a>
 8001706:	f8d5 8010 	ldr.w	r8, [r5, #16]
 800170a:	e001      	b.n	8001710 <SyncBlockTable::GetHashCode#5131+0x54>
 800170c:	f04f 0802 	mov.w	r8, #2
 8001710:	2e00      	cmp	r6, #0
 8001712:	d060      	beq.n	80017d6 <SyncBlockTable::GetHashCode#5131+0x11a>
 8001714:	4630      	mov	r0, r6
 8001716:	4629      	mov	r1, r5
 8001718:	f002 faf4 	bl	8003d04 <YieldLock::Acquire#5617>
 800171c:	2c00      	cmp	r4, #0
 800171e:	d05a      	beq.n	80017d6 <SyncBlockTable::GetHashCode#5131+0x11a>
 8001720:	7820      	ldrb	r0, [r4, #0]
 8001722:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8001726:	2000      	movs	r0, #0
 8001728:	2904      	cmp	r1, #4
 800172a:	f04f 0100 	mov.w	r1, #0
 800172e:	bf08      	it	eq
 8001730:	2101      	moveq	r1, #1
 8001732:	b929      	cbnz	r1, 8001740 <SyncBlockTable::GetHashCode#5131+0x84>
 8001734:	6821      	ldr	r1, [r4, #0]
 8001736:	f401 7140 	and.w	r1, r1, #768	; 0x300
                        if(oh.IsImmutable == false)
                        {
                            //
                            // Check again, under lock, in case we had a race condition.
                            //
                            if(oh.ExtensionKind == ObjectHeader.ExtensionKinds.Empty)
 800173a:	ebb0 2f11 	cmp.w	r0, r1, lsr #8
 800173e:	d02c      	beq.n	800179a <SyncBlockTable::GetHashCode#5131+0xde>
                                oh.UpdateExtension( ObjectHeader.ExtensionKinds.HashCode, hashCode );

                                return hashCode;
                            }
                        }
                    }
 8001740:	2e00      	cmp	r6, #0
 8001742:	d048      	beq.n	80017d6 <SyncBlockTable::GetHashCode#5131+0x11a>
 8001744:	4630      	mov	r0, r6
 8001746:	4629      	mov	r1, r5
 8001748:	f002 fb04 	bl	8003d54 <YieldLock::Release#5618>
 800174c:	2d00      	cmp	r5, #0
 800174e:	bf1c      	itt	ne
 8001750:	6928      	ldrne	r0, [r5, #16]
 8001752:	4540      	cmpne	r0, r8
 8001754:	d002      	beq.n	800175c <SyncBlockTable::GetHashCode#5131+0xa0>
 8001756:	b3f5      	cbz	r5, 80017d6 <SyncBlockTable::GetHashCode#5131+0x11a>
 8001758:	f8c5 8010 	str.w	r8, [r5, #16]
        //--//

        [Inline]
        private static int AssignSyncBlock( object obj )
        {
            BugCheck.Assert(null != obj, BugCheck.StopCode.SyncBlockCorruption);
 800175c:	2c00      	cmp	r4, #0
 800175e:	4620      	mov	r0, r4
 8001760:	bf18      	it	ne
 8001762:	2001      	movne	r0, #1
 8001764:	b3c8      	cbz	r0, 80017da <SyncBlockTable::GetHashCode#5131+0x11e>
 8001766:	6820      	ldr	r0, [r4, #0]

            ObjectHeader oh = ObjectHeader.Unpack( obj );

            if(oh.ExtensionKind == ObjectHeader.ExtensionKinds.SyncBlock)
 8001768:	2102      	movs	r1, #2
 800176a:	f400 7040 	and.w	r0, r0, #768	; 0x300
 800176e:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
 8001772:	d107      	bne.n	8001784 <SyncBlockTable::GetHashCode#5131+0xc8>
 8001774:	6820      	ldr	r0, [r4, #0]
 8001776:	f64f 4100 	movw	r1, #64512	; 0xfc00
 800177a:	f2c0 01ff 	movt	r1, #255	; 0xff
 800177e:	4008      	ands	r0, r1
 8001780:	0a80      	lsrs	r0, r0, #10
 8001782:	e002      	b.n	800178a <SyncBlockTable::GetHashCode#5131+0xce>
            {
                return oh.Payload;
            }

            return Instance.AssignSyncBlockSlow( obj );
 8001784:	4620      	mov	r0, r4
 8001786:	f002 fb31 	bl	8003dec <SyncBlockTable::AssignSyncBlockSlow#5134>

            //--//

            int idx = AssignSyncBlock( target );

            hashCode = Instance.GetHashCode( idx );
 800178a:	f002 fb09 	bl	8003da0 <SyncBlockTable::GetHashCode#5135>
 800178e:	4607      	mov	r7, r0

            GC.KeepAlive( target );
 8001790:	f002 fb2a 	bl	8003de8 <GC::KeepAlive#4163>
 8001794:	4638      	mov	r0, r7
 8001796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800179a:	4813      	ldr	r0, [pc, #76]	; (80017e8 <SyncBlockTable::GetHashCode#5131+0x12c>)
                            //
                            // Check again, under lock, in case we had a race condition.
                            //
                            if(oh.ExtensionKind == ObjectHeader.ExtensionKinds.Empty)
                            {
                                hashCode = Instance.m_uniqueHashCode++;
 800179c:	4913      	ldr	r1, [pc, #76]	; (80017ec <SyncBlockTable::GetHashCode#5131+0x130>)
 800179e:	4478      	add	r0, pc
 80017a0:	4408      	add	r0, r1
 80017a2:	6947      	ldr	r7, [r0, #20]
 80017a4:	1c79      	adds	r1, r7, #1

                                oh.UpdateExtension( ObjectHeader.ExtensionKinds.HashCode, hashCode );
 80017a6:	463a      	mov	r2, r7
 80017a8:	6141      	str	r1, [r0, #20]
 80017aa:	4620      	mov	r0, r4
 80017ac:	2101      	movs	r1, #1
 80017ae:	f001 fb90 	bl	8002ed2 <ObjectHeader::UpdateExtension#3488>
 80017b2:	b186      	cbz	r6, 80017d6 <SyncBlockTable::GetHashCode#5131+0x11a>
 80017b4:	4630      	mov	r0, r6
 80017b6:	4629      	mov	r1, r5
 80017b8:	f002 facc 	bl	8003d54 <YieldLock::Release#5618>
 80017bc:	2d00      	cmp	r5, #0
 80017be:	bf1c      	itt	ne
 80017c0:	6928      	ldrne	r0, [r5, #16]
 80017c2:	4540      	cmpne	r0, r8
 80017c4:	f43f af8e 	beq.w	80016e4 <SyncBlockTable::GetHashCode#5131+0x28>
 80017c8:	2d00      	cmp	r5, #0
 80017ca:	bf1e      	ittt	ne
 80017cc:	f8c5 8010 	strne.w	r8, [r5, #16]
 80017d0:	4638      	movne	r0, r7
 80017d2:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
                    return oh.Payload;

                case ObjectHeader.ExtensionKinds.Empty:
                    using(var hnd = new SmartHandles.YieldLockHolder( Instance.Lock ))
                    {
                        if(oh.IsImmutable == false)
 80017d6:	f7fe fe47 	bl	8000468 <Thread::ThrowNullException#4411>
 80017da:	2007      	movs	r0, #7
 80017dc:	f7fe fd66 	bl	80002ac <BugCheck::Raise#5282>
 80017e0:	17fff422 	.word	0x17fff422
 80017e4:	fffffcf8 	.word	0xfffffcf8
 80017e8:	17fff376 	.word	0x17fff376
 80017ec:	fffffe98 	.word	0xfffffe98

080017f0 <RuntimeType::get_TypeHandle#2645>:

        public override RuntimeTypeHandle TypeHandle
        {
            get
            {
                return m_handle;
 80017f0:	6880      	ldr	r0, [r0, #8]
 80017f2:	4770      	bx	lr

080017f4 <RuntimeType::get_UnderlyingSystemType#2648>:
 80017f4:	4770      	bx	lr

080017f6 <RuntimeType::ToString#2658>:
#endif
////    }
    
        public override String ToString()
        {
            return this.Name;
 80017f6:	b580      	push	{r7, lr}
 80017f8:	f7ff ff3e 	bl	8001678 <RuntimeType::get_Name#3459>
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)

08001800 <TypeRepresentation::get_FullName#16179>:
        //--//

        public string FullName
        {
            get
            {
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	490e      	ldr	r1, [pc, #56]	; (800183c <TypeRepresentation::get_FullName#16179+0x3c>)
 8001804:	4604      	mov	r4, r0
                System.Text.StringBuilder sb = new System.Text.StringBuilder();
 8001806:	480e      	ldr	r0, [pc, #56]	; (8001840 <TypeRepresentation::get_FullName#16179+0x40>)
 8001808:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <TypeRepresentation::get_FullName#16179+0x44>)
 800180a:	4479      	add	r1, pc
 800180c:	4408      	add	r0, r1
 800180e:	4411      	add	r1, r2
 8001810:	f7ff f840 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8001814:	2110      	movs	r1, #16
 8001816:	4605      	mov	r5, r0
 8001818:	f000 f9f0 	bl	8001bfc <StringBuilder::.ctor#9219>
 800181c:	b164      	cbz	r4, 8001838 <TypeRepresentation::get_FullName#16179+0x38>
 800181e:	6860      	ldr	r0, [r4, #4]

                PrettyToString( sb, false, false );
 8001820:	4629      	mov	r1, r5
 8001822:	2200      	movs	r2, #0
 8001824:	2300      	movs	r3, #0
 8001826:	69c0      	ldr	r0, [r0, #28]
 8001828:	f8d0 c02c 	ldr.w	ip, [r0, #44]	; 0x2c
 800182c:	4620      	mov	r0, r4
 800182e:	47e0      	blx	ip

                return sb.ToString();
 8001830:	4628      	mov	r0, r5
 8001832:	f000 f9bf 	bl	8001bb4 <StringBuilder::ToString#9230>
 8001836:	bdb0      	pop	{r4, r5, r7, pc}

        public string FullName
        {
            get
            {
                System.Text.StringBuilder sb = new System.Text.StringBuilder();
 8001838:	f7fe fe16 	bl	8000468 <Thread::ThrowNullException#4411>
 800183c:	17fff30a 	.word	0x17fff30a
 8001840:	fffffe0c 	.word	0xfffffe0c
 8001844:	e8019718 	.word	0xe8019718

08001848 <VTable::ToString#4060>:
        //
        // Debug Methods
        //

        public override string ToString()
        {
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	490a      	ldr	r1, [pc, #40]	; (8001874 <VTable::ToString#4060+0x2c>)
 800184c:	4604      	mov	r4, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
 800184e:	480a      	ldr	r0, [pc, #40]	; (8001878 <VTable::ToString#4060+0x30>)
 8001850:	4a0a      	ldr	r2, [pc, #40]	; (800187c <VTable::ToString#4060+0x34>)
 8001852:	4479      	add	r1, pc
 8001854:	4408      	add	r0, r1
 8001856:	4411      	add	r1, r2
 8001858:	f7ff f81c 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 800185c:	2110      	movs	r1, #16
 800185e:	4605      	mov	r5, r0
 8001860:	f000 f9cc 	bl	8001bfc <StringBuilder::.ctor#9219>

            sb.AppendFormat( "VTable({0})", this.TypeInfo );
 8001864:	6921      	ldr	r1, [r4, #16]
 8001866:	4628      	mov	r0, r5
 8001868:	f002 f8f4 	bl	8003a54 <StringBuilder::AppendFormat#9281>

            return sb.ToString();
 800186c:	4628      	mov	r0, r5
 800186e:	f000 f9a1 	bl	8001bb4 <StringBuilder::ToString#9230>
 8001872:	bdb0      	pop	{r4, r5, r7, pc}
 8001874:	17fff2c2 	.word	0x17fff2c2
 8001878:	fffffe0c 	.word	0xfffffe0c
 800187c:	e8019718 	.word	0xe8019718

08001880 <String::EqualsHelper#2842>:
        //

////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.MayFail )]
        private unsafe static bool EqualsHelper( String strA, String strB )
        {
            int length = strA.Length;
 8001880:	b580      	push	{r7, lr}
 8001882:	2800      	cmp	r0, #0
            if(length != strB.Length) return false;
 8001884:	bf18      	it	ne
 8001886:	2900      	cmpne	r1, #0
 8001888:	d01e      	beq.n	80018c8 <String::EqualsHelper#2842+0x48>

        public int Length
        {
            get
            {
                return m_stringLength;
 800188a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800188e:	68cb      	ldr	r3, [r1, #12]

////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.MayFail )]
        private unsafe static bool EqualsHelper( String strA, String strB )
        {
            int length = strA.Length;
            if(length != strB.Length) return false;
 8001890:	459c      	cmp	ip, r3
 8001892:	bf1c      	itt	ne
 8001894:	2000      	movne	r0, #0
 8001896:	bd80      	popne	{r7, pc}

            fixed(char* ap = strA) fixed(char* bp = strB)
 8001898:	3110      	adds	r1, #16
 800189a:	3010      	adds	r0, #16
 800189c:	e003      	b.n	80018a6 <String::EqualsHelper#2842+0x26>
                // the last compare will include the zero terminator.
                while(length > 0)
                {
                    if(*(int*)a != *(int*)b) break;

                    a += 2; b += 2; length -= 2;
 800189e:	f1ac 0c02 	sub.w	ip, ip, #2
 80018a2:	3104      	adds	r1, #4
 80018a4:	3004      	adds	r0, #4
                char* b = bp;

                // This depends on the fact that the String objects are always zero terminated and
                // that the terminating zero is not included in the length. For odd string sizes,
                // the last compare will include the zero terminator.
                while(length > 0)
 80018a6:	f1bc 0f01 	cmp.w	ip, #1
 80018aa:	db07      	blt.n	80018bc <String::EqualsHelper#2842+0x3c>
                {
                    if(*(int*)a != *(int*)b) break;
 80018ac:	2800      	cmp	r0, #0
 80018ae:	bf18      	it	ne
 80018b0:	2900      	cmpne	r1, #0
 80018b2:	d009      	beq.n	80018c8 <String::EqualsHelper#2842+0x48>
 80018b4:	6803      	ldr	r3, [r0, #0]
 80018b6:	680a      	ldr	r2, [r1, #0]
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d0f0      	beq.n	800189e <String::EqualsHelper#2842+0x1e>

                    a += 2; b += 2; length -= 2;
                }

                return (length <= 0);
 80018bc:	2000      	movs	r0, #0
 80018be:	f1bc 0f01 	cmp.w	ip, #1
 80018c2:	bfb8      	it	lt
 80018c4:	2001      	movlt	r0, #1
 80018c6:	bd80      	pop	{r7, pc}
        //

////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.MayFail )]
        private unsafe static bool EqualsHelper( String strA, String strB )
        {
            int length = strA.Length;
 80018c8:	f7fe fdce 	bl	8000468 <Thread::ThrowNullException#4411>

080018cc <String::Equals#2844>:
        }

        // Determines whether two strings match.
////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.MayFail )]
        public override bool Equals( Object obj )
        {
 80018cc:	b510      	push	{r4, lr}
 80018ce:	4604      	mov	r4, r0
 80018d0:	4808      	ldr	r0, [pc, #32]	; (80018f4 <String::Equals#2844+0x28>)
            String str = obj as String;
 80018d2:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <String::Equals#2844+0x2c>)
 80018d4:	4478      	add	r0, pc
 80018d6:	4402      	add	r2, r0
 80018d8:	4608      	mov	r0, r1
 80018da:	4611      	mov	r1, r2
 80018dc:	f7ff f9be 	bl	8000c5c <TypeSystemManager::CastToSealedTypeNoThrow#5593>
 80018e0:	4601      	mov	r1, r0
 80018e2:	b919      	cbnz	r1, 80018ec <String::Equals#2844+0x20>
 80018e4:	2c00      	cmp	r4, #0
 80018e6:	bf1c      	itt	ne
 80018e8:	2000      	movne	r0, #0
 80018ea:	bd10      	popne	{r4, pc}
            {
                // exception will be thrown later for null this
                if(this != null) return false;
            }

            return EqualsHelper( this, str );
 80018ec:	4620      	mov	r0, r4
 80018ee:	f7ff ffc7 	bl	8001880 <String::EqualsHelper#2842>
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	17fff240 	.word	0x17fff240
 80018f8:	e80196b8 	.word	0xe80196b8

080018fc <String::ToString#2922>:
 80018fc:	4770      	bx	lr

080018fe <String::GetHashCode#2856>:
////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.MayFail )]
        public override int GetHashCode()
        {
            unsafe
            {
                fixed(char* src = this)
 80018fe:	b580      	push	{r7, lr}

        public int Length
        {
            get
            {
                return m_stringLength;
 8001900:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8001904:	f241 5105 	movw	r1, #5381	; 0x1505
////    [ReliabilityContract( Consistency.WillNotCorruptState, Cer.MayFail )]
        public override int GetHashCode()
        {
            unsafe
            {
                fixed(char* src = this)
 8001908:	2800      	cmp	r0, #0
 800190a:	f2c1 5105 	movt	r1, #5381	; 0x1505
 800190e:	bf18      	it	ne
 8001910:	3010      	addne	r0, #16
 8001912:	468c      	mov	ip, r1
 8001914:	e009      	b.n	800192a <String::GetHashCode#2856+0x2c>
                        if(len <= 2)
                        {
                            break;
                        }

                        hash2 = ((hash2 << 5) + hash2 + (hash2 >> 27)) ^ pint[1];
 8001916:	6843      	ldr	r3, [r0, #4]
 8001918:	eb0c 124c 	add.w	r2, ip, ip, lsl #5
                        pint += 2;
                        len  -= 4;
 800191c:	f1ae 0e04 	sub.w	lr, lr, #4
                        {
                            break;
                        }

                        hash2 = ((hash2 << 5) + hash2 + (hash2 >> 27)) ^ pint[1];
                        pint += 2;
 8001920:	3008      	adds	r0, #8
                        if(len <= 2)
                        {
                            break;
                        }

                        hash2 = ((hash2 << 5) + hash2 + (hash2 >> 27)) ^ pint[1];
 8001922:	eb02 62ec 	add.w	r2, r2, ip, asr #27
 8001926:	ea82 0c03 	eor.w	ip, r2, r3
#if !WIN64
                    // 32bit machines.
                    int* pint = (int *)src;
                    int  len  =        this.Length;

                    while(len > 0)
 800192a:	f1be 0f01 	cmp.w	lr, #1
 800192e:	db0f      	blt.n	8001950 <String::GetHashCode#2856+0x52>
 8001930:	b160      	cbz	r0, 800194c <String::GetHashCode#2856+0x4e>
                    {
                        hash1 = ((hash1 << 5) + hash1 + (hash1 >> 27)) ^ pint[0];
 8001932:	eb01 1241 	add.w	r2, r1, r1, lsl #5
                        if(len <= 2)
 8001936:	f1be 0f03 	cmp.w	lr, #3
                    int* pint = (int *)src;
                    int  len  =        this.Length;

                    while(len > 0)
                    {
                        hash1 = ((hash1 << 5) + hash1 + (hash1 >> 27)) ^ pint[0];
 800193a:	eb02 61e1 	add.w	r1, r2, r1, asr #27
 800193e:	6802      	ldr	r2, [r0, #0]
 8001940:	ea81 0102 	eor.w	r1, r1, r2
 8001944:	db04      	blt.n	8001950 <String::GetHashCode#2856+0x52>
                        if(len <= 2)
                        {
                            break;
                        }

                        hash2 = ((hash2 << 5) + hash2 + (hash2 >> 27)) ^ pint[1];
 8001946:	f110 0f04 	cmn.w	r0, #4
 800194a:	d1e4      	bne.n	8001916 <String::GetHashCode#2856+0x18>
                    int* pint = (int *)src;
                    int  len  =        this.Length;

                    while(len > 0)
                    {
                        hash1 = ((hash1 << 5) + hash1 + (hash1 >> 27)) ^ pint[0];
 800194c:	f7fe fd8c 	bl	8000468 <Thread::ThrowNullException#4411>
////                    // This is perfectly fine as long as you don't persist the
////                    // value from GetHashCode to disk or count on String A
////                    // hashing before string B.  Those are bugs in your code.
////                    hash1 ^= ThisAssembly.DailyBuildNumber;
////#endif
                    return hash1 + (hash2 * 1566083941);
 8001950:	f648 3065 	movw	r0, #35685	; 0x8b65
 8001954:	f6c5 5058 	movt	r0, #23896	; 0x5d58
 8001958:	fb0c 1000 	mla	r0, ip, r0, r1
 800195c:	bd80      	pop	{r7, pc}

0800195e <String::Equals#2847>:
        }


        // Determines whether two Strings match.
        public static bool Equals( String a, String b )
        {
 800195e:	b580      	push	{r7, lr}
 8001960:	4602      	mov	r2, r0
            if((Object)a == (Object)b)
 8001962:	428a      	cmp	r2, r1
 8001964:	bf04      	itt	eq
 8001966:	2001      	moveq	r0, #1
 8001968:	bd80      	popeq	{r7, pc}
 800196a:	2000      	movs	r0, #0
            {
                return true;
            }

            if((Object)a == null || (Object)b == null)
 800196c:	2a00      	cmp	r2, #0
 800196e:	bf08      	it	eq
 8001970:	bd80      	popeq	{r7, pc}
 8001972:	2900      	cmp	r1, #0
            {
                return false;
            }

            return EqualsHelper( a, b );
 8001974:	bf1c      	itt	ne
 8001976:	4610      	movne	r0, r2
 8001978:	f7ff ff82 	blne	8001880 <String::EqualsHelper#2842>
 800197c:	bd80      	pop	{r7, pc}
 800197e:	46c0      	nop			; (mov r8, r8)

08001980 <String::ToCharArray#2854>:
        }

        // Returns a substring of this string as an array of characters.
        //
        unsafe public char[] ToCharArray( int startIndex, int length )
        {
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	4605      	mov	r5, r0
 8001984:	460c      	mov	r4, r1

        public int Length
        {
            get
            {
                return m_stringLength;
 8001986:	68e8      	ldr	r0, [r5, #12]
        // Returns a substring of this string as an array of characters.
        //
        unsafe public char[] ToCharArray( int startIndex, int length )
        {
            // Range check everything.
            if(startIndex < 0 || startIndex > Length || startIndex > Length - length)
 8001988:	f1b0 3fff 	cmp.w	r0, #4294967295
 800198c:	dd21      	ble.n	80019d2 <String::ToCharArray#2854+0x52>

        public int Length
        {
            get
            {
                return m_stringLength;
 800198e:	68e8      	ldr	r0, [r5, #12]
        // Returns a substring of this string as an array of characters.
        //
        unsafe public char[] ToCharArray( int startIndex, int length )
        {
            // Range check everything.
            if(startIndex < 0 || startIndex > Length || startIndex > Length - length)
 8001990:	1b00      	subs	r0, r0, r4
 8001992:	2800      	cmp	r0, #0
 8001994:	db1d      	blt.n	80019d2 <String::ToCharArray#2854+0x52>
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

            if(length < 0)
 8001996:	f1b4 3fff 	cmp.w	r4, #4294967295
 800199a:	dd1d      	ble.n	80019d8 <String::ToCharArray#2854+0x58>
 800199c:	4917      	ldr	r1, [pc, #92]	; (80019fc <String::ToCharArray#2854+0x7c>)
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

            char[] chars = new char[length];
 800199e:	4818      	ldr	r0, [pc, #96]	; (8001a00 <String::ToCharArray#2854+0x80>)
 80019a0:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <String::ToCharArray#2854+0x84>)
 80019a2:	4479      	add	r1, pc
 80019a4:	4408      	add	r0, r1
 80019a6:	4411      	add	r1, r2
 80019a8:	4622      	mov	r2, r4
 80019aa:	f000 f833 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 80019ae:	4606      	mov	r6, r0
            if(length > 0)
 80019b0:	2c01      	cmp	r4, #1
 80019b2:	db0c      	blt.n	80019ce <String::ToCharArray#2854+0x4e>
            {
                fixed(char* src = &this.m_firstChar)
 80019b4:	68b0      	ldr	r0, [r6, #8]
 80019b6:	b120      	cbz	r0, 80019c2 <String::ToCharArray#2854+0x42>
                {
                    fixed(char* dest = chars)
 80019b8:	68b0      	ldr	r0, [r6, #8]
 80019ba:	b1e0      	cbz	r0, 80019f6 <String::ToCharArray#2854+0x76>
 80019bc:	f106 010c 	add.w	r1, r6, #12
 80019c0:	e000      	b.n	80019c4 <String::ToCharArray#2854+0x44>
 80019c2:	2100      	movs	r1, #0
            }

            char[] chars = new char[length];
            if(length > 0)
            {
                fixed(char* src = &this.m_firstChar)
 80019c4:	f105 0010 	add.w	r0, r5, #16
                {
                    fixed(char* dest = chars)
                    {
                        Buffer.InternalMemoryCopy( src + startIndex, dest, length );
 80019c8:	4622      	mov	r2, r4
 80019ca:	f000 f83f 	bl	8001a4c <Buffer::InternalMemoryCopy#4104>
 80019ce:	4630      	mov	r0, r6
 80019d0:	bd70      	pop	{r4, r5, r6, pc}
 80019d2:	480f      	ldr	r0, [pc, #60]	; (8001a10 <String::ToCharArray#2854+0x90>)
 80019d4:	4478      	add	r0, pc
 80019d6:	e001      	b.n	80019dc <String::ToCharArray#2854+0x5c>
 80019d8:	480b      	ldr	r0, [pc, #44]	; (8001a08 <String::ToCharArray#2854+0x88>)
 80019da:	4478      	add	r0, pc
            if(startIndex < 0 || startIndex > Length || startIndex > Length - length)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "startIndex", Environment.GetResourceString( "ArgumentOutOfRange_Index" ) );
#else
                throw new ArgumentOutOfRangeException();
 80019dc:	4908      	ldr	r1, [pc, #32]	; (8001a00 <String::ToCharArray#2854+0x80>)
 80019de:	180c      	adds	r4, r1, r0
 80019e0:	490a      	ldr	r1, [pc, #40]	; (8001a0c <String::ToCharArray#2854+0x8c>)
 80019e2:	4401      	add	r1, r0
 80019e4:	4620      	mov	r0, r4
 80019e6:	f7fe ff55 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80019ea:	4601      	mov	r1, r0
 80019ec:	2000      	movs	r0, #0
 80019ee:	6088      	str	r0, [r1, #8]
 80019f0:	4620      	mov	r0, r4
 80019f2:	f7fe ff65 	bl	80008c0 <TypeSystemManager::Throw#5596>
            char[] chars = new char[length];
            if(length > 0)
            {
                fixed(char* src = &this.m_firstChar)
                {
                    fixed(char* dest = chars)
 80019f6:	f7ff fa5b 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	17fff172 	.word	0x17fff172
 8001a00:	fffffe0c 	.word	0xfffffe0c
 8001a04:	e80196e8 	.word	0xe80196e8
 8001a08:	17fff13a 	.word	0x17fff13a
 8001a0c:	e8019568 	.word	0xe8019568
 8001a10:	17fff140 	.word	0x17fff140

08001a14 <DefaultTypeSystemManager::AllocateArray#5605>:
        }

        [NoInline]
        public override Array AllocateArray( TS.VTable vTable ,
                                             uint      length )
        {
 8001a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a16:	b081      	sub	sp, #4
 8001a18:	460d      	mov	r5, r1
 8001a1a:	4614      	mov	r4, r2
            uint    size = ComputeArraySize( vTable, length );
 8001a1c:	4628      	mov	r0, r5
 8001a1e:	4621      	mov	r1, r4
 8001a20:	f003 fa76 	bl	8004f10 <DefaultTypeSystemManager::ComputeArraySize#5611>
 8001a24:	4607      	mov	r7, r0
            UIntPtr ptr  = AllocateInner   ( vTable, size   );
 8001a26:	f003 fa4b 	bl	8004ec0 <DefaultTypeSystemManager::AllocateInner#5612>
 8001a2a:	4639      	mov	r1, r7
 8001a2c:	4606      	mov	r6, r0
 8001a2e:	f009 fd61 	bl	800b4f4 <__aeabi_memclr>
 8001a32:	2e00      	cmp	r6, #0
 8001a34:	bf1e      	ittt	ne
 8001a36:	2008      	movne	r0, #8
 8001a38:	e9c6 0500 	strdne	r0, r5, [r6]
 8001a3c:	2e00      	cmpne	r6, #0
 8001a3e:	d003      	beq.n	8001a48 <DefaultTypeSystemManager::AllocateArray#5605+0x34>
 8001a40:	60b4      	str	r4, [r6, #8]
 8001a42:	4630      	mov	r0, r6
 8001a44:	b001      	add	sp, #4
 8001a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a48:	f7fe fd0e 	bl	8000468 <Thread::ThrowNullException#4411>

08001a4c <Buffer::InternalMemoryCopy#4104>:

        [DisableNullChecks]
        internal unsafe static void InternalMemoryCopy( ushort* src   ,
                                                        ushort* dst   ,
                                                        int     count )
        {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4608      	mov	r0, r1
#if LLVM
            InternalMemoryCopy((byte*)src, (byte*)dst, count * sizeof(ushort));
 8001a52:	0052      	lsls	r2, r2, #1
 8001a54:	4619      	mov	r1, r3
 8001a56:	f009 fd50 	bl	800b4fa <__aeabi_memcpy>
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <DefaultTypeSystemManager::AllocateString#5608>:
        }

        [NoInline]
        public override String AllocateString( TS.VTable vTable ,
                                               int       length )
        {
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	b081      	sub	sp, #4
 8001a60:	460d      	mov	r5, r1
 8001a62:	4614      	mov	r4, r2
            uint    size = ComputeArraySize( vTable, (uint)length );
 8001a64:	4628      	mov	r0, r5
 8001a66:	4621      	mov	r1, r4
 8001a68:	f003 fa52 	bl	8004f10 <DefaultTypeSystemManager::ComputeArraySize#5611>
 8001a6c:	4607      	mov	r7, r0
            UIntPtr ptr  = AllocateInner   ( vTable,       size   );
 8001a6e:	f003 fa27 	bl	8004ec0 <DefaultTypeSystemManager::AllocateInner#5612>
 8001a72:	4639      	mov	r1, r7
 8001a74:	4606      	mov	r6, r0
 8001a76:	f009 fd3d 	bl	800b4f4 <__aeabi_memclr>
 8001a7a:	2e00      	cmp	r6, #0
 8001a7c:	bf1e      	ittt	ne
 8001a7e:	2008      	movne	r0, #8
 8001a80:	e9c6 0500 	strdne	r0, r5, [r6]
 8001a84:	2e00      	cmpne	r6, #0
 8001a86:	d003      	beq.n	8001a90 <DefaultTypeSystemManager::AllocateString#5608+0x34>
 8001a88:	60b4      	str	r4, [r6, #8]
 8001a8a:	4630      	mov	r0, r6
 8001a8c:	b001      	add	sp, #4
 8001a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a90:	f7fe fcea 	bl	8000468 <Thread::ThrowNullException#4411>

08001a94 <String::FillStringChecked#2883>:
        [MethodImpl( MethodImplOptions.InternalCall )]
        private extern static String FastAllocateString( int length );

        unsafe private static void FillStringChecked( String dest, int destPos, String src )
        {
            int length = src.Length;
 8001a94:	b510      	push	{r4, lr}
 8001a96:	2a00      	cmp	r2, #0

            if(length > dest.Length - destPos)
 8001a98:	bf18      	it	ne
 8001a9a:	2800      	cmpne	r0, #0
 8001a9c:	d01d      	beq.n	8001ada <String::FillStringChecked#2883+0x46>

        public int Length
        {
            get
            {
                return m_stringLength;
 8001a9e:	68c4      	ldr	r4, [r0, #12]
 8001aa0:	68d3      	ldr	r3, [r2, #12]

        unsafe private static void FillStringChecked( String dest, int destPos, String src )
        {
            int length = src.Length;

            if(length > dest.Length - destPos)
 8001aa2:	1a64      	subs	r4, r4, r1
 8001aa4:	42a3      	cmp	r3, r4
 8001aa6:	dc09      	bgt.n	8001abc <String::FillStringChecked#2883+0x28>
            {
                throw new IndexOutOfRangeException();
            }

            fixed(char* pDest = &dest.m_firstChar)
 8001aa8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
            {
                fixed(char* pSrc = &src.m_firstChar)
                {
                    Buffer.InternalMemoryCopy( pSrc, pDest + destPos, length );
 8001aac:	f100 0110 	add.w	r1, r0, #16
                throw new IndexOutOfRangeException();
            }

            fixed(char* pDest = &dest.m_firstChar)
            {
                fixed(char* pSrc = &src.m_firstChar)
 8001ab0:	f102 0010 	add.w	r0, r2, #16
                {
                    Buffer.InternalMemoryCopy( pSrc, pDest + destPos, length );
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	f7ff ffc9 	bl	8001a4c <Buffer::InternalMemoryCopy#4104>
 8001aba:	bd10      	pop	{r4, pc}
 8001abc:	4808      	ldr	r0, [pc, #32]	; (8001ae0 <String::FillStringChecked#2883+0x4c>)
        {
            int length = src.Length;

            if(length > dest.Length - destPos)
            {
                throw new IndexOutOfRangeException();
 8001abe:	4909      	ldr	r1, [pc, #36]	; (8001ae4 <String::FillStringChecked#2883+0x50>)
 8001ac0:	4478      	add	r0, pc
 8001ac2:	180c      	adds	r4, r1, r0
 8001ac4:	4908      	ldr	r1, [pc, #32]	; (8001ae8 <String::FillStringChecked#2883+0x54>)
 8001ac6:	4401      	add	r1, r0
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f7fe fee3 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8001ace:	4601      	mov	r1, r0
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	6088      	str	r0, [r1, #8]
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f7fe fef3 	bl	80008c0 <TypeSystemManager::Throw#5596>
        [MethodImpl( MethodImplOptions.InternalCall )]
        private extern static String FastAllocateString( int length );

        unsafe private static void FillStringChecked( String dest, int destPos, String src )
        {
            int length = src.Length;
 8001ada:	f7fe fcc5 	bl	8000468 <Thread::ThrowNullException#4411>
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	17fff054 	.word	0x17fff054
 8001ae4:	fffffe0c 	.word	0xfffffe0c
 8001ae8:	e8019448 	.word	0xe8019448

08001aec <String::.ctor#4259>:
                                  int    length     )
        {
////        BCLDebug.Assert( startIndex >= 0 && startIndex <= this.Length         , "StartIndex is out of range!" );
////        BCLDebug.Assert( length     >= 0 && startIndex <= this.Length - length, "length is out of range!"     );

            if(length     < 0 ||               length  > m_stringLength ||
 8001aec:	b580      	push	{r7, lr}
 8001aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af2:	dd1e      	ble.n	8001b32 <String::.ctor#4259+0x46>
 8001af4:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8001af8:	4563      	cmp	r3, ip
 8001afa:	dc1a      	bgt.n	8001b32 <String::.ctor#4259+0x46>
 8001afc:	2a00      	cmp	r2, #0
 8001afe:	db18      	blt.n	8001b32 <String::.ctor#4259+0x46>
 8001b00:	b1c9      	cbz	r1, 8001b36 <String::.ctor#4259+0x4a>
 8001b02:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8001b06:	eb02 0c03 	add.w	ip, r2, r3
 8001b0a:	45f4      	cmp	ip, lr
 8001b0c:	dc11      	bgt.n	8001b32 <String::.ctor#4259+0x46>
               startIndex < 0 || (startIndex + length) > value.Length   )
            {
                ThreadImpl.ThrowIndexOutOfRangeException();
            }

            if(length > 0)
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	bfd8      	it	le
 8001b12:	bd80      	pople	{r7, pc}
 8001b14:	b179      	cbz	r1, 8001b36 <String::.ctor#4259+0x4a>
            {
                fixed(char* dest = &this.m_firstChar)
                {
                    fixed(char* src = &value[startIndex])
 8001b16:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8001b1a:	4562      	cmp	r2, ip
 8001b1c:	d209      	bcs.n	8001b32 <String::.ctor#4259+0x46>
                ThreadImpl.ThrowIndexOutOfRangeException();
            }

            if(length > 0)
            {
                fixed(char* dest = &this.m_firstChar)
 8001b1e:	f100 0c10 	add.w	ip, r0, #16
                {
                    fixed(char* src = &value[startIndex])
 8001b22:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 8001b26:	461a      	mov	r2, r3
 8001b28:	300c      	adds	r0, #12
 8001b2a:	4661      	mov	r1, ip
 8001b2c:	f7ff ff8e 	bl	8001a4c <Buffer::InternalMemoryCopy#4104>
 8001b30:	bd80      	pop	{r7, pc}
////        BCLDebug.Assert( length     >= 0 && startIndex <= this.Length - length, "length is out of range!"     );

            if(length     < 0 ||               length  > m_stringLength ||
               startIndex < 0 || (startIndex + length) > value.Length   )
            {
                ThreadImpl.ThrowIndexOutOfRangeException();
 8001b32:	f7ff f9bd 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
                                  int    length     )
        {
////        BCLDebug.Assert( startIndex >= 0 && startIndex <= this.Length         , "StartIndex is out of range!" );
////        BCLDebug.Assert( length     >= 0 && startIndex <= this.Length - length, "length is out of range!"     );

            if(length     < 0 ||               length  > m_stringLength ||
 8001b36:	f7fe fc97 	bl	8000468 <Thread::ThrowNullException#4411>
 8001b3a:	46c0      	nop			; (mov r8, r8)

08001b3c <String::Format#2932>:
        {
            return Format( null, format, args );
        }

        public static String Format( IFormatProvider provider, String format, params Object[] args )
        {
 8001b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b40:	4605      	mov	r5, r0
 8001b42:	460c      	mov	r4, r1
            if(format == null || args == null)
 8001b44:	2d00      	cmp	r5, #0
 8001b46:	bf18      	it	ne
 8001b48:	2c00      	cmpne	r4, #0
 8001b4a:	d019      	beq.n	8001b80 <String::Format#2932+0x44>
 8001b4c:	4914      	ldr	r1, [pc, #80]	; (8001ba0 <String::Format#2932+0x64>)
#else
                throw new ArgumentNullException();
#endif
            }
    
            StringBuilder sb = new StringBuilder( format.Length + args.Length * 8 );
 8001b4e:	4815      	ldr	r0, [pc, #84]	; (8001ba4 <String::Format#2932+0x68>)
 8001b50:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <String::Format#2932+0x6c>)
 8001b52:	f8d4 8008 	ldr.w	r8, [r4, #8]

        public int Length
        {
            get
            {
                return m_stringLength;
 8001b56:	68ef      	ldr	r7, [r5, #12]
 8001b58:	4479      	add	r1, pc
#else
                throw new ArgumentNullException();
#endif
            }
    
            StringBuilder sb = new StringBuilder( format.Length + args.Length * 8 );
 8001b5a:	4408      	add	r0, r1
 8001b5c:	4411      	add	r1, r2
 8001b5e:	f7fe fe99 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8001b62:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001b66:	4606      	mov	r6, r0
 8001b68:	f000 f848 	bl	8001bfc <StringBuilder::.ctor#9219>
    
            sb.AppendFormat( provider, format, args );
 8001b6c:	4630      	mov	r0, r6
 8001b6e:	4629      	mov	r1, r5
 8001b70:	4622      	mov	r2, r4
 8001b72:	f000 f853 	bl	8001c1c <StringBuilder::AppendFormat#9286>
    
            return sb.ToString();
 8001b76:	4630      	mov	r0, r6
 8001b78:	f000 f81c 	bl	8001bb4 <StringBuilder::ToString#9230>
 8001b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b80:	480a      	ldr	r0, [pc, #40]	; (8001bac <String::Format#2932+0x70>)
            if(format == null || args == null)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentNullException( (format == null) ? "format" : "args" );
#else
                throw new ArgumentNullException();
 8001b82:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <String::Format#2932+0x68>)
 8001b84:	4478      	add	r0, pc
 8001b86:	180c      	adds	r4, r1, r0
 8001b88:	4909      	ldr	r1, [pc, #36]	; (8001bb0 <String::Format#2932+0x74>)
 8001b8a:	4401      	add	r1, r0
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	f7fe fe81 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8001b92:	4601      	mov	r1, r0
 8001b94:	2000      	movs	r0, #0
 8001b96:	6088      	str	r0, [r1, #8]
 8001b98:	4620      	mov	r0, r4
 8001b9a:	f7fe fe91 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	17ffefbc 	.word	0x17ffefbc
 8001ba4:	fffffe0c 	.word	0xfffffe0c
 8001ba8:	e8019718 	.word	0xe8019718
 8001bac:	17ffef90 	.word	0x17ffef90
 8001bb0:	e8019418 	.word	0xe8019418

08001bb4 <StringBuilder::ToString#9230>:
            ReplaceString( th, newString );
            return newString.Capacity;
        }

        public override String ToString()
        {
 8001bb4:	b5b0      	push	{r4, r5, r7, lr}
 8001bb6:	4605      	mov	r5, r0
 8001bb8:	480e      	ldr	r0, [pc, #56]	; (8001bf4 <StringBuilder::ToString#9230+0x40>)
            // A thread interleaving happens at this point.
            // (4) Thread T2 resumes execution.  T2 reads m_currentThread and sees that NOBODY is the registered owner
            //  Assuming its currentString is not wasting excessive space, T2 will return the same string that thread T1 is 
            //  in the middle of mutating.  
            //
            if(currentThread != Thread.CurrentThread)
 8001bba:	490f      	ldr	r1, [pc, #60]	; (8001bf8 <StringBuilder::ToString#9230+0x44>)
            // We assume that their read of m_currentThread will always occur after read of m_StringValue.  
            // If these reads get re-ordered then it is possible to get a currentString owned by some other 
            // (mutating) thread and yet think, according to currentThread, that such was not the case.
            // This is acheived by marking m_StringValue as volatile. 
            //
            String currentString = m_StringValue;
 8001bbc:	692c      	ldr	r4, [r5, #16]
 8001bbe:	4478      	add	r0, pc
            // A thread interleaving happens at this point.
            // (4) Thread T2 resumes execution.  T2 reads m_currentThread and sees that NOBODY is the registered owner
            //  Assuming its currentString is not wasting excessive space, T2 will return the same string that thread T1 is 
            //  in the middle of mutating.  
            //
            if(currentThread != Thread.CurrentThread)
 8001bc0:	4408      	add	r0, r1
            // If these reads get re-ordered then it is possible to get a currentString owned by some other 
            // (mutating) thread and yet think, according to currentThread, that such was not the case.
            // This is acheived by marking m_StringValue as volatile. 
            //
            String currentString = m_StringValue;
            Thread currentThread = m_currentThread;
 8001bc2:	68a9      	ldr	r1, [r5, #8]
            // A thread interleaving happens at this point.
            // (4) Thread T2 resumes execution.  T2 reads m_currentThread and sees that NOBODY is the registered owner
            //  Assuming its currentString is not wasting excessive space, T2 will return the same string that thread T1 is 
            //  in the middle of mutating.  
            //
            if(currentThread != Thread.CurrentThread)
 8001bc4:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8001bc8:	4281      	cmp	r1, r0
 8001bca:	d105      	bne.n	8001bd8 <StringBuilder::ToString#9230+0x24>
            {
                return String.InternalCopy( currentString );
            }

            if((2 * currentString.Length) < currentString.ArrayLength)
 8001bcc:	b17c      	cbz	r4, 8001bee <StringBuilder::ToString#9230+0x3a>
 8001bce:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8001bd2:	0049      	lsls	r1, r1, #1
 8001bd4:	4281      	cmp	r1, r0
 8001bd6:	da03      	bge.n	8001be0 <StringBuilder::ToString#9230+0x2c>
            //  Assuming its currentString is not wasting excessive space, T2 will return the same string that thread T1 is 
            //  in the middle of mutating.  
            //
            if(currentThread != Thread.CurrentThread)
            {
                return String.InternalCopy( currentString );
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f000 fa63 	bl	80020a4 <String::InternalCopy#2934>
 8001bde:	bdb0      	pop	{r4, r5, r7, pc}
            if((2 * currentString.Length) < currentString.ArrayLength)
            {
                return String.InternalCopy( currentString );
            }

            currentString.ClearPostNullChar();
 8001be0:	4620      	mov	r0, r4
 8001be2:	f000 fb49 	bl	8002278 <String::ClearPostNullChar#2975>
 8001be6:	2000      	movs	r0, #0
 8001be8:	60a8      	str	r0, [r5, #8]
 8001bea:	4620      	mov	r0, r4
 8001bec:	bdb0      	pop	{r4, r5, r7, pc}
            if(currentThread != Thread.CurrentThread)
            {
                return String.InternalCopy( currentString );
            }

            if((2 * currentString.Length) < currentString.ArrayLength)
 8001bee:	f7fe fc3b 	bl	8000468 <Thread::ThrowNullException#4411>
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	17ffef56 	.word	0x17ffef56
 8001bf8:	fffffcf8 	.word	0xfffffcf8

08001bfc <StringBuilder::.ctor#9219>:
        }

        // Create a new empty string builder (i.e., it represents String.Empty)
        // with the specified capacity.
        public StringBuilder( int capacity )
            : this( String.Empty, capacity )
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	460a      	mov	r2, r1
 8001c00:	4904      	ldr	r1, [pc, #16]	; (8001c14 <StringBuilder::.ctor#9219+0x18>)
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <StringBuilder::.ctor#9219+0x1c>)
 8001c04:	4479      	add	r1, pc
 8001c06:	4419      	add	r1, r3
 8001c08:	f8d1 10e4 	ldr.w	r1, [r1, #228]	; 0xe4
 8001c0c:	f005 fa21 	bl	8007052 <StringBuilder::.ctor#9221>
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	17ffef10 	.word	0x17ffef10
 8001c18:	fffffcf8 	.word	0xfffffcf8

08001c1c <StringBuilder::AppendFormat#9286>:
            throw new FormatException();
#endif
        }

        public StringBuilder AppendFormat( IFormatProvider provider, String format, params Object[] args )
        {
 8001c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c20:	b08b      	sub	sp, #44	; 0x2c
            if(format == null || args == null)
 8001c22:	2900      	cmp	r1, #0
 8001c24:	9006      	str	r0, [sp, #24]
 8001c26:	bf18      	it	ne
 8001c28:	2a00      	cmpne	r2, #0
 8001c2a:	f000 8226 	beq.w	800207a <StringBuilder::AppendFormat#9286+0x45e>
 8001c2e:	9207      	str	r2, [sp, #28]
 8001c30:	68ca      	ldr	r2, [r1, #12]
                throw new ArgumentNullException( (format == null) ? "format" : "args" );
#else
                throw new ArgumentNullException();
#endif
            }
            char[] chars = format.ToCharArray( 0, format.Length );
 8001c32:	4608      	mov	r0, r1
 8001c34:	4611      	mov	r1, r2
 8001c36:	f7ff fea3 	bl	8001980 <String::ToCharArray#2854>
            int pos = 0;
            int len = chars.Length;
 8001c3a:	2800      	cmp	r0, #0
 8001c3c:	f000 820c 	beq.w	8002058 <StringBuilder::AppendFormat#9286+0x43c>
 8001c40:	6882      	ldr	r2, [r0, #8]
 8001c42:	4683      	mov	fp, r0
 8001c44:	f04f 0900 	mov.w	r9, #0
 8001c48:	f04f 0a00 	mov.w	sl, #0
            }

            while(true)
            {
                int p = pos;
                int i = pos;
 8001c4c:	1e51      	subs	r1, r2, #1
 8001c4e:	9204      	str	r2, [sp, #16]
 8001c50:	9108      	str	r1, [sp, #32]
 8001c52:	1e91      	subs	r1, r2, #2
 8001c54:	9109      	str	r1, [sp, #36]	; 0x24
                while(pos < len)
                {
                    ch = chars[pos];
 8001c56:	f100 010c 	add.w	r1, r0, #12
 8001c5a:	f8df 042c 	ldr.w	r0, [pc, #1068]	; 8002088 <StringBuilder::AppendFormat#9286+0x46c>
 8001c5e:	910a      	str	r1, [sp, #40]	; 0x28
                    {
                        s = arg.ToString();
                    }
                }

                if(s == null) s = String.Empty;
 8001c60:	f8df 1428 	ldr.w	r1, [pc, #1064]	; 800208c <StringBuilder::AppendFormat#9286+0x470>
 8001c64:	4478      	add	r0, pc
 8001c66:	4408      	add	r0, r1
 8001c68:	9003      	str	r0, [sp, #12]
 8001c6a:	e003      	b.n	8001c74 <StringBuilder::AppendFormat#9286+0x58>
                int pad = width - s.Length;
                if(!leftJustify && pad > 0) Append( ' ', pad );
                Append( s );
                if(leftJustify && pad > 0) Append( ' ', pad );
 8001c6c:	9806      	ldr	r0, [sp, #24]
 8001c6e:	4621      	mov	r1, r4
 8001c70:	f005 fa7a 	bl	8007168 <StringBuilder::Append#9236>
 8001c74:	9a04      	ldr	r2, [sp, #16]
 8001c76:	464c      	mov	r4, r9
 8001c78:	464d      	mov	r5, r9
 8001c7a:	4659      	mov	r1, fp
 8001c7c:	e005      	b.n	8001c8a <StringBuilder::AppendFormat#9286+0x6e>
 8001c7e:	eb01 0345 	add.w	r3, r1, r5, lsl #1
                            pos--;
                            break;
                        }
                    }

                    chars[i++] = ch;
 8001c82:	1c68      	adds	r0, r5, #1
 8001c84:	f8a3 a00c 	strh.w	sl, [r3, #12]
 8001c88:	4605      	mov	r5, r0

            while(true)
            {
                int p = pos;
                int i = pos;
                while(pos < len)
 8001c8a:	4294      	cmp	r4, r2
 8001c8c:	da31      	bge.n	8001cf2 <StringBuilder::AppendFormat#9286+0xd6>
                {
                    ch = chars[pos];
 8001c8e:	6888      	ldr	r0, [r1, #8]
 8001c90:	4284      	cmp	r4, r0
 8001c92:	f080 81df 	bcs.w	8002054 <StringBuilder::AppendFormat#9286+0x438>
 8001c96:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001c98:	f830 a014 	ldrh.w	sl, [r0, r4, lsl #1]

                    pos++;
 8001c9c:	3401      	adds	r4, #1
                    if(ch == '}')
 8001c9e:	f1ba 0f7d 	cmp.w	sl, #125	; 0x7d
 8001ca2:	d112      	bne.n	8001cca <StringBuilder::AppendFormat#9286+0xae>
                    {
                        if(pos < len && chars[pos] == '}') // Treat as escape character for }}
 8001ca4:	4294      	cmp	r4, r2
 8001ca6:	da0a      	bge.n	8001cbe <StringBuilder::AppendFormat#9286+0xa2>
 8001ca8:	6888      	ldr	r0, [r1, #8]
 8001caa:	4284      	cmp	r4, r0
 8001cac:	f080 81d2 	bcs.w	8002054 <StringBuilder::AppendFormat#9286+0x438>
 8001cb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001cb2:	f830 0014 	ldrh.w	r0, [r0, r4, lsl #1]
 8001cb6:	287d      	cmp	r0, #125	; 0x7d
 8001cb8:	d101      	bne.n	8001cbe <StringBuilder::AppendFormat#9286+0xa2>
                            pos++;
 8001cba:	3401      	adds	r4, #1
 8001cbc:	e005      	b.n	8001cca <StringBuilder::AppendFormat#9286+0xae>
 8001cbe:	4616      	mov	r6, r2
 8001cc0:	460f      	mov	r7, r1
                        else
                            FormatError();
 8001cc2:	f005 fb9f 	bl	8007404 <StringBuilder::FormatError#9285>
 8001cc6:	4639      	mov	r1, r7
 8001cc8:	4632      	mov	r2, r6
                    }

                    if(ch == '{')
 8001cca:	f1ba 0f7b 	cmp.w	sl, #123	; 0x7b
 8001cce:	d10b      	bne.n	8001ce8 <StringBuilder::AppendFormat#9286+0xcc>
                    {
                        if(pos < len && chars[pos] == '{') // Treat as escape character for {{
 8001cd0:	4294      	cmp	r4, r2
 8001cd2:	da0d      	bge.n	8001cf0 <StringBuilder::AppendFormat#9286+0xd4>
 8001cd4:	6888      	ldr	r0, [r1, #8]
 8001cd6:	4284      	cmp	r4, r0
 8001cd8:	f080 81bc 	bcs.w	8002054 <StringBuilder::AppendFormat#9286+0x438>
 8001cdc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001cde:	f830 0014 	ldrh.w	r0, [r0, r4, lsl #1]
 8001ce2:	287b      	cmp	r0, #123	; 0x7b
 8001ce4:	d104      	bne.n	8001cf0 <StringBuilder::AppendFormat#9286+0xd4>
                            pos++;
 8001ce6:	3401      	adds	r4, #1
                            pos--;
                            break;
                        }
                    }

                    chars[i++] = ch;
 8001ce8:	6888      	ldr	r0, [r1, #8]
 8001cea:	4285      	cmp	r5, r0
 8001cec:	d3c7      	bcc.n	8001c7e <StringBuilder::AppendFormat#9286+0x62>
 8001cee:	e1b1      	b.n	8002054 <StringBuilder::AppendFormat#9286+0x438>
                    {
                        if(pos < len && chars[pos] == '{') // Treat as escape character for {{
                            pos++;
                        else
                        {
                            pos--;
 8001cf0:	3c01      	subs	r4, #1
                        }
                    }

                    chars[i++] = ch;
                }
                if(i > p) Append( chars, p, i - p );
 8001cf2:	454d      	cmp	r5, r9
 8001cf4:	dd09      	ble.n	8001d0a <StringBuilder::AppendFormat#9286+0xee>
 8001cf6:	9806      	ldr	r0, [sp, #24]
 8001cf8:	eba5 0309 	sub.w	r3, r5, r9
 8001cfc:	4615      	mov	r5, r2
 8001cfe:	464a      	mov	r2, r9
 8001d00:	460e      	mov	r6, r1
 8001d02:	f005 faef 	bl	80072e4 <StringBuilder::Append#9237>
 8001d06:	4631      	mov	r1, r6
 8001d08:	462a      	mov	r2, r5
                if(pos == len) break;
 8001d0a:	4294      	cmp	r4, r2
 8001d0c:	bf04      	itt	eq
 8001d0e:	b00b      	addeq	sp, #44	; 0x2c
 8001d10:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                pos++;
 8001d14:	1c60      	adds	r0, r4, #1
                if(pos == len || (ch = chars[pos]) < '0' || ch > '9') FormatError();
 8001d16:	4290      	cmp	r0, r2
 8001d18:	d00d      	beq.n	8001d36 <StringBuilder::AppendFormat#9286+0x11a>
 8001d1a:	688b      	ldr	r3, [r1, #8]
 8001d1c:	4298      	cmp	r0, r3
 8001d1e:	f080 8199 	bcs.w	8002054 <StringBuilder::AppendFormat#9286+0x438>
 8001d22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001d26:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
 8001d2a:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8001d2e:	db02      	blt.n	8001d36 <StringBuilder::AppendFormat#9286+0x11a>
 8001d30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8001d34:	dd05      	ble.n	8001d42 <StringBuilder::AppendFormat#9286+0x126>
 8001d36:	4615      	mov	r5, r2
 8001d38:	460e      	mov	r6, r1
 8001d3a:	f005 fb63 	bl	8007404 <StringBuilder::FormatError#9285>
 8001d3e:	4631      	mov	r1, r6
 8001d40:	462a      	mov	r2, r5
                int index = 0;
                do
                {
                    index = index * 10 + ch - '0';
 8001d42:	f104 0008 	add.w	r0, r4, #8
 8001d46:	f04f 0b00 	mov.w	fp, #0
 8001d4a:	4607      	mov	r7, r0
                    pos++;
                    if(pos == len) FormatError();
 8001d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d4e:	1ca6      	adds	r6, r4, #2
 8001d50:	42a0      	cmp	r0, r4
 8001d52:	d105      	bne.n	8001d60 <StringBuilder::AppendFormat#9286+0x144>
 8001d54:	4690      	mov	r8, r2
 8001d56:	460d      	mov	r5, r1
 8001d58:	f005 fb54 	bl	8007404 <StringBuilder::FormatError#9285>
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	4642      	mov	r2, r8
                    ch = chars[pos];
 8001d60:	6888      	ldr	r0, [r1, #8]
 8001d62:	4286      	cmp	r6, r0
 8001d64:	f080 8176 	bcs.w	8002054 <StringBuilder::AppendFormat#9286+0x438>
                pos++;
                if(pos == len || (ch = chars[pos]) < '0' || ch > '9') FormatError();
                int index = 0;
                do
                {
                    index = index * 10 + ch - '0';
 8001d68:	eb0b 008b 	add.w	r0, fp, fp, lsl #2
 8001d6c:	fa0f f38a 	sxth.w	r3, sl
 8001d70:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001d74:	2300      	movs	r3, #0
 8001d76:	f1a0 0b30 	sub.w	fp, r0, #48	; 0x30
                    pos++;
                    if(pos == len) FormatError();
                    ch = chars[pos];
 8001d7a:	eb01 0044 	add.w	r0, r1, r4, lsl #1
 8001d7e:	f8b0 a010 	ldrh.w	sl, [r0, #16]
 8001d82:	2000      	movs	r0, #0
                } while(ch >= '0' && ch <= '9' && index < 1000000);
 8001d84:	f1ba 0f3a 	cmp.w	sl, #58	; 0x3a
 8001d88:	bfb8      	it	lt
 8001d8a:	2001      	movlt	r0, #1
 8001d8c:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
 8001d90:	bfc8      	it	gt
 8001d92:	2301      	movgt	r3, #1
 8001d94:	4203      	tst	r3, r0
 8001d96:	d007      	beq.n	8001da8 <StringBuilder::AppendFormat#9286+0x18c>
 8001d98:	f244 2340 	movw	r3, #16960	; 0x4240
 8001d9c:	1c78      	adds	r0, r7, #1
 8001d9e:	3401      	adds	r4, #1
 8001da0:	f2c0 030f 	movt	r3, #15
 8001da4:	459b      	cmp	fp, r3
 8001da6:	dbd0      	blt.n	8001d4a <StringBuilder::AppendFormat#9286+0x12e>
 8001da8:	9807      	ldr	r0, [sp, #28]
 8001daa:	6880      	ldr	r0, [r0, #8]
                if(index >= args.Length) 
 8001dac:	4583      	cmp	fp, r0
 8001dae:	db01      	blt.n	8001db4 <StringBuilder::AppendFormat#9286+0x198>
 8001db0:	e154      	b.n	800205c <StringBuilder::AppendFormat#9286+0x440>
#if EXCEPTION_STRINGS
                    throw new FormatException( Environment.GetResourceString( "Format_IndexOutOfRange" ) );
#else
                    throw new FormatException();
#endif
                while(pos < len && (ch = chars[pos]) == ' ') pos++;
 8001db2:	3701      	adds	r7, #1
 8001db4:	f1a7 0906 	sub.w	r9, r7, #6
 8001db8:	4591      	cmp	r9, r2
 8001dba:	da08      	bge.n	8001dce <StringBuilder::AppendFormat#9286+0x1b2>
 8001dbc:	6888      	ldr	r0, [r1, #8]
 8001dbe:	4581      	cmp	r9, r0
 8001dc0:	f080 8148 	bcs.w	8002054 <StringBuilder::AppendFormat#9286+0x438>
 8001dc4:	f831 a017 	ldrh.w	sl, [r1, r7, lsl #1]
 8001dc8:	f1ba 0f20 	cmp.w	sl, #32
 8001dcc:	d0f1      	beq.n	8001db2 <StringBuilder::AppendFormat#9286+0x196>
                bool leftJustify = false;
                int width = 0;
                if(ch == ',')
 8001dce:	fa1f f08a 	uxth.w	r0, sl
 8001dd2:	282c      	cmp	r0, #44	; 0x2c
 8001dd4:	d133      	bne.n	8001e3e <StringBuilder::AppendFormat#9286+0x222>
                {
                    pos++;
 8001dd6:	f109 0007 	add.w	r0, r9, #7
                    while(pos < len && chars[pos] == ' ') pos++;
 8001dda:	f1a0 0806 	sub.w	r8, r0, #6
 8001dde:	4590      	cmp	r8, r2
 8001de0:	da08      	bge.n	8001df4 <StringBuilder::AppendFormat#9286+0x1d8>
 8001de2:	688b      	ldr	r3, [r1, #8]
 8001de4:	4598      	cmp	r8, r3
 8001de6:	f080 8135 	bcs.w	8002054 <StringBuilder::AppendFormat#9286+0x438>
 8001dea:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
 8001dee:	3001      	adds	r0, #1
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d0f2      	beq.n	8001dda <StringBuilder::AppendFormat#9286+0x1be>

                    if(pos == len) FormatError();
 8001df4:	4590      	cmp	r8, r2
 8001df6:	d105      	bne.n	8001e04 <StringBuilder::AppendFormat#9286+0x1e8>
 8001df8:	4614      	mov	r4, r2
 8001dfa:	460d      	mov	r5, r1
 8001dfc:	f005 fb02 	bl	8007404 <StringBuilder::FormatError#9285>
 8001e00:	4629      	mov	r1, r5
 8001e02:	4622      	mov	r2, r4
                    ch = chars[pos];
 8001e04:	6888      	ldr	r0, [r1, #8]
 8001e06:	4580      	cmp	r8, r0
 8001e08:	f080 8124 	bcs.w	8002054 <StringBuilder::AppendFormat#9286+0x438>
 8001e0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001e0e:	f830 a018 	ldrh.w	sl, [r0, r8, lsl #1]
                    if(ch == '-')
 8001e12:	f1ba 0f2d 	cmp.w	sl, #45	; 0x2d
 8001e16:	d116      	bne.n	8001e46 <StringBuilder::AppendFormat#9286+0x22a>
                    {
                        leftJustify = true;
                        pos++;
 8001e18:	f108 0801 	add.w	r8, r8, #1
                        if(pos == len) FormatError();
 8001e1c:	4590      	cmp	r8, r2
 8001e1e:	d105      	bne.n	8001e2c <StringBuilder::AppendFormat#9286+0x210>
 8001e20:	4614      	mov	r4, r2
 8001e22:	460d      	mov	r5, r1
 8001e24:	f005 faee 	bl	8007404 <StringBuilder::FormatError#9285>
 8001e28:	4629      	mov	r1, r5
 8001e2a:	4622      	mov	r2, r4
                        ch = chars[pos];
 8001e2c:	6888      	ldr	r0, [r1, #8]
 8001e2e:	4580      	cmp	r8, r0
 8001e30:	f080 8110 	bcs.w	8002054 <StringBuilder::AppendFormat#9286+0x438>
 8001e34:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001e36:	f830 a018 	ldrh.w	sl, [r0, r8, lsl #1]
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	e004      	b.n	8001e48 <StringBuilder::AppendFormat#9286+0x22c>
 8001e3e:	2000      	movs	r0, #0
 8001e40:	2600      	movs	r6, #0
 8001e42:	9005      	str	r0, [sp, #20]
 8001e44:	e03f      	b.n	8001ec6 <StringBuilder::AppendFormat#9286+0x2aa>
 8001e46:	2000      	movs	r0, #0
 8001e48:	9005      	str	r0, [sp, #20]
                    }
                    if(ch < '0' || ch > '9') FormatError();
 8001e4a:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8001e4e:	db02      	blt.n	8001e56 <StringBuilder::AppendFormat#9286+0x23a>
 8001e50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8001e54:	dd05      	ble.n	8001e62 <StringBuilder::AppendFormat#9286+0x246>
 8001e56:	4614      	mov	r4, r2
 8001e58:	460d      	mov	r5, r1
 8001e5a:	f005 fad3 	bl	8007404 <StringBuilder::FormatError#9285>
 8001e5e:	4629      	mov	r1, r5
 8001e60:	4622      	mov	r2, r4
 8001e62:	2600      	movs	r6, #0
                    do
                    {
                        width = width * 10 + ch - '0';
                        pos++;
                        if(pos == len) FormatError();
 8001e64:	9808      	ldr	r0, [sp, #32]
                    }
                    if(ch < '0' || ch > '9') FormatError();
                    do
                    {
                        width = width * 10 + ch - '0';
                        pos++;
 8001e66:	f108 0901 	add.w	r9, r8, #1
                        if(pos == len) FormatError();
 8001e6a:	4540      	cmp	r0, r8
 8001e6c:	d105      	bne.n	8001e7a <StringBuilder::AppendFormat#9286+0x25e>
 8001e6e:	4614      	mov	r4, r2
 8001e70:	460d      	mov	r5, r1
 8001e72:	f005 fac7 	bl	8007404 <StringBuilder::FormatError#9285>
 8001e76:	4629      	mov	r1, r5
 8001e78:	4622      	mov	r2, r4
                        ch = chars[pos];
 8001e7a:	6888      	ldr	r0, [r1, #8]
 8001e7c:	4581      	cmp	r9, r0
 8001e7e:	f080 80e9 	bcs.w	8002054 <StringBuilder::AppendFormat#9286+0x438>
                        ch = chars[pos];
                    }
                    if(ch < '0' || ch > '9') FormatError();
                    do
                    {
                        width = width * 10 + ch - '0';
 8001e82:	eb06 0086 	add.w	r0, r6, r6, lsl #2
 8001e86:	fa0f f38a 	sxth.w	r3, sl
 8001e8a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
                        pos++;
                        if(pos == len) FormatError();
                        ch = chars[pos];
 8001e94:	eb01 0048 	add.w	r0, r1, r8, lsl #1
 8001e98:	f8b0 a00e 	ldrh.w	sl, [r0, #14]
 8001e9c:	2000      	movs	r0, #0
                    } while(ch >= '0' && ch <= '9' && width < 1000000);
 8001e9e:	f1ba 0f3a 	cmp.w	sl, #58	; 0x3a
 8001ea2:	bfb8      	it	lt
 8001ea4:	2001      	movlt	r0, #1
 8001ea6:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
 8001eaa:	bfc8      	it	gt
 8001eac:	2301      	movgt	r3, #1
 8001eae:	4203      	tst	r3, r0
 8001eb0:	d009      	beq.n	8001ec6 <StringBuilder::AppendFormat#9286+0x2aa>
 8001eb2:	f244 2040 	movw	r0, #16960	; 0x4240
 8001eb6:	46c8      	mov	r8, r9
 8001eb8:	f2c0 000f 	movt	r0, #15
 8001ebc:	4286      	cmp	r6, r0
 8001ebe:	dbd1      	blt.n	8001e64 <StringBuilder::AppendFormat#9286+0x248>
 8001ec0:	e001      	b.n	8001ec6 <StringBuilder::AppendFormat#9286+0x2aa>
                }

                while(pos < len && (ch = chars[pos]) == ' ') pos++;
 8001ec2:	f109 0901 	add.w	r9, r9, #1
 8001ec6:	4591      	cmp	r9, r2
 8001ec8:	da0a      	bge.n	8001ee0 <StringBuilder::AppendFormat#9286+0x2c4>
 8001eca:	6888      	ldr	r0, [r1, #8]
 8001ecc:	4581      	cmp	r9, r0
 8001ece:	f080 80c1 	bcs.w	8002054 <StringBuilder::AppendFormat#9286+0x438>
 8001ed2:	eb01 0049 	add.w	r0, r1, r9, lsl #1
 8001ed6:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
 8001eda:	f1ba 0f20 	cmp.w	sl, #32
 8001ede:	d0f0      	beq.n	8001ec2 <StringBuilder::AppendFormat#9286+0x2a6>
                Object arg = args[index];
 8001ee0:	9807      	ldr	r0, [sp, #28]
 8001ee2:	6880      	ldr	r0, [r0, #8]
 8001ee4:	4583      	cmp	fp, r0
 8001ee6:	f080 80b5 	bcs.w	8002054 <StringBuilder::AppendFormat#9286+0x438>
 8001eea:	9807      	ldr	r0, [sp, #28]
 8001eec:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 8001ef0:	68c4      	ldr	r4, [r0, #12]
                String fmt = null;
                if(ch == ':')
 8001ef2:	fa1f f08a 	uxth.w	r0, sl
 8001ef6:	283a      	cmp	r0, #58	; 0x3a
 8001ef8:	d148      	bne.n	8001f8c <StringBuilder::AppendFormat#9286+0x370>
                {
                    pos++;
                    p = pos;
                    i = pos;
 8001efa:	f109 0507 	add.w	r5, r9, #7
                while(pos < len && (ch = chars[pos]) == ' ') pos++;
                Object arg = args[index];
                String fmt = null;
                if(ch == ':')
                {
                    pos++;
 8001efe:	f109 0901 	add.w	r9, r9, #1
 8001f02:	9402      	str	r4, [sp, #8]
 8001f04:	f8cd 9004 	str.w	r9, [sp, #4]
 8001f08:	e003      	b.n	8001f12 <StringBuilder::AppendFormat#9286+0x2f6>
 8001f0a:	f821 a015 	strh.w	sl, [r1, r5, lsl #1]
                                pos--;
                                break;
                            }
                        }

                        chars[i++] = ch;
 8001f0e:	3501      	adds	r5, #1
 8001f10:	46a1      	mov	r9, r4
                    pos++;
                    p = pos;
                    i = pos;
                    while(true)
                    {
                        if(pos == len) FormatError();
 8001f12:	4591      	cmp	r9, r2
 8001f14:	d107      	bne.n	8001f26 <StringBuilder::AppendFormat#9286+0x30a>
 8001f16:	4637      	mov	r7, r6
 8001f18:	4614      	mov	r4, r2
 8001f1a:	460e      	mov	r6, r1
 8001f1c:	f005 fa72 	bl	8007404 <StringBuilder::FormatError#9285>
 8001f20:	4631      	mov	r1, r6
 8001f22:	463e      	mov	r6, r7
 8001f24:	4622      	mov	r2, r4
                        ch = chars[pos];
 8001f26:	6888      	ldr	r0, [r1, #8]
 8001f28:	4581      	cmp	r9, r0
 8001f2a:	f080 8093 	bcs.w	8002054 <StringBuilder::AppendFormat#9286+0x438>
 8001f2e:	980a      	ldr	r0, [sp, #40]	; 0x28
                    pos++;
                    p = pos;
                    i = pos;
                    while(true)
                    {
                        if(pos == len) FormatError();
 8001f30:	1faf      	subs	r7, r5, #6
                        ch = chars[pos];
                        pos++;
 8001f32:	f109 0401 	add.w	r4, r9, #1
                    p = pos;
                    i = pos;
                    while(true)
                    {
                        if(pos == len) FormatError();
                        ch = chars[pos];
 8001f36:	f830 a019 	ldrh.w	sl, [r0, r9, lsl #1]
                        pos++;
                        if(ch == '{')
 8001f3a:	f1ba 0f7d 	cmp.w	sl, #125	; 0x7d
 8001f3e:	d10c      	bne.n	8001f5a <StringBuilder::AppendFormat#9286+0x33e>
                            else
                                FormatError();
                        }
                        else if(ch == '}')
                        {
                            if(pos < len && chars[pos] == '}')  // Treat as escape character for }}
 8001f40:	4294      	cmp	r4, r2
 8001f42:	da27      	bge.n	8001f94 <StringBuilder::AppendFormat#9286+0x378>
 8001f44:	6888      	ldr	r0, [r1, #8]
 8001f46:	4284      	cmp	r4, r0
 8001f48:	f080 8084 	bcs.w	8002054 <StringBuilder::AppendFormat#9286+0x438>
 8001f4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001f4e:	f830 0014 	ldrh.w	r0, [r0, r4, lsl #1]
 8001f52:	287d      	cmp	r0, #125	; 0x7d
 8001f54:	d11e      	bne.n	8001f94 <StringBuilder::AppendFormat#9286+0x378>
                        ch = chars[pos];
                        pos++;
                        if(ch == '{')
                        {
                            if(pos < len && chars[pos] == '{')  // Treat as escape character for {{
                                pos++;
 8001f56:	3401      	adds	r4, #1
 8001f58:	e014      	b.n	8001f84 <StringBuilder::AppendFormat#9286+0x368>
 8001f5a:	f1ba 0f7b 	cmp.w	sl, #123	; 0x7b
 8001f5e:	d111      	bne.n	8001f84 <StringBuilder::AppendFormat#9286+0x368>
                        if(pos == len) FormatError();
                        ch = chars[pos];
                        pos++;
                        if(ch == '{')
                        {
                            if(pos < len && chars[pos] == '{')  // Treat as escape character for {{
 8001f60:	4294      	cmp	r4, r2
 8001f62:	da07      	bge.n	8001f74 <StringBuilder::AppendFormat#9286+0x358>
 8001f64:	6888      	ldr	r0, [r1, #8]
 8001f66:	4284      	cmp	r4, r0
 8001f68:	d274      	bcs.n	8002054 <StringBuilder::AppendFormat#9286+0x438>
 8001f6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001f6c:	f830 0014 	ldrh.w	r0, [r0, r4, lsl #1]
 8001f70:	287b      	cmp	r0, #123	; 0x7b
 8001f72:	d0f0      	beq.n	8001f56 <StringBuilder::AppendFormat#9286+0x33a>
 8001f74:	46b1      	mov	r9, r6
 8001f76:	4690      	mov	r8, r2
 8001f78:	460e      	mov	r6, r1
                                pos++;
                            else
                                FormatError();
 8001f7a:	f005 fa43 	bl	8007404 <StringBuilder::FormatError#9285>
 8001f7e:	4631      	mov	r1, r6
 8001f80:	464e      	mov	r6, r9
 8001f82:	4642      	mov	r2, r8
                                pos--;
                                break;
                            }
                        }

                        chars[i++] = ch;
 8001f84:	6888      	ldr	r0, [r1, #8]
 8001f86:	4287      	cmp	r7, r0
 8001f88:	d3bf      	bcc.n	8001f0a <StringBuilder::AppendFormat#9286+0x2ee>
 8001f8a:	e063      	b.n	8002054 <StringBuilder::AppendFormat#9286+0x438>
 8001f8c:	468b      	mov	fp, r1
 8001f8e:	f04f 0800 	mov.w	r8, #0
 8001f92:	e017      	b.n	8001fc4 <StringBuilder::AppendFormat#9286+0x3a8>
 8001f94:	468b      	mov	fp, r1
 8001f96:	9901      	ldr	r1, [sp, #4]
                    }
                    if(i > p) fmt = new String( chars, p, i - p );
 8001f98:	428f      	cmp	r7, r1
 8001f9a:	dd10      	ble.n	8001fbe <StringBuilder::AppendFormat#9286+0x3a2>
 8001f9c:	1a7d      	subs	r5, r7, r1
 8001f9e:	460f      	mov	r7, r1
 8001fa0:	4628      	mov	r0, r5
 8001fa2:	f7ff f975 	bl	8001290 <String::FastAllocateString#4262>
 8001fa6:	9c02      	ldr	r4, [sp, #8]
 8001fa8:	4680      	mov	r8, r0
 8001faa:	f1b8 0f00 	cmp.w	r8, #0
 8001fae:	d053      	beq.n	8002058 <StringBuilder::AppendFormat#9286+0x43c>
 8001fb0:	4640      	mov	r0, r8
 8001fb2:	4659      	mov	r1, fp
 8001fb4:	463a      	mov	r2, r7
 8001fb6:	462b      	mov	r3, r5
 8001fb8:	f7ff fd98 	bl	8001aec <String::.ctor#4259>
 8001fbc:	e002      	b.n	8001fc4 <StringBuilder::AppendFormat#9286+0x3a8>
 8001fbe:	9c02      	ldr	r4, [sp, #8]
 8001fc0:	f04f 0800 	mov.w	r8, #0
                }
                if(ch != '}') FormatError();
 8001fc4:	fa1f f08a 	uxth.w	r0, sl
 8001fc8:	287d      	cmp	r0, #125	; 0x7d
 8001fca:	bf18      	it	ne
 8001fcc:	f005 fa1a 	blne	8007404 <StringBuilder::FormatError#9285>
                    s = cf.Format( fmt, arg, provider );
                }

                if(s == null)
                {
                    if(arg is IFormattable)
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f002 febd 	bl	8004d50 <TypeSystemManager::CastToInterfaceNoThrow#5595>
 8001fd6:	b158      	cbz	r0, 8001ff0 <StringBuilder::AppendFormat#9286+0x3d4>
                    {
                        s = ((IFormattable)arg).ToString( fmt, provider );
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f002 fe9b 	bl	8004d14 <TypeSystemManager::CastToInterface#5594>
 8001fde:	4605      	mov	r5, r0
 8001fe0:	f001 fb1e 	bl	8003620 <VTable::GetInterface#4050>
 8001fe4:	68c3      	ldr	r3, [r0, #12]
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	4641      	mov	r1, r8
 8001fea:	2200      	movs	r2, #0
 8001fec:	4798      	blx	r3
 8001fee:	e009      	b.n	8002004 <StringBuilder::AppendFormat#9286+0x3e8>
                    }
                    else if(arg != null)
 8001ff0:	2c00      	cmp	r4, #0
 8001ff2:	d006      	beq.n	8002002 <StringBuilder::AppendFormat#9286+0x3e6>
 8001ff4:	d030      	beq.n	8002058 <StringBuilder::AppendFormat#9286+0x43c>
 8001ff6:	6860      	ldr	r0, [r4, #4]
                    {
                        s = arg.ToString();
 8001ff8:	69c0      	ldr	r0, [r0, #28]
 8001ffa:	68c1      	ldr	r1, [r0, #12]
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	4788      	blx	r1
 8002000:	e000      	b.n	8002004 <StringBuilder::AppendFormat#9286+0x3e8>
 8002002:	2000      	movs	r0, #0
                    }
                }

                if(s == null) s = String.Empty;
 8002004:	9903      	ldr	r1, [sp, #12]
 8002006:	2800      	cmp	r0, #0
 8002008:	f8d1 50e4 	ldr.w	r5, [r1, #228]	; 0xe4
 800200c:	bf18      	it	ne
 800200e:	4605      	movne	r5, r0
 8002010:	b315      	cbz	r5, 8002058 <StringBuilder::AppendFormat#9286+0x43c>
 8002012:	68e8      	ldr	r0, [r5, #12]
 8002014:	9f05      	ldr	r7, [sp, #20]
                        chars[i++] = ch;
                    }
                    if(i > p) fmt = new String( chars, p, i - p );
                }
                if(ch != '}') FormatError();
                pos++;
 8002016:	f109 0901 	add.w	r9, r9, #1
                        s = arg.ToString();
                    }
                }

                if(s == null) s = String.Empty;
                int pad = width - s.Length;
 800201a:	1a34      	subs	r4, r6, r0
                if(!leftJustify && pad > 0) Append( ' ', pad );
 800201c:	b13f      	cbz	r7, 800202e <StringBuilder::AppendFormat#9286+0x412>
                Append( s );
 800201e:	9806      	ldr	r0, [sp, #24]
 8002020:	4629      	mov	r1, r5
 8002022:	f004 f9b3 	bl	800638c <StringBuilder::Append#9238>
                if(leftJustify && pad > 0) Append( ' ', pad );
 8002026:	2c01      	cmp	r4, #1
 8002028:	f6ff ae24 	blt.w	8001c74 <StringBuilder::AppendFormat#9286+0x58>
 800202c:	e61e      	b.n	8001c6c <StringBuilder::AppendFormat#9286+0x50>
 800202e:	9e06      	ldr	r6, [sp, #24]
                    }
                }

                if(s == null) s = String.Empty;
                int pad = width - s.Length;
                if(!leftJustify && pad > 0) Append( ' ', pad );
 8002030:	2c01      	cmp	r4, #1
 8002032:	db03      	blt.n	800203c <StringBuilder::AppendFormat#9286+0x420>
 8002034:	4630      	mov	r0, r6
 8002036:	4621      	mov	r1, r4
 8002038:	f005 f896 	bl	8007168 <StringBuilder::Append#9236>
 800203c:	4630      	mov	r0, r6
                Append( s );
 800203e:	4629      	mov	r1, r5
 8002040:	9606      	str	r6, [sp, #24]
 8002042:	f004 f9a3 	bl	800638c <StringBuilder::Append#9238>
                if(leftJustify && pad > 0) Append( ' ', pad );
 8002046:	2f00      	cmp	r7, #0
 8002048:	f43f ae14 	beq.w	8001c74 <StringBuilder::AppendFormat#9286+0x58>
 800204c:	2c00      	cmp	r4, #0
 800204e:	f73f ae0d 	bgt.w	8001c6c <StringBuilder::AppendFormat#9286+0x50>
 8002052:	e60f      	b.n	8001c74 <StringBuilder::AppendFormat#9286+0x58>
                    chars[i++] = ch;
                }
                if(i > p) Append( chars, p, i - p );
                if(pos == len) break;
                pos++;
                if(pos == len || (ch = chars[pos]) < '0' || ch > '9') FormatError();
 8002054:	f7fe ff2c 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
            if(format == null || args == null)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentNullException( (format == null) ? "format" : "args" );
#else
                throw new ArgumentNullException();
 8002058:	f7fe fa06 	bl	8000468 <Thread::ThrowNullException#4411>
 800205c:	480c      	ldr	r0, [pc, #48]	; (8002090 <StringBuilder::AppendFormat#9286+0x474>)
                } while(ch >= '0' && ch <= '9' && index < 1000000);
                if(index >= args.Length) 
#if EXCEPTION_STRINGS
                    throw new FormatException( Environment.GetResourceString( "Format_IndexOutOfRange" ) );
#else
                    throw new FormatException();
 800205e:	490d      	ldr	r1, [pc, #52]	; (8002094 <StringBuilder::AppendFormat#9286+0x478>)
 8002060:	4478      	add	r0, pc
 8002062:	180c      	adds	r4, r1, r0
 8002064:	490c      	ldr	r1, [pc, #48]	; (8002098 <StringBuilder::AppendFormat#9286+0x47c>)
            if(format == null || args == null)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentNullException( (format == null) ? "format" : "args" );
#else
                throw new ArgumentNullException();
 8002066:	4401      	add	r1, r0
 8002068:	4620      	mov	r0, r4
 800206a:	f7fe fc13 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 800206e:	4601      	mov	r1, r0
 8002070:	2000      	movs	r0, #0
 8002072:	6088      	str	r0, [r1, #8]
 8002074:	4620      	mov	r0, r4
 8002076:	f7fe fc23 	bl	80008c0 <TypeSystemManager::Throw#5596>
 800207a:	4808      	ldr	r0, [pc, #32]	; (800209c <StringBuilder::AppendFormat#9286+0x480>)
 800207c:	4905      	ldr	r1, [pc, #20]	; (8002094 <StringBuilder::AppendFormat#9286+0x478>)
 800207e:	4478      	add	r0, pc
 8002080:	180c      	adds	r4, r1, r0
 8002082:	4907      	ldr	r1, [pc, #28]	; (80020a0 <StringBuilder::AppendFormat#9286+0x484>)
 8002084:	e7ef      	b.n	8002066 <StringBuilder::AppendFormat#9286+0x44a>
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	17ffeeb0 	.word	0x17ffeeb0
 800208c:	fffffcf8 	.word	0xfffffcf8
 8002090:	17ffeab4 	.word	0x17ffeab4
 8002094:	fffffe0c 	.word	0xfffffe0c
 8002098:	e8019ce8 	.word	0xe8019ce8
 800209c:	17ffea96 	.word	0x17ffea96
 80020a0:	e8019418 	.word	0xe8019418

080020a4 <String::InternalCopy#2934>:
            return result;
        }

        // Used by StringBuilder to avoid data corruption
        unsafe internal static String InternalCopy( String str )
        {
 80020a4:	b570      	push	{r4, r5, r6, lr}
 80020a6:	4604      	mov	r4, r0
 80020a8:	b174      	cbz	r4, 80020c8 <String::InternalCopy#2934+0x24>

        public int Length
        {
            get
            {
                return m_stringLength;
 80020aa:	68e5      	ldr	r5, [r4, #12]

        // Used by StringBuilder to avoid data corruption
        unsafe internal static String InternalCopy( String str )
        {
            int    length = str.Length;
            String result = FastAllocateString( length );
 80020ac:	4628      	mov	r0, r5
 80020ae:	f7ff f8ef 	bl	8001290 <String::FastAllocateString#4262>
 80020b2:	4606      	mov	r6, r0
 80020b4:	b146      	cbz	r6, 80020c8 <String::InternalCopy#2934+0x24>

            // The underlying's String can changed length is StringBuilder
            fixed(char* dest = &result.m_firstChar)
            {
                fixed(char* src = &str.m_firstChar)
 80020b6:	f104 0010 	add.w	r0, r4, #16
        {
            int    length = str.Length;
            String result = FastAllocateString( length );

            // The underlying's String can changed length is StringBuilder
            fixed(char* dest = &result.m_firstChar)
 80020ba:	f106 0110 	add.w	r1, r6, #16
            {
                fixed(char* src = &str.m_firstChar)
 80020be:	462a      	mov	r2, r5
 80020c0:	f7ff fcc4 	bl	8001a4c <Buffer::InternalMemoryCopy#4104>
 80020c4:	4630      	mov	r0, r6
 80020c6:	bd70      	pop	{r4, r5, r6, pc}
        }

        // Used by StringBuilder to avoid data corruption
        unsafe internal static String InternalCopy( String str )
        {
            int    length = str.Length;
 80020c8:	f7fe f9ce 	bl	8000468 <Thread::ThrowNullException#4411>

080020cc <String::Concat#2940>:

            return result;
        }

        public static String Concat( String str0, String str1, String str2 )
        {
 80020cc:	b570      	push	{r4, r5, r6, lr}
 80020ce:	4605      	mov	r5, r0
 80020d0:	4816      	ldr	r0, [pc, #88]	; (800212c <String::Concat#2940+0x60>)
 80020d2:	460c      	mov	r4, r1
                return String.Empty;
            }

            if(str0 == null)
            {
                str0 = String.Empty;
 80020d4:	4916      	ldr	r1, [pc, #88]	; (8002130 <String::Concat#2940+0x64>)
            if(str1 == null)
            {
                str1 = String.Empty;
            }

            if(str2 == null)
 80020d6:	2c00      	cmp	r4, #0
 80020d8:	4478      	add	r0, pc
                return String.Empty;
            }

            if(str0 == null)
            {
                str0 = String.Empty;
 80020da:	4408      	add	r0, r1
 80020dc:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
            if(str1 == null)
            {
                str1 = String.Empty;
            }

            if(str2 == null)
 80020e0:	bf08      	it	eq
 80020e2:	4604      	moveq	r4, r0
            return result;
        }

        public static String Concat( String str0, String str1, String str2 )
        {
            if(str0 == null && str1 == null && str2 == null)
 80020e4:	2d00      	cmp	r5, #0
 80020e6:	bf08      	it	eq
 80020e8:	4605      	moveq	r5, r0
            if(str2 == null)
            {
                str2 = String.Empty;
            }

            int totalLength = str0.Length + str1.Length + str2.Length;
 80020ea:	2d00      	cmp	r5, #0
 80020ec:	bf18      	it	ne
 80020ee:	2c00      	cmpne	r4, #0
 80020f0:	d01a      	beq.n	8002128 <String::Concat#2940+0x5c>

        public int Length
        {
            get
            {
                return m_stringLength;
 80020f2:	68e8      	ldr	r0, [r5, #12]
 80020f4:	68e1      	ldr	r1, [r4, #12]
            if(str2 == null)
            {
                str2 = String.Empty;
            }

            int totalLength = str0.Length + str1.Length + str2.Length;
 80020f6:	3001      	adds	r0, #1
 80020f8:	4408      	add	r0, r1

            String result = FastAllocateString( totalLength );
 80020fa:	f7ff f8c9 	bl	8001290 <String::FastAllocateString#4262>
 80020fe:	2100      	movs	r1, #0

            FillStringChecked( result, 0                        , str0 );
 8002100:	462a      	mov	r2, r5
                str2 = String.Empty;
            }

            int totalLength = str0.Length + str1.Length + str2.Length;

            String result = FastAllocateString( totalLength );
 8002102:	4606      	mov	r6, r0

            FillStringChecked( result, 0                        , str0 );
 8002104:	f7ff fcc6 	bl	8001a94 <String::FillStringChecked#2883>
 8002108:	480a      	ldr	r0, [pc, #40]	; (8002134 <String::Concat#2940+0x68>)
            FillStringChecked( result, str0.Length              , str1 );
 800210a:	490b      	ldr	r1, [pc, #44]	; (8002138 <String::Concat#2940+0x6c>)
 800210c:	4478      	add	r0, pc
 800210e:	180a      	adds	r2, r1, r0

        public int Length
        {
            get
            {
                return m_stringLength;
 8002110:	68e9      	ldr	r1, [r5, #12]
            int totalLength = str0.Length + str1.Length + str2.Length;

            String result = FastAllocateString( totalLength );

            FillStringChecked( result, 0                        , str0 );
            FillStringChecked( result, str0.Length              , str1 );
 8002112:	4630      	mov	r0, r6
 8002114:	f7ff fcbe 	bl	8001a94 <String::FillStringChecked#2883>

        public int Length
        {
            get
            {
                return m_stringLength;
 8002118:	68e8      	ldr	r0, [r5, #12]

            String result = FastAllocateString( totalLength );

            FillStringChecked( result, 0                        , str0 );
            FillStringChecked( result, str0.Length              , str1 );
            FillStringChecked( result, str0.Length + str1.Length, str2 );
 800211a:	4622      	mov	r2, r4
 800211c:	1c41      	adds	r1, r0, #1
 800211e:	4630      	mov	r0, r6
 8002120:	f7ff fcb8 	bl	8001a94 <String::FillStringChecked#2883>
 8002124:	4630      	mov	r0, r6
 8002126:	bd70      	pop	{r4, r5, r6, pc}
            if(str2 == null)
            {
                str2 = String.Empty;
            }

            int totalLength = str0.Length + str1.Length + str2.Length;
 8002128:	f7fe f99e 	bl	8000468 <Thread::ThrowNullException#4411>
 800212c:	17ffea3c 	.word	0x17ffea3c
 8002130:	fffffcf8 	.word	0xfffffcf8
 8002134:	17ffea08 	.word	0x17ffea08
 8002138:	e80118c8 	.word	0xe80118c8

0800213c <String::AppendInPlace#2964>:
            BCLDebug.Assert( currentLength < m_arrayLength, "[String.AppendInPlace]currentLength < m_arrayLength" );
#if _DEBUG
            BCLDebug.Assert( ValidModifiableString(), "Modifiable string must not have highChars flags set" );
#endif

            fixed(char* p = &this.m_firstChar)
 800213c:	b580      	push	{r7, lr}
 800213e:	f100 0c10 	add.w	ip, r0, #16
            {
                // Append the character.
                p[currentLength] = value;
 8002142:	eb0c 0342 	add.w	r3, ip, r2, lsl #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf1f      	itttt	ne
 800214a:	f82c 1012 	strhne.w	r1, [ip, r2, lsl #1]
                currentLength++;
 800214e:	1c51      	addne	r1, r2, #1

                p[currentLength] = '\0';
 8002150:	eb0c 0241 	addne.w	r2, ip, r1, lsl #1
 8002154:	2a00      	cmpne	r2, #0
 8002156:	d003      	beq.n	8002160 <String::AppendInPlace#2964+0x24>
 8002158:	2300      	movs	r3, #0
 800215a:	8013      	strh	r3, [r2, #0]
 800215c:	60c1      	str	r1, [r0, #12]
 800215e:	bd80      	pop	{r7, pc}
#endif

            fixed(char* p = &this.m_firstChar)
            {
                // Append the character.
                p[currentLength] = value;
 8002160:	f7fe f982 	bl	8000468 <Thread::ThrowNullException#4411>

08002164 <String::AppendInPlace#2965>:


        ///<internalonly/>
        unsafe internal void AppendInPlace( char value, int repeatCount, int currentLength )
        {
            int newLength = currentLength + repeatCount;
 8002164:	b510      	push	{r4, lr}
 8002166:	eb02 0c01 	add.w	ip, r2, r1

            fixed(char* p = &this.m_firstChar)
            {
                int i;

                for(i = currentLength; i < newLength; i++)
 800216a:	0051      	lsls	r1, r2, #1
            BCLDebug.Assert( newLength < m_arrayLength, "[String.AppendInPlace]currentLength+repeatCount < m_arrayLength" );
#if _DEBUG
            BCLDebug.Assert( ValidModifiableString(), "Modifiable string must not have highChars flags set" );
#endif

            fixed(char* p = &this.m_firstChar)
 800216c:	f100 0310 	add.w	r3, r0, #16
 8002170:	f04f 0e20 	mov.w	lr, #32
 8002174:	e003      	b.n	800217e <String::AppendInPlace#2965+0x1a>
 8002176:	f8a4 e000 	strh.w	lr, [r4]
            {
                int i;

                for(i = currentLength; i < newLength; i++)
 800217a:	3102      	adds	r1, #2
 800217c:	3201      	adds	r2, #1
 800217e:	4562      	cmp	r2, ip
 8002180:	da02      	bge.n	8002188 <String::AppendInPlace#2965+0x24>
                {
                    p[i] = value;
 8002182:	185c      	adds	r4, r3, r1
 8002184:	d1f7      	bne.n	8002176 <String::AppendInPlace#2965+0x12>
 8002186:	e008      	b.n	800219a <String::AppendInPlace#2965+0x36>
                }
                p[i] = '\0';
 8002188:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 800218c:	2900      	cmp	r1, #0
 800218e:	bf1f      	itttt	ne
 8002190:	2200      	movne	r2, #0
 8002192:	800a      	strhne	r2, [r1, #0]
 8002194:	f8c0 c00c 	strne.w	ip, [r0, #12]
 8002198:	bd10      	popne	{r4, pc}
 800219a:	f7fe f965 	bl	8000468 <Thread::ThrowNullException#4411>

0800219e <String::AppendInPlace#2966>:
            this.m_stringLength = newLength;
        }

        ///<internalonly/>
        internal unsafe void AppendInPlace( String value, int currentLength )
        {
 800219e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021a0:	b081      	sub	sp, #4
 80021a2:	4615      	mov	r5, r2
 80021a4:	4604      	mov	r4, r0
 80021a6:	b1a9      	cbz	r1, 80021d4 <String::AppendInPlace#2966+0x36>

        public int Length
        {
            get
            {
                return m_stringLength;
 80021a8:	68ce      	ldr	r6, [r1, #12]
            BCLDebug.Assert( newLength < this.m_arrayLength, "[String.AppendInPlace]Length is wrong." );
#if _DEBUG
            BCLDebug.Assert( ValidModifiableString(), "Modifiable string must not have highChars flags set" );
#endif

            fixed(char* dest = &this.m_firstChar)
 80021aa:	f104 0710 	add.w	r7, r4, #16
            {
                fixed(char* src = &value.m_firstChar)
 80021ae:	f101 0010 	add.w	r0, r1, #16
                {
                    Buffer.InternalMemoryCopy( src, dest + currentLength, count );
 80021b2:	eb07 0245 	add.w	r2, r7, r5, lsl #1
 80021b6:	4611      	mov	r1, r2
 80021b8:	4632      	mov	r2, r6
 80021ba:	f7ff fc47 	bl	8001a4c <Buffer::InternalMemoryCopy#4104>

        ///<internalonly/>
        internal unsafe void AppendInPlace( String value, int currentLength )
        {
            int count     = value.Length;
            int newLength = currentLength + count;
 80021be:	19a8      	adds	r0, r5, r6
                fixed(char* src = &value.m_firstChar)
                {
                    Buffer.InternalMemoryCopy( src, dest + currentLength, count );
                }

                dest[newLength] = '\0';
 80021c0:	eb07 0140 	add.w	r1, r7, r0, lsl #1
 80021c4:	2900      	cmp	r1, #0
 80021c6:	bf1f      	itttt	ne
 80021c8:	2200      	movne	r2, #0
 80021ca:	800a      	strhne	r2, [r1, #0]
 80021cc:	60e0      	strne	r0, [r4, #12]
 80021ce:	b001      	addne	sp, #4
 80021d0:	bf18      	it	ne
 80021d2:	bdf0      	popne	{r4, r5, r6, r7, pc}
        }

        ///<internalonly/>
        internal unsafe void AppendInPlace( String value, int currentLength )
        {
            int count     = value.Length;
 80021d4:	f7fe f948 	bl	8000468 <Thread::ThrowNullException#4411>

080021d8 <String::AppendInPlace#2970>:
        }


        ///<internalonly/>
        internal unsafe void AppendInPlace( char[] value, int start, int count, int currentLength )
        {
 80021d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021da:	b081      	sub	sp, #4
 80021dc:	9f06      	ldr	r7, [sp, #24]
 80021de:	4604      	mov	r4, r0
 80021e0:	461d      	mov	r5, r3
            BCLDebug.Assert( value.Length - count >= start, "[String.AppendInPlace]value.Length-count>=start" );
#if _DEBUG
            BCLDebug.Assert(ValidModifiableString(), "Modifiable string must not have highChars flags set");
#endif

            fixed(char* dest = &this.m_firstChar)
 80021e2:	f104 0610 	add.w	r6, r4, #16
            {
                // Note: fixed does not like empty arrays
                if(count > 0)
 80021e6:	2d00      	cmp	r5, #0
 80021e8:	dd11      	ble.n	800220e <String::AppendInPlace#2970+0x36>
 80021ea:	b131      	cbz	r1, 80021fa <String::AppendInPlace#2970+0x22>
 80021ec:	6888      	ldr	r0, [r1, #8]
 80021ee:	b130      	cbz	r0, 80021fe <String::AppendInPlace#2970+0x26>
                {
                    fixed(char* src = value)
 80021f0:	6888      	ldr	r0, [r1, #8]
 80021f2:	b1c8      	cbz	r0, 8002228 <String::AppendInPlace#2970+0x50>
 80021f4:	f101 000c 	add.w	r0, r1, #12
 80021f8:	e002      	b.n	8002200 <String::AppendInPlace#2970+0x28>
 80021fa:	2000      	movs	r0, #0
 80021fc:	e000      	b.n	8002200 <String::AppendInPlace#2970+0x28>
 80021fe:	2000      	movs	r0, #0
                    {
                        Buffer.InternalMemoryCopy( src + start, dest + currentLength, count );
 8002200:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8002204:	eb06 0147 	add.w	r1, r6, r7, lsl #1
 8002208:	462a      	mov	r2, r5
 800220a:	f7ff fc1f 	bl	8001a4c <Buffer::InternalMemoryCopy#4104>


        ///<internalonly/>
        internal unsafe void AppendInPlace( char[] value, int start, int count, int currentLength )
        {
            int newLength = currentLength + count;
 800220e:	1978      	adds	r0, r7, r5
                    {
                        Buffer.InternalMemoryCopy( src + start, dest + currentLength, count );
                    }
                }

                dest[newLength] = '\0';
 8002210:	eb06 0140 	add.w	r1, r6, r0, lsl #1
 8002214:	2900      	cmp	r1, #0
 8002216:	bf1f      	itttt	ne
 8002218:	2200      	movne	r2, #0
 800221a:	800a      	strhne	r2, [r1, #0]
 800221c:	60e0      	strne	r0, [r4, #12]
 800221e:	b001      	addne	sp, #4
 8002220:	bf18      	it	ne
 8002222:	bdf0      	popne	{r4, r5, r6, r7, pc}
 8002224:	f7fe f920 	bl	8000468 <Thread::ThrowNullException#4411>
            fixed(char* dest = &this.m_firstChar)
            {
                // Note: fixed does not like empty arrays
                if(count > 0)
                {
                    fixed(char* src = value)
 8002228:	f7fe fe42 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>

0800222c <String::GetStringForStringBuilder#2972>:
            }
        }

        ///<internalonly/>
        internal static String GetStringForStringBuilder( String value, int capacity )
        {
 800222c:	b580      	push	{r7, lr}
 800222e:	460a      	mov	r2, r1
            BCLDebug.Assert( value != null, "[String.GetStringForStringBuilder]value!=null" );

            return GetStringForStringBuilder( value, 0, value.Length, capacity );
 8002230:	b118      	cbz	r0, 800223a <String::GetStringForStringBuilder#2972+0xe>

        public int Length
        {
            get
            {
                return m_stringLength;
 8002232:	68c1      	ldr	r1, [r0, #12]
        ///<internalonly/>
        internal static String GetStringForStringBuilder( String value, int capacity )
        {
            BCLDebug.Assert( value != null, "[String.GetStringForStringBuilder]value!=null" );

            return GetStringForStringBuilder( value, 0, value.Length, capacity );
 8002234:	f000 f803 	bl	800223e <String::GetStringForStringBuilder#2973>
 8002238:	bd80      	pop	{r7, pc}
 800223a:	f7fe f915 	bl	8000468 <Thread::ThrowNullException#4411>

0800223e <String::GetStringForStringBuilder#2973>:
        }

        ///<internalonly/>
        unsafe internal static String GetStringForStringBuilder( String value, int startIndex, int length, int capacity )
        {
 800223e:	b570      	push	{r4, r5, r6, lr}
 8002240:	4606      	mov	r6, r0
            BCLDebug.Assert( value != null     , "[String.GetStringForStringBuilder]value!=null" );
            BCLDebug.Assert( capacity >= length, "[String.GetStringForStringBuilder]capacity>=length" );

            String newStr = FastAllocateString( capacity );
 8002242:	4610      	mov	r0, r2
 8002244:	460d      	mov	r5, r1
 8002246:	f7ff f823 	bl	8001290 <String::FastAllocateString#4262>
 800224a:	4604      	mov	r4, r0
 800224c:	b196      	cbz	r6, 8002274 <String::GetStringForStringBuilder#2973+0x36>

        public int Length
        {
            get
            {
                return m_stringLength;
 800224e:	68f0      	ldr	r0, [r6, #12]
 8002250:	b150      	cbz	r0, 8002268 <String::GetStringForStringBuilder#2973+0x2a>
 8002252:	b17c      	cbz	r4, 8002274 <String::GetStringForStringBuilder#2973+0x36>
                return newStr;
            }

            fixed(char* dest = &newStr.m_firstChar)
            {
                fixed(char* src = &value.m_firstChar)
 8002254:	f106 0010 	add.w	r0, r6, #16
                newStr.SetLength( 0 );
                // already null terminated
                return newStr;
            }

            fixed(char* dest = &newStr.m_firstChar)
 8002258:	f104 0110 	add.w	r1, r4, #16
            {
                fixed(char* src = &value.m_firstChar)
                {
                    Buffer.InternalMemoryCopy( src + startIndex, dest, length );
 800225c:	462a      	mov	r2, r5
 800225e:	f7ff fbf5 	bl	8001a4c <Buffer::InternalMemoryCopy#4104>
 8002262:	4620      	mov	r0, r4
 8002264:	60e5      	str	r5, [r4, #12]
 8002266:	bd70      	pop	{r4, r5, r6, pc}

            String newStr = FastAllocateString( capacity );

            if(value.Length == 0)
            {
                newStr.SetLength( 0 );
 8002268:	2c00      	cmp	r4, #0
 800226a:	bf1f      	itttt	ne
 800226c:	2000      	movne	r0, #0
 800226e:	60e0      	strne	r0, [r4, #12]
 8002270:	4620      	movne	r0, r4
 8002272:	bd70      	popne	{r4, r5, r6, pc}
            BCLDebug.Assert( value != null     , "[String.GetStringForStringBuilder]value!=null" );
            BCLDebug.Assert( capacity >= length, "[String.GetStringForStringBuilder]capacity>=length" );

            String newStr = FastAllocateString( capacity );

            if(value.Length == 0)
 8002274:	f7fe f8f8 	bl	8000468 <Thread::ThrowNullException#4411>

08002278 <String::ClearPostNullChar#2975>:

        ///<internalonly/>
        unsafe internal void ClearPostNullChar()
        {
            int newLength = Length + 1;
            if(newLength < m_arrayLength)
 8002278:	b580      	push	{r7, lr}
 800227a:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
        }

        ///<internalonly/>
        unsafe internal void ClearPostNullChar()
        {
            int newLength = Length + 1;
 800227e:	3101      	adds	r1, #1
            if(newLength < m_arrayLength)
 8002280:	4291      	cmp	r1, r2
 8002282:	bfa8      	it	ge
 8002284:	bd80      	popge	{r7, pc}
            {
                fixed(char* p = &this.m_firstChar)
 8002286:	eb00 0041 	add.w	r0, r0, r1, lsl #1
                {
                    p[newLength] = '\0';
 800228a:	3010      	adds	r0, #16
 800228c:	d002      	beq.n	8002294 <String::ClearPostNullChar#2975+0x1c>
 800228e:	2100      	movs	r1, #0
 8002290:	8001      	strh	r1, [r0, #0]
 8002292:	bd80      	pop	{r7, pc}
 8002294:	f7fe f8e8 	bl	8000468 <Thread::ThrowNullException#4411>

08002298 <String::.cctor#2982>:

        // The Empty constant holds the empty string value.
        //We need to call the String constructor so that the compiler doesn't mark this as a literal.
        //Marking this as a literal would mean that it doesn't show up as a field which we can access
        //from native.
        public static readonly String Empty = "";
 8002298:	b580      	push	{r7, lr}
 800229a:	4808      	ldr	r0, [pc, #32]	; (80022bc <String::.cctor#2982+0x24>)
 800229c:	4908      	ldr	r1, [pc, #32]	; (80022c0 <String::.cctor#2982+0x28>)
 800229e:	4a09      	ldr	r2, [pc, #36]	; (80022c4 <String::.cctor#2982+0x2c>)
 80022a0:	4478      	add	r0, pc
 80022a2:	4401      	add	r1, r0
 80022a4:	4402      	add	r2, r0
 80022a6:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
        //This should really live on System.Globalization.CharacterInfo.  However,
        //Trim gets called by security while resgen is running, so we can't run
        //CharacterInfo's class initializer (which goes to native and looks for a
        //resource table that hasn't yet been attached to the assembly when resgen
        //runs.
        internal static readonly char[] WhitespaceChars =
 80022aa:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <String::.cctor#2982+0x30>)
 80022ac:	f8d1 10e8 	ldr.w	r1, [r1, #232]	; 0xe8
 80022b0:	4410      	add	r0, r2
 80022b2:	2219      	movs	r2, #25
 80022b4:	f7fe faa2 	bl	80007fc <Array::Copy#1752>
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	17ffe874 	.word	0x17ffe874
 80022c0:	fffffcf8 	.word	0xfffffcf8
 80022c4:	e8010ffc 	.word	0xe8010ffc
 80022c8:	e80147f8 	.word	0xe80147f8

080022cc <Number::FormatUInt32#7964>:
            }
        }

        internal static String FormatUInt32( uint value,
                                    NumberFormatInfo info )
        {
 80022cc:	b570      	push	{r4, r5, r6, lr}
 80022ce:	460c      	mov	r4, r1
 80022d0:	490a      	ldr	r1, [pc, #40]	; (80022fc <Number::FormatUInt32#7964+0x30>)
 80022d2:	4605      	mov	r5, r0
            Number number = new Number( value );
 80022d4:	480a      	ldr	r0, [pc, #40]	; (8002300 <Number::FormatUInt32#7964+0x34>)
 80022d6:	4a0b      	ldr	r2, [pc, #44]	; (8002304 <Number::FormatUInt32#7964+0x38>)
 80022d8:	4479      	add	r1, pc
 80022da:	4408      	add	r0, r1
 80022dc:	4411      	add	r1, r2
 80022de:	f7fe fad9 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80022e2:	4629      	mov	r1, r5
 80022e4:	4606      	mov	r6, r0
 80022e6:	f003 fa25 	bl	8005734 <Number::.ctor#7950>
            return number.ToString( 'G', -1, info );
 80022ea:	4630      	mov	r0, r6
 80022ec:	2147      	movs	r1, #71	; 0x47
 80022ee:	f04f 32ff 	mov.w	r2, #4294967295
 80022f2:	4623      	mov	r3, r4
 80022f4:	f003 fa70 	bl	80057d8 <Number::ToString#7973>
 80022f8:	bd70      	pop	{r4, r5, r6, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	17ffe83c 	.word	0x17ffe83c
 8002300:	fffffe0c 	.word	0xfffffe0c
 8002304:	e8019cb8 	.word	0xe8019cb8

08002308 <UInt32::Equals#3084>:

            return 0;
        }

        public override bool Equals( Object obj )
        {
 8002308:	b570      	push	{r4, r5, r6, lr}
 800230a:	4604      	mov	r4, r0
 800230c:	480d      	ldr	r0, [pc, #52]	; (8002344 <UInt32::Equals#3084+0x3c>)
            if(!(obj is UInt32))
 800230e:	4e0e      	ldr	r6, [pc, #56]	; (8002348 <UInt32::Equals#3084+0x40>)
 8002310:	460d      	mov	r5, r1
 8002312:	4478      	add	r0, pc
 8002314:	1831      	adds	r1, r6, r0
 8002316:	4628      	mov	r0, r5
 8002318:	f7fe fca0 	bl	8000c5c <TypeSystemManager::CastToSealedTypeNoThrow#5593>
 800231c:	2800      	cmp	r0, #0
 800231e:	bf04      	itt	eq
 8002320:	2000      	moveq	r0, #0
 8002322:	bd70      	popeq	{r4, r5, r6, pc}
 8002324:	4809      	ldr	r0, [pc, #36]	; (800234c <UInt32::Equals#3084+0x44>)
 8002326:	4478      	add	r0, pc
            {
                return false;
            }

            return Equals( (UInt32)obj );
 8002328:	1831      	adds	r1, r6, r0
 800232a:	4628      	mov	r0, r5
 800232c:	f7fe fda2 	bl	8000e74 <TypeSystemManager::CastToSealedType#5592>
 8002330:	b130      	cbz	r0, 8002340 <UInt32::Equals#3084+0x38>
 8002332:	6801      	ldr	r1, [r0, #0]
 8002334:	6822      	ldr	r2, [r4, #0]
 8002336:	2000      	movs	r0, #0
 8002338:	428a      	cmp	r2, r1
 800233a:	bf08      	it	eq
 800233c:	2001      	moveq	r0, #1
 800233e:	bd70      	pop	{r4, r5, r6, pc}
 8002340:	f7fe f892 	bl	8000468 <Thread::ThrowNullException#4411>
 8002344:	17ffe802 	.word	0x17ffe802
 8002348:	e8019748 	.word	0xe8019748
 800234c:	17ffe7ee 	.word	0x17ffe7ee

08002350 <UInt32::GetHashCode#3088>:
        }

        // The absolute value of the int contained.
        public override int GetHashCode()
        {
            return ((int)m_value);
 8002350:	6800      	ldr	r0, [r0, #0]
 8002352:	4770      	bx	lr

08002354 <UInt32::ToString#3090>:
        }

        // The base 10 representation of the number with no extra padding.
        public override String ToString()
        {
            return Number.FormatUInt32( m_value, /*null,*/ NumberFormatInfo.CurrentInfo );
 8002354:	b510      	push	{r4, lr}
 8002356:	6804      	ldr	r4, [r0, #0]
 8002358:	f7fe feae 	bl	80010b8 <NumberFormatInfo::get_CurrentInfo#10451>
 800235c:	4601      	mov	r1, r0
 800235e:	4620      	mov	r0, r4
 8002360:	f7ff ffb4 	bl	80022cc <Number::FormatUInt32#7964>
 8002364:	bd10      	pop	{r4, pc}

08002366 <UInt32::ToString#3092>:
        }

        public String ToString( IFormatProvider provider )
        {
            return Number.FormatUInt32( m_value, /*null,*/ NumberFormatInfo.GetInstance( provider ) );
 8002366:	b510      	push	{r4, lr}
 8002368:	6804      	ldr	r4, [r0, #0]
 800236a:	f7fe fea5 	bl	80010b8 <NumberFormatInfo::get_CurrentInfo#10451>
 800236e:	4601      	mov	r1, r0
 8002370:	4620      	mov	r0, r4
 8002372:	f7ff ffab 	bl	80022cc <Number::FormatUInt32#7964>
 8002376:	bd10      	pop	{r4, pc}

08002378 <UInt32::ToString#3096>:
            return Number.FormatUInt32( m_value, format, NumberFormatInfo.CurrentInfo );
        }
    
        public String ToString( String          format   ,
                                IFormatProvider provider )
        {
 8002378:	b5b0      	push	{r4, r5, r7, lr}
            return Number.FormatUInt32( m_value, format, NumberFormatInfo.GetInstance( provider ) );
 800237a:	6805      	ldr	r5, [r0, #0]
 800237c:	460c      	mov	r4, r1
 800237e:	f7fe fe9b 	bl	80010b8 <NumberFormatInfo::get_CurrentInfo#10451>
 8002382:	4602      	mov	r2, r0
 8002384:	4628      	mov	r0, r5
 8002386:	4621      	mov	r1, r4
 8002388:	f7ff f834 	bl	80013f4 <Number::FormatUInt32#7965>
 800238c:	bdb0      	pop	{r4, r5, r7, pc}

0800238e <UIntPtr::.ctor#3215>:
 800238e:	2100      	movs	r1, #0
 8002390:	6001      	str	r1, [r0, #0]
 8002392:	4770      	bx	lr

08002394 <UIntPtr::Equals#3219>:
////
////        info.AddValue( "value", (ulong)m_value );
////    }

        public unsafe override bool Equals( Object obj )
        {
 8002394:	b570      	push	{r4, r5, r6, lr}
 8002396:	4605      	mov	r5, r0
 8002398:	480d      	ldr	r0, [pc, #52]	; (80023d0 <UIntPtr::Equals#3219+0x3c>)
            if(obj is UIntPtr)
 800239a:	4e0e      	ldr	r6, [pc, #56]	; (80023d4 <UIntPtr::Equals#3219+0x40>)
 800239c:	460c      	mov	r4, r1
 800239e:	4478      	add	r0, pc
 80023a0:	1831      	adds	r1, r6, r0
 80023a2:	4620      	mov	r0, r4
 80023a4:	f7fe fc5a 	bl	8000c5c <TypeSystemManager::CastToSealedTypeNoThrow#5593>
 80023a8:	2800      	cmp	r0, #0
 80023aa:	bf04      	itt	eq
 80023ac:	2000      	moveq	r0, #0
 80023ae:	bd70      	popeq	{r4, r5, r6, pc}
 80023b0:	4809      	ldr	r0, [pc, #36]	; (80023d8 <UIntPtr::Equals#3219+0x44>)
            {
                return (m_value == ((UIntPtr)obj).m_value);
 80023b2:	682d      	ldr	r5, [r5, #0]
 80023b4:	4478      	add	r0, pc
 80023b6:	1831      	adds	r1, r6, r0
 80023b8:	4620      	mov	r0, r4
 80023ba:	f7fe fd5b 	bl	8000e74 <TypeSystemManager::CastToSealedType#5592>
 80023be:	b12c      	cbz	r4, 80023cc <UIntPtr::Equals#3219+0x38>
 80023c0:	6821      	ldr	r1, [r4, #0]
 80023c2:	2000      	movs	r0, #0
 80023c4:	428d      	cmp	r5, r1
 80023c6:	bf08      	it	eq
 80023c8:	2001      	moveq	r0, #1
 80023ca:	bd70      	pop	{r4, r5, r6, pc}
 80023cc:	f7fe f84c 	bl	8000468 <Thread::ThrowNullException#4411>
 80023d0:	17ffe776 	.word	0x17ffe776
 80023d4:	e8019778 	.word	0xe8019778
 80023d8:	17ffe760 	.word	0x17ffe760

080023dc <UIntPtr::GetHashCode#3221>:
            return false;
        }

        public unsafe override int GetHashCode()
        {
            return unchecked( (int)((long)m_value) ) & 0x7fffffff;
 80023dc:	6800      	ldr	r0, [r0, #0]
 80023de:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80023e2:	4770      	bx	lr

080023e4 <UIntPtr::op_Explicit#3229>:
        {
            return new UIntPtr( value );
        }

        public static explicit operator UIntPtr (ulong value) 
        {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	2000      	movs	r0, #0
 80023ea:	9001      	str	r0, [sp, #4]
 80023ec:	a801      	add	r0, sp, #4
            return new UIntPtr(value);
 80023ee:	f7ff ffce 	bl	800238e <UIntPtr::.ctor#3215>
        }
 80023f2:	9801      	ldr	r0, [sp, #4]
 80023f4:	b002      	add	sp, #8
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <Thread::.ctor#4380>:
        //
        // Constructor Methods
        //

        [DiscardTargetImplementation]
        public ThreadImpl( System.Threading.ThreadStart start ) : this( start, new uint[ ThreadManager.Instance.DefaultStackSize / sizeof( uint ) ] ) // move to configuration??
 80023f8:	b570      	push	{r4, r5, r6, lr}
 80023fa:	4e0b      	ldr	r6, [pc, #44]	; (8002428 <Thread::.ctor#4380+0x30>)
 80023fc:	4605      	mov	r5, r0
 80023fe:	480b      	ldr	r0, [pc, #44]	; (800242c <Thread::.ctor#4380+0x34>)
 8002400:	460c      	mov	r4, r1
 8002402:	447e      	add	r6, pc
 8002404:	4430      	add	r0, r6
 8002406:	f000 f817 	bl	8002438 <ThreadManager::get_DefaultStackSize#19448>
 800240a:	4909      	ldr	r1, [pc, #36]	; (8002430 <Thread::.ctor#4380+0x38>)
 800240c:	1082      	asrs	r2, r0, #2
 800240e:	198b      	adds	r3, r1, r6
 8002410:	4908      	ldr	r1, [pc, #32]	; (8002434 <Thread::.ctor#4380+0x3c>)
 8002412:	4618      	mov	r0, r3
 8002414:	4431      	add	r1, r6
 8002416:	f7ff fafd 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 800241a:	4602      	mov	r2, r0
 800241c:	4628      	mov	r0, r5
 800241e:	4621      	mov	r1, r4
 8002420:	f000 f812 	bl	8002448 <Thread::.ctor#4381>
 8002424:	bd70      	pop	{r4, r5, r6, pc}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	17ffe712 	.word	0x17ffe712
 800242c:	fffffe18 	.word	0xfffffe18
 8002430:	fffffe0c 	.word	0xfffffe0c
 8002434:	e80197a8 	.word	0xe80197a8

08002438 <ThreadManager::get_DefaultStackSize#19448>:

        public override int DefaultStackSize
        {
            get
            {
                uint stackSize = LLOS.RuntimeMemory.LLOS_MEMORY_GetDefaultManagedStackSize();
 8002438:	b580      	push	{r7, lr}
 800243a:	f007 fae9 	bl	8009a10 <LLOS_MEMORY_GetDefaultManagedStackSize>

                if(stackSize == 0)
                {
                    return DefaultStackSizeSTM32F411;
 800243e:	2800      	cmp	r0, #0
 8002440:	bf08      	it	eq
 8002442:	f44f 5080 	moveq.w	r0, #4096	; 0x1000
 8002446:	bd80      	pop	{r7, pc}

08002448 <Thread::.ctor#4381>:
        }

        [TS.WellKnownMethod( "ThreadImpl_ctor" )]
        [DiscardTargetImplementation]
        public ThreadImpl( System.Threading.ThreadStart start ,
                           uint[]                       stack )
 8002448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800244c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002520 <Thread::.ctor#4381+0xd8>
 8002450:	4604      	mov	r4, r0
        {
            m_holder = new Synchronization.WaitingRecord.Holder();
 8002452:	4834      	ldr	r0, [pc, #208]	; (8002524 <Thread::.ctor#4381+0xdc>)
 8002454:	460f      	mov	r7, r1
 8002456:	4616      	mov	r6, r2
 8002458:	44f8      	add	r8, pc
 800245a:	eb00 0508 	add.w	r5, r0, r8
 800245e:	4832      	ldr	r0, [pc, #200]	; (8002528 <Thread::.ctor#4381+0xe0>)
 8002460:	eb00 0108 	add.w	r1, r0, r8
 8002464:	4628      	mov	r0, r5
 8002466:	f7fe fa15 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 800246a:	64a0      	str	r0, [r4, #72]	; 0x48

            m_managedThreadId   = (int)0x12340000 | s_managedThreadId++;
 800246c:	482f      	ldr	r0, [pc, #188]	; (800252c <Thread::.ctor#4381+0xe4>)
 800246e:	4440      	add	r0, r8
 8002470:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8002474:	1c4a      	adds	r2, r1, #1
 8002476:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 800247a:	f041 5080 	orr.w	r0, r1, #268435456	; 0x10000000
 800247e:	f040 700d 	orr.w	r0, r0, #36962304	; 0x2340000
 8002482:	60a0      	str	r0, [r4, #8]

            m_start             = start;
            m_stack             = stack;
 8002484:	482a      	ldr	r0, [pc, #168]	; (8002530 <Thread::.ctor#4381+0xe8>)
 8002486:	e9c4 7605 	strd	r7, r6, [r4, #20]
 800248a:	eb00 0608 	add.w	r6, r0, r8
 800248e:	4628      	mov	r0, r5
 8002490:	4631      	mov	r1, r6
 8002492:	f7fe f9ff 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8002496:	61e0      	str	r0, [r4, #28]
            m_swappedOutContext = Processor.Instance.AllocateProcessorContext();
 8002498:	4628      	mov	r0, r5
 800249a:	4631      	mov	r1, r6
 800249c:	f7fe f9fa 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80024a0:	2108      	movs	r1, #8
 80024a2:	e9c4 0108 	strd	r0, r1, [r4, #32]
            m_throwContext      = Processor.Instance.AllocateProcessorContext();

            m_state             = ThreadState.Unstarted;
            m_registrationLink  = new KernelNode< ThreadImpl                     >( this );
 80024a6:	4823      	ldr	r0, [pc, #140]	; (8002534 <Thread::.ctor#4381+0xec>)
 80024a8:	eb00 0608 	add.w	r6, r0, r8
 80024ac:	4628      	mov	r0, r5
 80024ae:	4631      	mov	r1, r6
 80024b0:	f7fe f9f0 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80024b4:	6104      	str	r4, [r0, #16]
 80024b6:	62a0      	str	r0, [r4, #40]	; 0x28
            m_schedulingLink    = new KernelNode< ThreadImpl                     >( this );
 80024b8:	4628      	mov	r0, r5
 80024ba:	4631      	mov	r1, r6
 80024bc:	f7fe f9ea 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80024c0:	6104      	str	r4, [r0, #16]
 80024c2:	62e0      	str	r0, [r4, #44]	; 0x2c
            m_ownedObjects      = new KernelList< Synchronization.WaitableObject >();
 80024c4:	481c      	ldr	r0, [pc, #112]	; (8002538 <Thread::.ctor#4381+0xf0>)
 80024c6:	eb00 0108 	add.w	r1, r0, r8
 80024ca:	4628      	mov	r0, r5
 80024cc:	f7fe f9e2 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80024d0:	4606      	mov	r6, r0
 80024d2:	f000 f93d 	bl	8002750 <KernelList`1::.ctor#19888>
            m_pendingObjects    = new KernelList< Synchronization.WaitingRecord  >();
 80024d6:	4819      	ldr	r0, [pc, #100]	; (800253c <Thread::.ctor#4381+0xf4>)
 80024d8:	6366      	str	r6, [r4, #52]	; 0x34
 80024da:	eb00 0108 	add.w	r1, r0, r8
 80024de:	4628      	mov	r0, r5
 80024e0:	f7fe f9d8 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80024e4:	4606      	mov	r6, r0
 80024e6:	f000 f957 	bl	8002798 <KernelList`1::.ctor#19900>
 80024ea:	2002      	movs	r0, #2
 80024ec:	63a6      	str	r6, [r4, #56]	; 0x38
 80024ee:	6120      	str	r0, [r4, #16]

            m_priority          = ThreadPriority.Normal;

            ThreadStart entrypoint = Entrypoint;
 80024f0:	4813      	ldr	r0, [pc, #76]	; (8002540 <Thread::.ctor#4381+0xf8>)
 80024f2:	eb00 0108 	add.w	r1, r0, r8
 80024f6:	4628      	mov	r0, r5
 80024f8:	f7fe f9cc 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80024fc:	4605      	mov	r5, r0
 80024fe:	4811      	ldr	r0, [pc, #68]	; (8002544 <Thread::.ctor#4381+0xfc>)
 8002500:	4621      	mov	r1, r4
 8002502:	eb00 0208 	add.w	r2, r0, r8
 8002506:	4628      	mov	r0, r5
 8002508:	f7fe ff40 	bl	800138c <Delegate::.ctor#5246>
            
            m_swappedOutContext.PopulateFromDelegate( entrypoint, m_stack );
 800250c:	69e0      	ldr	r0, [r4, #28]
 800250e:	b128      	cbz	r0, 800251c <Thread::.ctor#4381+0xd4>
 8002510:	69a2      	ldr	r2, [r4, #24]
 8002512:	4629      	mov	r1, r5
 8002514:	f000 f8a4 	bl	8002660 <Context::PopulateFromDelegate#6383>
 8002518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        [TS.WellKnownMethod( "ThreadImpl_ctor" )]
        [DiscardTargetImplementation]
        public ThreadImpl( System.Threading.ThreadStart start ,
                           uint[]                       stack )
        {
            m_holder = new Synchronization.WaitingRecord.Holder();
 800251c:	f7fd ffa4 	bl	8000468 <Thread::ThrowNullException#4411>
 8002520:	17ffe6bc 	.word	0x17ffe6bc
 8002524:	fffffe0c 	.word	0xfffffe0c
 8002528:	e8019808 	.word	0xe8019808
 800252c:	fffffcf8 	.word	0xfffffcf8
 8002530:	e8019838 	.word	0xe8019838
 8002534:	e8019868 	.word	0xe8019868
 8002538:	e8019898 	.word	0xe8019898
 800253c:	e80198c8 	.word	0xe80198c8
 8002540:	e80198f8 	.word	0xe80198f8
 8002544:	e8001d09 	.word	0xe8001d09

08002548 <Thread::Start#4384>:
        //
        // Helper Methods
        //

        public void Start()
        {
 8002548:	b5b0      	push	{r4, r5, r7, lr}
 800254a:	4601      	mov	r1, r0
            if((m_state & ThreadState.Unstarted) == 0)
 800254c:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
 8002550:	f010 0f08 	tst.w	r0, #8
 8002554:	d00a      	beq.n	800256c <Thread::Start#4384+0x24>
#else
                throw new ThreadStateException();
#endif
            }

            m_state &= ~ThreadState.Unstarted;
 8002556:	6a48      	ldr	r0, [r1, #36]	; 0x24

            ThreadManager.Instance.AddThread( this );
 8002558:	4a0d      	ldr	r2, [pc, #52]	; (8002590 <Thread::Start#4384+0x48>)
#else
                throw new ThreadStateException();
#endif
            }

            m_state &= ~ThreadState.Unstarted;
 800255a:	f020 0008 	bic.w	r0, r0, #8
 800255e:	6248      	str	r0, [r1, #36]	; 0x24
 8002560:	480a      	ldr	r0, [pc, #40]	; (800258c <Thread::Start#4384+0x44>)
 8002562:	4478      	add	r0, pc

            ThreadManager.Instance.AddThread( this );
 8002564:	4410      	add	r0, r2
 8002566:	f000 f81d 	bl	80025a4 <ThreadManager::AddThread#3526>
 800256a:	bdb0      	pop	{r4, r5, r7, pc}
 800256c:	4d09      	ldr	r5, [pc, #36]	; (8002594 <Thread::Start#4384+0x4c>)
            if((m_state & ThreadState.Unstarted) == 0)
            {
#if EXCEPTION_STRINGS
                throw new ThreadStateException( "Thread already started" );
#else
                throw new ThreadStateException();
 800256e:	480a      	ldr	r0, [pc, #40]	; (8002598 <Thread::Start#4384+0x50>)
 8002570:	447d      	add	r5, pc
 8002572:	1944      	adds	r4, r0, r5
 8002574:	4809      	ldr	r0, [pc, #36]	; (800259c <Thread::Start#4384+0x54>)
 8002576:	1941      	adds	r1, r0, r5
 8002578:	4620      	mov	r0, r4
 800257a:	f7fe f98b 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 800257e:	4601      	mov	r1, r0
 8002580:	4807      	ldr	r0, [pc, #28]	; (80025a0 <Thread::Start#4384+0x58>)
 8002582:	4428      	add	r0, r5
 8002584:	6088      	str	r0, [r1, #8]
 8002586:	4620      	mov	r0, r4
 8002588:	f7fe f99a 	bl	80008c0 <TypeSystemManager::Throw#5596>
 800258c:	17ffe5b2 	.word	0x17ffe5b2
 8002590:	fffffe18 	.word	0xfffffe18
 8002594:	17ffe5a4 	.word	0x17ffe5a4
 8002598:	fffffe0c 	.word	0xfffffe0c
 800259c:	e80197d8 	.word	0xe80197d8
 80025a0:	e8011018 	.word	0xe8011018

080025a4 <ThreadManager::AddThread#3526>:

            m_allThreads.InsertAtTail( thread.RegistrationLink );
        }

        public virtual void AddThread( ThreadImpl thread )
        {
 80025a4:	b5b0      	push	{r4, r5, r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	460d      	mov	r5, r1
 80025aa:	4604      	mov	r4, r0
            BugCheck.Assert( thread.SchedulingLink.VerifyUnlinked(), BugCheck.StopCode.KernelNodeStillLinked );
 80025ac:	2d00      	cmp	r5, #0
 80025ae:	bf1c      	itt	ne
 80025b0:	6ae8      	ldrne	r0, [r5, #44]	; 0x2c
 80025b2:	2800      	cmpne	r0, #0
 80025b4:	d01e      	beq.n	80025f4 <ThreadManager::AddThread#3526+0x50>
 80025b6:	f000 fde3 	bl	8003180 <KernelNode`1::VerifyUnlinked#19771>
 80025ba:	f010 0fff 	tst.w	r0, #255	; 0xff
 80025be:	d016      	beq.n	80025ee <ThreadManager::AddThread#3526+0x4a>
 80025c0:	2001      	movs	r0, #1
 80025c2:	f007 f875 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 80025c6:	9001      	str	r0, [sp, #4]

            using(SmartHandles.InterruptState hnd = SmartHandles.InterruptState.Disable())
            {
                RegisterThread( thread );
 80025c8:	4620      	mov	r0, r4
 80025ca:	4629      	mov	r1, r5
 80025cc:	f000 fda8 	bl	8003120 <ThreadManager::RegisterThread#3525>

                InsertInPriorityOrder( thread );
 80025d0:	4620      	mov	r0, r4
 80025d2:	4629      	mov	r1, r5
 80025d4:	f7fe f8c4 	bl	8000760 <ThreadManager::InsertInPriorityOrder#3551>

                RescheduleAndRequestContextSwitchIfNeeded( hnd.GetCurrentExceptionMode() );
 80025d8:	f000 fdde 	bl	8003198 <InterruptState::GetCurrentExceptionMode#5947>
 80025dc:	4601      	mov	r1, r0
 80025de:	4620      	mov	r0, r4
 80025e0:	f000 fdfb 	bl	80031da <ThreadManager::RescheduleAndRequestContextSwitchIfNeeded#3534>
            }
 80025e4:	9801      	ldr	r0, [sp, #4]
 80025e6:	f007 f863 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 80025ea:	b002      	add	sp, #8
 80025ec:	bdb0      	pop	{r4, r5, r7, pc}
 80025ee:	2003      	movs	r0, #3
 80025f0:	f7fd fe5c 	bl	80002ac <BugCheck::Raise#5282>
            m_allThreads.InsertAtTail( thread.RegistrationLink );
        }

        public virtual void AddThread( ThreadImpl thread )
        {
            BugCheck.Assert( thread.SchedulingLink.VerifyUnlinked(), BugCheck.StopCode.KernelNodeStillLinked );
 80025f4:	f7fd ff38 	bl	8000468 <Thread::ThrowNullException#4411>

080025f8 <Holder::Dispose#6312>:
            //
            // Helper Methods
            //

            public void Dispose()
            {
 80025f8:	b5b0      	push	{r4, r5, r7, lr}
 80025fa:	4604      	mov	r4, r0
                if(m_wr != null)
 80025fc:	69a0      	ldr	r0, [r4, #24]
 80025fe:	2800      	cmp	r0, #0
 8002600:	bf08      	it	eq
 8002602:	bdb0      	popeq	{r4, r5, r7, pc}
 8002604:	2001      	movs	r0, #1
 8002606:	f007 f853 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 800260a:	4605      	mov	r5, r0
                {
                    using(SmartHandles.InterruptState.Disable())
                    {
                        m_wr.Recycle();
 800260c:	69a0      	ldr	r0, [r4, #24]
 800260e:	b148      	cbz	r0, 8002624 <Holder::Dispose#6312+0x2c>
 8002610:	f002 fdda 	bl	80051c8 <WaitingRecord::Recycle#5649>
 8002614:	2000      	movs	r0, #0
 8002616:	61a0      	str	r0, [r4, #24]
 8002618:	e9c4 0002 	strd	r0, r0, [r4, #8]

                        m_thread         = null;
                        m_waitableObject = null;
                        m_wr             = null;
                    }
 800261c:	4628      	mov	r0, r5
 800261e:	f007 f847 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8002622:	bdb0      	pop	{r4, r5, r7, pc}
            {
                if(m_wr != null)
                {
                    using(SmartHandles.InterruptState.Disable())
                    {
                        m_wr.Recycle();
 8002624:	f7fd ff20 	bl	8000468 <Thread::ThrowNullException#4411>

08002628 <Context::Populate#6381>:

                RT.BugCheck.Assert( false, BugCheck.StopCode.IllegalMode );
            }
            
            public override void Populate( )
            {
 8002628:	b580      	push	{r7, lr}
 800262a:	490b      	ldr	r1, [pc, #44]	; (8002658 <Context::Populate#6381+0x30>)
 800262c:	4a0b      	ldr	r2, [pc, #44]	; (800265c <Context::Populate#6381+0x34>)
 800262e:	4479      	add	r1, pc
 8002630:	4411      	add	r1, r2
 8002632:	f8d1 1108 	ldr.w	r1, [r1, #264]	; 0x108
                //
                // This woudl be called on the throw context, but in ARMv7M we do not have one
                //
                ThreadImpl        thisThread = ThreadImpl.CurrentThread;
                Processor.Context ctx        = thisThread.SwappedOutContext; 
 8002636:	2900      	cmp	r1, #0
 8002638:	bf1c      	itt	ne
 800263a:	69c9      	ldrne	r1, [r1, #28]
                
                this.BaseSP     = ctx.BaseStackPointer;
 800263c:	2900      	cmpne	r1, #0
 800263e:	d008      	beq.n	8002652 <Context::Populate#6381+0x2a>
            }

            public override UIntPtr BaseStackPointer
            {
                [RT.Inline]
                get { return this.BaseSP; }
 8002640:	bf1f      	itttt	ne
 8002642:	688a      	ldrne	r2, [r1, #8]
 8002644:	6082      	strne	r2, [r0, #8]
            //

            public override UIntPtr StackPointer
            {
                [RT.Inline]
                get { return this.SP; }
 8002646:	68ca      	ldrne	r2, [r1, #12]
 8002648:	60c2      	strne	r2, [r0, #12]
            }

            public override uint ExcReturn
            {
                [RT.Inline]
                get { return this.EXC_RETURN;  }
 800264a:	bf1e      	ittt	ne
 800264c:	6909      	ldrne	r1, [r1, #16]
 800264e:	6101      	strne	r1, [r0, #16]
 8002650:	bd80      	popne	{r7, pc}
            {
                //
                // This woudl be called on the throw context, but in ARMv7M we do not have one
                //
                ThreadImpl        thisThread = ThreadImpl.CurrentThread;
                Processor.Context ctx        = thisThread.SwappedOutContext; 
 8002652:	f7fd ff09 	bl	8000468 <Thread::ThrowNullException#4411>
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	17ffe4e6 	.word	0x17ffe4e6
 800265c:	fffffcf8 	.word	0xfffffcf8

08002660 <Context::PopulateFromDelegate#6383>:
                this.SP         = context.StackPointer;
                this.EXC_RETURN = context.ExcReturn;
            }

            public unsafe override void PopulateFromDelegate( Delegate dlg, uint[] stack )
            {
 8002660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002662:	b081      	sub	sp, #4
 8002664:	460c      	mov	r4, r1
 8002666:	4617      	mov	r7, r2
 8002668:	4605      	mov	r5, r0
                DelegateImpl dlgImpl   = (DelegateImpl)(object)dlg;
                ArrayImpl    stackImpl = (ArrayImpl   )(object)stack;
                ObjectImpl   objImpl   = (ObjectImpl  )(object)dlg.Target;
 800266a:	2c00      	cmp	r4, #0
 800266c:	d03d      	beq.n	80026ea <Context::PopulateFromDelegate#6383+0x8a>
 800266e:	d03c      	beq.n	80026ea <Context::PopulateFromDelegate#6383+0x8a>
 8002670:	6860      	ldr	r0, [r4, #4]
 8002672:	69c0      	ldr	r0, [r0, #28]
 8002674:	6981      	ldr	r1, [r0, #24]
 8002676:	4620      	mov	r0, r4
 8002678:	4788      	blx	r1
 800267a:	4606      	mov	r6, r0
 800267c:	b3af      	cbz	r7, 80026ea <Context::PopulateFromDelegate#6383+0x8a>
 800267e:	68b9      	ldr	r1, [r7, #8]
 8002680:	4638      	mov	r0, r7
 8002682:	f7fe f9d1 	bl	8000a28 <Array::GetPointerToElement#4081>
 8002686:	f020 0007 	bic.w	r0, r0, #7
 800268a:	f06f 0202 	mvn.w	r2, #2
 800268e:	f105 0308 	add.w	r3, r5, #8
                // In the general case the SP will be at the top of the current frame we are building
                // When we do a LongJump though, or we start the thread first, we will have to use the base stack pointer
                //
                
                this.BaseSP     = AddressMath.AlignToLowerBoundary( new UIntPtr( stackImpl.GetEndDataPointer( ) ), 8 );
                this.SP         = AddressMath.Decrement( this.BaseSP, RegistersOnStackNoFPContext.TotalFrameSize );
 8002692:	f1a0 0190 	sub.w	r1, r0, #144	; 0x90
 8002696:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800269a:	4638      	mov	r0, r7
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	f7fe f9c3 	bl	8000a28 <Array::GetPointerToElement#4081>
                this.EXC_RETURN = c_MODE_RETURN__THREAD_PSP;

                //
                // Initial offset from start of stack storage must be at least as large as a frame
                //
                RT.BugCheck.Assert(
 80026a2:	68ea      	ldr	r2, [r5, #12]
 80026a4:	17c1      	asrs	r1, r0, #31
 80026a6:	2300      	movs	r3, #0
 80026a8:	1a80      	subs	r0, r0, r2
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f161 0100 	sbc.w	r1, r1, #0
 80026b2:	2900      	cmp	r1, #0
 80026b4:	bfc8      	it	gt
 80026b6:	2301      	movgt	r3, #1
 80026b8:	288f      	cmp	r0, #143	; 0x8f
 80026ba:	bf88      	it	hi
 80026bc:	2201      	movhi	r2, #1
 80026be:	2900      	cmp	r1, #0
 80026c0:	bf18      	it	ne
 80026c2:	461a      	movne	r2, r3
 80026c4:	b19a      	cbz	r2, 80026ee <Context::PopulateFromDelegate#6383+0x8e>
                    BugCheck.StopCode.StackCorruptionDetected);

                //
                // build the first stack frame
                //
                RegistersOnStackNoFPContext* firstFrame = GetSimpleFrame(this.SP);
 80026c6:	68e8      	ldr	r0, [r5, #12]

                firstFrame->HardwareFrameRegisters.PC         = new UIntPtr( dlgImpl.InnerGetCodePointer().Target.ToPointer() );
 80026c8:	2800      	cmp	r0, #0
 80026ca:	bf1f      	itttt	ne
 80026cc:	68e1      	ldrne	r1, [r4, #12]
 80026ce:	6401      	strne	r1, [r0, #64]	; 0x40
 80026d0:	6286      	strne	r6, [r0, #40]	; 0x28
 80026d2:	f04f 7180 	movne.w	r1, #16777216	; 0x1000000
 80026d6:	bf1f      	itttt	ne
 80026d8:	6441      	strne	r1, [r0, #68]	; 0x44
 80026da:	f06f 0102 	mvnne.w	r1, #2
 80026de:	6001      	strne	r1, [r0, #0]
 80026e0:	2102      	movne	r1, #2
 80026e2:	bf1e      	ittt	ne
 80026e4:	6041      	strne	r1, [r0, #4]
 80026e6:	b001      	addne	sp, #4
 80026e8:	bdf0      	popne	{r4, r5, r6, r7, pc}

            public unsafe override void PopulateFromDelegate( Delegate dlg, uint[] stack )
            {
                DelegateImpl dlgImpl   = (DelegateImpl)(object)dlg;
                ArrayImpl    stackImpl = (ArrayImpl   )(object)stack;
                ObjectImpl   objImpl   = (ObjectImpl  )(object)dlg.Target;
 80026ea:	f7fd febd 	bl	8000468 <Thread::ThrowNullException#4411>
 80026ee:	2013      	movs	r0, #19
 80026f0:	f7fd fddc 	bl	80002ac <BugCheck::Raise#5282>

080026f4 <Context::Unwind#6385>:
            }
            
#region Tracking Collector and Exceptions  

            public override bool Unwind( )
            {
 80026f4:	b5b0      	push	{r4, r5, r7, lr}
 80026f6:	4d08      	ldr	r5, [pc, #32]	; (8002718 <Context::Unwind#6385+0x24>)
                throw new Exception( "Unwind not implemented" );
 80026f8:	4808      	ldr	r0, [pc, #32]	; (800271c <Context::Unwind#6385+0x28>)
 80026fa:	447d      	add	r5, pc
 80026fc:	1944      	adds	r4, r0, r5
 80026fe:	4808      	ldr	r0, [pc, #32]	; (8002720 <Context::Unwind#6385+0x2c>)
 8002700:	1941      	adds	r1, r0, r5
 8002702:	4620      	mov	r0, r4
 8002704:	f7fe f8c6 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8002708:	4601      	mov	r1, r0
 800270a:	4806      	ldr	r0, [pc, #24]	; (8002724 <Context::Unwind#6385+0x30>)
 800270c:	4428      	add	r0, r5
 800270e:	6088      	str	r0, [r1, #8]
 8002710:	4620      	mov	r0, r4
 8002712:	f7fe f8d5 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	17ffe41a 	.word	0x17ffe41a
 800271c:	fffffe0c 	.word	0xfffffe0c
 8002720:	e8019b38 	.word	0xe8019b38
 8002724:	e8011888 	.word	0xe8011888

08002728 <Context::SwitchTo#19456>:
 8002728:	b580      	push	{r7, lr}
 800272a:	2011      	movs	r0, #17
 800272c:	f000 f8c8 	bl	80028c0 <ProcessorARMv7M::RaiseSupervisorCall#3606>
 8002730:	200e      	movs	r0, #14
 8002732:	f7fd fdbb 	bl	80002ac <BugCheck::Raise#5282>

08002736 <Context::get_StackPointer#6392>:
            //

            public override UIntPtr StackPointer
            {
                [RT.Inline]
                get { return this.SP; }
 8002736:	68c0      	ldr	r0, [r0, #12]
 8002738:	4770      	bx	lr

0800273a <Context::set_StackPointer#6393>:
 800273a:	60c1      	str	r1, [r0, #12]
 800273c:	4770      	bx	lr

0800273e <Context::get_BaseStackPointer#6394>:
            }

            public override UIntPtr BaseStackPointer
            {
                [RT.Inline]
                get { return this.BaseSP; }
 800273e:	6880      	ldr	r0, [r0, #8]
 8002740:	4770      	bx	lr

08002742 <Context::get_ExcReturn#6395>:
            }

            public override uint ExcReturn
            {
                [RT.Inline]
                get { return this.EXC_RETURN;  }
 8002742:	6900      	ldr	r0, [r0, #16]
 8002744:	4770      	bx	lr

08002746 <Context::get_ProgramCounter#6399>:
            public override UIntPtr ProgramCounter
            {
                get
                {
                    //return Registers.PC;
                    return (UIntPtr)0;
 8002746:	b580      	push	{r7, lr}
 8002748:	f7ff fe4c 	bl	80023e4 <UIntPtr::op_Explicit#3229>
 800274c:	bd80      	pop	{r7, pc}

0800274e <Context::set_ProgramCounter#6400>:
 800274e:	4770      	bx	lr

08002750 <KernelList`1::.ctor#19888>:

        //
        // Constructor Methods
        //

        public KernelList()
 8002750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002752:	b081      	sub	sp, #4
 8002754:	4604      	mov	r4, r0
 8002756:	480d      	ldr	r0, [pc, #52]	; (800278c <KernelList`1::.ctor#19888+0x3c>)
        {
            m_head = new KernelNode< T >( default(T) );
 8002758:	490d      	ldr	r1, [pc, #52]	; (8002790 <KernelList`1::.ctor#19888+0x40>)
 800275a:	4478      	add	r0, pc
 800275c:	180d      	adds	r5, r1, r0
 800275e:	490d      	ldr	r1, [pc, #52]	; (8002794 <KernelList`1::.ctor#19888+0x44>)
 8002760:	180e      	adds	r6, r1, r0
 8002762:	4628      	mov	r0, r5
 8002764:	4631      	mov	r1, r6
 8002766:	f7fe f895 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 800276a:	2700      	movs	r7, #0
            m_tail = new KernelNode< T >( default(T) );
 800276c:	4631      	mov	r1, r6
 800276e:	6107      	str	r7, [r0, #16]
 8002770:	60a0      	str	r0, [r4, #8]
 8002772:	4628      	mov	r0, r5
 8002774:	f7fe f88e 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8002778:	6107      	str	r7, [r0, #16]
 800277a:	60e0      	str	r0, [r4, #12]

            m_head.Next     = m_tail;
 800277c:	68a1      	ldr	r1, [r4, #8]
 800277e:	6088      	str	r0, [r1, #8]
            m_tail.Previous = m_head;
 8002780:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8002784:	60c8      	str	r0, [r1, #12]
 8002786:	b001      	add	sp, #4
 8002788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	17ffe3ba 	.word	0x17ffe3ba
 8002790:	fffffe0c 	.word	0xfffffe0c
 8002794:	e8019b68 	.word	0xe8019b68

08002798 <KernelList`1::.ctor#19900>:

        //
        // Constructor Methods
        //

        public KernelList()
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	b081      	sub	sp, #4
 800279c:	4604      	mov	r4, r0
 800279e:	480d      	ldr	r0, [pc, #52]	; (80027d4 <KernelList`1::.ctor#19900+0x3c>)
        {
            m_head = new KernelNode< T >( default(T) );
 80027a0:	490d      	ldr	r1, [pc, #52]	; (80027d8 <KernelList`1::.ctor#19900+0x40>)
 80027a2:	4478      	add	r0, pc
 80027a4:	180d      	adds	r5, r1, r0
 80027a6:	490d      	ldr	r1, [pc, #52]	; (80027dc <KernelList`1::.ctor#19900+0x44>)
 80027a8:	180e      	adds	r6, r1, r0
 80027aa:	4628      	mov	r0, r5
 80027ac:	4631      	mov	r1, r6
 80027ae:	f7fe f871 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80027b2:	2700      	movs	r7, #0
            m_tail = new KernelNode< T >( default(T) );
 80027b4:	4631      	mov	r1, r6
 80027b6:	6107      	str	r7, [r0, #16]
 80027b8:	60a0      	str	r0, [r4, #8]
 80027ba:	4628      	mov	r0, r5
 80027bc:	f7fe f86a 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80027c0:	6107      	str	r7, [r0, #16]
 80027c2:	60e0      	str	r0, [r4, #12]

            m_head.Next     = m_tail;
 80027c4:	68a1      	ldr	r1, [r4, #8]
 80027c6:	6088      	str	r0, [r1, #8]
            m_tail.Previous = m_head;
 80027c8:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80027cc:	60c8      	str	r0, [r1, #12]
 80027ce:	b001      	add	sp, #4
 80027d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	17ffe372 	.word	0x17ffe372
 80027d8:	fffffe0c 	.word	0xfffffe0c
 80027dc:	e8019bc8 	.word	0xe8019bc8

080027e0 <ThreadStart::Invoke#8496>:
 80027e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e2:	b081      	sub	sp, #4
 80027e4:	6904      	ldr	r4, [r0, #16]
 80027e6:	b19c      	cbz	r4, 8002810 <ThreadStart::Invoke#8496+0x30>
 80027e8:	68a6      	ldr	r6, [r4, #8]
 80027ea:	f104 050c 	add.w	r5, r4, #12
 80027ee:	2700      	movs	r7, #0
 80027f0:	e003      	b.n	80027fa <ThreadStart::Invoke#8496+0x1a>
 80027f2:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80027f6:	4788      	blx	r1
 80027f8:	3701      	adds	r7, #1
 80027fa:	42b7      	cmp	r7, r6
 80027fc:	da0c      	bge.n	8002818 <ThreadStart::Invoke#8496+0x38>
 80027fe:	68a0      	ldr	r0, [r4, #8]
 8002800:	4287      	cmp	r7, r0
 8002802:	d20b      	bcs.n	800281c <ThreadStart::Invoke#8496+0x3c>
 8002804:	f855 1027 	ldr.w	r1, [r5, r7, lsl #2]
 8002808:	2900      	cmp	r1, #0
 800280a:	d1f2      	bne.n	80027f2 <ThreadStart::Invoke#8496+0x12>
 800280c:	f7fd fe2c 	bl	8000468 <Thread::ThrowNullException#4411>
 8002810:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 8002814:	4608      	mov	r0, r1
 8002816:	4790      	blx	r2
 8002818:	b001      	add	sp, #4
 800281a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800281c:	f7fe fb48 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>

08002820 <Thread::Entrypoint#4393>:

        // TODO: Find out a better implementation of this attribute.  It seems to corrupt the registers for class member functions
        // (in debug builds especially).
        // [BottomOfCallStack()]
        private void Entrypoint()
        {
 8002820:	b510      	push	{r4, lr}
 8002822:	4604      	mov	r4, r0
            try
            {
                m_start();
 8002824:	6960      	ldr	r0, [r4, #20]
 8002826:	b190      	cbz	r0, 800284e <Thread::Entrypoint#4393+0x2e>
 8002828:	f7ff ffda 	bl	80027e0 <ThreadStart::Invoke#8496>
            }
            catch
            {
            }

            m_state |= ThreadState.StopRequested;
 800282c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800282e:	490a      	ldr	r1, [pc, #40]	; (8002858 <Thread::Entrypoint#4393+0x38>)
 8002830:	f040 0001 	orr.w	r0, r0, #1
 8002834:	6260      	str	r0, [r4, #36]	; 0x24
 8002836:	4807      	ldr	r0, [pc, #28]	; (8002854 <Thread::Entrypoint#4393+0x34>)
 8002838:	4478      	add	r0, pc
 800283a:	4408      	add	r0, r1
 800283c:	4621      	mov	r1, r4
 800283e:	f000 f81f 	bl	8002880 <ThreadManager::RemoveThread#3527>
 8002842:	2013      	movs	r0, #19
 8002844:	f000 f83c 	bl	80028c0 <ProcessorARMv7M::RaiseSupervisorCall#3606>
 8002848:	2012      	movs	r0, #18
 800284a:	f7fd fd2f 	bl	80002ac <BugCheck::Raise#5282>
        // [BottomOfCallStack()]
        private void Entrypoint()
        {
            try
            {
                m_start();
 800284e:	f7fd fe0b 	bl	8000468 <Thread::ThrowNullException#4411>
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	17ffe2dc 	.word	0x17ffe2dc
 8002858:	fffffe18 	.word	0xfffffe18

0800285c <Thread::GetCurrentException#4410>:
        //--//

        [NoInline]
        [TS.WellKnownMethod( "ThreadImpl_GetCurrentException" )]
        public static Exception GetCurrentException()
        {
 800285c:	b580      	push	{r7, lr}
 800285e:	4806      	ldr	r0, [pc, #24]	; (8002878 <Thread::GetCurrentException#4410+0x1c>)
        {
            [Inline]
            [TS.WellKnownMethod( "ThreadImpl_get_CurrentThread" )]
            get
            {
                return s_currentThread;
 8002860:	4906      	ldr	r1, [pc, #24]	; (800287c <Thread::GetCurrentException#4410+0x20>)
 8002862:	4478      	add	r0, pc
 8002864:	4408      	add	r0, r1
 8002866:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108

        [NoInline]
        [TS.WellKnownMethod( "ThreadImpl_GetCurrentException" )]
        public static Exception GetCurrentException()
        {
            return ThreadImpl.CurrentThread.CurrentException;
 800286a:	2800      	cmp	r0, #0

        public Exception CurrentException
        {
            get
            {
                return m_currentException;
 800286c:	bf1c      	itt	ne
 800286e:	68c0      	ldrne	r0, [r0, #12]
 8002870:	bd80      	popne	{r7, pc}

        [NoInline]
        [TS.WellKnownMethod( "ThreadImpl_GetCurrentException" )]
        public static Exception GetCurrentException()
        {
            return ThreadImpl.CurrentThread.CurrentException;
 8002872:	f7fd fdf9 	bl	8000468 <Thread::ThrowNullException#4411>
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	17ffe2b2 	.word	0x17ffe2b2
 800287c:	fffffcf8 	.word	0xfffffcf8

08002880 <ThreadManager::RemoveThread#3527>:
                RescheduleAndRequestContextSwitchIfNeeded( hnd.GetCurrentExceptionMode() );
            }
        }

        public virtual void RemoveThread( ThreadImpl thread )
        {
 8002880:	b5b0      	push	{r4, r5, r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	4604      	mov	r4, r0
 8002886:	2001      	movs	r0, #1
 8002888:	460d      	mov	r5, r1
 800288a:	f006 ff11 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 800288e:	9001      	str	r0, [sp, #4]
            using(SmartHandles.InterruptState hnd = SmartHandles.InterruptState.Disable())
            {
                thread.Detach();
 8002890:	b1a5      	cbz	r5, 80028bc <ThreadManager::RemoveThread#3527+0x3c>
 8002892:	4628      	mov	r0, r5
 8002894:	f000 fa90 	bl	8002db8 <Thread::Detach#4406>

                if(thread == m_runningThread)
 8002898:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800289a:	4285      	cmp	r5, r0
 800289c:	d003      	beq.n	80028a6 <ThreadManager::RemoveThread#3527+0x26>
                else
                {
                    //
                    // If the thread is not the running one, it won't get a chance to execute the Stop method.
                    //
                    thread.Stop();
 800289e:	4628      	mov	r0, r5
 80028a0:	f000 fa54 	bl	8002d4c <Thread::Stop#4405>
 80028a4:	e005      	b.n	80028b2 <ThreadManager::RemoveThread#3527+0x32>
            {
                thread.Detach();

                if(thread == m_runningThread)
                {
                    RescheduleAndRequestContextSwitchIfNeeded( hnd.GetCurrentExceptionMode() );
 80028a6:	f000 fc77 	bl	8003198 <InterruptState::GetCurrentExceptionMode#5947>
 80028aa:	4601      	mov	r1, r0
 80028ac:	4620      	mov	r0, r4
 80028ae:	f000 fc94 	bl	80031da <ThreadManager::RescheduleAndRequestContextSwitchIfNeeded#3534>
                    //
                    // If the thread is not the running one, it won't get a chance to execute the Stop method.
                    //
                    thread.Stop();
                }
            }
 80028b2:	9801      	ldr	r0, [sp, #4]
 80028b4:	f006 fefc 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 80028b8:	b002      	add	sp, #8
 80028ba:	bdb0      	pop	{r4, r5, r7, pc}

        public virtual void RemoveThread( ThreadImpl thread )
        {
            using(SmartHandles.InterruptState hnd = SmartHandles.InterruptState.Disable())
            {
                thread.Detach();
 80028bc:	f7fd fdd4 	bl	8000468 <Thread::ThrowNullException#4411>

080028c0 <ProcessorARMv7M::RaiseSupervisorCall#3606>:
 80028c0:	b5b0      	push	{r4, r5, r7, lr}
 80028c2:	b2c0      	uxtb	r0, r0
 80028c4:	3811      	subs	r0, #17
 80028c6:	2803      	cmp	r0, #3
 80028c8:	d80f      	bhi.n	80028ea <ProcessorARMv7M::RaiseSupervisorCall#3606+0x2a>
 80028ca:	e8df f000 	tbb	[pc, r0]
 80028ce:	0502      	.short	0x0502
 80028d0:	0b08      	.short	0x0b08
 80028d2:	f006 ff29 	bl	8009728 <CUSTOM_STUB_RaiseSupervisorCallForLongJump>
 80028d6:	bdb0      	pop	{r4, r5, r7, pc}
 80028d8:	f006 ff2a 	bl	8009730 <CUSTOM_STUB_RaiseSupervisorCallForStartThreads>
 80028dc:	bdb0      	pop	{r4, r5, r7, pc}
 80028de:	f006 ff2b 	bl	8009738 <CUSTOM_STUB_RaiseSupervisorCallForRetireThread>
 80028e2:	bdb0      	pop	{r4, r5, r7, pc}
 80028e4:	f006 ff2c 	bl	8009740 <CUSTOM_STUB_RaiseSupervisorCallForSnapshotProcessModeRegisters>
 80028e8:	bdb0      	pop	{r4, r5, r7, pc}
 80028ea:	4d08      	ldr	r5, [pc, #32]	; (800290c <ProcessorARMv7M::RaiseSupervisorCall#3606+0x4c>)
 80028ec:	4808      	ldr	r0, [pc, #32]	; (8002910 <ProcessorARMv7M::RaiseSupervisorCall#3606+0x50>)
 80028ee:	447d      	add	r5, pc
 80028f0:	1944      	adds	r4, r0, r5
 80028f2:	4808      	ldr	r0, [pc, #32]	; (8002914 <ProcessorARMv7M::RaiseSupervisorCall#3606+0x54>)
 80028f4:	1941      	adds	r1, r0, r5
 80028f6:	4620      	mov	r0, r4
 80028f8:	f7fd ffcc 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80028fc:	4601      	mov	r1, r0
 80028fe:	4806      	ldr	r0, [pc, #24]	; (8002918 <ProcessorARMv7M::RaiseSupervisorCall#3606+0x58>)
 8002900:	4428      	add	r0, r5
 8002902:	6088      	str	r0, [r1, #8]
 8002904:	4620      	mov	r0, r4
 8002906:	f7fd ffdb 	bl	80008c0 <TypeSystemManager::Throw#5596>
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	17ffe226 	.word	0x17ffe226
 8002910:	fffffe0c 	.word	0xfffffe0c
 8002914:	e80199e8 	.word	0xe80199e8
 8002918:	e8011058 	.word	0xe8011058

0800291c <Thread::Yield#4396>:
        }

        //--//

        public void Yield()
        {
 800291c:	b580      	push	{r7, lr}
 800291e:	4803      	ldr	r0, [pc, #12]	; (800292c <Thread::Yield#4396+0x10>)
            ThreadManager.Instance.Yield();
 8002920:	4903      	ldr	r1, [pc, #12]	; (8002930 <Thread::Yield#4396+0x14>)
 8002922:	4478      	add	r0, pc
 8002924:	4408      	add	r0, r1
 8002926:	f000 f805 	bl	8002934 <ThreadManager::Yield#3529>
 800292a:	bd80      	pop	{r7, pc}
 800292c:	17ffe1f2 	.word	0x17ffe1f2
 8002930:	fffffe18 	.word	0xfffffe18

08002934 <ThreadManager::Yield#3529>:
        }

        //--//

        public virtual void Yield()
        {
 8002934:	b570      	push	{r4, r5, r6, lr}
 8002936:	4604      	mov	r4, r0
 8002938:	480f      	ldr	r0, [pc, #60]	; (8002978 <ThreadManager::Yield#3529+0x44>)
            BugCheck.AssertInterruptsOn();
 800293a:	4910      	ldr	r1, [pc, #64]	; (800297c <ThreadManager::Yield#3529+0x48>)
 800293c:	4478      	add	r0, pc
 800293e:	180d      	adds	r5, r1, r0
 8002940:	f000 fc6a 	bl	8003218 <BugCheck::AssertInterruptsOn#5290>
 8002944:	f8d5 5108 	ldr.w	r5, [r5, #264]	; 0x108

            ThreadImpl thisThread = ThreadImpl.CurrentThread;

            BugCheck.Assert( thisThread != null, BugCheck.StopCode.NoCurrentThread );
 8002948:	2d00      	cmp	r5, #0
 800294a:	4628      	mov	r0, r5
 800294c:	bf18      	it	ne
 800294e:	2001      	movne	r0, #1
 8002950:	b178      	cbz	r0, 8002972 <ThreadManager::Yield#3529+0x3e>
 8002952:	2001      	movs	r0, #1
 8002954:	f006 feac 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8002958:	4606      	mov	r6, r0

            using (SmartHandles.InterruptState hnd = SmartHandles.InterruptState.Disable())
            {
                InsertInPriorityOrder(thisThread);
 800295a:	4620      	mov	r0, r4
 800295c:	4629      	mov	r1, r5
 800295e:	f7fd feff 	bl	8000760 <ThreadManager::InsertInPriorityOrder#3551>

                RescheduleAndRequestContextSwitchIfNeeded(HardwareException.None);
 8002962:	4620      	mov	r0, r4
 8002964:	2100      	movs	r1, #0
 8002966:	f000 fc38 	bl	80031da <ThreadManager::RescheduleAndRequestContextSwitchIfNeeded#3534>
            }
 800296a:	4630      	mov	r0, r6
 800296c:	f006 fea0 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8002970:	bd70      	pop	{r4, r5, r6, pc}
 8002972:	2004      	movs	r0, #4
 8002974:	f7fd fc9a 	bl	80002ac <BugCheck::Raise#5282>
 8002978:	17ffe1d8 	.word	0x17ffe1d8
 800297c:	fffffcf8 	.word	0xfffffcf8

08002980 <Thread::RegisterWait#4397>:
        }

        public void RegisterWait( KernelNode< Synchronization.WaitingRecord > node )
        {
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	b081      	sub	sp, #4
 8002984:	460c      	mov	r4, r1
 8002986:	4605      	mov	r5, r0
            BugCheck.AssertInterruptsOff();
 8002988:	f000 f85a 	bl	8002a40 <BugCheck::AssertInterruptsOff#5289>

            SchedulerTime timeout = node.Target.Timeout;
 800298c:	2c00      	cmp	r4, #0
 800298e:	bf1c      	itt	ne
 8002990:	6920      	ldrne	r0, [r4, #16]
 8002992:	2800      	cmpne	r0, #0
 8002994:	d047      	beq.n	8002a26 <Thread::RegisterWait#4397+0xa6>
 8002996:	4925      	ldr	r1, [pc, #148]	; (8002a2c <Thread::RegisterWait#4397+0xac>)

            if(timeout == SchedulerTime.MaxValue)
 8002998:	4a25      	ldr	r2, [pc, #148]	; (8002a30 <Thread::RegisterWait#4397+0xb0>)
 800299a:	4479      	add	r1, pc
 800299c:	4411      	add	r1, r2
 800299e:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 80029a2:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 80029a4:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
 80029a8:	ea87 0002 	eor.w	r0, r7, r2
 80029ac:	4071      	eors	r1, r6
 80029ae:	4308      	orrs	r0, r1
            {
                //
                // No timeout, add at end.
                //
                m_pendingObjects.InsertAtTail( node );
 80029b0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
        {
            BugCheck.AssertInterruptsOff();

            SchedulerTime timeout = node.Target.Timeout;

            if(timeout == SchedulerTime.MaxValue)
 80029b2:	d104      	bne.n	80029be <Thread::RegisterWait#4397+0x3e>
 80029b4:	68c0      	ldr	r0, [r0, #12]
            {
                //
                // No timeout, add at end.
                //
                m_pendingObjects.InsertAtTail( node );
 80029b6:	4621      	mov	r1, r4
 80029b8:	f000 f84f 	bl	8002a5a <KernelList`1::InsertAtTail#19901>
 80029bc:	e02a      	b.n	8002a14 <Thread::RegisterWait#4397+0x94>
 80029be:	6880      	ldr	r0, [r0, #8]
 80029c0:	6880      	ldr	r0, [r0, #8]
            else
            {
                //
                // Insert in order.
                //
                KernelNode< Synchronization.WaitingRecord > node2            = m_pendingObjects.StartOfForwardWalk;
 80029c2:	f000 f854 	bl	8002a6e <KernelList`1::get_StartOfForwardWalk#19907>
 80029c6:	4601      	mov	r1, r0
 80029c8:	2501      	movs	r5, #1
 80029ca:	e001      	b.n	80029d0 <Thread::RegisterWait#4397+0x50>
 80029cc:	6889      	ldr	r1, [r1, #8]
 80029ce:	2500      	movs	r5, #0
 80029d0:	b349      	cbz	r1, 8002a26 <Thread::RegisterWait#4397+0xa6>
 80029d2:	6888      	ldr	r0, [r1, #8]
 80029d4:	b188      	cbz	r0, 80029fa <Thread::RegisterWait#4397+0x7a>
 80029d6:	6908      	ldr	r0, [r1, #16]
 80029d8:	b328      	cbz	r0, 8002a26 <Thread::RegisterWait#4397+0xa6>
 80029da:	69c2      	ldr	r2, [r0, #28]
 80029dc:	6980      	ldr	r0, [r0, #24]
 80029de:	42b0      	cmp	r0, r6
 80029e0:	f04f 0000 	mov.w	r0, #0
 80029e4:	bf88      	it	hi
 80029e6:	2001      	movhi	r0, #1
 80029e8:	42ba      	cmp	r2, r7
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	bf88      	it	hi
 80029f0:	2201      	movhi	r2, #1
 80029f2:	bf08      	it	eq
 80029f4:	4602      	moveq	r2, r0
                bool                                        fInvalidateTimer = true;

                while(node2.IsValidForForwardMove)
                {
                    if(node2.Target.Timeout > timeout)
 80029f6:	2a00      	cmp	r2, #0
 80029f8:	d0e8      	beq.n	80029cc <Thread::RegisterWait#4397+0x4c>

                    node2            = node2.Next;
                    fInvalidateTimer = false;
                }

                node.InsertBefore( node2 );
 80029fa:	4620      	mov	r0, r4
 80029fc:	f000 f838 	bl	8002a70 <KernelNode`1::InsertBefore#19914>

                if(fInvalidateTimer)
 8002a00:	f015 0fff 	tst.w	r5, #255	; 0xff
 8002a04:	d006      	beq.n	8002a14 <Thread::RegisterWait#4397+0x94>
 8002a06:	490b      	ldr	r1, [pc, #44]	; (8002a34 <Thread::RegisterWait#4397+0xb4>)
 8002a08:	480b      	ldr	r0, [pc, #44]	; (8002a38 <Thread::RegisterWait#4397+0xb8>)
 8002a0a:	4479      	add	r1, pc
 8002a0c:	4401      	add	r1, r0
 8002a0e:	f891 1020 	ldrb.w	r1, [r1, #32]
 8002a12:	b109      	cbz	r1, 8002a18 <Thread::RegisterWait#4397+0x98>
 8002a14:	b001      	add	sp, #4
 8002a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a18:	4908      	ldr	r1, [pc, #32]	; (8002a3c <Thread::RegisterWait#4397+0xbc>)
 8002a1a:	4479      	add	r1, pc
 8002a1c:	4408      	add	r0, r1
 8002a1e:	f000 f83f 	bl	8002aa0 <ThreadManager::ComputeNextTimeout#3546>
 8002a22:	b001      	add	sp, #4
 8002a24:	bdf0      	pop	{r4, r5, r6, r7, pc}

        public void RegisterWait( KernelNode< Synchronization.WaitingRecord > node )
        {
            BugCheck.AssertInterruptsOff();

            SchedulerTime timeout = node.Target.Timeout;
 8002a26:	f7fd fd1f 	bl	8000468 <Thread::ThrowNullException#4411>
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	17ffe17a 	.word	0x17ffe17a
 8002a30:	fffffcf8 	.word	0xfffffcf8
 8002a34:	17ffe10a 	.word	0x17ffe10a
 8002a38:	fffffe18 	.word	0xfffffe18
 8002a3c:	17ffe0fa 	.word	0x17ffe0fa

08002a40 <BugCheck::AssertInterruptsOff#5289>:
        }

        //--//

        public static void AssertInterruptsOff()
        {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	f006 fe31 	bl	80096a8 <CMSIS_STUB_SCB__get_BASEPRI>
 8002a46:	2100      	movs	r1, #0
 8002a48:	2802      	cmp	r0, #2
 8002a4a:	bf38      	it	cc
 8002a4c:	2101      	movcc	r1, #1

        [Inline]
        public static void Assert( bool     condition ,
                                   StopCode code      )
        {
            if(!condition)
 8002a4e:	2900      	cmp	r1, #0
 8002a50:	bf18      	it	ne
 8002a52:	bd80      	popne	{r7, pc}
            {
                Raise( code );
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7fd fc29 	bl	80002ac <BugCheck::Raise#5282>

08002a5a <KernelList`1::InsertAtTail#19901>:
        //
        // Helper Methods
        //

        public void InsertAtTail( KernelNode< T > node )
        {
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	4602      	mov	r2, r0
            node.InsertBefore( m_tail );
 8002a5e:	b121      	cbz	r1, 8002a6a <KernelList`1::InsertAtTail#19901+0x10>
 8002a60:	4608      	mov	r0, r1
 8002a62:	4611      	mov	r1, r2
 8002a64:	f000 f804 	bl	8002a70 <KernelNode`1::InsertBefore#19914>
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	f7fd fcfd 	bl	8000468 <Thread::ThrowNullException#4411>

08002a6e <KernelList`1::get_StartOfForwardWalk#19907>:
 8002a6e:	4770      	bx	lr

08002a70 <KernelNode`1::InsertBefore#19914>:
        // Helper Methods
        //

        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
 8002a70:	b580      	push	{r7, lr}
 8002a72:	6882      	ldr	r2, [r0, #8]
 8002a74:	b13a      	cbz	r2, 8002a86 <KernelNode`1::InsertBefore#19914+0x16>
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 8002a76:	6882      	ldr	r2, [r0, #8]
            KernelNode< T > prev = m_previous;

            next.m_previous = prev;
 8002a78:	2a00      	cmp	r2, #0

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
            KernelNode< T > prev = m_previous;
 8002a7a:	bf1e      	ittt	ne
 8002a7c:	68c3      	ldrne	r3, [r0, #12]
 8002a7e:	60d3      	strne	r3, [r2, #12]

            next.m_previous = prev;
            prev.m_next     = next;
 8002a80:	2b00      	cmpne	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <KernelNode`1::InsertBefore#19914+0x2a>
 8002a84:	609a      	str	r2, [r3, #8]
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }

            KernelNode< T > prev = place.m_previous;
 8002a86:	2900      	cmp	r1, #0
 8002a88:	bf1c      	itt	ne
 8002a8a:	68ca      	ldrne	r2, [r1, #12]

            prev.ConnectToNext( this  );
 8002a8c:	2a00      	cmpne	r2, #0
 8002a8e:	d004      	beq.n	8002a9a <KernelNode`1::InsertBefore#19914+0x2a>
 8002a90:	6090      	str	r0, [r2, #8]
 8002a92:	e9c0 1202 	strd	r1, r2, [r0, #8]
 8002a96:	60c8      	str	r0, [r1, #12]
 8002a98:	bd80      	pop	{r7, pc}
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }

            KernelNode< T > prev = place.m_previous;
 8002a9a:	f7fd fce5 	bl	8000468 <Thread::ThrowNullException#4411>
 8002a9e:	46c0      	nop			; (mov r8, r8)

08002aa0 <ThreadManager::ComputeNextTimeout#3546>:

            ComputeNextTimeout();
        }

        private void ComputeNextTimeout()
        {
 8002aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aa2:	b081      	sub	sp, #4
 8002aa4:	4604      	mov	r4, r0
            SchedulerTime            nextTimeout = SchedulerTime.MaxValue;
            KernelNode< ThreadImpl > node        = m_waitingThreads.StartOfForwardWalk;
 8002aa6:	6920      	ldr	r0, [r4, #16]
 8002aa8:	b320      	cbz	r0, 8002af4 <ThreadManager::ComputeNextTimeout#3546+0x54>
 8002aaa:	4917      	ldr	r1, [pc, #92]	; (8002b08 <ThreadManager::ComputeNextTimeout#3546+0x68>)
 8002aac:	6880      	ldr	r0, [r0, #8]
            ComputeNextTimeout();
        }

        private void ComputeNextTimeout()
        {
            SchedulerTime            nextTimeout = SchedulerTime.MaxValue;
 8002aae:	4a17      	ldr	r2, [pc, #92]	; (8002b0c <ThreadManager::ComputeNextTimeout#3546+0x6c>)
 8002ab0:	4479      	add	r1, pc
 8002ab2:	6880      	ldr	r0, [r0, #8]
 8002ab4:	4411      	add	r1, r2
 8002ab6:	e9d1 651f 	ldrd	r6, r5, [r1, #124]	; 0x7c
            KernelNode< ThreadImpl > node        = m_waitingThreads.StartOfForwardWalk;
 8002aba:	f000 fc71 	bl	80033a0 <KernelList`1::get_StartOfForwardWalk#19741>
 8002abe:	4607      	mov	r7, r0
 8002ac0:	e012      	b.n	8002ae8 <ThreadManager::ComputeNextTimeout#3546+0x48>

            while(node.IsValidForForwardMove)
            {
                SchedulerTime threadTimeout = node.Target.GetFirstTimeout();
 8002ac2:	f000 f869 	bl	8002b98 <Thread::GetFirstTimeout#4400>
 8002ac6:	4286      	cmp	r6, r0
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	bf88      	it	hi
 8002ad2:	2201      	movhi	r2, #1
 8002ad4:	428d      	cmp	r5, r1
 8002ad6:	bf88      	it	hi
 8002ad8:	2301      	movhi	r3, #1
 8002ada:	bf08      	it	eq
 8002adc:	4613      	moveq	r3, r2

                if(nextTimeout > threadTimeout)
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	bf1c      	itt	ne
 8002ae2:	460d      	movne	r5, r1
 8002ae4:	4606      	movne	r6, r0
 8002ae6:	68bf      	ldr	r7, [r7, #8]
 8002ae8:	b127      	cbz	r7, 8002af4 <ThreadManager::ComputeNextTimeout#3546+0x54>
 8002aea:	68b8      	ldr	r0, [r7, #8]
        private void ComputeNextTimeout()
        {
            SchedulerTime            nextTimeout = SchedulerTime.MaxValue;
            KernelNode< ThreadImpl > node        = m_waitingThreads.StartOfForwardWalk;

            while(node.IsValidForForwardMove)
 8002aec:	b120      	cbz	r0, 8002af8 <ThreadManager::ComputeNextTimeout#3546+0x58>
 8002aee:	6938      	ldr	r0, [r7, #16]
            {
                SchedulerTime threadTimeout = node.Target.GetFirstTimeout();
 8002af0:	2800      	cmp	r0, #0
 8002af2:	d1e6      	bne.n	8002ac2 <ThreadManager::ComputeNextTimeout#3546+0x22>
        }

        private void ComputeNextTimeout()
        {
            SchedulerTime            nextTimeout = SchedulerTime.MaxValue;
            KernelNode< ThreadImpl > node        = m_waitingThreads.StartOfForwardWalk;
 8002af4:	f7fd fcb8 	bl	8000468 <Thread::ThrowNullException#4411>
                }

                node = node.Next;
            }

            SetNextWaitTimer( nextTimeout );
 8002af8:	4620      	mov	r0, r4
 8002afa:	4632      	mov	r2, r6
 8002afc:	462b      	mov	r3, r5
 8002afe:	f000 fc51 	bl	80033a4 <ThreadManager::SetNextWaitTimer#18646>
 8002b02:	b001      	add	sp, #4
 8002b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	17ffe064 	.word	0x17ffe064
 8002b0c:	fffffcf8 	.word	0xfffffcf8

08002b10 <Thread::UnregisterWait#4399>:
                }
            }
        }

        public void UnregisterWait( KernelNode< Synchronization.WaitingRecord > node )
        {
 8002b10:	b510      	push	{r4, lr}
 8002b12:	4604      	mov	r4, r0
            BugCheck.AssertInterruptsOff();
 8002b14:	f7ff ff94 	bl	8002a40 <BugCheck::AssertInterruptsOff#5289>
 8002b18:	b304      	cbz	r4, 8002b5c <Thread::UnregisterWait#4399+0x4c>

            node.RemoveFromList();
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f000 f82a 	bl	8002b74 <KernelNode`1::RemoveFromList#19915>
 8002b20:	6920      	ldr	r0, [r4, #16]
 8002b22:	b1d8      	cbz	r0, 8002b5c <Thread::UnregisterWait#4399+0x4c>
 8002b24:	490e      	ldr	r1, [pc, #56]	; (8002b60 <Thread::UnregisterWait#4399+0x50>)

            SchedulerTime timeout = node.Target.Timeout;

            if(timeout != SchedulerTime.MaxValue)
 8002b26:	4a0f      	ldr	r2, [pc, #60]	; (8002b64 <Thread::UnregisterWait#4399+0x54>)
 8002b28:	4479      	add	r1, pc
 8002b2a:	4411      	add	r1, r2
 8002b2c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8002b30:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8002b32:	69c3      	ldr	r3, [r0, #28]
 8002b34:	6980      	ldr	r0, [r0, #24]
 8002b36:	405a      	eors	r2, r3
 8002b38:	4048      	eors	r0, r1
 8002b3a:	4310      	orrs	r0, r2
 8002b3c:	d00d      	beq.n	8002b5a <Thread::UnregisterWait#4399+0x4a>
 8002b3e:	490a      	ldr	r1, [pc, #40]	; (8002b68 <Thread::UnregisterWait#4399+0x58>)
 8002b40:	480a      	ldr	r0, [pc, #40]	; (8002b6c <Thread::UnregisterWait#4399+0x5c>)
 8002b42:	4479      	add	r1, pc
 8002b44:	4401      	add	r1, r0
 8002b46:	f891 1020 	ldrb.w	r1, [r1, #32]
 8002b4a:	2900      	cmp	r1, #0
 8002b4c:	bf18      	it	ne
 8002b4e:	bd10      	popne	{r4, pc}
 8002b50:	4907      	ldr	r1, [pc, #28]	; (8002b70 <Thread::UnregisterWait#4399+0x60>)
 8002b52:	4479      	add	r1, pc
 8002b54:	4408      	add	r0, r1
 8002b56:	f7ff ffa3 	bl	8002aa0 <ThreadManager::ComputeNextTimeout#3546>
 8002b5a:	bd10      	pop	{r4, pc}

        public void UnregisterWait( KernelNode< Synchronization.WaitingRecord > node )
        {
            BugCheck.AssertInterruptsOff();

            node.RemoveFromList();
 8002b5c:	f7fd fc84 	bl	8000468 <Thread::ThrowNullException#4411>
 8002b60:	17ffdfec 	.word	0x17ffdfec
 8002b64:	fffffcf8 	.word	0xfffffcf8
 8002b68:	17ffdfd2 	.word	0x17ffdfd2
 8002b6c:	fffffe18 	.word	0xfffffe18
 8002b70:	17ffdfc2 	.word	0x17ffdfc2

08002b74 <KernelNode`1::RemoveFromList#19915>:
            this.ConnectToNext( place );
        }

        public void RemoveFromList()
        {
            if(m_next != null)
 8002b74:	b580      	push	{r7, lr}
 8002b76:	6881      	ldr	r1, [r0, #8]
 8002b78:	b139      	cbz	r1, 8002b8a <KernelNode`1::RemoveFromList#19915+0x16>
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 8002b7a:	6881      	ldr	r1, [r0, #8]
            KernelNode< T > prev = m_previous;

            next.m_previous = prev;
 8002b7c:	2900      	cmp	r1, #0

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
            KernelNode< T > prev = m_previous;
 8002b7e:	bf1e      	ittt	ne
 8002b80:	68c2      	ldrne	r2, [r0, #12]
 8002b82:	60ca      	strne	r2, [r1, #12]

            next.m_previous = prev;
            prev.m_next     = next;
 8002b84:	2a00      	cmpne	r2, #0
 8002b86:	d004      	beq.n	8002b92 <KernelNode`1::RemoveFromList#19915+0x1e>
 8002b88:	6091      	str	r1, [r2, #8]
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8002b90:	bd80      	pop	{r7, pc}
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
            KernelNode< T > prev = m_previous;

            next.m_previous = prev;
 8002b92:	f7fd fc69 	bl	8000468 <Thread::ThrowNullException#4411>
 8002b96:	46c0      	nop			; (mov r8, r8)

08002b98 <Thread::GetFirstTimeout#4400>:
                ThreadManager.Instance.InvalidateNextWaitTimer();
            }
        }

        public SchedulerTime GetFirstTimeout()
        {
 8002b98:	b510      	push	{r4, lr}
 8002b9a:	4604      	mov	r4, r0
            BugCheck.AssertInterruptsOff();
 8002b9c:	f7ff ff50 	bl	8002a40 <BugCheck::AssertInterruptsOff#5289>

            Synchronization.WaitingRecord wr = m_pendingObjects.FirstTarget();
 8002ba0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002ba2:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
 8002ba6:	6890      	ldr	r0, [r2, #8]
 8002ba8:	f000 f812 	bl	8002bd0 <KernelList`1::FirstTarget#19903>

            return wr != null ? wr.Timeout : SchedulerTime.MaxValue;
 8002bac:	2800      	cmp	r0, #0
 8002bae:	bf1e      	ittt	ne
 8002bb0:	69c1      	ldrne	r1, [r0, #28]
 8002bb2:	6980      	ldrne	r0, [r0, #24]
 8002bb4:	bd10      	popne	{r4, pc}
 8002bb6:	4804      	ldr	r0, [pc, #16]	; (8002bc8 <Thread::GetFirstTimeout#4400+0x30>)
 8002bb8:	4904      	ldr	r1, [pc, #16]	; (8002bcc <Thread::GetFirstTimeout#4400+0x34>)
 8002bba:	4478      	add	r0, pc
 8002bbc:	4408      	add	r0, r1
 8002bbe:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8002bc2:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8002bc4:	bd10      	pop	{r4, pc}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	17ffdf5a 	.word	0x17ffdf5a
 8002bcc:	fffffcf8 	.word	0xfffffcf8

08002bd0 <KernelList`1::FirstTarget#19903>:

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;

            if(node != m_tail)
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	4288      	cmp	r0, r1
 8002bd4:	bf04      	itt	eq
 8002bd6:	2000      	moveq	r0, #0
 8002bd8:	bd80      	popeq	{r7, pc}
            {
                return node.Target;
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	bf1c      	itt	ne
 8002bde:	6900      	ldrne	r0, [r0, #16]
 8002be0:	bd80      	popne	{r7, pc}
            return null;
        }

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;
 8002be2:	f7fd fc41 	bl	8000468 <Thread::ThrowNullException#4411>

08002be6 <Thread::ProcessWaitExpiration#4401>:
        }

        public void ProcessWaitExpiration( SchedulerTime currentTime )
        {
 8002be6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002be8:	b081      	sub	sp, #4
 8002bea:	461d      	mov	r5, r3
 8002bec:	4616      	mov	r6, r2
 8002bee:	4604      	mov	r4, r0
            BugCheck.AssertInterruptsOff();
 8002bf0:	f7ff ff26 	bl	8002a40 <BugCheck::AssertInterruptsOff#5289>

            KernelNode< Synchronization.WaitingRecord > node    = m_pendingObjects.StartOfForwardWalk;
 8002bf4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002bf6:	6880      	ldr	r0, [r0, #8]
 8002bf8:	6880      	ldr	r0, [r0, #8]
 8002bfa:	f7ff ff38 	bl	8002a6e <KernelList`1::get_StartOfForwardWalk#19907>
 8002bfe:	4607      	mov	r7, r0
 8002c00:	2100      	movs	r1, #0
 8002c02:	e004      	b.n	8002c0e <Thread::ProcessWaitExpiration#4401+0x28>
 8002c04:	68bf      	ldr	r7, [r7, #8]
 8002c06:	2100      	movs	r1, #0
                }
                else
                {
                    KernelNode< Synchronization.WaitingRecord > nodeNext = node.Next;

                    wr.RequestFulfilled = false;
 8002c08:	f000 f820 	bl	8002c4c <WaitingRecord::set_RequestFulfilled#5656>
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	b1df      	cbz	r7, 8002c48 <Thread::ProcessWaitExpiration#4401+0x62>
 8002c10:	68b8      	ldr	r0, [r7, #8]
 8002c12:	b188      	cbz	r0, 8002c38 <Thread::ProcessWaitExpiration#4401+0x52>
 8002c14:	6938      	ldr	r0, [r7, #16]
 8002c16:	b1b8      	cbz	r0, 8002c48 <Thread::ProcessWaitExpiration#4401+0x62>
 8002c18:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8002c1c:	42b2      	cmp	r2, r6
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	bf88      	it	hi
 8002c24:	2201      	movhi	r2, #1
 8002c26:	42ab      	cmp	r3, r5
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	bf88      	it	hi
 8002c2e:	2301      	movhi	r3, #1
 8002c30:	bf08      	it	eq
 8002c32:	4613      	moveq	r3, r2
                Synchronization.WaitingRecord wr = node.Target;

                //
                // The items are kept sorted, so we can stop at the first failure.
                //
                if(wr.Timeout > currentTime)
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0e5      	beq.n	8002c04 <Thread::ProcessWaitExpiration#4401+0x1e>

                    node = nodeNext;
                }
            }

            if(fWakeup)
 8002c38:	f011 0fff 	tst.w	r1, #255	; 0xff
            {
                Wakeup();
 8002c3c:	bf1c      	itt	ne
 8002c3e:	4620      	movne	r0, r4
 8002c40:	f000 f812 	blne	8002c68 <Thread::Wakeup#4402>
 8002c44:	b001      	add	sp, #4
 8002c46:	bdf0      	pop	{r4, r5, r6, r7, pc}

        public void ProcessWaitExpiration( SchedulerTime currentTime )
        {
            BugCheck.AssertInterruptsOff();

            KernelNode< Synchronization.WaitingRecord > node    = m_pendingObjects.StartOfForwardWalk;
 8002c48:	f7fd fc0e 	bl	8000468 <Thread::ThrowNullException#4411>

08002c4c <WaitingRecord::set_RequestFulfilled#5656>:
                return m_fulfilled;
            }

            set
            {
                if(m_processed == false)
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	f890 2020 	ldrb.w	r2, [r0, #32]
 8002c52:	2a00      	cmp	r2, #0
 8002c54:	bf18      	it	ne
 8002c56:	bd80      	popne	{r7, pc}
 8002c58:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	f880 1020 	strb.w	r1, [r0, #32]
                {
                    m_fulfilled = value;
                    m_processed = true;

                    Disconnect();
 8002c62:	f002 fb61 	bl	8005328 <WaitingRecord::Disconnect#5650>
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <Thread::Wakeup#4402>:
                Wakeup();
            }
        }

        public void Wakeup()
        {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	4601      	mov	r1, r0
 8002c6c:	4803      	ldr	r0, [pc, #12]	; (8002c7c <Thread::Wakeup#4402+0x14>)
            ThreadManager.Instance.Wakeup( this );
 8002c6e:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <Thread::Wakeup#4402+0x18>)
 8002c70:	4478      	add	r0, pc
 8002c72:	4410      	add	r0, r2
 8002c74:	f000 f806 	bl	8002c84 <ThreadManager::Wakeup#3531>
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	17ffdea4 	.word	0x17ffdea4
 8002c80:	fffffe18 	.word	0xfffffe18

08002c84 <ThreadManager::Wakeup#3531>:
                }
            }
        }

        public virtual void Wakeup( ThreadImpl thread )
        {
 8002c84:	b5b0      	push	{r4, r5, r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	4604      	mov	r4, r0
 8002c8a:	2001      	movs	r0, #1
 8002c8c:	460d      	mov	r5, r1
 8002c8e:	f006 fd0f 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8002c92:	9001      	str	r0, [sp, #4]
            using(SmartHandles.InterruptState hnd = SmartHandles.InterruptState.Disable())
            {
                if(thread.IsWaiting)
 8002c94:	b1bd      	cbz	r5, 8002cc6 <ThreadManager::Wakeup#3531+0x42>
 8002c96:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 8002c9a:	f010 0f20 	tst.w	r0, #32
 8002c9e:	d00d      	beq.n	8002cbc <ThreadManager::Wakeup#3531+0x38>
 8002ca0:	6a68      	ldr	r0, [r5, #36]	; 0x24
                {
                    thread.State &= ~System.Threading.ThreadState.WaitSleepJoin;

                    InsertInPriorityOrder( thread );
 8002ca2:	4629      	mov	r1, r5
        {
            using(SmartHandles.InterruptState hnd = SmartHandles.InterruptState.Disable())
            {
                if(thread.IsWaiting)
                {
                    thread.State &= ~System.Threading.ThreadState.WaitSleepJoin;
 8002ca4:	f020 0020 	bic.w	r0, r0, #32
 8002ca8:	6268      	str	r0, [r5, #36]	; 0x24

                    InsertInPriorityOrder( thread );
 8002caa:	4620      	mov	r0, r4
 8002cac:	f7fd fd58 	bl	8000760 <ThreadManager::InsertInPriorityOrder#3551>

                    RescheduleAndRequestContextSwitchIfNeeded( hnd.GetCurrentExceptionMode() );
 8002cb0:	f000 fa72 	bl	8003198 <InterruptState::GetCurrentExceptionMode#5947>
 8002cb4:	4601      	mov	r1, r0
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	f000 fa8f 	bl	80031da <ThreadManager::RescheduleAndRequestContextSwitchIfNeeded#3534>
                }
            }
 8002cbc:	9801      	ldr	r0, [sp, #4]
 8002cbe:	f006 fcf7 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8002cc2:	b002      	add	sp, #8
 8002cc4:	bdb0      	pop	{r4, r5, r7, pc}

        public virtual void Wakeup( ThreadImpl thread )
        {
            using(SmartHandles.InterruptState hnd = SmartHandles.InterruptState.Disable())
            {
                if(thread.IsWaiting)
 8002cc6:	f7fd fbcf 	bl	8000468 <Thread::ThrowNullException#4411>

08002cca <Thread::AcquiredWaitableObject#4403>:
        }

        //--//

        public void AcquiredWaitableObject( Synchronization.WaitableObject waitableObject )
        {
 8002cca:	b570      	push	{r4, r5, r6, lr}
 8002ccc:	4606      	mov	r6, r0
 8002cce:	2001      	movs	r0, #1
 8002cd0:	460c      	mov	r4, r1
 8002cd2:	f006 fced 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8002cd6:	4605      	mov	r5, r0
            using(SmartHandles.InterruptState.Disable())
            {
                m_ownedObjects.InsertAtTail( waitableObject.OwnershipLink );
 8002cd8:	b144      	cbz	r4, 8002cec <Thread::AcquiredWaitableObject#4403+0x22>
 8002cda:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8002cdc:	68a1      	ldr	r1, [r4, #8]
 8002cde:	68c0      	ldr	r0, [r0, #12]
 8002ce0:	f000 f806 	bl	8002cf0 <KernelList`1::InsertAtTail#19889>
            }
 8002ce4:	4628      	mov	r0, r5
 8002ce6:	f006 fce3 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8002cea:	bd70      	pop	{r4, r5, r6, pc}

        public void AcquiredWaitableObject( Synchronization.WaitableObject waitableObject )
        {
            using(SmartHandles.InterruptState.Disable())
            {
                m_ownedObjects.InsertAtTail( waitableObject.OwnershipLink );
 8002cec:	f7fd fbbc 	bl	8000468 <Thread::ThrowNullException#4411>

08002cf0 <KernelList`1::InsertAtTail#19889>:
        //
        // Helper Methods
        //

        public void InsertAtTail( KernelNode< T > node )
        {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	4602      	mov	r2, r0
            node.InsertBefore( m_tail );
 8002cf4:	b121      	cbz	r1, 8002d00 <KernelList`1::InsertAtTail#19889+0x10>
 8002cf6:	4608      	mov	r0, r1
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	f006 fb81 	bl	8009400 <KernelNode`1::InsertBefore#20239>
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	f7fd fbb2 	bl	8000468 <Thread::ThrowNullException#4411>

08002d04 <Thread::ReleasedWaitableObject#4404>:
            }
        }

        public void ReleasedWaitableObject( Synchronization.WaitableObject waitableObject )
        {
 8002d04:	b5b0      	push	{r4, r5, r7, lr}
 8002d06:	4605      	mov	r5, r0
 8002d08:	2001      	movs	r0, #1
 8002d0a:	f006 fcd1 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
            using(SmartHandles.InterruptState.Disable())
            {
                waitableObject.OwnershipLink.RemoveFromList();
 8002d0e:	2d00      	cmp	r5, #0
 8002d10:	4604      	mov	r4, r0
 8002d12:	bf1c      	itt	ne
 8002d14:	68a8      	ldrne	r0, [r5, #8]
 8002d16:	2800      	cmpne	r0, #0
 8002d18:	d005      	beq.n	8002d26 <Thread::ReleasedWaitableObject#4404+0x22>
 8002d1a:	f000 f806 	bl	8002d2a <KernelNode`1::RemoveFromList#20240>
            }
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f006 fcc6 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8002d24:	bdb0      	pop	{r4, r5, r7, pc}

        public void ReleasedWaitableObject( Synchronization.WaitableObject waitableObject )
        {
            using(SmartHandles.InterruptState.Disable())
            {
                waitableObject.OwnershipLink.RemoveFromList();
 8002d26:	f7fd fb9f 	bl	8000468 <Thread::ThrowNullException#4411>

08002d2a <KernelNode`1::RemoveFromList#20240>:
            this.ConnectToNext( place );
        }

        public void RemoveFromList()
        {
            if(m_next != null)
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	6881      	ldr	r1, [r0, #8]
 8002d2e:	b139      	cbz	r1, 8002d40 <KernelNode`1::RemoveFromList#20240+0x16>
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 8002d30:	6881      	ldr	r1, [r0, #8]
            KernelNode< T > prev = m_previous;

            next.m_previous = prev;
 8002d32:	2900      	cmp	r1, #0

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
            KernelNode< T > prev = m_previous;
 8002d34:	bf1e      	ittt	ne
 8002d36:	68c2      	ldrne	r2, [r0, #12]
 8002d38:	60ca      	strne	r2, [r1, #12]

            next.m_previous = prev;
            prev.m_next     = next;
 8002d3a:	2a00      	cmpne	r2, #0
 8002d3c:	d004      	beq.n	8002d48 <KernelNode`1::RemoveFromList#20240+0x1e>
 8002d3e:	6091      	str	r1, [r2, #8]
 8002d40:	2100      	movs	r1, #0
 8002d42:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8002d46:	bd80      	pop	{r7, pc}
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
            KernelNode< T > prev = m_previous;

            next.m_previous = prev;
 8002d48:	f7fd fb8e 	bl	8000468 <Thread::ThrowNullException#4411>

08002d4c <Thread::Stop#4405>:
        }

        //--//

        public void Stop()
        {
 8002d4c:	b510      	push	{r4, lr}
 8002d4e:	4604      	mov	r4, r0
 8002d50:	480a      	ldr	r0, [pc, #40]	; (8002d7c <Thread::Stop#4405+0x30>)
            ThreadManager.Instance.RetireThread( this );
 8002d52:	490b      	ldr	r1, [pc, #44]	; (8002d80 <Thread::Stop#4405+0x34>)
 8002d54:	4478      	add	r0, pc
 8002d56:	4408      	add	r0, r1
 8002d58:	4621      	mov	r1, r4
 8002d5a:	f000 f813 	bl	8002d84 <ThreadManager::RetireThread#3528>

            m_state |= ThreadState.Stopped;
 8002d5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002d60:	f040 0010 	orr.w	r0, r0, #16
 8002d64:	6260      	str	r0, [r4, #36]	; 0x24

            if(m_joinEvent != null)
 8002d66:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002d68:	2800      	cmp	r0, #0
 8002d6a:	bf08      	it	eq
 8002d6c:	bd10      	popeq	{r4, pc}
            {
                m_joinEvent.Set();
 8002d6e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002d70:	b110      	cbz	r0, 8002d78 <Thread::Stop#4405+0x2c>
 8002d72:	f000 f813 	bl	8002d9c <EventWaitHandle::Set#4321>
 8002d76:	bd10      	pop	{r4, pc}

        //--//

        public void Stop()
        {
            ThreadManager.Instance.RetireThread( this );
 8002d78:	f7fd fb76 	bl	8000468 <Thread::ThrowNullException#4411>
 8002d7c:	17ffddc0 	.word	0x17ffddc0
 8002d80:	fffffe18 	.word	0xfffffe18

08002d84 <ThreadManager::RetireThread#3528>:
            }
        }

        public virtual void RetireThread( ThreadImpl thread )
        {
            m_deadThreadsTime.Merge( thread.ActiveTime );
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b139      	cbz	r1, 8002d98 <ThreadManager::RetireThread#3528+0x14>
 8002d88:	e9d1 c20f 	ldrd	ip, r2, [r1, #60]	; 0x3c
 8002d8c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8002d8e:	302c      	adds	r0, #44	; 0x2c
 8002d90:	4661      	mov	r1, ip
 8002d92:	f000 fa35 	bl	8003200 <KernelPerformanceCounter::Merge#5301>
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	f7fd fb66 	bl	8000468 <Thread::ThrowNullException#4411>

08002d9c <EventWaitHandle::Set#4321>:

            return true;
        }

        public bool Set()
        {
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	2101      	movs	r1, #1
 8002da0:	7301      	strb	r1, [r0, #12]
            m_state = true;

            m_handle.Release();
 8002da2:	6880      	ldr	r0, [r0, #8]
 8002da4:	2800      	cmp	r0, #0
 8002da6:	d005      	beq.n	8002db4 <EventWaitHandle::Set#4321+0x18>
 8002da8:	d004      	beq.n	8002db4 <EventWaitHandle::Set#4321+0x18>
 8002daa:	6841      	ldr	r1, [r0, #4]
 8002dac:	69c9      	ldr	r1, [r1, #28]
 8002dae:	69c9      	ldr	r1, [r1, #28]
 8002db0:	4788      	blx	r1
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	f7fd fb58 	bl	8000468 <Thread::ThrowNullException#4411>

08002db8 <Thread::Detach#4406>:
                m_joinEvent.Set();
            }
        }

        public void Detach()
        {
 8002db8:	b5b0      	push	{r4, r5, r7, lr}
 8002dba:	4605      	mov	r5, r0
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	f006 fc77 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	e002      	b.n	8002dcc <Thread::Detach#4406+0x14>
                    if(wr == null)
                    {
                        break;
                    }

                    wr.RequestFulfilled = false;
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	f7ff ff40 	bl	8002c4c <WaitingRecord::set_RequestFulfilled#5656>
        {
            using(SmartHandles.InterruptState.Disable())
            {
                while(true)
                {
                    Synchronization.WaitingRecord wr = m_pendingObjects.FirstTarget();
 8002dcc:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8002dce:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
 8002dd2:	6890      	ldr	r0, [r2, #8]
 8002dd4:	f7ff fefc 	bl	8002bd0 <KernelList`1::FirstTarget#19903>
                    if(wr == null)
 8002dd8:	2800      	cmp	r0, #0
 8002dda:	d1f4      	bne.n	8002dc6 <Thread::Detach#4406+0xe>
 8002ddc:	e003      	b.n	8002de6 <Thread::Detach#4406+0x2e>
 8002dde:	6841      	ldr	r1, [r0, #4]
                    if(wo == null)
                    {
                        break;
                    }

                    wo.Release();
 8002de0:	69c9      	ldr	r1, [r1, #28]
 8002de2:	69c9      	ldr	r1, [r1, #28]
 8002de4:	4788      	blx	r1
                    wr.RequestFulfilled = false;
                }

                while(true)
                {
                    Synchronization.WaitableObject wo = m_ownedObjects.FirstTarget();
 8002de6:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8002de8:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
 8002dec:	6890      	ldr	r0, [r2, #8]
 8002dee:	f000 f80f 	bl	8002e10 <KernelList`1::FirstTarget#19891>
                    if(wo == null)
 8002df2:	2800      	cmp	r0, #0
 8002df4:	d002      	beq.n	8002dfc <Thread::Detach#4406+0x44>
 8002df6:	d1f2      	bne.n	8002dde <Thread::Detach#4406+0x26>
        {
            using(SmartHandles.InterruptState.Disable())
            {
                while(true)
                {
                    Synchronization.WaitingRecord wr = m_pendingObjects.FirstTarget();
 8002df8:	f7fd fb36 	bl	8000468 <Thread::ThrowNullException#4411>
                    }

                    wo.Release();
                }

                m_schedulingLink  .RemoveFromList();
 8002dfc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002dfe:	f000 f812 	bl	8002e26 <KernelNode`1::RemoveFromList#19766>
                m_registrationLink.RemoveFromList();
 8002e02:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002e04:	f000 f80f 	bl	8002e26 <KernelNode`1::RemoveFromList#19766>
            }
 8002e08:	4620      	mov	r0, r4
 8002e0a:	f006 fc51 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8002e0e:	bdb0      	pop	{r4, r5, r7, pc}

08002e10 <KernelList`1::FirstTarget#19891>:

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;

            if(node != m_tail)
 8002e10:	b580      	push	{r7, lr}
 8002e12:	4288      	cmp	r0, r1
 8002e14:	bf04      	itt	eq
 8002e16:	2000      	moveq	r0, #0
 8002e18:	bd80      	popeq	{r7, pc}
            {
                return node.Target;
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	bf1c      	itt	ne
 8002e1e:	6900      	ldrne	r0, [r0, #16]
 8002e20:	bd80      	popne	{r7, pc}
            return null;
        }

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;
 8002e22:	f7fd fb21 	bl	8000468 <Thread::ThrowNullException#4411>

08002e26 <KernelNode`1::RemoveFromList#19766>:
            this.ConnectToNext( place );
        }

        public void RemoveFromList()
        {
            if(m_next != null)
 8002e26:	b580      	push	{r7, lr}
 8002e28:	6881      	ldr	r1, [r0, #8]
 8002e2a:	b139      	cbz	r1, 8002e3c <KernelNode`1::RemoveFromList#19766+0x16>
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 8002e2c:	6881      	ldr	r1, [r0, #8]
            KernelNode< T > prev = m_previous;

            next.m_previous = prev;
 8002e2e:	2900      	cmp	r1, #0

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
            KernelNode< T > prev = m_previous;
 8002e30:	bf1e      	ittt	ne
 8002e32:	68c2      	ldrne	r2, [r0, #12]
 8002e34:	60ca      	strne	r2, [r1, #12]

            next.m_previous = prev;
            prev.m_next     = next;
 8002e36:	2a00      	cmpne	r2, #0
 8002e38:	d004      	beq.n	8002e44 <KernelNode`1::RemoveFromList#19766+0x1e>
 8002e3a:	6091      	str	r1, [r2, #8]
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8002e42:	bd80      	pop	{r7, pc}
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
            KernelNode< T > prev = m_previous;

            next.m_previous = prev;
 8002e44:	f7fd fb10 	bl	8000468 <Thread::ThrowNullException#4411>

08002e48 <SwapCurrentThreadUnderInterrupt::.ctor#5699>:
        //
        // Constructor Methods
        //

        internal SwapCurrentThreadUnderInterrupt( ThreadImpl newThread )
        {
 8002e48:	b570      	push	{r4, r5, r6, lr}
 8002e4a:	4605      	mov	r5, r0
 8002e4c:	4806      	ldr	r0, [pc, #24]	; (8002e68 <SwapCurrentThreadUnderInterrupt::.ctor#5699+0x20>)
 8002e4e:	460c      	mov	r4, r1
            BugCheck.AssertInterruptsOff();
 8002e50:	4906      	ldr	r1, [pc, #24]	; (8002e6c <SwapCurrentThreadUnderInterrupt::.ctor#5699+0x24>)
 8002e52:	4478      	add	r0, pc
 8002e54:	180e      	adds	r6, r1, r0
 8002e56:	f7ff fdf3 	bl	8002a40 <BugCheck::AssertInterruptsOff#5289>
 8002e5a:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
 8002e5e:	6028      	str	r0, [r5, #0]
 8002e60:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
 8002e64:	bd70      	pop	{r4, r5, r6, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	17ffdcc2 	.word	0x17ffdcc2
 8002e6c:	fffffcf8 	.word	0xfffffcf8

08002e70 <ObjectHeader::get_TotalSize#3485>:
                fixed(int* ptr = &this.MultiUseWord)
#pragma warning restore 420
                {
                    byte* flags = (byte*)ptr;

                    return (GarbageCollectorFlags)(uint)*flags;
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b140      	cbz	r0, 8002e86 <ObjectHeader::get_TotalSize#3485+0x16>
 8002e74:	7801      	ldrb	r1, [r0, #0]
        public GarbageCollectorFlags GarbageCollectorStateWithoutMutableBits
        {
            [Inline]
            get
            {
                return (this.GarbageCollectorState & ~GarbageCollectorFlags.MutableMask);
 8002e76:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
        {
            get
            {
                uint size;

                if(this.GarbageCollectorStateWithoutMutableBits == GarbageCollectorFlags.AllocatedRawBytes)
 8002e7a:	290c      	cmp	r1, #12
 8002e7c:	d105      	bne.n	8002e8a <ObjectHeader::get_TotalSize#3485+0x1a>
            {
#pragma warning disable 420 // a reference to a volatile field will not be treated as volatile
                fixed (int* ptr = &this.MultiUseWord)
#pragma warning restore 420
                {
                    uint* size = (uint*)( ptr + 1 );
 8002e7e:	3004      	adds	r0, #4

                    return *size;
 8002e80:	bf1c      	itt	ne
 8002e82:	6800      	ldrne	r0, [r0, #0]
 8002e84:	bd80      	popne	{r7, pc}
                fixed(int* ptr = &this.MultiUseWord)
#pragma warning restore 420
                {
                    byte* flags = (byte*)ptr;

                    return (GarbageCollectorFlags)(uint)*flags;
 8002e86:	f7fd faef 	bl	8000468 <Thread::ThrowNullException#4411>
                {
                    size = this.AllocatedRawBytesSize;
                }
                else
                {
                    size = HeaderSize + ObjectSize;
 8002e8a:	f000 f802 	bl	8002e92 <ObjectHeader::get_ObjectSize#3484>
 8002e8e:	3008      	adds	r0, #8
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <ObjectHeader::get_ObjectSize#3484>:
        public uint ObjectSize
        {
            get
            {
                ObjectImpl obj = this.Pack();
                TS.VTable vTable = this.VirtualTable;
 8002e92:	b580      	push	{r7, lr}
 8002e94:	6841      	ldr	r1, [r0, #4]
                ArrayImpl array = ArrayImpl.CastAsArray(obj);
                uint size = vTable.BaseSize + vTable.ElementSize * (uint)array.Length;
 8002e96:	2900      	cmp	r1, #0
 8002e98:	bf18      	it	ne
 8002e9a:	2800      	cmpne	r0, #0
 8002e9c:	d008      	beq.n	8002eb0 <ObjectHeader::get_ObjectSize#3484+0x1e>
 8002e9e:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 8002ea2:	6880      	ldr	r0, [r0, #8]
 8002ea4:	fb01 2000 	mla	r0, r1, r0, r2
 8002ea8:	3003      	adds	r0, #3
 8002eaa:	f020 0003 	bic.w	r0, r0, #3
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	f7fd fada 	bl	8000468 <Thread::ThrowNullException#4411>

08002eb4 <ObjectHeader::InsertPlug#3486>:
        [TS.WellKnownMethod("DebugGC_ObjectHeader_InsertPlug")]
        public unsafe void InsertPlug( uint size )
        {
            UIntPtr address = this.ToPointer();
            uint*   dst     = (uint*)address.ToPointer();
            var bytesLeft = size;
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	3104      	adds	r1, #4
 8002eb8:	2202      	movs	r2, #2
 8002eba:	e002      	b.n	8002ec2 <ObjectHeader::InsertPlug#3486+0xe>

            while(bytesLeft >= sizeof(uint))
            {
                *dst++  = (uint)GarbageCollectorFlags.GapPlug;
 8002ebc:	1d03      	adds	r3, r0, #4
 8002ebe:	6002      	str	r2, [r0, #0]
 8002ec0:	4618      	mov	r0, r3
        {
            UIntPtr address = this.ToPointer();
            uint*   dst     = (uint*)address.ToPointer();
            var bytesLeft = size;

            while(bytesLeft >= sizeof(uint))
 8002ec2:	3904      	subs	r1, #4
 8002ec4:	2904      	cmp	r1, #4
 8002ec6:	bf38      	it	cc
 8002ec8:	bd80      	popcc	{r7, pc}
            {
                *dst++  = (uint)GarbageCollectorFlags.GapPlug;
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	d1f6      	bne.n	8002ebc <ObjectHeader::InsertPlug#3486+0x8>
 8002ece:	f7fd facb 	bl	8000468 <Thread::ThrowNullException#4411>

08002ed2 <ObjectHeader::UpdateExtension#3488>:
                fixed(int* ptr = &this.MultiUseWord)
#pragma warning restore 420
                {
                    byte* flags = (byte*)ptr;

                    return (GarbageCollectorFlags)(uint)*flags;
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b310      	cbz	r0, 8002f1c <ObjectHeader::UpdateExtension#3488+0x4a>
 8002ed6:	7803      	ldrb	r3, [r0, #0]
        public GarbageCollectorFlags GarbageCollectorStateWithoutMutableBits
        {
            [Inline]
            get
            {
                return (this.GarbageCollectorState & ~GarbageCollectorFlags.MutableMask);
 8002ed8:	f003 0cfe 	and.w	ip, r3, #254	; 0xfe
 8002edc:	2300      	movs	r3, #0
        public bool IsImmutable
        {
            [Inline]
            get
            {
                return this.GarbageCollectorStateWithoutMutableBits == GarbageCollectorFlags.ReadOnlyObject;
 8002ede:	f1bc 0f04 	cmp.w	ip, #4
 8002ee2:	bf08      	it	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	b9db      	cbnz	r3, 8002f20 <ObjectHeader::UpdateExtension#3488+0x4e>
            BugCheck.Assert( this.IsImmutable == false, BugCheck.StopCode.SyncBlockCorruption );

            while(true)
            {
                var  oldValue = this.MultiUseWord;
                uint newValue = ((uint)kind << ExtensionKindShift) | ((uint)payload << ExtensionPayloadShift) | ((uint)oldValue & GarbageCollectorMask);
 8002ee8:	0209      	lsls	r1, r1, #8
 8002eea:	ea41 2c82 	orr.w	ip, r1, r2, lsl #10
 8002eee:	e004      	b.n	8002efa <ObjectHeader::UpdateExtension#3488+0x28>
 8002ef0:	f3bf 8f5f 	dmb	sy
                // CS0420: a reference to a volatile field will not be treated as volatile
#pragma warning disable 420
                var oldValue2 = System.Threading.Interlocked.CompareExchange( ref this.MultiUseWord, (int)newValue, oldValue );
#pragma warning restore 420

                if(oldValue2 == oldValue)
 8002ef4:	4573      	cmp	r3, lr
 8002ef6:	bf08      	it	eq
 8002ef8:	bd80      	popeq	{r7, pc}
        {
            BugCheck.Assert( this.IsImmutable == false, BugCheck.StopCode.SyncBlockCorruption );

            while(true)
            {
                var  oldValue = this.MultiUseWord;
 8002efa:	f8d0 e000 	ldr.w	lr, [r0]
 8002efe:	f3bf 8f5f 	dmb	sy
                uint newValue = ((uint)kind << ExtensionKindShift) | ((uint)payload << ExtensionPayloadShift) | ((uint)oldValue & GarbageCollectorMask);
 8002f02:	fa5f f18e 	uxtb.w	r1, lr
 8002f06:	ea41 010c 	orr.w	r1, r1, ip
 8002f0a:	e850 3f00 	ldrex	r3, [r0]
 8002f0e:	4573      	cmp	r3, lr
 8002f10:	d1ee      	bne.n	8002ef0 <ObjectHeader::UpdateExtension#3488+0x1e>
 8002f12:	e840 1200 	strex	r2, r1, [r0]
 8002f16:	2a00      	cmp	r2, #0
 8002f18:	d1f7      	bne.n	8002f0a <ObjectHeader::UpdateExtension#3488+0x38>
 8002f1a:	e7e9      	b.n	8002ef0 <ObjectHeader::UpdateExtension#3488+0x1e>
                fixed(int* ptr = &this.MultiUseWord)
#pragma warning restore 420
                {
                    byte* flags = (byte*)ptr;

                    return (GarbageCollectorFlags)(uint)*flags;
 8002f1c:	f7fd faa4 	bl	8000468 <Thread::ThrowNullException#4411>
 8002f20:	2007      	movs	r0, #7
 8002f22:	f7fd f9c3 	bl	80002ac <BugCheck::Raise#5282>

08002f26 <ThreadManager::get_DefaultStackSize#3515>:
 8002f26:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002f2a:	4770      	bx	lr

08002f2c <ThreadManager::CleanupBootstrapThreadIfNeeded#3518>:
 8002f2c:	4770      	bx	lr
 8002f2e:	46c0      	nop			; (mov r8, r8)

08002f30 <ThreadManager::InitializeBeforeStaticConstructors#3519>:
        {
            // Injection site for reference counting GC to call CleanupBootstrapThread()
        }

        public virtual void InitializeBeforeStaticConstructors()
        {
 8002f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f32:	b081      	sub	sp, #4
 8002f34:	4f11      	ldr	r7, [pc, #68]	; (8002f7c <ThreadManager::InitializeBeforeStaticConstructors#3519+0x4c>)
 8002f36:	4604      	mov	r4, r0
            //
            // Create the first active thread.
            //
            m_mainThread = new ThreadImpl( MainThread );
 8002f38:	4811      	ldr	r0, [pc, #68]	; (8002f80 <ThreadManager::InitializeBeforeStaticConstructors#3519+0x50>)
 8002f3a:	447f      	add	r7, pc
 8002f3c:	19c5      	adds	r5, r0, r7
 8002f3e:	4811      	ldr	r0, [pc, #68]	; (8002f84 <ThreadManager::InitializeBeforeStaticConstructors#3519+0x54>)
 8002f40:	19c1      	adds	r1, r0, r7
 8002f42:	4628      	mov	r0, r5
 8002f44:	f7fd fca6 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8002f48:	4606      	mov	r6, r0
 8002f4a:	480f      	ldr	r0, [pc, #60]	; (8002f88 <ThreadManager::InitializeBeforeStaticConstructors#3519+0x58>)
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	19c2      	adds	r2, r0, r7
 8002f50:	4630      	mov	r0, r6
 8002f52:	f7fe fa1b 	bl	800138c <Delegate::.ctor#5246>
 8002f56:	480d      	ldr	r0, [pc, #52]	; (8002f8c <ThreadManager::InitializeBeforeStaticConstructors#3519+0x5c>)
 8002f58:	19c1      	adds	r1, r0, r7
 8002f5a:	4628      	mov	r0, r5
 8002f5c:	f7fd fc9a 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8002f60:	4631      	mov	r1, r6
 8002f62:	4605      	mov	r5, r0
 8002f64:	f7ff fa48 	bl	80023f8 <Thread::.ctor#4380>
 8002f68:	4809      	ldr	r0, [pc, #36]	; (8002f90 <ThreadManager::InitializeBeforeStaticConstructors#3519+0x60>)
 8002f6a:	6165      	str	r5, [r4, #20]
 8002f6c:	19c5      	adds	r5, r0, r7

            CleanupBootstrapThreadIfNeeded( );
 8002f6e:	f7ff ffdd 	bl	8002f2c <ThreadManager::CleanupBootstrapThreadIfNeeded#3518>

            //
            // We need to have a current thread during initialization, in case some static constructors try to access it.
            //
            ThreadImpl.CurrentThread = m_mainThread;
 8002f72:	6960      	ldr	r0, [r4, #20]
 8002f74:	f8c5 0108 	str.w	r0, [r5, #264]	; 0x108
 8002f78:	b001      	add	sp, #4
 8002f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f7c:	17ffdbda 	.word	0x17ffdbda
 8002f80:	fffffe0c 	.word	0xfffffe0c
 8002f84:	e80198f8 	.word	0xe80198f8
 8002f88:	e800247d 	.word	0xe800247d
 8002f8c:	e8019958 	.word	0xe8019958
 8002f90:	fffffcf8 	.word	0xfffffcf8

08002f94 <ThreadManager::MainThread#3553>:
                {
                    //BugCheck.Log( "[MainThreads] !!! EXECUTING APP !!!" );
                    //BugCheck.Log( "[MainThreads] !!! EXECUTING APP !!!" );
                    //BugCheck.Log( "[MainThreads] !!! EXECUTING APP !!!" );

                    Configuration.ExecuteApplication();
 8002f94:	b580      	push	{r7, lr}
 8002f96:	f000 fa3a 	bl	800340e <TestProgram::Main#143>
                }
                catch
                {
                }

                BugCheck.Raise( BugCheck.StopCode.NoCurrentThread ); 
 8002f9a:	2004      	movs	r0, #4
 8002f9c:	f7fd f986 	bl	80002ac <BugCheck::Raise#5282>

08002fa0 <ThreadManager::InitializeAfterStaticConstructors#3520>:
            //
            ThreadImpl.CurrentThread = m_mainThread;
        }

        public virtual void InitializeAfterStaticConstructors( uint[] systemStack )
        {
 8002fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fa4:	b081      	sub	sp, #4
 8002fa6:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8003048 <ThreadManager::InitializeAfterStaticConstructors#3520+0xa8>
 8002faa:	4604      	mov	r4, r0
            m_allThreads          = new KernelList< ThreadImpl >();
 8002fac:	4827      	ldr	r0, [pc, #156]	; (800304c <ThreadManager::InitializeAfterStaticConstructors#3520+0xac>)
 8002fae:	4688      	mov	r8, r1
 8002fb0:	44f9      	add	r9, pc
 8002fb2:	eb00 0509 	add.w	r5, r0, r9
 8002fb6:	4826      	ldr	r0, [pc, #152]	; (8003050 <ThreadManager::InitializeAfterStaticConstructors#3520+0xb0>)
 8002fb8:	eb00 0709 	add.w	r7, r0, r9
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	4639      	mov	r1, r7
 8002fc0:	f7fd fc68 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8002fc4:	4606      	mov	r6, r0
 8002fc6:	f000 f84d 	bl	8003064 <KernelList`1::.ctor#19734>
            m_readyThreads        = new KernelList< ThreadImpl >();
 8002fca:	4628      	mov	r0, r5
 8002fcc:	4639      	mov	r1, r7
 8002fce:	60a6      	str	r6, [r4, #8]
 8002fd0:	f7fd fc60 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8002fd4:	4606      	mov	r6, r0
 8002fd6:	f000 f845 	bl	8003064 <KernelList`1::.ctor#19734>
            m_waitingThreads      = new KernelList< ThreadImpl >();
 8002fda:	4628      	mov	r0, r5
 8002fdc:	4639      	mov	r1, r7
 8002fde:	60e6      	str	r6, [r4, #12]
 8002fe0:	f7fd fc58 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8002fe4:	4606      	mov	r6, r0
 8002fe6:	f000 f83d 	bl	8003064 <KernelList`1::.ctor#19734>

            m_idleThread          = new ThreadImpl( IdleThread, systemStack );
 8002fea:	481a      	ldr	r0, [pc, #104]	; (8003054 <ThreadManager::InitializeAfterStaticConstructors#3520+0xb4>)
 8002fec:	6126      	str	r6, [r4, #16]
 8002fee:	eb00 0109 	add.w	r1, r0, r9
 8002ff2:	4628      	mov	r0, r5
 8002ff4:	f7fd fc4e 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8002ff8:	4606      	mov	r6, r0
 8002ffa:	4817      	ldr	r0, [pc, #92]	; (8003058 <ThreadManager::InitializeAfterStaticConstructors#3520+0xb8>)
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	eb00 0209 	add.w	r2, r0, r9
 8003002:	4630      	mov	r0, r6
 8003004:	f7fe f9c2 	bl	800138c <Delegate::.ctor#5246>
 8003008:	4814      	ldr	r0, [pc, #80]	; (800305c <ThreadManager::InitializeAfterStaticConstructors#3520+0xbc>)
 800300a:	eb00 0109 	add.w	r1, r0, r9
 800300e:	4628      	mov	r0, r5
 8003010:	f7fd fc40 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8003014:	4631      	mov	r1, r6
 8003016:	4642      	mov	r2, r8
 8003018:	4607      	mov	r7, r0
 800301a:	f7ff fa15 	bl	8002448 <Thread::.ctor#4381>
            m_neverSignaledEvent  = new EventWaitHandleImpl( false, System.Threading.EventResetMode.ManualReset );
 800301e:	4810      	ldr	r0, [pc, #64]	; (8003060 <ThreadManager::InitializeAfterStaticConstructors#3520+0xc0>)
 8003020:	61a7      	str	r7, [r4, #24]
 8003022:	eb00 0109 	add.w	r1, r0, r9
 8003026:	4628      	mov	r0, r5
 8003028:	f7fd fc34 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 800302c:	2100      	movs	r1, #0
 800302e:	2201      	movs	r2, #1
 8003030:	4605      	mov	r5, r0
 8003032:	f000 f85d 	bl	80030f0 <EventWaitHandle::.ctor#4319>
 8003036:	61e5      	str	r5, [r4, #28]

            //
            // These threads are never started, so we have to manually register them, to enable the debugger to see them.
            //
            RegisterThread( m_idleThread );
 8003038:	4620      	mov	r0, r4
 800303a:	69a1      	ldr	r1, [r4, #24]
 800303c:	f000 f870 	bl	8003120 <ThreadManager::RegisterThread#3525>
 8003040:	b001      	add	sp, #4
 8003042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	17ffdb64 	.word	0x17ffdb64
 800304c:	fffffe0c 	.word	0xfffffe0c
 8003050:	e8019988 	.word	0xe8019988
 8003054:	e80198f8 	.word	0xe80198f8
 8003058:	e8002595 	.word	0xe8002595
 800305c:	e8019958 	.word	0xe8019958
 8003060:	e80199b8 	.word	0xe80199b8

08003064 <KernelList`1::.ctor#19734>:

        //
        // Constructor Methods
        //

        public KernelList()
 8003064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003066:	b081      	sub	sp, #4
 8003068:	4604      	mov	r4, r0
 800306a:	480d      	ldr	r0, [pc, #52]	; (80030a0 <KernelList`1::.ctor#19734+0x3c>)
        {
            m_head = new KernelNode< T >( default(T) );
 800306c:	490d      	ldr	r1, [pc, #52]	; (80030a4 <KernelList`1::.ctor#19734+0x40>)
 800306e:	4478      	add	r0, pc
 8003070:	180d      	adds	r5, r1, r0
 8003072:	490d      	ldr	r1, [pc, #52]	; (80030a8 <KernelList`1::.ctor#19734+0x44>)
 8003074:	180e      	adds	r6, r1, r0
 8003076:	4628      	mov	r0, r5
 8003078:	4631      	mov	r1, r6
 800307a:	f7fd fc0b 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 800307e:	2700      	movs	r7, #0
            m_tail = new KernelNode< T >( default(T) );
 8003080:	4631      	mov	r1, r6
 8003082:	6107      	str	r7, [r0, #16]
 8003084:	60a0      	str	r0, [r4, #8]
 8003086:	4628      	mov	r0, r5
 8003088:	f7fd fc04 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 800308c:	6107      	str	r7, [r0, #16]
 800308e:	60e0      	str	r0, [r4, #12]

            m_head.Next     = m_tail;
 8003090:	68a1      	ldr	r1, [r4, #8]
 8003092:	6088      	str	r0, [r1, #8]
            m_tail.Previous = m_head;
 8003094:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8003098:	60c8      	str	r0, [r1, #12]
 800309a:	b001      	add	sp, #4
 800309c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	17ffdaa6 	.word	0x17ffdaa6
 80030a4:	fffffe0c 	.word	0xfffffe0c
 80030a8:	e8019868 	.word	0xe8019868

080030ac <ThreadManager::IdleThread#3552>:
 80030ac:	b580      	push	{r7, lr}
 80030ae:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80030b2:	f7fd fb93 	bl	80007dc <ProcessorARMv7M::RaiseSystemHandler#3605>
 80030b6:	20ff      	movs	r0, #255	; 0xff
 80030b8:	f006 fafa 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 80030bc:	f006 fb32 	bl	8009724 <CMSIS_STUB_POWER_WaitForEvent>
 80030c0:	e7fc      	b.n	80030bc <ThreadManager::IdleThread#3552+0x10>

080030c2 <WaitHandle::WaitOne#4309>:
        // Helper Methods
        //

        public virtual bool WaitOne( int  millisecondsTimeout ,
                                     bool exitContext         )
        {
 80030c2:	b510      	push	{r4, lr}
 80030c4:	4604      	mov	r4, r0
            return WaitOne( (SchedulerTime)millisecondsTimeout, exitContext );
 80030c6:	4608      	mov	r0, r1
 80030c8:	f001 fbf6 	bl	80048b8 <SchedulerTime::op_Explicit#5460>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68a0      	ldr	r0, [r4, #8]
 80030d0:	460b      	mov	r3, r1
 80030d2:	f003 ffb3 	bl	800703c <WaitHandle::WaitOne#4316>
 80030d6:	bd10      	pop	{r4, pc}

080030d8 <WaitHandle::WaitOne#8519>:
////
////        return WaitOne( tm, exitContext );
////    }
    
        public virtual bool WaitOne()
        {
 80030d8:	b580      	push	{r7, lr}
 80030da:	b138      	cbz	r0, 80030ec <WaitHandle::WaitOne#8519+0x14>
 80030dc:	6841      	ldr	r1, [r0, #4]
 80030de:	2200      	movs	r2, #0
            return WaitOne( Timeout.Infinite, false );
 80030e0:	69c9      	ldr	r1, [r1, #28]
 80030e2:	698b      	ldr	r3, [r1, #24]
 80030e4:	f04f 31ff 	mov.w	r1, #4294967295
 80030e8:	4798      	blx	r3
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	f7fd f9bc 	bl	8000468 <Thread::ThrowNullException#4411>

080030f0 <EventWaitHandle::.ctor#4319>:
        // Constructor Methods
        //

        [DiscardTargetImplementation]
        public EventWaitHandleImpl( bool                            initialState ,
                                    System.Threading.EventResetMode mode         )
 80030f0:	b5b0      	push	{r4, r5, r7, lr}
 80030f2:	4604      	mov	r4, r0
            m_state = initialState;
            m_mode  = mode;

            //--//

            m_handle = new EventWaitableObject( this );
 80030f4:	4808      	ldr	r0, [pc, #32]	; (8003118 <EventWaitHandle::.ctor#4319+0x28>)
 80030f6:	7321      	strb	r1, [r4, #12]
 80030f8:	4906      	ldr	r1, [pc, #24]	; (8003114 <EventWaitHandle::.ctor#4319+0x24>)
 80030fa:	6122      	str	r2, [r4, #16]
 80030fc:	4a07      	ldr	r2, [pc, #28]	; (800311c <EventWaitHandle::.ctor#4319+0x2c>)
 80030fe:	4479      	add	r1, pc
 8003100:	4408      	add	r0, r1
 8003102:	4411      	add	r1, r2
 8003104:	f7fd fbc6 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8003108:	4621      	mov	r1, r4
 800310a:	4605      	mov	r5, r0
 800310c:	f002 f952 	bl	80053b4 <EventWaitableObject::.ctor#6006>
 8003110:	60a5      	str	r5, [r4, #8]
 8003112:	bdb0      	pop	{r4, r5, r7, pc}
 8003114:	17ffda16 	.word	0x17ffda16
 8003118:	fffffe0c 	.word	0xfffffe0c
 800311c:	e8019da8 	.word	0xe8019da8

08003120 <ThreadManager::RegisterThread#3525>:
        //
        // Helper Methods
        //

        protected void RegisterThread( ThreadImpl thread )
        {
 8003120:	b5b0      	push	{r4, r5, r7, lr}
 8003122:	460c      	mov	r4, r1
 8003124:	4605      	mov	r5, r0
            BugCheck.AssertInterruptsOff();
 8003126:	f7ff fc8b 	bl	8002a40 <BugCheck::AssertInterruptsOff#5289>

            m_allThreads.InsertAtTail( thread.RegistrationLink );
 800312a:	2c00      	cmp	r4, #0
 800312c:	bf1c      	itt	ne
 800312e:	68a8      	ldrne	r0, [r5, #8]
 8003130:	2800      	cmpne	r0, #0
 8003132:	d004      	beq.n	800313e <ThreadManager::RegisterThread#3525+0x1e>
 8003134:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003136:	68c0      	ldr	r0, [r0, #12]
 8003138:	f000 f818 	bl	800316c <KernelList`1::InsertAtTail#19735>
 800313c:	bdb0      	pop	{r4, r5, r7, pc}
 800313e:	f7fd f993 	bl	8000468 <Thread::ThrowNullException#4411>

08003142 <ThreadManager::Activate#3523>:
 8003142:	4770      	bx	lr

08003144 <ThreadManager::StartThreads#3524>:
        public virtual void StartThreads()
        {
            //
            // 'm_runningThread' should never be null once the interrupts have been enabled, so we have to set it here.
            //
            ThreadImpl bootstrapThread = m_idleThread;
 8003144:	b510      	push	{r4, lr}
 8003146:	6984      	ldr	r4, [r0, #24]
 8003148:	6244      	str	r4, [r0, #36]	; 0x24
#endif // USE_THREAD_PERFORMANCE_COUNTER

            //
            // Start the first active thread.
            //
            m_mainThread.Start();
 800314a:	6940      	ldr	r0, [r0, #20]
 800314c:	b130      	cbz	r0, 800315c <ThreadManager::StartThreads#3524+0x18>
 800314e:	f7ff f9fb 	bl	8002548 <Thread::Start#4384>

            //
            // Long jump to the idle thread context, which will re-enable interrupts and 
            // cause the first context switch to the process stack of this thread
            //
            bootstrapThread.SwappedOutContext.SwitchTo();
 8003152:	2c00      	cmp	r4, #0
 8003154:	bf1c      	itt	ne
 8003156:	69e0      	ldrne	r0, [r4, #28]
 8003158:	2800      	cmpne	r0, #0
 800315a:	d101      	bne.n	8003160 <ThreadManager::StartThreads#3524+0x1c>
#endif // USE_THREAD_PERFORMANCE_COUNTER

            //
            // Start the first active thread.
            //
            m_mainThread.Start();
 800315c:	f7fd f984 	bl	8000468 <Thread::ThrowNullException#4411>
 8003160:	2011      	movs	r0, #17
 8003162:	f7ff fbad 	bl	80028c0 <ProcessorARMv7M::RaiseSupervisorCall#3606>
 8003166:	200e      	movs	r0, #14
 8003168:	f7fd f8a0 	bl	80002ac <BugCheck::Raise#5282>

0800316c <KernelList`1::InsertAtTail#19735>:
        //
        // Helper Methods
        //

        public void InsertAtTail( KernelNode< T > node )
        {
 800316c:	b580      	push	{r7, lr}
 800316e:	4602      	mov	r2, r0
            node.InsertBefore( m_tail );
 8003170:	b121      	cbz	r1, 800317c <KernelList`1::InsertAtTail#19735+0x10>
 8003172:	4608      	mov	r0, r1
 8003174:	4611      	mov	r1, r2
 8003176:	f000 f933 	bl	80033e0 <KernelNode`1::InsertBefore#19765>
 800317a:	bd80      	pop	{r7, pc}
 800317c:	f7fd f974 	bl	8000468 <Thread::ThrowNullException#4411>

08003180 <KernelNode`1::VerifyUnlinked#19771>:
            this.m_next     = next;
            next.m_previous = this;
        }

        public bool VerifyUnlinked()
        {
 8003180:	4601      	mov	r1, r0
 8003182:	2000      	movs	r0, #0
            return m_next == null && m_previous == null;
 8003184:	688a      	ldr	r2, [r1, #8]
 8003186:	2a00      	cmp	r2, #0
 8003188:	bf18      	it	ne
 800318a:	4770      	bxne	lr
 800318c:	68c9      	ldr	r1, [r1, #12]
 800318e:	2900      	cmp	r1, #0
 8003190:	bf08      	it	eq
 8003192:	2001      	moveq	r0, #1
 8003194:	4770      	bx	lr
 8003196:	46c0      	nop			; (mov r8, r8)

08003198 <InterruptState::GetCurrentExceptionMode#5947>:
            return m_basepri;
        }

        public HardwareException GetCurrentExceptionMode()
        {
            ProcessorARMv7M.ISR_NUMBER ex = GetMode();
 8003198:	b580      	push	{r7, lr}
 800319a:	f002 f8df 	bl	800535c <InterruptState::GetMode#5949>
 800319e:	b188      	cbz	r0, 80031c4 <InterruptState::GetCurrentExceptionMode#5947+0x2c>
            if(ex == ProcessorARMv7M.ISR_NUMBER.ThreadMode)
            {
                return HardwareException.None;
            }

            switch(ex)
 80031a0:	1e41      	subs	r1, r0, #1
 80031a2:	290e      	cmp	r1, #14
 80031a4:	bf84      	itt	hi
 80031a6:	2008      	movhi	r0, #8
 80031a8:	bd80      	pophi	{r7, pc}
 80031aa:	200b      	movs	r0, #11
 80031ac:	e8df f001 	tbb	[pc, r1]
 80031b0:	08080d12 	.word	0x08080d12
 80031b4:	12120808 	.word	0x12120808
 80031b8:	100e1212 	.word	0x100e1212
 80031bc:	000c0c12 	.word	0x000c0c12
 80031c0:	200c      	movs	r0, #12
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	2000      	movs	r0, #0
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	200a      	movs	r0, #10
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	200d      	movs	r0, #13
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	200e      	movs	r0, #14
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	200e      	movs	r0, #14
 80031d6:	f7fd f869 	bl	80002ac <BugCheck::Raise#5282>

080031da <ThreadManager::RescheduleAndRequestContextSwitchIfNeeded#3534>:
                }
            }
        }

        public void RescheduleAndRequestContextSwitchIfNeeded( HardwareException mode )
        {
 80031da:	b5b0      	push	{r4, r5, r7, lr}
 80031dc:	460d      	mov	r5, r1
 80031de:	4604      	mov	r4, r0
            }
        }

        public virtual void Reschedule()
        {
            SelectNextThreadToRun();
 80031e0:	f7fd fae2 	bl	80007a8 <ThreadManager::SelectNextThreadToRun#3536>
            // We therefore need to  pick the case if System timer exception and let it go as if it was a normal thread mode
            // handler. When we enable the interrupts controller this case will be automatically take care of and we 
            // can remove this #if
            // 
            
            if(mode == HardwareException.None || mode == HardwareException.Interrupt )
 80031e4:	f045 0008 	orr.w	r0, r5, #8
 80031e8:	2808      	cmp	r0, #8
 80031ea:	bf18      	it	ne
 80031ec:	bdb0      	popne	{r4, r5, r7, pc}
        public bool ShouldContextSwitch
        {
            [Inline]
            get
            {
                return m_runningThread != m_nextThread;
 80031ee:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
            if(mode == HardwareException.None || mode == HardwareException.Interrupt )
#else
            if(mode == HardwareException.None)
#endif
            {
                if(this.ShouldContextSwitch)
 80031f2:	4288      	cmp	r0, r1
 80031f4:	bf1c      	itt	ne
 80031f6:	f04f 5080 	movne.w	r0, #268435456	; 0x10000000
 80031fa:	f7fd faef 	blne	80007dc <ProcessorARMv7M::RaiseSystemHandler#3605>
 80031fe:	bdb0      	pop	{r4, r5, r7, pc}

08003200 <KernelPerformanceCounter::Merge#5301>:
            m_total += (Peripherals.Instance.ReadPerformanceCounter() - m_start);
        }

        public void Merge( KernelPerformanceCounter other )
        {
            m_hits  += other.m_hits;
 8003200:	f8d0 c000 	ldr.w	ip, [r0]
 8003204:	4461      	add	r1, ip
 8003206:	6001      	str	r1, [r0, #0]
            m_total += other.m_total;
 8003208:	e9d0 1c01 	ldrd	r1, ip, [r0, #4]
 800320c:	1889      	adds	r1, r1, r2
 800320e:	6041      	str	r1, [r0, #4]
 8003210:	eb4c 0103 	adc.w	r1, ip, r3
 8003214:	6081      	str	r1, [r0, #8]
 8003216:	4770      	bx	lr

08003218 <BugCheck::AssertInterruptsOn#5290>:
        {
            Assert( Processor.Instance.AreInterruptsDisabled() == true, BugCheck.StopCode.InterruptsNotDisabled );
        }

        public static void AssertInterruptsOn()
        {
 8003218:	b580      	push	{r7, lr}
 800321a:	f006 fa45 	bl	80096a8 <CMSIS_STUB_SCB__get_BASEPRI>
 800321e:	2100      	movs	r1, #0
 8003220:	2802      	cmp	r0, #2
 8003222:	bf38      	it	cc
 8003224:	2101      	movcc	r1, #1

        [Inline]
        public static void Assert( bool     condition ,
                                   StopCode code      )
        {
            if(!condition)
 8003226:	2900      	cmp	r1, #0
 8003228:	bf08      	it	eq
 800322a:	bd80      	popeq	{r7, pc}
            {
                Raise( code );
 800322c:	2001      	movs	r0, #1
 800322e:	f7fd f83d 	bl	80002ac <BugCheck::Raise#5282>

08003232 <ThreadManager::SwitchToWait#3530>:
                RescheduleAndRequestContextSwitchIfNeeded(HardwareException.None);
            }
        }

        public virtual void SwitchToWait( Synchronization.WaitingRecord wr )
        {
 8003232:	b5b0      	push	{r4, r5, r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	460d      	mov	r5, r1
 8003238:	4604      	mov	r4, r0
            BugCheck.AssertInterruptsOn();
 800323a:	f7ff ffed 	bl	8003218 <BugCheck::AssertInterruptsOn#5290>
 800323e:	2001      	movs	r0, #1
 8003240:	f006 fa36 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8003244:	9001      	str	r0, [sp, #4]
 8003246:	b385      	cbz	r5, 80032aa <ThreadManager::SwitchToWait#3530+0x78>
 8003248:	f895 0020 	ldrb.w	r0, [r5, #32]
 800324c:	bb40      	cbnz	r0, 80032a0 <ThreadManager::SwitchToWait#3530+0x6e>
 800324e:	692d      	ldr	r5, [r5, #16]
            {
                if(wr.Processed == false)
                {
                    ThreadImpl thread = wr.Source;

                    m_waitingThreads.InsertAtTail( thread.SchedulingLink );
 8003250:	2d00      	cmp	r5, #0
 8003252:	bf1c      	itt	ne
 8003254:	6920      	ldrne	r0, [r4, #16]
 8003256:	2800      	cmpne	r0, #0
 8003258:	d027      	beq.n	80032aa <ThreadManager::SwitchToWait#3530+0x78>
 800325a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800325c:	68c0      	ldr	r0, [r0, #12]
 800325e:	f7ff ff85 	bl	800316c <KernelList`1::InsertAtTail#19735>
 8003262:	6a68      	ldr	r0, [r5, #36]	; 0x24

                    thread.State |= System.Threading.ThreadState.WaitSleepJoin;
 8003264:	f040 0020 	orr.w	r0, r0, #32
 8003268:	6268      	str	r0, [r5, #36]	; 0x24

        //--//

        public void InvalidateNextWaitTimer()
        {
            if(m_noInvalidateNextWaitTimerRecursion == false)
 800326a:	f894 0020 	ldrb.w	r0, [r4, #32]
 800326e:	b910      	cbnz	r0, 8003276 <ThreadManager::SwitchToWait#3530+0x44>
            {
                ComputeNextTimeout();
 8003270:	4620      	mov	r0, r4
 8003272:	f7ff fc15 	bl	8002aa0 <ThreadManager::ComputeNextTimeout#3546>

                    thread.State |= System.Threading.ThreadState.WaitSleepJoin;

                    InvalidateNextWaitTimer();

                    RescheduleAndRequestContextSwitchIfNeeded( hnd.GetCurrentExceptionMode() );
 8003276:	f7ff ff8f 	bl	8003198 <InterruptState::GetCurrentExceptionMode#5947>
 800327a:	4601      	mov	r1, r0
 800327c:	4620      	mov	r0, r4
 800327e:	f7ff ffac 	bl	80031da <ThreadManager::RescheduleAndRequestContextSwitchIfNeeded#3534>
 8003282:	e008      	b.n	8003296 <ThreadManager::SwitchToWait#3530+0x64>

                    while(thread.IsWaiting)
                    {
                        hnd.Toggle();
 8003284:	9801      	ldr	r0, [sp, #4]
 8003286:	f006 fa13 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 800328a:	4604      	mov	r4, r0
 800328c:	f006 fac6 	bl	800981c <Nop>
 8003290:	4620      	mov	r0, r4
 8003292:	f006 fa0d 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>

                    InvalidateNextWaitTimer();

                    RescheduleAndRequestContextSwitchIfNeeded( hnd.GetCurrentExceptionMode() );

                    while(thread.IsWaiting)
 8003296:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 800329a:	f010 0f20 	tst.w	r0, #32
 800329e:	d1f1      	bne.n	8003284 <ThreadManager::SwitchToWait#3530+0x52>
                    {
                        hnd.Toggle();
                    }
                }
            }
 80032a0:	9801      	ldr	r0, [sp, #4]
 80032a2:	f006 fa05 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 80032a6:	b002      	add	sp, #8
 80032a8:	bdb0      	pop	{r4, r5, r7, pc}
        {
            BugCheck.AssertInterruptsOn();

            using(SmartHandles.InterruptState hnd = SmartHandles.InterruptState.Disable())
            {
                if(wr.Processed == false)
 80032aa:	f7fd f8dd 	bl	8000468 <Thread::ThrowNullException#4411>

080032ae <ThreadManager::TimeQuantumExpired#3532>:
                }
            }
        }

        public virtual void TimeQuantumExpired( )
        {
 80032ae:	b510      	push	{r4, lr}
 80032b0:	4604      	mov	r4, r0
#if !ARMv7
            BugCheck.AssertInterruptsOff( );
#endif

            InsertInPriorityOrder( m_runningThread );
 80032b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80032b4:	f7fd fa54 	bl	8000760 <ThreadManager::InsertInPriorityOrder#3551>
            }
        }

        public virtual void Reschedule()
        {
            SelectNextThreadToRun();
 80032b8:	4620      	mov	r0, r4
 80032ba:	f7fd fa75 	bl	80007a8 <ThreadManager::SelectNextThreadToRun#3536>
 80032be:	bd10      	pop	{r4, pc}

080032c0 <ThreadManager::SetNextQuantumTimerIfNeeded#3533>:

            Reschedule( );
        }

        public virtual void SetNextQuantumTimerIfNeeded()
        {
 80032c0:	b5b0      	push	{r4, r5, r7, lr}
 80032c2:	4604      	mov	r4, r0
                //
                // If the next thread is not an idle thread, there has to be a ready thread.
                //
                BugCheck.Assert( lastThread != null, BugCheck.StopCode.ExpectingReadyThread );

                if(lastThread == nextThread)
 80032c4:	6aa5      	ldr	r5, [r4, #40]	; 0x28

        public virtual void SetNextQuantumTimerIfNeeded()
        {
            ThreadImpl nextThread = m_nextThread;

            if(nextThread == m_idleThread)
 80032c6:	69a0      	ldr	r0, [r4, #24]
 80032c8:	4285      	cmp	r5, r0
 80032ca:	d011      	beq.n	80032f0 <ThreadManager::SetNextQuantumTimerIfNeeded#3533+0x30>
            {
                CancelQuantumTimer(); // No need to set a timer, we are just idling.
            }
            else
            {
                ThreadImpl lastThread = m_readyThreads.LastTarget();
 80032cc:	68e1      	ldr	r1, [r4, #12]
 80032ce:	b199      	cbz	r1, 80032f8 <ThreadManager::SetNextQuantumTimerIfNeeded#3533+0x38>
 80032d0:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80032d4:	68c9      	ldr	r1, [r1, #12]
 80032d6:	f000 f81c 	bl	8003312 <KernelList`1::LastTarget#19739>

                //
                // If the next thread is not an idle thread, there has to be a ready thread.
                //
                BugCheck.Assert( lastThread != null, BugCheck.StopCode.ExpectingReadyThread );
 80032da:	2800      	cmp	r0, #0
 80032dc:	4601      	mov	r1, r0
 80032de:	bf18      	it	ne
 80032e0:	2101      	movne	r1, #1
 80032e2:	b159      	cbz	r1, 80032fc <ThreadManager::SetNextQuantumTimerIfNeeded#3533+0x3c>

                if(lastThread == nextThread)
 80032e4:	42a8      	cmp	r0, r5
 80032e6:	d003      	beq.n	80032f0 <ThreadManager::SetNextQuantumTimerIfNeeded#3533+0x30>
                {
                    CancelQuantumTimer(); // Only one ready thread, no need to preempt it.
                }
                else
                {
                    SetNextQuantumTimer();
 80032e8:	4620      	mov	r0, r4
 80032ea:	f000 f81d 	bl	8003328 <ThreadManager::SetNextQuantumTimer#18961>
 80032ee:	bdb0      	pop	{r4, r5, r7, pc}
        {
            ThreadImpl nextThread = m_nextThread;

            if(nextThread == m_idleThread)
            {
                CancelQuantumTimer(); // No need to set a timer, we are just idling.
 80032f0:	4620      	mov	r0, r4
 80032f2:	f000 f806 	bl	8003302 <ThreadManager::CancelQuantumTimer#18960>
 80032f6:	bdb0      	pop	{r4, r5, r7, pc}
            }
            else
            {
                ThreadImpl lastThread = m_readyThreads.LastTarget();
 80032f8:	f7fd f8b6 	bl	8000468 <Thread::ThrowNullException#4411>
 80032fc:	2005      	movs	r0, #5
 80032fe:	f7fc ffd5 	bl	80002ac <BugCheck::Raise#5282>

08003302 <ThreadManager::CancelQuantumTimer#18960>:
            m_ContextSwitchTimer.Reset();
        }

        public override void CancelQuantumTimer()
        {
            m_ContextSwitchTimer.Cancel();
 8003302:	b580      	push	{r7, lr}
 8003304:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8003306:	b110      	cbz	r0, 800330e <ThreadManager::CancelQuantumTimer#18960+0xc>
 8003308:	f005 fbed 	bl	8008ae6 <ContextSwitchTimer::Cancel#18999>
 800330c:	bd80      	pop	{r7, pc}
 800330e:	f7fd f8ab 	bl	8000468 <Thread::ThrowNullException#4411>

08003312 <KernelList`1::LastTarget#19739>:

        public T LastTarget()
        {
            KernelNode< T > node = m_tail.Previous;

            if(node != m_head)
 8003312:	b580      	push	{r7, lr}
 8003314:	4281      	cmp	r1, r0
 8003316:	bf04      	itt	eq
 8003318:	2000      	moveq	r0, #0
 800331a:	bd80      	popeq	{r7, pc}
            {
                return node.Target;
 800331c:	2900      	cmp	r1, #0
 800331e:	bf1c      	itt	ne
 8003320:	6908      	ldrne	r0, [r1, #16]
 8003322:	bd80      	popne	{r7, pc}
            return null;
        }

        public T LastTarget()
        {
            KernelNode< T > node = m_tail.Previous;
 8003324:	f7fd f8a0 	bl	8000468 <Thread::ThrowNullException#4411>

08003328 <ThreadManager::SetNextQuantumTimer#18961>:
        }

        public override void SetNextQuantumTimer()
        {
            m_ContextSwitchTimer.Reset( );
 8003328:	b580      	push	{r7, lr}
 800332a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800332c:	b110      	cbz	r0, 8003334 <ThreadManager::SetNextQuantumTimer#18961+0xc>
 800332e:	f005 fbb3 	bl	8008a98 <ContextSwitchTimer::Reset#19000>
 8003332:	bd80      	pop	{r7, pc}
 8003334:	f7fd f898 	bl	8000468 <Thread::ThrowNullException#4411>

08003338 <ThreadManager::Reschedule#3535>:
            }
        }

        public virtual void Reschedule()
        {
            SelectNextThreadToRun();
 8003338:	b580      	push	{r7, lr}
 800333a:	f7fd fa35 	bl	80007a8 <ThreadManager::SelectNextThreadToRun#3536>
 800333e:	bd80      	pop	{r7, pc}

08003340 <KernelList`1::FirstTarget#19737>:

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;

            if(node != m_tail)
 8003340:	b580      	push	{r7, lr}
 8003342:	4288      	cmp	r0, r1
 8003344:	bf04      	itt	eq
 8003346:	2000      	moveq	r0, #0
 8003348:	bd80      	popeq	{r7, pc}
            {
                return node.Target;
 800334a:	2800      	cmp	r0, #0
 800334c:	bf1c      	itt	ne
 800334e:	6900      	ldrne	r0, [r0, #16]
 8003350:	bd80      	popne	{r7, pc}
            return null;
        }

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;
 8003352:	f7fd f889 	bl	8000468 <Thread::ThrowNullException#4411>

08003356 <ThreadManager::WaitExpired#3545>:
                ComputeNextTimeout();
            }
        }

        protected void WaitExpired( SchedulerTime currentTime )
        {
 8003356:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003358:	b081      	sub	sp, #4
 800335a:	4604      	mov	r4, r0
 800335c:	2001      	movs	r0, #1
 800335e:	461d      	mov	r5, r3
 8003360:	4616      	mov	r6, r2
 8003362:	f884 0020 	strb.w	r0, [r4, #32]
            m_noInvalidateNextWaitTimerRecursion = true;

            KernelNode< ThreadImpl > node = m_waitingThreads.StartOfForwardWalk;
 8003366:	6920      	ldr	r0, [r4, #16]
 8003368:	b180      	cbz	r0, 800338c <ThreadManager::WaitExpired#3545+0x36>
 800336a:	6880      	ldr	r0, [r0, #8]
 800336c:	6880      	ldr	r0, [r0, #8]
 800336e:	f000 f817 	bl	80033a0 <KernelList`1::get_StartOfForwardWalk#19741>
 8003372:	4607      	mov	r7, r0
 8003374:	e004      	b.n	8003380 <ThreadManager::WaitExpired#3545+0x2a>
 8003376:	68bf      	ldr	r7, [r7, #8]

            while(node.IsValidForForwardMove)
            {
                KernelNode< ThreadImpl > nodeNext = node.Next;

                node.Target.ProcessWaitExpiration( currentTime );
 8003378:	4632      	mov	r2, r6
 800337a:	462b      	mov	r3, r5
 800337c:	f7ff fc33 	bl	8002be6 <Thread::ProcessWaitExpiration#4401>
 8003380:	b127      	cbz	r7, 800338c <ThreadManager::WaitExpired#3545+0x36>
 8003382:	68b8      	ldr	r0, [r7, #8]
        {
            m_noInvalidateNextWaitTimerRecursion = true;

            KernelNode< ThreadImpl > node = m_waitingThreads.StartOfForwardWalk;

            while(node.IsValidForForwardMove)
 8003384:	b120      	cbz	r0, 8003390 <ThreadManager::WaitExpired#3545+0x3a>
 8003386:	6938      	ldr	r0, [r7, #16]
            {
                KernelNode< ThreadImpl > nodeNext = node.Next;

                node.Target.ProcessWaitExpiration( currentTime );
 8003388:	2800      	cmp	r0, #0
 800338a:	d1f4      	bne.n	8003376 <ThreadManager::WaitExpired#3545+0x20>

        protected void WaitExpired( SchedulerTime currentTime )
        {
            m_noInvalidateNextWaitTimerRecursion = true;

            KernelNode< ThreadImpl > node = m_waitingThreads.StartOfForwardWalk;
 800338c:	f7fd f86c 	bl	8000468 <Thread::ThrowNullException#4411>
 8003390:	2000      	movs	r0, #0
 8003392:	f884 0020 	strb.w	r0, [r4, #32]
                node = nodeNext;
            }

            m_noInvalidateNextWaitTimerRecursion = false;

            ComputeNextTimeout();
 8003396:	4620      	mov	r0, r4
 8003398:	f7ff fb82 	bl	8002aa0 <ThreadManager::ComputeNextTimeout#3546>
 800339c:	b001      	add	sp, #4
 800339e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033a0 <KernelList`1::get_StartOfForwardWalk#19741>:
 80033a0:	4770      	bx	lr
 80033a2:	46c0      	nop			; (mov r8, r8)

080033a4 <ThreadManager::SetNextWaitTimer#18646>:
            m_timerForWaits = Drivers.SystemTimer.Instance.CreateTimer( WaitExpired );
            DeviceModels.Chipset.CortexM3.Drivers.InterruptController.Instance.Activate();
        }

        public override void SetNextWaitTimer( RT.SchedulerTime nextTimeout )
        {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	f8df c030 	ldr.w	ip, [pc, #48]	; 80033d8 <ThreadManager::SetNextWaitTimer#18646+0x34>
            if(nextTimeout != RT.SchedulerTime.MaxValue)
 80033aa:	490c      	ldr	r1, [pc, #48]	; (80033dc <ThreadManager::SetNextWaitTimer#18646+0x38>)
            {
                m_timerForWaits.Timeout = nextTimeout.Units;
 80033ac:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80033ae:	44fc      	add	ip, pc
            DeviceModels.Chipset.CortexM3.Drivers.InterruptController.Instance.Activate();
        }

        public override void SetNextWaitTimer( RT.SchedulerTime nextTimeout )
        {
            if(nextTimeout != RT.SchedulerTime.MaxValue)
 80033b0:	4461      	add	r1, ip
 80033b2:	e9d1 c11f 	ldrd	ip, r1, [r1, #124]	; 0x7c
 80033b6:	ea83 0e01 	eor.w	lr, r3, r1
 80033ba:	ea82 010c 	eor.w	r1, r2, ip
 80033be:	ea51 010e 	orrs.w	r1, r1, lr
 80033c2:	d003      	beq.n	80033cc <ThreadManager::SetNextWaitTimer#18646+0x28>
 80033c4:	b130      	cbz	r0, 80033d4 <ThreadManager::SetNextWaitTimer#18646+0x30>
            {
                m_timerForWaits.Timeout = nextTimeout.Units;
 80033c6:	f005 f91b 	bl	8008600 <Timer::set_Timeout#18854>
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	b110      	cbz	r0, 80033d4 <ThreadManager::SetNextWaitTimer#18646+0x30>
            }
            else
            {
                m_timerForWaits.Cancel( );
 80033ce:	f005 f922 	bl	8008616 <Timer::Cancel#18850>
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	f7fd f848 	bl	8000468 <Thread::ThrowNullException#4411>
 80033d8:	17ffd766 	.word	0x17ffd766
 80033dc:	fffffcf8 	.word	0xfffffcf8

080033e0 <KernelNode`1::InsertBefore#19765>:
        // Helper Methods
        //

        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
 80033e0:	b580      	push	{r7, lr}
 80033e2:	6882      	ldr	r2, [r0, #8]
 80033e4:	b13a      	cbz	r2, 80033f6 <KernelNode`1::InsertBefore#19765+0x16>
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 80033e6:	6882      	ldr	r2, [r0, #8]
            KernelNode< T > prev = m_previous;

            next.m_previous = prev;
 80033e8:	2a00      	cmp	r2, #0

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
            KernelNode< T > prev = m_previous;
 80033ea:	bf1e      	ittt	ne
 80033ec:	68c3      	ldrne	r3, [r0, #12]
 80033ee:	60d3      	strne	r3, [r2, #12]

            next.m_previous = prev;
            prev.m_next     = next;
 80033f0:	2b00      	cmpne	r3, #0
 80033f2:	d00a      	beq.n	800340a <KernelNode`1::InsertBefore#19765+0x2a>
 80033f4:	609a      	str	r2, [r3, #8]
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }

            KernelNode< T > prev = place.m_previous;
 80033f6:	2900      	cmp	r1, #0
 80033f8:	bf1c      	itt	ne
 80033fa:	68ca      	ldrne	r2, [r1, #12]

            prev.ConnectToNext( this  );
 80033fc:	2a00      	cmpne	r2, #0
 80033fe:	d004      	beq.n	800340a <KernelNode`1::InsertBefore#19765+0x2a>
 8003400:	6090      	str	r0, [r2, #8]
 8003402:	e9c0 1202 	strd	r1, r2, [r0, #8]
 8003406:	60c8      	str	r0, [r1, #12]
 8003408:	bd80      	pop	{r7, pc}
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }

            KernelNode< T > prev = place.m_previous;
 800340a:	f7fd f82d 	bl	8000468 <Thread::ThrowNullException#4411>

0800340e <TestProgram::Main#143>:
    using Windows.Devices.Spi;
    using Windows.Devices.I2c;
    using Windows.Devices.Enumeration;
    using Windows.Devices.Adc;
    using System.IO.Ports;
    using Windows.Devices.Pwm;
 800340e:	b580      	push	{r7, lr}

    using ZeligSupport = Microsoft.Zelig.Support.mbed;

    class TestProgram
 8003410:	f006 f906 	bl	8009620 <fake_main>
 8003414:	e7fc      	b.n	8003410 <TestProgram::Main#143+0x2>
 8003416:	46c0      	nop			; (mov r8, r8)

08003418 <ThreadManager::set_CurrentThread#3556>:
            {
                return m_runningThread;
            }

            set
            {
 8003418:	b580      	push	{r7, lr}
 800341a:	4a08      	ldr	r2, [pc, #32]	; (800343c <ThreadManager::set_CurrentThread#3556+0x24>)
                // For ARMv7 we are using the async PendSV exception, which is delivered with ISRs enabled
                //
                BugCheck.AssertInterruptsOff();
#endif

                ThreadImpl oldValue = m_runningThread;
 800341c:	4908      	ldr	r1, [pc, #32]	; (8003440 <ThreadManager::set_CurrentThread#3556+0x28>)
 800341e:	447a      	add	r2, pc
 8003420:	440a      	add	r2, r1
 8003422:	6a52      	ldr	r2, [r2, #36]	; 0x24

                if(oldValue != value)
 8003424:	4282      	cmp	r2, r0
 8003426:	bf08      	it	eq
 8003428:	bd80      	popeq	{r7, pc}
 800342a:	4a06      	ldr	r2, [pc, #24]	; (8003444 <ThreadManager::set_CurrentThread#3556+0x2c>)
 800342c:	447a      	add	r2, pc
 800342e:	4411      	add	r1, r2
 8003430:	6248      	str	r0, [r1, #36]	; 0x24

#if USE_THREAD_PERFORMANCE_COUNTER
                    value.AcquiredProcessor();
#endif // USE_THREAD_PERFORMANCE_COUNTER

                    SetNextQuantumTimerIfNeeded();
 8003432:	4608      	mov	r0, r1
 8003434:	f7ff ff44 	bl	80032c0 <ThreadManager::SetNextQuantumTimerIfNeeded#3533>
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	17ffd6f6 	.word	0x17ffd6f6
 8003440:	fffffe18 	.word	0xfffffe18
 8003444:	17ffd6e8 	.word	0x17ffd6e8

08003448 <ProcessorARMv7M::InitializeProcessor#3603>:
 8003448:	b580      	push	{r7, lr}
 800344a:	2001      	movs	r0, #1
 800344c:	f006 f930 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8003450:	2000      	movs	r0, #0
 8003452:	f006 f961 	bl	8009718 <CUSTOM_STUB_SCB_SCR_SetSystemControlRegister>
 8003456:	f240 2011 	movw	r0, #529	; 0x211
 800345a:	f006 f947 	bl	80096ec <CUSTOM_STUB_SCB_set_CCR>
 800345e:	f06f 000c 	mvn.w	r0, #12
 8003462:	f000 f80d 	bl	8003480 <ProcessorARMv7M::EnableSystemHandler#3614>
 8003466:	f06f 000a 	mvn.w	r0, #10
 800346a:	f000 f809 	bl	8003480 <ProcessorARMv7M::EnableSystemHandler#3614>
 800346e:	f06f 000b 	mvn.w	r0, #11
 8003472:	f000 f805 	bl	8003480 <ProcessorARMv7M::EnableSystemHandler#3614>
 8003476:	f06f 0009 	mvn.w	r0, #9
 800347a:	f000 f801 	bl	8003480 <ProcessorARMv7M::EnableSystemHandler#3614>
 800347e:	bd80      	pop	{r7, pc}

08003480 <ProcessorARMv7M::EnableSystemHandler#3614>:
 8003480:	b580      	push	{r7, lr}
 8003482:	2100      	movs	r1, #0
 8003484:	2800      	cmp	r0, #0
 8003486:	bfb8      	it	lt
 8003488:	2101      	movlt	r1, #1
 800348a:	2900      	cmp	r1, #0
 800348c:	d027      	beq.n	80034de <ProcessorARMv7M::EnableSystemHandler#3614+0x5e>
 800348e:	f110 0f2a 	cmn.w	r0, #42	; 0x2a
 8003492:	d101      	bne.n	8003498 <ProcessorARMv7M::EnableSystemHandler#3614+0x18>
 8003494:	2000      	movs	r0, #0
 8003496:	e00d      	b.n	80034b4 <ProcessorARMv7M::EnableSystemHandler#3614+0x34>
 8003498:	f100 010e 	add.w	r1, r0, #14
 800349c:	290d      	cmp	r1, #13
 800349e:	d81b      	bhi.n	80034d8 <ProcessorARMv7M::EnableSystemHandler#3614+0x58>
 80034a0:	2000      	movs	r0, #0
 80034a2:	e8df f001 	tbb	[pc, r1]
 80034a6:	0707      	.short	0x0707
 80034a8:	19140f0a 	.word	0x19140f0a
 80034ac:	07191919 	.word	0x07191919
 80034b0:	1c1c191f 	.word	0x1c1c191f
 80034b4:	f006 f920 	bl	80096f8 <CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler>
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80034be:	f006 f91b 	bl	80096f8 <CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler>
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80034c8:	f006 f916 	bl	80096f8 <CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler>
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80034d2:	f006 f911 	bl	80096f8 <CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler>
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	2009      	movs	r0, #9
 80034da:	f7fc fee7 	bl	80002ac <BugCheck::Raise#5282>
 80034de:	2009      	movs	r0, #9
 80034e0:	f7fc fee4 	bl	80002ac <BugCheck::Raise#5282>
 80034e4:	200e      	movs	r0, #14
 80034e6:	f7fc fee1 	bl	80002ac <BugCheck::Raise#5282>

080034ea <ProcessorARMv7M::AreInterruptsDisabled#3619>:
 80034ea:	b580      	push	{r7, lr}
 80034ec:	f006 f8dc 	bl	80096a8 <CMSIS_STUB_SCB__get_BASEPRI>
 80034f0:	2100      	movs	r1, #0
 80034f2:	2802      	cmp	r0, #2
 80034f4:	bf38      	it	cc
 80034f6:	2101      	movcc	r1, #1
 80034f8:	4608      	mov	r0, r1
 80034fa:	bd80      	pop	{r7, pc}

080034fc <ProcessorARMv7M::Breakpoint#3622>:
 80034fc:	b580      	push	{r7, lr}
 80034fe:	f04f 30a5 	mov.w	r0, #2779096485	; 0xa5a5a5a5
 8003502:	f006 f983 	bl	800980c <Breakpoint>
 8003506:	bd80      	pop	{r7, pc}

08003508 <ProcessorARMv7M::VerifyHandlerMode#3630>:
 8003508:	b580      	push	{r7, lr}
 800350a:	f006 f8bf 	bl	800968c <CMSIS_STUB_SCB__get_CONTROL>
 800350e:	2100      	movs	r1, #0
 8003510:	f010 0f02 	tst.w	r0, #2
 8003514:	bf08      	it	eq
 8003516:	2101      	moveq	r1, #1
 8003518:	4608      	mov	r0, r1
 800351a:	bd80      	pop	{r7, pc}

0800351c <ProcessorARMv7M::IsBusFaultAddressValid#3646>:
 800351c:	b580      	push	{r7, lr}
 800351e:	f006 fa2d 	bl	800997c <CUSTOM_STUB_SCB__get_CFSR>
 8003522:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
 8003526:	0bc0      	lsrs	r0, r0, #15
 8003528:	bd80      	pop	{r7, pc}

0800352a <ProcessorARMv7M::IsBusFaultAddressPrecise#3647>:
 800352a:	b580      	push	{r7, lr}
 800352c:	f006 fa26 	bl	800997c <CUSTOM_STUB_SCB__get_CFSR>
 8003530:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8003534:	0a40      	lsrs	r0, r0, #9
 8003536:	bd80      	pop	{r7, pc}

08003538 <CUSTOM_STUB_NotifySoftwareFrameSnapshot>:
        //--//
        
        [ExportedMethod]
        private static unsafe void CUSTOM_STUB_NotifySoftwareFrameSnapshot( void* frame, int size )
        {
            BugCheck.Assert( size * sizeof( uint ) == Context.RegistersOnStack.TotalFrameSize, BugCheck.StopCode.StackCorruptionDetected ); 
 8003538:	b580      	push	{r7, lr}
 800353a:	2248      	movs	r2, #72	; 0x48
 800353c:	2300      	movs	r3, #0
 800353e:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
 8003542:	bf08      	it	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	b113      	cbz	r3, 800354e <CUSTOM_STUB_NotifySoftwareFrameSnapshot+0x16>

            uint* registers = (uint*)frame;

            UpdateFrame( ref Snapshot, registers ); 
 8003548:	f7fc ffa4 	bl	8000494 <ProcessorARMv7M::UpdateFrame#3704>
 800354c:	bd80      	pop	{r7, pc}
 800354e:	2013      	movs	r0, #19
 8003550:	f7fc feac 	bl	80002ac <BugCheck::Raise#5282>

08003554 <BugCheck::Log#5286>:
        {
            Device.Instance.ProcessLog(format, p1, p2);
        }

        public static void Log(string format, int p1, int p2, int p3)
        {
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	468c      	mov	ip, r1
 800355a:	4907      	ldr	r1, [pc, #28]	; (8003578 <BugCheck::Log#5286+0x24>)
 800355c:	4603      	mov	r3, r0
            Device.Instance.ProcessLog(format, p1, p2, p3);
 800355e:	9200      	str	r2, [sp, #0]
 8003560:	4806      	ldr	r0, [pc, #24]	; (800357c <BugCheck::Log#5286+0x28>)
 8003562:	4a07      	ldr	r2, [pc, #28]	; (8003580 <BugCheck::Log#5286+0x2c>)
 8003564:	4479      	add	r1, pc
 8003566:	4408      	add	r0, r1
 8003568:	4411      	add	r1, r2
 800356a:	461a      	mov	r2, r3
 800356c:	4663      	mov	r3, ip
 800356e:	f001 f97b 	bl	8004868 <Device::ProcessLog#18576>
 8003572:	b002      	add	sp, #8
 8003574:	bd80      	pop	{r7, pc}
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	17ffd5b0 	.word	0x17ffd5b0
 800357c:	e8014a84 	.word	0xe8014a84
 8003580:	e80111b8 	.word	0xe80111b8

08003584 <BugCheck::Log#5288>:
        {
            Device.Instance.ProcessLog(format, p1, p2, p3, p4);
        }

        public static void Log(string format, int p1, int p2, int p3, int p4, int p5)
        {
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	4686      	mov	lr, r0
 800358a:	9806      	ldr	r0, [sp, #24]
 800358c:	468c      	mov	ip, r1
 800358e:	4907      	ldr	r1, [pc, #28]	; (80035ac <BugCheck::Log#5288+0x28>)
            Device.Instance.ProcessLog(format, p1, p2, p3, p4, p5);
 8003590:	e9cd 2300 	strd	r2, r3, [sp]
 8003594:	4a07      	ldr	r2, [pc, #28]	; (80035b4 <BugCheck::Log#5288+0x30>)
 8003596:	4663      	mov	r3, ip
 8003598:	9002      	str	r0, [sp, #8]
 800359a:	4805      	ldr	r0, [pc, #20]	; (80035b0 <BugCheck::Log#5288+0x2c>)
 800359c:	4479      	add	r1, pc
 800359e:	4408      	add	r0, r1
 80035a0:	4411      	add	r1, r2
 80035a2:	4672      	mov	r2, lr
 80035a4:	f001 f972 	bl	800488c <Device::ProcessLog#18578>
 80035a8:	b004      	add	sp, #16
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	17ffd578 	.word	0x17ffd578
 80035b0:	e8014a84 	.word	0xe8014a84
 80035b4:	e8011238 	.word	0xe8011238

080035b8 <MethodWrapper::Prologue#3707>:
 80035b8:	b580      	push	{r7, lr}
 80035ba:	4a07      	ldr	r2, [pc, #28]	; (80035d8 <MethodWrapper::Prologue#3707+0x20>)
 80035bc:	4807      	ldr	r0, [pc, #28]	; (80035dc <MethodWrapper::Prologue#3707+0x24>)
 80035be:	4908      	ldr	r1, [pc, #32]	; (80035e0 <MethodWrapper::Prologue#3707+0x28>)
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <MethodWrapper::Prologue#3707+0x2c>)
 80035c2:	447a      	add	r2, pc
 80035c4:	4410      	add	r0, r2
 80035c6:	4411      	add	r1, r2
 80035c8:	441a      	add	r2, r3
 80035ca:	2301      	movs	r3, #1
 80035cc:	f2c0 0340 	movt	r3, #64	; 0x40
 80035d0:	f7ff fff2 	bl	80035b8 <MethodWrapper::Prologue#3707>
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	17ffd552 	.word	0x17ffd552
 80035dc:	e8014a34 	.word	0xe8014a34
 80035e0:	e80112e8 	.word	0xe80112e8
 80035e4:	e8011398 	.word	0xe8011398

080035e8 <MethodWrapper::Prologue#3708>:
 80035e8:	4770      	bx	lr
 80035ea:	46c0      	nop			; (mov r8, r8)

080035ec <MethodWrapper::Epilogue#3709>:
 80035ec:	b580      	push	{r7, lr}
 80035ee:	4a07      	ldr	r2, [pc, #28]	; (800360c <MethodWrapper::Epilogue#3709+0x20>)
 80035f0:	4807      	ldr	r0, [pc, #28]	; (8003610 <MethodWrapper::Epilogue#3709+0x24>)
 80035f2:	4908      	ldr	r1, [pc, #32]	; (8003614 <MethodWrapper::Epilogue#3709+0x28>)
 80035f4:	4b08      	ldr	r3, [pc, #32]	; (8003618 <MethodWrapper::Epilogue#3709+0x2c>)
 80035f6:	447a      	add	r2, pc
 80035f8:	4410      	add	r0, r2
 80035fa:	4411      	add	r1, r2
 80035fc:	441a      	add	r2, r3
 80035fe:	2301      	movs	r3, #1
 8003600:	f2c0 0340 	movt	r3, #64	; 0x40
 8003604:	f7ff fff2 	bl	80035ec <MethodWrapper::Epilogue#3709>
 8003608:	bd80      	pop	{r7, pc}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	17ffd51e 	.word	0x17ffd51e
 8003610:	e8014a34 	.word	0xe8014a34
 8003614:	e80112e8 	.word	0xe80112e8
 8003618:	e8011518 	.word	0xe8011518

0800361c <MethodWrapper::Epilogue#3710>:
 800361c:	4770      	bx	lr
 800361e:	46c0      	nop			; (mov r8, r8)

08003620 <VTable::GetInterface#4050>:

        [WellKnownMethod( "VTable_GetInterface" )]
        [DisableAutomaticReferenceCounting]
        public static CodePointer[] GetInterface( object a             ,
                                                  VTable vtblInterface )
        {
 8003620:	b580      	push	{r7, lr}
 8003622:	2800      	cmp	r0, #0
 8003624:	d022      	beq.n	800366c <VTable::GetInterface#4050+0x4c>
 8003626:	bf1c      	itt	ne
 8003628:	6840      	ldrne	r0, [r0, #4]
            VTable         vtbl  = Get( a );
            InterfaceMap[] array = vtbl.InterfaceMethodPointers;
 800362a:	2800      	cmpne	r0, #0
 800362c:	d01e      	beq.n	800366c <VTable::GetInterface#4050+0x4c>
 800362e:	f8df c040 	ldr.w	ip, [pc, #64]	; 8003670 <VTable::GetInterface#4050+0x50>
 8003632:	6a01      	ldr	r1, [r0, #32]

            for(int i = 0; i < array.Length; i++)
            {
                if(Object.ReferenceEquals( array[i].Interface, vtblInterface ))
 8003634:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <VTable::GetInterface#4050+0x54>)
 8003636:	2200      	movs	r2, #0
 8003638:	44fc      	add	ip, pc
                                                  VTable vtblInterface )
        {
            VTable         vtbl  = Get( a );
            InterfaceMap[] array = vtbl.InterfaceMethodPointers;

            for(int i = 0; i < array.Length; i++)
 800363a:	f101 000c 	add.w	r0, r1, #12
            {
                if(Object.ReferenceEquals( array[i].Interface, vtblInterface ))
 800363e:	449c      	add	ip, r3
 8003640:	e001      	b.n	8003646 <VTable::GetInterface#4050+0x26>
                                                  VTable vtblInterface )
        {
            VTable         vtbl  = Get( a );
            InterfaceMap[] array = vtbl.InterfaceMethodPointers;

            for(int i = 0; i < array.Length; i++)
 8003642:	3008      	adds	r0, #8
 8003644:	3201      	adds	r2, #1
 8003646:	b189      	cbz	r1, 800366c <VTable::GetInterface#4050+0x4c>
 8003648:	688b      	ldr	r3, [r1, #8]
 800364a:	429a      	cmp	r2, r3
 800364c:	bfa4      	itt	ge
 800364e:	2000      	movge	r0, #0
 8003650:	bd80      	popge	{r7, pc}
            {
                if(Object.ReferenceEquals( array[i].Interface, vtblInterface ))
 8003652:	688b      	ldr	r3, [r1, #8]
 8003654:	429a      	cmp	r2, r3
 8003656:	d207      	bcs.n	8003668 <VTable::GetInterface#4050+0x48>
 8003658:	6803      	ldr	r3, [r0, #0]
 800365a:	4563      	cmp	r3, ip
 800365c:	d1f1      	bne.n	8003642 <VTable::GetInterface#4050+0x22>
                {
                    return array[i].MethodPointers;
 800365e:	6889      	ldr	r1, [r1, #8]
 8003660:	428a      	cmp	r2, r1
 8003662:	bf3c      	itt	cc
 8003664:	6840      	ldrcc	r0, [r0, #4]
 8003666:	bd80      	popcc	{r7, pc}
            VTable         vtbl  = Get( a );
            InterfaceMap[] array = vtbl.InterfaceMethodPointers;

            for(int i = 0; i < array.Length; i++)
            {
                if(Object.ReferenceEquals( array[i].Interface, vtblInterface ))
 8003668:	f7fd fc22 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 800366c:	f7fc fefc 	bl	8000468 <Thread::ThrowNullException#4411>
 8003670:	17ffd4dc 	.word	0x17ffd4dc
 8003674:	e8019e08 	.word	0xe8019e08

08003678 <VTable::CanBeAssignedFrom_Slow#4054>:
            return CanBeAssignedFrom_Slow( target );
        }

        [NoInline]
        private bool CanBeAssignedFrom_Slow( VTable source )
        {
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	460c      	mov	r4, r1
 800367c:	4605      	mov	r5, r0
            if(source.IsSubclassOf( this ))
 800367e:	2c00      	cmp	r4, #0
 8003680:	d078      	beq.n	8003774 <VTable::CanBeAssignedFrom_Slow#4054+0xfc>
 8003682:	6920      	ldr	r0, [r4, #16]
 8003684:	4629      	mov	r1, r5
 8003686:	f000 f87f 	bl	8003788 <VTable::IsSubclassOf#4055>
 800368a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800368e:	bf1c      	itt	ne
 8003690:	2001      	movne	r0, #1
 8003692:	bd70      	popne	{r4, r5, r6, pc}
        public bool IsArray
        {
            [Inline]
            get
            {
                return (this.ShapeCategory & Shape.Array) != 0;
 8003694:	7e28      	ldrb	r0, [r5, #24]
            if(source.IsSubclassOf( this ))
            {
                return true;
            }

            if(this.IsArray && source.IsArray)
 8003696:	f010 0f80 	tst.w	r0, #128	; 0x80
        public bool IsArray
        {
            [Inline]
            get
            {
                return (this.ShapeCategory & Shape.Array) != 0;
 800369a:	bf1c      	itt	ne
 800369c:	7e20      	ldrbne	r0, [r4, #24]
            if(source.IsSubclassOf( this ))
            {
                return true;
            }

            if(this.IsArray && source.IsArray)
 800369e:	f010 0f80 	tstne.w	r0, #128	; 0x80
 80036a2:	d058      	beq.n	8003756 <VTable::CanBeAssignedFrom_Slow#4054+0xde>
            {
                CHECKS.ASSERT( this.ShapeCategory == Shape.SzArray || this.ShapeCategory == Shape.MultiArray, "Found array that does not inherit from System.Array" );
 80036a4:	7e28      	ldrb	r0, [r5, #24]
 80036a6:	28c6      	cmp	r0, #198	; 0xc6
 80036a8:	d101      	bne.n	80036ae <VTable::CanBeAssignedFrom_Slow#4054+0x36>
 80036aa:	2001      	movs	r0, #1
 80036ac:	e004      	b.n	80036b8 <VTable::CanBeAssignedFrom_Slow#4054+0x40>
 80036ae:	7e29      	ldrb	r1, [r5, #24]
 80036b0:	2000      	movs	r0, #0
 80036b2:	29c7      	cmp	r1, #199	; 0xc7
 80036b4:	bf08      	it	eq
 80036b6:	2001      	moveq	r0, #1
 80036b8:	492f      	ldr	r1, [pc, #188]	; (8003778 <VTable::CanBeAssignedFrom_Slow#4054+0x100>)
 80036ba:	4a30      	ldr	r2, [pc, #192]	; (800377c <VTable::CanBeAssignedFrom_Slow#4054+0x104>)
 80036bc:	4479      	add	r1, pc
 80036be:	4411      	add	r1, r2
 80036c0:	f000 f878 	bl	80037b4 <CHECKS::ASSERT#12594>

                if(this.ShapeCategory == source.ShapeCategory)
 80036c4:	7e20      	ldrb	r0, [r4, #24]
 80036c6:	7e29      	ldrb	r1, [r5, #24]
 80036c8:	4281      	cmp	r1, r0
 80036ca:	d144      	bne.n	8003756 <VTable::CanBeAssignedFrom_Slow#4054+0xde>
 80036cc:	482c      	ldr	r0, [pc, #176]	; (8003780 <VTable::CanBeAssignedFrom_Slow#4054+0x108>)
                {
                    ArrayReferenceTypeRepresentation tdThis   = (ArrayReferenceTypeRepresentation)this  .TypeInfo;
 80036ce:	492d      	ldr	r1, [pc, #180]	; (8003784 <VTable::CanBeAssignedFrom_Slow#4054+0x10c>)
 80036d0:	4478      	add	r0, pc
 80036d2:	180e      	adds	r6, r1, r0
 80036d4:	6928      	ldr	r0, [r5, #16]
 80036d6:	4631      	mov	r1, r6
 80036d8:	f000 f982 	bl	80039e0 <TypeSystemManager::CastToType#5590>
 80036dc:	4605      	mov	r5, r0
                    ArrayReferenceTypeRepresentation tdSource = (ArrayReferenceTypeRepresentation)source.TypeInfo;
 80036de:	6920      	ldr	r0, [r4, #16]
 80036e0:	4631      	mov	r1, r6
 80036e2:	f000 f97d 	bl	80039e0 <TypeSystemManager::CastToType#5590>
 80036e6:	4604      	mov	r4, r0
 80036e8:	2d00      	cmp	r5, #0
 80036ea:	d043      	beq.n	8003774 <VTable::CanBeAssignedFrom_Slow#4054+0xfc>
 80036ec:	d042      	beq.n	8003774 <VTable::CanBeAssignedFrom_Slow#4054+0xfc>
 80036ee:	6868      	ldr	r0, [r5, #4]

                    if(tdThis.SameShape( tdSource ))
 80036f0:	4621      	mov	r1, r4
 80036f2:	69c0      	ldr	r0, [r0, #28]
 80036f4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80036f6:	4628      	mov	r0, r5
 80036f8:	4790      	blx	r2
 80036fa:	f010 0fff 	tst.w	r0, #255	; 0xff
 80036fe:	d02a      	beq.n	8003756 <VTable::CanBeAssignedFrom_Slow#4054+0xde>
 8003700:	6868      	ldr	r0, [r5, #4]
                    {
                        TypeRepresentation subThis   = tdThis  .ContainedType.UnderlyingType;
 8003702:	69c0      	ldr	r0, [r0, #28]
 8003704:	69c1      	ldr	r1, [r0, #28]
 8003706:	4628      	mov	r0, r5
 8003708:	4788      	blx	r1
 800370a:	2800      	cmp	r0, #0
 800370c:	d032      	beq.n	8003774 <VTable::CanBeAssignedFrom_Slow#4054+0xfc>
 800370e:	d031      	beq.n	8003774 <VTable::CanBeAssignedFrom_Slow#4054+0xfc>
 8003710:	6841      	ldr	r1, [r0, #4]
 8003712:	69c9      	ldr	r1, [r1, #28]
 8003714:	6a09      	ldr	r1, [r1, #32]
 8003716:	4788      	blx	r1
 8003718:	4605      	mov	r5, r0
 800371a:	2c00      	cmp	r4, #0
 800371c:	d02a      	beq.n	8003774 <VTable::CanBeAssignedFrom_Slow#4054+0xfc>
 800371e:	d029      	beq.n	8003774 <VTable::CanBeAssignedFrom_Slow#4054+0xfc>
 8003720:	6860      	ldr	r0, [r4, #4]
                        TypeRepresentation subSource = tdSource.ContainedType.UnderlyingType;
 8003722:	69c0      	ldr	r0, [r0, #28]
 8003724:	69c1      	ldr	r1, [r0, #28]
 8003726:	4620      	mov	r0, r4
 8003728:	4788      	blx	r1
 800372a:	2800      	cmp	r0, #0
 800372c:	d022      	beq.n	8003774 <VTable::CanBeAssignedFrom_Slow#4054+0xfc>
 800372e:	d021      	beq.n	8003774 <VTable::CanBeAssignedFrom_Slow#4054+0xfc>
 8003730:	6841      	ldr	r1, [r0, #4]
 8003732:	69c9      	ldr	r1, [r1, #28]
 8003734:	6a09      	ldr	r1, [r1, #32]
 8003736:	4788      	blx	r1

                        VTable subVTableThis   = subThis  .VirtualTable;
 8003738:	2d00      	cmp	r5, #0
                        VTable subVTableSource = subSource.VirtualTable;
 800373a:	bf18      	it	ne
 800373c:	2800      	cmpne	r0, #0
 800373e:	d019      	beq.n	8003774 <VTable::CanBeAssignedFrom_Slow#4054+0xfc>
 8003740:	6aaa      	ldr	r2, [r5, #40]	; 0x28

                        if(subVTableThis == subVTableSource)
 8003742:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003744:	428a      	cmp	r2, r1
 8003746:	bf04      	itt	eq
 8003748:	2001      	moveq	r0, #1
 800374a:	bd70      	popeq	{r4, r5, r6, pc}
 800374c:	b191      	cbz	r1, 8003774 <VTable::CanBeAssignedFrom_Slow#4054+0xfc>
        public bool IsValueType
        {
            [Inline]
            get
            {
                return (this.ShapeCategory & Shape.ValueType) != 0;
 800374e:	7e08      	ldrb	r0, [r1, #24]
                        if(subVTableThis == subVTableSource)
                        {
                            return true;
                        }

                        if(subVTableSource.IsValueType)
 8003750:	f010 0f20 	tst.w	r0, #32
 8003754:	d001      	beq.n	800375a <VTable::CanBeAssignedFrom_Slow#4054+0xe2>
 8003756:	2000      	movs	r0, #0
 8003758:	bd70      	pop	{r4, r5, r6, pc}
 800375a:	b15a      	cbz	r2, 8003774 <VTable::CanBeAssignedFrom_Slow#4054+0xfc>
        public bool IsInterface
        {
            [Inline]
            get
            {
                return this.ShapeCategory == Shape.Interface;
 800375c:	7e10      	ldrb	r0, [r2, #24]
                            // We require exact matching for value types.
                            //
                            return false;
                        }

                        if(subVTableThis.IsInterface)
 800375e:	2843      	cmp	r0, #67	; 0x43
 8003760:	d104      	bne.n	800376c <VTable::CanBeAssignedFrom_Slow#4054+0xf4>
 8003762:	6a08      	ldr	r0, [r1, #32]
                        {
                            return subVTableSource.ImplementsInterface( subVTableThis );
 8003764:	4611      	mov	r1, r2
 8003766:	f000 f95b 	bl	8003a20 <VTable::ImplementsInterface#4056>
 800376a:	bd70      	pop	{r4, r5, r6, pc}
                        }

                        return subVTableThis.CanBeAssignedFrom_Slow( subVTableSource );
 800376c:	4610      	mov	r0, r2
 800376e:	f7ff ff83 	bl	8003678 <VTable::CanBeAssignedFrom_Slow#4054>
 8003772:	bd70      	pop	{r4, r5, r6, pc}
        }

        [NoInline]
        private bool CanBeAssignedFrom_Slow( VTable source )
        {
            if(source.IsSubclassOf( this ))
 8003774:	f7fc fe78 	bl	8000468 <Thread::ThrowNullException#4411>
 8003778:	17ffd458 	.word	0x17ffd458
 800377c:	e8011698 	.word	0xe8011698
 8003780:	17ffd444 	.word	0x17ffd444
 8003784:	e8019a18 	.word	0xe8019a18

08003788 <VTable::IsSubclassOf#4055>:
            return false;
        }

        [NoInline]
        public bool IsSubclassOf( VTable target )
        {
 8003788:	b570      	push	{r4, r5, r6, lr}
 800378a:	460c      	mov	r4, r1
 800378c:	4605      	mov	r5, r0
 800378e:	2600      	movs	r6, #0
 8003790:	e000      	b.n	8003794 <VTable::IsSubclassOf#4055+0xc>
 8003792:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8003794:	4628      	mov	r0, r5
 8003796:	2100      	movs	r1, #0
 8003798:	f7fd ff7a 	bl	8001690 <Object::Equals#2586>
            TypeRepresentation td = this.TypeInfo;
            while(td != null)
 800379c:	f010 0fff 	tst.w	r0, #255	; 0xff
 80037a0:	d104      	bne.n	80037ac <VTable::IsSubclassOf#4055+0x24>
            {
                if(target == td.VirtualTable)
 80037a2:	b12d      	cbz	r5, 80037b0 <VTable::IsSubclassOf#4055+0x28>
 80037a4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80037a6:	4284      	cmp	r4, r0
 80037a8:	d1f3      	bne.n	8003792 <VTable::IsSubclassOf#4055+0xa>
 80037aa:	2601      	movs	r6, #1
 80037ac:	4630      	mov	r0, r6
 80037ae:	bd70      	pop	{r4, r5, r6, pc}
 80037b0:	f7fc fe5a 	bl	8000468 <Thread::ThrowNullException#4411>

080037b4 <CHECKS::ASSERT#12594>:

        [System.Diagnostics.Conditional( "DEBUG"         )]
        [System.Diagnostics.Conditional( "CHECKS_ASSERT" )]
        public static void ASSERT( bool   res  ,
                                   string text )
        {
 80037b4:	b5b0      	push	{r4, r5, r7, lr}
 80037b6:	460c      	mov	r4, r1
            if(res == false)
 80037b8:	f010 0fff 	tst.w	r0, #255	; 0xff
 80037bc:	bf18      	it	ne
 80037be:	bdb0      	popne	{r4, r5, r7, pc}
 80037c0:	4808      	ldr	r0, [pc, #32]	; (80037e4 <CHECKS::ASSERT#12594+0x30>)
            {
                throw AssertionViolationException.Create( text );
 80037c2:	4909      	ldr	r1, [pc, #36]	; (80037e8 <CHECKS::ASSERT#12594+0x34>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	4478      	add	r0, pc
 80037c8:	180d      	adds	r5, r1, r0
 80037ca:	4908      	ldr	r1, [pc, #32]	; (80037ec <CHECKS::ASSERT#12594+0x38>)
 80037cc:	4401      	add	r1, r0
 80037ce:	4628      	mov	r0, r5
 80037d0:	f7fe f920 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 80037d4:	4601      	mov	r1, r0
 80037d6:	4620      	mov	r0, r4
 80037d8:	f004 f84c 	bl	8007874 <AssertionViolationException::Create#12381>
 80037dc:	4601      	mov	r1, r0
 80037de:	4628      	mov	r0, r5
 80037e0:	f7fd f86e 	bl	80008c0 <TypeSystemManager::Throw#5596>
 80037e4:	17ffd34e 	.word	0x17ffd34e
 80037e8:	fffffe0c 	.word	0xfffffe0c
 80037ec:	e8019598 	.word	0xe8019598

080037f0 <TypeRepresentation::PrettyToString#16200>:
        }

        internal virtual void PrettyToString( System.Text.StringBuilder sb                 ,
                                              bool                      fPrefix            ,
                                              bool                      fWithAbbreviations )
        {
 80037f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f4:	b081      	sub	sp, #4
 80037f6:	4690      	mov	r8, r2
 80037f8:	4699      	mov	r9, r3
 80037fa:	468a      	mov	sl, r1
 80037fc:	4607      	mov	r7, r0
            if(fPrefix)
 80037fe:	f018 0fff 	tst.w	r8, #255	; 0xff
 8003802:	d025      	beq.n	8003850 <TypeRepresentation::PrettyToString#16200+0x60>
 8003804:	2f00      	cmp	r7, #0
 8003806:	f000 80cc 	beq.w	80039a2 <TypeRepresentation::PrettyToString#16200+0x1b2>
 800380a:	6878      	ldr	r0, [r7, #4]
            {
                if(this.IsDelayedType)
 800380c:	69c0      	ldr	r0, [r0, #28]
 800380e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003810:	4638      	mov	r0, r7
 8003812:	4788      	blx	r1
 8003814:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003818:	d007      	beq.n	800382a <TypeRepresentation::PrettyToString#16200+0x3a>
                {
                    sb.Append( "delayed " );
 800381a:	f1ba 0f00 	cmp.w	sl, #0
 800381e:	f000 80c0 	beq.w	80039a2 <TypeRepresentation::PrettyToString#16200+0x1b2>
 8003822:	4863      	ldr	r0, [pc, #396]	; (80039b0 <TypeRepresentation::PrettyToString#16200+0x1c0>)
 8003824:	4963      	ldr	r1, [pc, #396]	; (80039b4 <TypeRepresentation::PrettyToString#16200+0x1c4>)
 8003826:	4478      	add	r0, pc
 8003828:	e00e      	b.n	8003848 <TypeRepresentation::PrettyToString#16200+0x58>
 800382a:	6878      	ldr	r0, [r7, #4]
                }
                else if(this.IsOpenType)
 800382c:	69c0      	ldr	r0, [r0, #28]
 800382e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8003830:	4638      	mov	r0, r7
 8003832:	4788      	blx	r1
 8003834:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003838:	d00a      	beq.n	8003850 <TypeRepresentation::PrettyToString#16200+0x60>
                {
                    sb.Append( "generic " );
 800383a:	f1ba 0f00 	cmp.w	sl, #0
 800383e:	f000 80b0 	beq.w	80039a2 <TypeRepresentation::PrettyToString#16200+0x1b2>
 8003842:	4859      	ldr	r0, [pc, #356]	; (80039a8 <TypeRepresentation::PrettyToString#16200+0x1b8>)
 8003844:	4959      	ldr	r1, [pc, #356]	; (80039ac <TypeRepresentation::PrettyToString#16200+0x1bc>)
 8003846:	4478      	add	r0, pc
        {
            if(fPrefix)
            {
                if(this.IsDelayedType)
                {
                    sb.Append( "delayed " );
 8003848:	4401      	add	r1, r0
 800384a:	4650      	mov	r0, sl
 800384c:	f002 fd9e 	bl	800638c <StringBuilder::Append#9238>
                }
            }

            string name = null;

            if(fWithAbbreviations)
 8003850:	f019 0fff 	tst.w	r9, #255	; 0xff
 8003854:	d004      	beq.n	8003860 <TypeRepresentation::PrettyToString#16200+0x70>
            {
                name = GetAbbreviation();
 8003856:	7a38      	ldrb	r0, [r7, #8]
 8003858:	f004 fcb4 	bl	80081c4 <TypeRepresentation::GetAbbreviation#16199>
 800385c:	4601      	mov	r1, r0
 800385e:	e000      	b.n	8003862 <TypeRepresentation::PrettyToString#16200+0x72>
 8003860:	2100      	movs	r1, #0
            }

            if(name != null)
 8003862:	b119      	cbz	r1, 800386c <TypeRepresentation::PrettyToString#16200+0x7c>
            {
                sb.Append( name );
 8003864:	f1ba 0f00 	cmp.w	sl, #0
 8003868:	d138      	bne.n	80038dc <TypeRepresentation::PrettyToString#16200+0xec>
 800386a:	e09a      	b.n	80039a2 <TypeRepresentation::PrettyToString#16200+0x1b2>

        public bool IsNestedType
        {
            get
            {
                return m_enclosingClass != null;
 800386c:	69f8      	ldr	r0, [r7, #28]
 800386e:	2100      	movs	r1, #0

        [Inline]
        public static bool operator ==( TypeRepresentation left  ,
                                        TypeRepresentation right )
        {
            return Object.Equals( left, right );
 8003870:	f7fd ff0e 	bl	8001690 <Object::Equals#2586>
            {
                sb.Append( name );
            }
            else
            {
                if(this.IsNestedType)
 8003874:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003878:	d117      	bne.n	80038aa <TypeRepresentation::PrettyToString#16200+0xba>

        public TypeRepresentation EnclosingClass
        {
            get
            {
                return m_enclosingClass;
 800387a:	69f8      	ldr	r0, [r7, #28]
 800387c:	2800      	cmp	r0, #0
 800387e:	f000 8090 	beq.w	80039a2 <TypeRepresentation::PrettyToString#16200+0x1b2>
 8003882:	f000 808e 	beq.w	80039a2 <TypeRepresentation::PrettyToString#16200+0x1b2>
 8003886:	6841      	ldr	r1, [r0, #4]
 8003888:	2200      	movs	r2, #0
            }
            else
            {
                if(this.IsNestedType)
                {
                    this.EnclosingClass.PrettyToString( sb, false, fWithAbbreviations );
 800388a:	464b      	mov	r3, r9
 800388c:	69c9      	ldr	r1, [r1, #28]
 800388e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8003890:	4651      	mov	r1, sl
 8003892:	47b0      	blx	r6
                    sb.Append( "." );
 8003894:	f1ba 0f00 	cmp.w	sl, #0
 8003898:	f000 8083 	beq.w	80039a2 <TypeRepresentation::PrettyToString#16200+0x1b2>
 800389c:	4846      	ldr	r0, [pc, #280]	; (80039b8 <TypeRepresentation::PrettyToString#16200+0x1c8>)
 800389e:	4947      	ldr	r1, [pc, #284]	; (80039bc <TypeRepresentation::PrettyToString#16200+0x1cc>)
 80038a0:	4478      	add	r0, pc
 80038a2:	4401      	add	r1, r0
 80038a4:	4650      	mov	r0, sl
 80038a6:	f002 fd71 	bl	800638c <StringBuilder::Append#9238>

        public string Namespace
        {
            get
            {
                return m_namespace;
 80038aa:	69b8      	ldr	r0, [r7, #24]
 80038ac:	b190      	cbz	r0, 80038d4 <TypeRepresentation::PrettyToString#16200+0xe4>
 80038ae:	69b8      	ldr	r0, [r7, #24]
                {
                    this.EnclosingClass.PrettyToString( sb, false, fWithAbbreviations );
                    sb.Append( "." );
                }

                if(this.Namespace != null && this.Namespace.Length != 0)
 80038b0:	2800      	cmp	r0, #0
 80038b2:	d076      	beq.n	80039a2 <TypeRepresentation::PrettyToString#16200+0x1b2>
 80038b4:	68c0      	ldr	r0, [r0, #12]
 80038b6:	b168      	cbz	r0, 80038d4 <TypeRepresentation::PrettyToString#16200+0xe4>
                {
                    sb.Append( this.Namespace );
 80038b8:	f1ba 0f00 	cmp.w	sl, #0
 80038bc:	d071      	beq.n	80039a2 <TypeRepresentation::PrettyToString#16200+0x1b2>

        public string Namespace
        {
            get
            {
                return m_namespace;
 80038be:	69b9      	ldr	r1, [r7, #24]
                    sb.Append( "." );
                }

                if(this.Namespace != null && this.Namespace.Length != 0)
                {
                    sb.Append( this.Namespace );
 80038c0:	4650      	mov	r0, sl
 80038c2:	f002 fd63 	bl	800638c <StringBuilder::Append#9238>
 80038c6:	483e      	ldr	r0, [pc, #248]	; (80039c0 <TypeRepresentation::PrettyToString#16200+0x1d0>)
                    sb.Append( "."            );
 80038c8:	493c      	ldr	r1, [pc, #240]	; (80039bc <TypeRepresentation::PrettyToString#16200+0x1cc>)
 80038ca:	4478      	add	r0, pc
 80038cc:	4401      	add	r1, r0
 80038ce:	4650      	mov	r0, sl
 80038d0:	f002 fd5c 	bl	800638c <StringBuilder::Append#9238>
                }

                sb.Append( this.Name );
 80038d4:	f1ba 0f00 	cmp.w	sl, #0
 80038d8:	d063      	beq.n	80039a2 <TypeRepresentation::PrettyToString#16200+0x1b2>
        
        public string Name
        {
            get
            {
                return m_name;
 80038da:	6979      	ldr	r1, [r7, #20]
                name = GetAbbreviation();
            }

            if(name != null)
            {
                sb.Append( name );
 80038dc:	4650      	mov	r0, sl
 80038de:	f002 fd55 	bl	800638c <StringBuilder::Append#9238>
                }

                sb.Append( this.Name );
            }

            if(m_genericContext != null)
 80038e2:	6a38      	ldr	r0, [r7, #32]
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d059      	beq.n	800399c <TypeRepresentation::PrettyToString#16200+0x1ac>
            {
                sb.Append( "<" );
 80038e8:	f1ba 0f00 	cmp.w	sl, #0
 80038ec:	d059      	beq.n	80039a2 <TypeRepresentation::PrettyToString#16200+0x1b2>
 80038ee:	4835      	ldr	r0, [pc, #212]	; (80039c4 <TypeRepresentation::PrettyToString#16200+0x1d4>)
 80038f0:	4935      	ldr	r1, [pc, #212]	; (80039c8 <TypeRepresentation::PrettyToString#16200+0x1d8>)
 80038f2:	4478      	add	r0, pc
 80038f4:	4401      	add	r1, r0
 80038f6:	4650      	mov	r0, sl
 80038f8:	f002 fd48 	bl	800638c <StringBuilder::Append#9238>

                TypeRepresentation[] parameters = m_genericContext.Parameters;
 80038fc:	6a38      	ldr	r0, [r7, #32]
 80038fe:	2800      	cmp	r0, #0

            public TypeRepresentation[] Parameters
            {
                get
                {
                    return m_parameters;
 8003900:	bf1c      	itt	ne
 8003902:	6886      	ldrne	r6, [r0, #8]
            if(m_genericContext != null)
            {
                sb.Append( "<" );

                TypeRepresentation[] parameters = m_genericContext.Parameters;
                if(parameters.Length > 0)
 8003904:	2e00      	cmpne	r6, #0
 8003906:	d04c      	beq.n	80039a2 <TypeRepresentation::PrettyToString#16200+0x1b2>
 8003908:	68b0      	ldr	r0, [r6, #8]
 800390a:	b308      	cbz	r0, 8003950 <TypeRepresentation::PrettyToString#16200+0x160>
 800390c:	4833      	ldr	r0, [pc, #204]	; (80039dc <TypeRepresentation::PrettyToString#16200+0x1ec>)
                {
                    for(int i = 0; i < parameters.Length; i++)
                    {
                        if(i != 0) sb.Append( "," );
 800390e:	4930      	ldr	r1, [pc, #192]	; (80039d0 <TypeRepresentation::PrettyToString#16200+0x1e0>)
 8003910:	f106 050c 	add.w	r5, r6, #12
 8003914:	2400      	movs	r4, #0
 8003916:	4478      	add	r0, pc
 8003918:	eb01 0b00 	add.w	fp, r1, r0
 800391c:	e007      	b.n	800392e <TypeRepresentation::PrettyToString#16200+0x13e>
 800391e:	6841      	ldr	r1, [r0, #4]

                        parameters[i].PrettyToString( sb, fPrefix, fWithAbbreviations );
 8003920:	4642      	mov	r2, r8
 8003922:	464b      	mov	r3, r9
 8003924:	69c9      	ldr	r1, [r1, #28]
 8003926:	6acf      	ldr	r7, [r1, #44]	; 0x2c
 8003928:	4651      	mov	r1, sl
 800392a:	47b8      	blx	r7
                sb.Append( "<" );

                TypeRepresentation[] parameters = m_genericContext.Parameters;
                if(parameters.Length > 0)
                {
                    for(int i = 0; i < parameters.Length; i++)
 800392c:	3401      	adds	r4, #1
 800392e:	68b0      	ldr	r0, [r6, #8]
 8003930:	4284      	cmp	r4, r0
 8003932:	da2c      	bge.n	800398e <TypeRepresentation::PrettyToString#16200+0x19e>
 8003934:	b11c      	cbz	r4, 800393e <TypeRepresentation::PrettyToString#16200+0x14e>
                    {
                        if(i != 0) sb.Append( "," );
 8003936:	4650      	mov	r0, sl
 8003938:	4659      	mov	r1, fp
 800393a:	f002 fd27 	bl	800638c <StringBuilder::Append#9238>

                        parameters[i].PrettyToString( sb, fPrefix, fWithAbbreviations );
 800393e:	68b0      	ldr	r0, [r6, #8]
 8003940:	4284      	cmp	r4, r0
 8003942:	d222      	bcs.n	800398a <TypeRepresentation::PrettyToString#16200+0x19a>
 8003944:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8003948:	2800      	cmp	r0, #0
 800394a:	d02a      	beq.n	80039a2 <TypeRepresentation::PrettyToString#16200+0x1b2>
 800394c:	d1e7      	bne.n	800391e <TypeRepresentation::PrettyToString#16200+0x12e>
 800394e:	e028      	b.n	80039a2 <TypeRepresentation::PrettyToString#16200+0x1b2>
                    }
                }
                else
                {
                    GenericParameterDefinition[] defs = m_genericContext.ParametersDefinition;
 8003950:	6a38      	ldr	r0, [r7, #32]
 8003952:	b330      	cbz	r0, 80039a2 <TypeRepresentation::PrettyToString#16200+0x1b2>

            public GenericParameterDefinition[] ParametersDefinition
            {
                get
                {
                    return m_parametersDefinition;
 8003954:	68c4      	ldr	r4, [r0, #12]
 8003956:	b1d4      	cbz	r4, 800398e <TypeRepresentation::PrettyToString#16200+0x19e>
 8003958:	481c      	ldr	r0, [pc, #112]	; (80039cc <TypeRepresentation::PrettyToString#16200+0x1dc>)
                    GenericParameterDefinition[] defs = m_genericContext.ParametersDefinition;
                    if(defs != null)
                    {
                        for(int i = 0; i < defs.Length; i++)
                        {
                            if(i != 0) sb.Append( "," );
 800395a:	491d      	ldr	r1, [pc, #116]	; (80039d0 <TypeRepresentation::PrettyToString#16200+0x1e0>)
 800395c:	f104 060c 	add.w	r6, r4, #12
 8003960:	2700      	movs	r7, #0
 8003962:	4478      	add	r0, pc
 8003964:	180d      	adds	r5, r1, r0
 8003966:	e005      	b.n	8003974 <TypeRepresentation::PrettyToString#16200+0x184>

                            sb.Append( defs[i].Name );
 8003968:	f856 1037 	ldr.w	r1, [r6, r7, lsl #3]
 800396c:	4650      	mov	r0, sl
 800396e:	f002 fd0d 	bl	800638c <StringBuilder::Append#9238>
                else
                {
                    GenericParameterDefinition[] defs = m_genericContext.ParametersDefinition;
                    if(defs != null)
                    {
                        for(int i = 0; i < defs.Length; i++)
 8003972:	3701      	adds	r7, #1
 8003974:	68a0      	ldr	r0, [r4, #8]
 8003976:	4287      	cmp	r7, r0
 8003978:	da09      	bge.n	800398e <TypeRepresentation::PrettyToString#16200+0x19e>
 800397a:	b11f      	cbz	r7, 8003984 <TypeRepresentation::PrettyToString#16200+0x194>
                        {
                            if(i != 0) sb.Append( "," );
 800397c:	4650      	mov	r0, sl
 800397e:	4629      	mov	r1, r5
 8003980:	f002 fd04 	bl	800638c <StringBuilder::Append#9238>

                            sb.Append( defs[i].Name );
 8003984:	68a0      	ldr	r0, [r4, #8]
 8003986:	4287      	cmp	r7, r0
 8003988:	d3ee      	bcc.n	8003968 <TypeRepresentation::PrettyToString#16200+0x178>
 800398a:	f7fd fa91 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 800398e:	4811      	ldr	r0, [pc, #68]	; (80039d4 <TypeRepresentation::PrettyToString#16200+0x1e4>)
                        }
                    }
                }

                sb.Append( ">" );
 8003990:	4911      	ldr	r1, [pc, #68]	; (80039d8 <TypeRepresentation::PrettyToString#16200+0x1e8>)
 8003992:	4478      	add	r0, pc
 8003994:	4401      	add	r1, r0
 8003996:	4650      	mov	r0, sl
 8003998:	f002 fcf8 	bl	800638c <StringBuilder::Append#9238>
 800399c:	b001      	add	sp, #4
 800399e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                {
                    sb.Append( this.Namespace );
                    sb.Append( "."            );
                }

                sb.Append( this.Name );
 80039a2:	f7fc fd61 	bl	8000468 <Thread::ThrowNullException#4411>
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	17ffd2ce 	.word	0x17ffd2ce
 80039ac:	e8011cf8 	.word	0xe8011cf8
 80039b0:	17ffd2ee 	.word	0x17ffd2ee
 80039b4:	e80123a8 	.word	0xe80123a8
 80039b8:	17ffd274 	.word	0x17ffd274
 80039bc:	e8011aa8 	.word	0xe8011aa8
 80039c0:	17ffd24a 	.word	0x17ffd24a
 80039c4:	17ffd222 	.word	0x17ffd222
 80039c8:	e8011d18 	.word	0xe8011d18
 80039cc:	17ffd1b2 	.word	0x17ffd1b2
 80039d0:	e8011ac8 	.word	0xe8011ac8
 80039d4:	17ffd182 	.word	0x17ffd182
 80039d8:	e8011d58 	.word	0xe8011d58
 80039dc:	17ffd1fe 	.word	0x17ffd1fe

080039e0 <TypeSystemManager::CastToType#5590>:

        [TS.WellKnownMethod("TypeSystemManager_CastToType")]
        public static object CastToType(object obj,
                                         TS.VTable expected)
        {
            if (obj != null)
 80039e0:	b510      	push	{r4, lr}
 80039e2:	b198      	cbz	r0, 8003a0c <TypeSystemManager::CastToType#5590+0x2c>
            {
                obj = CastToTypeNoThrow(obj, expected);
 80039e4:	f7fd fb1f 	bl	8001026 <TypeSystemManager::CastToTypeNoThrow#5591>
                if (obj == null)
 80039e8:	2800      	cmp	r0, #0
 80039ea:	bf18      	it	ne
 80039ec:	bd10      	popne	{r4, pc}
 80039ee:	4808      	ldr	r0, [pc, #32]	; (8003a10 <TypeSystemManager::CastToType#5590+0x30>)
                {
                    throw new InvalidCastException();
 80039f0:	4908      	ldr	r1, [pc, #32]	; (8003a14 <TypeSystemManager::CastToType#5590+0x34>)
 80039f2:	4478      	add	r0, pc
 80039f4:	180c      	adds	r4, r1, r0
 80039f6:	4908      	ldr	r1, [pc, #32]	; (8003a18 <TypeSystemManager::CastToType#5590+0x38>)
 80039f8:	4401      	add	r1, r0
 80039fa:	4620      	mov	r0, r4
 80039fc:	f7fc ff4a 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8003a00:	4601      	mov	r1, r0
 8003a02:	2000      	movs	r0, #0
 8003a04:	6088      	str	r0, [r1, #8]
 8003a06:	4620      	mov	r0, r4
 8003a08:	f7fc ff5a 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	bd10      	pop	{r4, pc}
 8003a10:	17ffd122 	.word	0x17ffd122
 8003a14:	fffffe0c 	.word	0xfffffe0c
 8003a18:	e8019b08 	.word	0xe8019b08

08003a1c <TypeRepresentation::get_ContainedType#16181>:
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	4770      	bx	lr

08003a20 <VTable::ImplementsInterface#4056>:
        [NoInline]
        public bool ImplementsInterface( VTable expectedItf )
        {
            VTable.InterfaceMap[] itfs = this.InterfaceMethodPointers;

            for(int i = itfs.Length; --i >= 0; )
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b1a8      	cbz	r0, 8003a50 <VTable::ImplementsInterface#4056+0x30>
 8003a24:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8003a28:	e007      	b.n	8003a3a <VTable::ImplementsInterface#4056+0x1a>
            {
                if(Object.ReferenceEquals( itfs[i].Interface, expectedItf ))
 8003a2a:	eb00 02cc 	add.w	r2, r0, ip, lsl #3
 8003a2e:	469c      	mov	ip, r3
 8003a30:	6852      	ldr	r2, [r2, #4]
 8003a32:	428a      	cmp	r2, r1
 8003a34:	bf04      	itt	eq
 8003a36:	2001      	moveq	r0, #1
 8003a38:	bd80      	popeq	{r7, pc}
        [NoInline]
        public bool ImplementsInterface( VTable expectedItf )
        {
            VTable.InterfaceMap[] itfs = this.InterfaceMethodPointers;

            for(int i = itfs.Length; --i >= 0; )
 8003a3a:	f1ac 0301 	sub.w	r3, ip, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	bfbc      	itt	lt
 8003a42:	2000      	movlt	r0, #0
 8003a44:	bd80      	poplt	{r7, pc}
            {
                if(Object.ReferenceEquals( itfs[i].Interface, expectedItf ))
 8003a46:	6882      	ldr	r2, [r0, #8]
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d3ee      	bcc.n	8003a2a <VTable::ImplementsInterface#4056+0xa>
 8003a4c:	f7fd fa30 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
        [NoInline]
        public bool ImplementsInterface( VTable expectedItf )
        {
            VTable.InterfaceMap[] itfs = this.InterfaceMethodPointers;

            for(int i = itfs.Length; --i >= 0; )
 8003a50:	f7fc fd0a 	bl	8000468 <Thread::ThrowNullException#4411>

08003a54 <StringBuilder::AppendFormat#9281>:
            }
            return Insert( index, value.ToString(), 1 );
        }

        public StringBuilder AppendFormat( String format, Object arg0 )
        {
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	4e09      	ldr	r6, [pc, #36]	; (8003a7c <StringBuilder::AppendFormat#9281+0x28>)
 8003a58:	460c      	mov	r4, r1
 8003a5a:	4605      	mov	r5, r0
            return AppendFormat( null, format, new Object[] { arg0 } );
 8003a5c:	4808      	ldr	r0, [pc, #32]	; (8003a80 <StringBuilder::AppendFormat#9281+0x2c>)
 8003a5e:	4909      	ldr	r1, [pc, #36]	; (8003a84 <StringBuilder::AppendFormat#9281+0x30>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	447e      	add	r6, pc
 8003a64:	4430      	add	r0, r6
 8003a66:	4431      	add	r1, r6
 8003a68:	f7fd ffd4 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	4806      	ldr	r0, [pc, #24]	; (8003a88 <StringBuilder::AppendFormat#9281+0x34>)
 8003a70:	60d4      	str	r4, [r2, #12]
 8003a72:	1981      	adds	r1, r0, r6
 8003a74:	4628      	mov	r0, r5
 8003a76:	f7fe f8d1 	bl	8001c1c <StringBuilder::AppendFormat#9286>
 8003a7a:	bd70      	pop	{r4, r5, r6, pc}
 8003a7c:	17ffd0b2 	.word	0x17ffd0b2
 8003a80:	fffffe0c 	.word	0xfffffe0c
 8003a84:	e8019598 	.word	0xe8019598
 8003a88:	e8011718 	.word	0xe8011718

08003a8c <Bootstrap::HardwareInitialization#4066>:
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	4817      	ldr	r0, [pc, #92]	; (8003aec <Bootstrap::HardwareInitialization#4066+0x60>)
 8003a90:	4917      	ldr	r1, [pc, #92]	; (8003af0 <Bootstrap::HardwareInitialization#4066+0x64>)
 8003a92:	4478      	add	r0, pc
 8003a94:	4408      	add	r0, r1
 8003a96:	f000 f869 	bl	8003b6c <Processor::InitializeProcessor#19384>
 8003a9a:	f005 feb3 	bl	8009804 <CUSTOM_STUB_STM32F411_DisableMPU>
 8003a9e:	f7fe ffcf 	bl	8002a40 <BugCheck::AssertInterruptsOff#5289>
 8003aa2:	f06f 000c 	mvn.w	r0, #12
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	f005 ffe6 	bl	8009a78 <CMSIS_STUB_NVIC_SetPriority>
 8003aac:	f06f 000b 	mvn.w	r0, #11
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	f005 ffe1 	bl	8009a78 <CMSIS_STUB_NVIC_SetPriority>
 8003ab6:	f06f 000a 	mvn.w	r0, #10
 8003aba:	2100      	movs	r1, #0
 8003abc:	f005 ffdc 	bl	8009a78 <CMSIS_STUB_NVIC_SetPriority>
 8003ac0:	f06f 0009 	mvn.w	r0, #9
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	f005 ffd7 	bl	8009a78 <CMSIS_STUB_NVIC_SetPriority>
 8003aca:	f06f 0004 	mvn.w	r0, #4
 8003ace:	2105      	movs	r1, #5
 8003ad0:	f005 ffd2 	bl	8009a78 <CMSIS_STUB_NVIC_SetPriority>
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	2107      	movs	r1, #7
 8003ada:	f005 ffcd 	bl	8009a78 <CMSIS_STUB_NVIC_SetPriority>
 8003ade:	f06f 0001 	mvn.w	r0, #1
 8003ae2:	210e      	movs	r1, #14
 8003ae4:	f005 ffc8 	bl	8009a78 <CMSIS_STUB_NVIC_SetPriority>
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	17ffd082 	.word	0x17ffd082
 8003af0:	e8014a7c 	.word	0xe8014a7c

08003af4 <Bootstrap::HeapInitialization#4067>:

        [NoInline]
        [CanAllocateOnReturn]
        [TS.WellKnownMethod( "Bootstrap_HeapInitialization" )]
        private static void HeapInitialization()
        {
 8003af4:	b510      	push	{r4, lr}
 8003af6:	4805      	ldr	r0, [pc, #20]	; (8003b0c <Bootstrap::HeapInitialization#4067+0x18>)
            MemoryManager mm = MemoryManager.Instance;
            mm.InitializeMemoryManager();
 8003af8:	4905      	ldr	r1, [pc, #20]	; (8003b10 <Bootstrap::HeapInitialization#4067+0x1c>)
 8003afa:	4478      	add	r0, pc
 8003afc:	180c      	adds	r4, r1, r0
 8003afe:	4620      	mov	r0, r4
 8003b00:	f000 f868 	bl	8003bd4 <MemoryManager::InitializeMemoryManager#18601>
            mm.InitializationComplete();
 8003b04:	4620      	mov	r0, r4
 8003b06:	f000 f888 	bl	8003c1a <LinearMemoryManager::InitializationComplete#5273>
 8003b0a:	bd10      	pop	{r4, pc}
 8003b0c:	17ffd01a 	.word	0x17ffd01a
 8003b10:	fffffe68 	.word	0xfffffe68

08003b14 <Bootstrap::SoftwareInitialization#4069>:
 8003b14:	b5b0      	push	{r4, r5, r7, lr}
 8003b16:	4604      	mov	r4, r0
 8003b18:	4806      	ldr	r0, [pc, #24]	; (8003b34 <Bootstrap::SoftwareInitialization#4069+0x20>)
 8003b1a:	4907      	ldr	r1, [pc, #28]	; (8003b38 <Bootstrap::SoftwareInitialization#4069+0x24>)
 8003b1c:	4478      	add	r0, pc
 8003b1e:	180d      	adds	r5, r1, r0
 8003b20:	4628      	mov	r0, r5
 8003b22:	f7ff fa05 	bl	8002f30 <ThreadManager::InitializeBeforeStaticConstructors#3519>
 8003b26:	f000 f87c 	bl	8003c22 <TypeSystemManager::InvokeStaticConstructors#5589>
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	f7ff fa37 	bl	8002fa0 <ThreadManager::InitializeAfterStaticConstructors#3520>
 8003b32:	bdb0      	pop	{r4, r5, r7, pc}
 8003b34:	17ffcff8 	.word	0x17ffcff8
 8003b38:	fffffe18 	.word	0xfffffe18

08003b3c <Bootstrap::HardwareActivation#4070>:
            GarbageCollectionManager.Instance.InitializeGarbageCollectionManager();
        }

        [NoInline]
        private static void HardwareActivation()
        {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	4803      	ldr	r0, [pc, #12]	; (8003b4c <Bootstrap::HardwareActivation#4070+0x10>)
            Storage.Instance.InitializeStorage();

            Peripherals.Instance.Activate();
 8003b40:	4903      	ldr	r1, [pc, #12]	; (8003b50 <Bootstrap::HardwareActivation#4070+0x14>)
 8003b42:	4478      	add	r0, pc
 8003b44:	4408      	add	r0, r1
 8003b46:	f000 f882 	bl	8003c4e <Peripherals::Activate#18582>
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	17ffcfd2 	.word	0x17ffcfd2
 8003b50:	fffffe5c 	.word	0xfffffe5c

08003b54 <Bootstrap::SoftwareActivation#4071>:
        }

        [NoInline]
        private static void SoftwareActivation()
        {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	4803      	ldr	r0, [pc, #12]	; (8003b64 <Bootstrap::SoftwareActivation#4071+0x10>)
            ThreadManager.Instance.Activate();
 8003b58:	4903      	ldr	r1, [pc, #12]	; (8003b68 <Bootstrap::SoftwareActivation#4071+0x14>)
 8003b5a:	4478      	add	r0, pc
 8003b5c:	4408      	add	r0, r1
 8003b5e:	f000 f87d 	bl	8003c5c <ThreadManager::Activate#18645>
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	17ffcfba 	.word	0x17ffcfba
 8003b68:	fffffe18 	.word	0xfffffe18

08003b6c <Processor::InitializeProcessor#19384>:
        //
        // Helper Methods
        //

        public override void InitializeProcessor()
        {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	2001      	movs	r0, #1
 8003b70:	f005 fd9e 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8003b74:	2000      	movs	r0, #0
 8003b76:	f005 fdcf 	bl	8009718 <CUSTOM_STUB_SCB_SCR_SetSystemControlRegister>
 8003b7a:	f240 2011 	movw	r0, #529	; 0x211
 8003b7e:	f005 fdb5 	bl	80096ec <CUSTOM_STUB_SCB_set_CCR>
 8003b82:	f06f 000c 	mvn.w	r0, #12
 8003b86:	f7ff fc7b 	bl	8003480 <ProcessorARMv7M::EnableSystemHandler#3614>
 8003b8a:	f06f 000a 	mvn.w	r0, #10
 8003b8e:	f7ff fc77 	bl	8003480 <ProcessorARMv7M::EnableSystemHandler#3614>
 8003b92:	f06f 000b 	mvn.w	r0, #11
 8003b96:	f7ff fc73 	bl	8003480 <ProcessorARMv7M::EnableSystemHandler#3614>
 8003b9a:	f06f 0009 	mvn.w	r0, #9
 8003b9e:	f7ff fc6f 	bl	8003480 <ProcessorARMv7M::EnableSystemHandler#3614>
 8003ba2:	f001 fbff 	bl	80053a4 <ProcessorARMv7M_VFP::DisableLazyStacking#5924>
            
            //
            // Ensure privileged Handler mode
            //
            
            if(!ChipsetModel.ProcessorARMv7M.VerifyHandlerMode())
 8003ba6:	f7ff fcaf 	bl	8003508 <ProcessorARMv7M::VerifyHandlerMode#3630>
 8003baa:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003bae:	d003      	beq.n	8003bb8 <Processor::InitializeProcessor#19384+0x4c>
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	f005 ff4d 	bl	8009a50 <CMSIS_STUB_NVIC_SetPriorityGrouping>
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	4804      	ldr	r0, [pc, #16]	; (8003bcc <Processor::InitializeProcessor#19384+0x60>)
            {
                RT.BugCheck.Log( "Cannot bootstrap in Thread mode" );
 8003bba:	4905      	ldr	r1, [pc, #20]	; (8003bd0 <Processor::InitializeProcessor#19384+0x64>)
 8003bbc:	4478      	add	r0, pc
 8003bbe:	4408      	add	r0, r1
 8003bc0:	f000 fe2c 	bl	800481c <BugCheck::Log#5283>
 8003bc4:	2010      	movs	r0, #16
 8003bc6:	f7fc fb71 	bl	80002ac <BugCheck::Raise#5282>
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	17ffcf58 	.word	0x17ffcf58
 8003bd0:	e8012408 	.word	0xe8012408

08003bd4 <MemoryManager::InitializeMemoryManager#18601>:
        private UIntPtr ManagedHeapEnd;
        
        //--//

        public override unsafe void InitializeMemoryManager( )
        {
 8003bd4:	b510      	push	{r4, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	4604      	mov	r4, r0
 8003bda:	2000      	movs	r0, #0
 8003bdc:	e9cd 0000 	strd	r0, r0, [sp]
            base.InitializeMemoryManager( );
 8003be0:	4620      	mov	r0, r4
 8003be2:	f000 fd11 	bl	8004608 <LinearMemoryManager::InitializeMemoryManager#5272>
 8003be6:	a801      	add	r0, sp, #4

            uint heapSize;
            void *pLlilumHeap;

            LLOS.LlilumErrors.ThrowOnError( LLOS.API.RuntimeMemory.LLOS_MEMORY_GetMaxHeapSize( out heapSize ), false );
 8003be8:	f005 ff08 	bl	80099fc <LLOS_MEMORY_GetMaxHeapSize>
 8003bec:	f004 fc14 	bl	8008418 <LlilumErrors::ThrowOnError#19043>
            LLOS.LlilumErrors.ThrowOnError( LLOS.API.RuntimeMemory.LLOS_MEMORY_Allocate( heapSize, 0, out pLlilumHeap ), false );
 8003bf0:	9801      	ldr	r0, [sp, #4]
 8003bf2:	466a      	mov	r2, sp
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	f005 ff0d 	bl	8009a14 <LLOS_MEMORY_Allocate>
 8003bfa:	f004 fc0d 	bl	8008418 <LlilumErrors::ThrowOnError#19043>

            ManagedHeap    = (UIntPtr)(pLlilumHeap);
 8003bfe:	9800      	ldr	r0, [sp, #0]

            var attrs = RT.MemoryAttributes.InternalMemory          |
                        RT.MemoryAttributes.RandomAccessMemory      |
                        RT.MemoryAttributes.ConfiguredAtEntryPoint  ;
            
            AddLinearSection( ManagedHeap, ManagedHeapEnd , attrs );
 8003c00:	f44f 6328 	mov.w	r3, #2688	; 0xa80
 8003c04:	6160      	str	r0, [r4, #20]

            LLOS.LlilumErrors.ThrowOnError( LLOS.API.RuntimeMemory.LLOS_MEMORY_GetMaxHeapSize( out heapSize ), false );
            LLOS.LlilumErrors.ThrowOnError( LLOS.API.RuntimeMemory.LLOS_MEMORY_Allocate( heapSize, 0, out pLlilumHeap ), false );

            ManagedHeap    = (UIntPtr)(pLlilumHeap);
            ManagedHeapEnd = (UIntPtr)( (uint)pLlilumHeap + heapSize );
 8003c06:	e9dd 1000 	ldrd	r1, r0, [sp]
 8003c0a:	180a      	adds	r2, r1, r0

            var attrs = RT.MemoryAttributes.InternalMemory          |
                        RT.MemoryAttributes.RandomAccessMemory      |
                        RT.MemoryAttributes.ConfiguredAtEntryPoint  ;
            
            AddLinearSection( ManagedHeap, ManagedHeapEnd , attrs );
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	61a2      	str	r2, [r4, #24]
 8003c10:	6961      	ldr	r1, [r4, #20]
 8003c12:	f000 fd02 	bl	800461a <MemoryManager::AddLinearSection#5541>
 8003c16:	b002      	add	sp, #8
 8003c18:	bd10      	pop	{r4, pc}

08003c1a <LinearMemoryManager::InitializationComplete#5273>:

        public override void InitializationComplete()
        {
            if(MemoryManager.Configuration.TrashFreeMemory)
            {
                DirtyFreeMemory();
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	f000 fd1c 	bl	8004658 <MemoryManager::DirtyFreeMemory#5533>
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <TypeSystemManager::InvokeStaticConstructors#5589>:
 8003c22:	b580      	push	{r7, lr}
 8003c24:	f000 fe84 	bl	8004930 <SchedulerTime::.cctor#5506>
 8003c28:	f000 ff30 	bl	8004a8c <WaitingRecord::.cctor#5644>
 8003c2c:	f000 ff5e 	bl	8004aec <Number::.cctor#8000>
 8003c30:	f000 ffc2 	bl	8004bb8 <CultureInfo::.cctor#10302>
 8003c34:	f000 ffdc 	bl	8004bf0 <Processor::.cctor#18550>
 8003c38:	f000 ffe8 	bl	8004c0c <LwipMailbox::.cctor#19077>
 8003c3c:	f001 f80a 	bl	8004c54 <LwipMutex::.cctor#19088>
 8003c40:	f001 f82c 	bl	8004c9c <LwipSemaphore::.cctor#19102>
 8003c44:	f7fe fb28 	bl	8002298 <String::.cctor#2982>
 8003c48:	f001 f84c 	bl	8004ce4 <Sys_Arch::.cctor#19065>
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <Peripherals::Activate#18582>:
        // Helper Methods
        //
        
        public override void Activate()
        {
            base.Activate( ); 
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	f004 fb95 	bl	800837e <Peripherals::Activate#18862>
            
            Drivers.SystemTimer.Instance.Initialize();
 8003c54:	f004 fb9a 	bl	800838c <SystemTimer::Initialize#18659>
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	46c0      	nop			; (mov r8, r8)

08003c5c <ThreadManager::Activate#18645>:
        //
        // Helper Methods
        //

        public override void Activate()
        {
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4604      	mov	r4, r0
            base.Activate( ); 
 8003c60:	f004 fc60 	bl	8008524 <ThreadManager::Activate#18959>
 8003c64:	4e0a      	ldr	r6, [pc, #40]	; (8003c90 <ThreadManager::Activate#18645+0x34>)

            m_timerForWaits = Drivers.SystemTimer.Instance.CreateTimer( WaitExpired );
 8003c66:	480b      	ldr	r0, [pc, #44]	; (8003c94 <ThreadManager::Activate#18645+0x38>)
 8003c68:	490b      	ldr	r1, [pc, #44]	; (8003c98 <ThreadManager::Activate#18645+0x3c>)
 8003c6a:	447e      	add	r6, pc
 8003c6c:	4430      	add	r0, r6
 8003c6e:	4431      	add	r1, r6
 8003c70:	f7fc fe10 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8003c74:	4605      	mov	r5, r0
 8003c76:	4809      	ldr	r0, [pc, #36]	; (8003c9c <ThreadManager::Activate#18645+0x40>)
 8003c78:	4621      	mov	r1, r4
 8003c7a:	1982      	adds	r2, r0, r6
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	f7fd fb85 	bl	800138c <Delegate::.ctor#5246>
 8003c82:	4628      	mov	r0, r5
 8003c84:	f004 fc96 	bl	80085b4 <SystemTimer::CreateTimer#18660>
 8003c88:	6420      	str	r0, [r4, #64]	; 0x40
            DeviceModels.Chipset.CortexM3.Drivers.InterruptController.Instance.Activate();
 8003c8a:	f004 fca9 	bl	80085e0 <InterruptController::Activate#18976>
 8003c8e:	bd70      	pop	{r4, r5, r6, pc}
 8003c90:	17ffceaa 	.word	0x17ffceaa
 8003c94:	fffffe0c 	.word	0xfffffe0c
 8003c98:	e801a048 	.word	0xe801a048
 8003c9c:	e8007a83 	.word	0xe8007a83

08003ca0 <Device::ProcessBugCheck#5058>:
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	4804      	ldr	r0, [pc, #16]	; (8003cb4 <Device::ProcessBugCheck#5058+0x14>)
 8003ca4:	4a04      	ldr	r2, [pc, #16]	; (8003cb8 <Device::ProcessBugCheck#5058+0x18>)
 8003ca6:	4478      	add	r0, pc
 8003ca8:	4410      	add	r0, r2
 8003caa:	6741      	str	r1, [r0, #116]	; 0x74
 8003cac:	f005 fd3a 	bl	8009724 <CMSIS_STUB_POWER_WaitForEvent>
 8003cb0:	e7fc      	b.n	8003cac <Device::ProcessBugCheck#5058+0xc>
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	17ffce6e 	.word	0x17ffce6e
 8003cb8:	fffffcf8 	.word	0xfffffcf8

08003cbc <Device::ProcessLog#5059>:
 8003cbc:	4770      	bx	lr

08003cbe <Device::ProcessLog#5060>:
 8003cbe:	4770      	bx	lr

08003cc0 <Device::ProcessLog#5062>:
 8003cc0:	4770      	bx	lr

08003cc2 <Device::ProcessLog#5064>:
 8003cc2:	4770      	bx	lr

08003cc4 <Device::get_BootstrapStack#5066>:
        }

        public virtual uint[] BootstrapStack
        {
            get
            {
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <Device::get_BootstrapStack#5066+0xc>)
                return s_bootstrapStack;
 8003cc6:	4903      	ldr	r1, [pc, #12]	; (8003cd4 <Device::get_BootstrapStack#5066+0x10>)
 8003cc8:	4478      	add	r0, pc
 8003cca:	4408      	add	r0, r1
 8003ccc:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8003cce:	4770      	bx	lr
 8003cd0:	17ffce4c 	.word	0x17ffce4c
 8003cd4:	fffffcf8 	.word	0xfffffcf8

08003cd8 <SyncBlockTable::get_Lock#5140>:
        }

        public Synchronization.YieldLock Lock
        {
            get
            {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	4907      	ldr	r1, [pc, #28]	; (8003cf8 <SyncBlockTable::get_Lock#5140+0x20>)
                return TypeSystemManager.AtomicAllocator( ref m_lock );
 8003cdc:	4807      	ldr	r0, [pc, #28]	; (8003cfc <SyncBlockTable::get_Lock#5140+0x24>)
 8003cde:	4479      	add	r1, pc
 8003ce0:	4401      	add	r1, r0
 8003ce2:	6889      	ldr	r1, [r1, #8]
 8003ce4:	b121      	cbz	r1, 8003cf0 <SyncBlockTable::get_Lock#5140+0x18>
 8003ce6:	4906      	ldr	r1, [pc, #24]	; (8003d00 <SyncBlockTable::get_Lock#5140+0x28>)
 8003ce8:	4479      	add	r1, pc
 8003cea:	4408      	add	r0, r1
 8003cec:	6880      	ldr	r0, [r0, #8]
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	f000 fa96 	bl	8004220 <TypeSystemManager::AtomicAllocatorSlow#41496>
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	17ffce36 	.word	0x17ffce36
 8003cfc:	fffffe98 	.word	0xfffffe98
 8003d00:	17ffce2c 	.word	0x17ffce2c

08003d04 <YieldLock::Acquire#5617>:
        //
        // Helper Methods
        //

        public void Acquire(ThreadImpl thisThread)
        {
 8003d04:	b5b0      	push	{r4, r5, r7, lr}
 8003d06:	460d      	mov	r5, r1
 8003d08:	4604      	mov	r4, r0
            if(thisThread == null)
 8003d0a:	2d00      	cmp	r5, #0
 8003d0c:	bf08      	it	eq
 8003d0e:	bdb0      	popeq	{r4, r5, r7, pc}
 8003d10:	e003      	b.n	8003d1a <YieldLock::Acquire#5617+0x16>
                    //bump priority to prevent priority inversion problems
                    if ((int)m_ownerThread.Priority < (int)thisThread.Priority)
                    {
                        m_ownerThread.Priority = thisThread.Priority;
                    }
                }
 8003d12:	f005 fccd 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>

                thisThread.Yield();
 8003d16:	f7fe fe01 	bl	800291c <Thread::Yield#4396>
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	f005 fcc8 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>

            while(true)
            {
                using(SmartHandles.InterruptState.Disable())
                {
                    if(m_ownerThread == null)
 8003d20:	68a1      	ldr	r1, [r4, #8]
 8003d22:	b169      	cbz	r1, 8003d40 <YieldLock::Acquire#5617+0x3c>
                    {
                        m_ownerThread = thisThread;
                        return;
                    }

                    if(m_ownerThread == thisThread)
 8003d24:	68a1      	ldr	r1, [r4, #8]
 8003d26:	42a9      	cmp	r1, r5
 8003d28:	d00c      	beq.n	8003d44 <YieldLock::Acquire#5617+0x40>
                        m_nestingCount++;
                        return;
                    }

                    //bump priority to prevent priority inversion problems
                    if ((int)m_ownerThread.Priority < (int)thisThread.Priority)
 8003d2a:	68a1      	ldr	r1, [r4, #8]
 8003d2c:	b181      	cbz	r1, 8003d50 <YieldLock::Acquire#5617+0x4c>
 8003d2e:	692a      	ldr	r2, [r5, #16]
 8003d30:	6909      	ldr	r1, [r1, #16]
 8003d32:	4291      	cmp	r1, r2
 8003d34:	daed      	bge.n	8003d12 <YieldLock::Acquire#5617+0xe>
                    {
                        m_ownerThread.Priority = thisThread.Priority;
 8003d36:	68a1      	ldr	r1, [r4, #8]
 8003d38:	b151      	cbz	r1, 8003d50 <YieldLock::Acquire#5617+0x4c>
 8003d3a:	692a      	ldr	r2, [r5, #16]
 8003d3c:	610a      	str	r2, [r1, #16]
 8003d3e:	e7e8      	b.n	8003d12 <YieldLock::Acquire#5617+0xe>
 8003d40:	60a5      	str	r5, [r4, #8]
 8003d42:	e002      	b.n	8003d4a <YieldLock::Acquire#5617+0x46>
                        return;
                    }

                    if(m_ownerThread == thisThread)
                    {
                        m_nestingCount++;
 8003d44:	68e1      	ldr	r1, [r4, #12]
 8003d46:	3101      	adds	r1, #1
 8003d48:	60e1      	str	r1, [r4, #12]
                    //bump priority to prevent priority inversion problems
                    if ((int)m_ownerThread.Priority < (int)thisThread.Priority)
                    {
                        m_ownerThread.Priority = thisThread.Priority;
                    }
                }
 8003d4a:	f005 fcb1 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8003d4e:	bdb0      	pop	{r4, r5, r7, pc}
                        m_nestingCount++;
                        return;
                    }

                    //bump priority to prevent priority inversion problems
                    if ((int)m_ownerThread.Priority < (int)thisThread.Priority)
 8003d50:	f7fc fb8a 	bl	8000468 <Thread::ThrowNullException#4411>

08003d54 <YieldLock::Release#5618>:
            }
        }

        public void Release(ThreadImpl thisThread)
        {
            if(thisThread == null)
 8003d54:	b510      	push	{r4, lr}
 8003d56:	2900      	cmp	r1, #0
 8003d58:	bf08      	it	eq
 8003d5a:	bd10      	popeq	{r4, pc}
                // Special case for boot code path: all locks are transparent.
                //
                return;
            }

            if(m_ownerThread != thisThread)
 8003d5c:	6882      	ldr	r2, [r0, #8]
 8003d5e:	428a      	cmp	r2, r1
 8003d60:	d109      	bne.n	8003d76 <YieldLock::Release#5618+0x22>
#else
                throw new Exception();
#endif
            }

            if(m_nestingCount > 0)
 8003d62:	68c1      	ldr	r1, [r0, #12]
 8003d64:	2901      	cmp	r1, #1
            {
                m_nestingCount--;
 8003d66:	bfa1      	itttt	ge
 8003d68:	68c1      	ldrge	r1, [r0, #12]
 8003d6a:	3901      	subge	r1, #1
 8003d6c:	60c1      	strge	r1, [r0, #12]
 8003d6e:	bd10      	popge	{r4, pc}
 8003d70:	2100      	movs	r1, #0
 8003d72:	6081      	str	r1, [r0, #8]
 8003d74:	bd10      	pop	{r4, pc}
 8003d76:	4807      	ldr	r0, [pc, #28]	; (8003d94 <YieldLock::Release#5618+0x40>)
            if(m_ownerThread != thisThread)
            {
#if EXCEPTION_STRINGS
                throw new Exception( "Releasing waitable object not owned by thread" );
#else
                throw new Exception();
 8003d78:	4907      	ldr	r1, [pc, #28]	; (8003d98 <YieldLock::Release#5618+0x44>)
 8003d7a:	4478      	add	r0, pc
 8003d7c:	180c      	adds	r4, r1, r0
 8003d7e:	4907      	ldr	r1, [pc, #28]	; (8003d9c <YieldLock::Release#5618+0x48>)
 8003d80:	4401      	add	r1, r0
 8003d82:	4620      	mov	r0, r4
 8003d84:	f7fc fd86 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8003d88:	4601      	mov	r1, r0
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	6088      	str	r0, [r1, #8]
 8003d8e:	4620      	mov	r0, r4
 8003d90:	f7fc fd96 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8003d94:	17ffcd9a 	.word	0x17ffcd9a
 8003d98:	fffffe0c 	.word	0xfffffe0c
 8003d9c:	e8019b38 	.word	0xe8019b38

08003da0 <SyncBlockTable::GetHashCode#5135>:
        }

        //--//

        public int GetHashCode( int idx )
        {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	490f      	ldr	r1, [pc, #60]	; (8003de0 <SyncBlockTable::GetHashCode#5135+0x40>)
            int clusterIndex = idx / BlocksInACluster;
            int blockIndex   = idx % BlocksInACluster;

            return m_clusters[clusterIndex][blockIndex].HashCode;
 8003da4:	4a0f      	ldr	r2, [pc, #60]	; (8003de4 <SyncBlockTable::GetHashCode#5135+0x44>)
 8003da6:	4479      	add	r1, pc
 8003da8:	4411      	add	r1, r2
 8003daa:	68c9      	ldr	r1, [r1, #12]
 8003dac:	b199      	cbz	r1, 8003dd6 <SyncBlockTable::GetHashCode#5135+0x36>
 8003dae:	688b      	ldr	r3, [r1, #8]

        //--//

        public int GetHashCode( int idx )
        {
            int clusterIndex = idx / BlocksInACluster;
 8003db0:	1142      	asrs	r2, r0, #5
            int blockIndex   = idx % BlocksInACluster;

            return m_clusters[clusterIndex][blockIndex].HashCode;
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d211      	bcs.n	8003dda <SyncBlockTable::GetHashCode#5135+0x3a>
 8003db6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003dba:	68c9      	ldr	r1, [r1, #12]
 8003dbc:	b159      	cbz	r1, 8003dd6 <SyncBlockTable::GetHashCode#5135+0x36>
 8003dbe:	688a      	ldr	r2, [r1, #8]
        //--//

        public int GetHashCode( int idx )
        {
            int clusterIndex = idx / BlocksInACluster;
            int blockIndex   = idx % BlocksInACluster;
 8003dc0:	f000 001f 	and.w	r0, r0, #31

            return m_clusters[clusterIndex][blockIndex].HashCode;
 8003dc4:	4290      	cmp	r0, r2
 8003dc6:	d208      	bcs.n	8003dda <SyncBlockTable::GetHashCode#5135+0x3a>
 8003dc8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8003dcc:	68c0      	ldr	r0, [r0, #12]
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	bf1c      	itt	ne
 8003dd2:	6940      	ldrne	r0, [r0, #20]
 8003dd4:	bd80      	popne	{r7, pc}
 8003dd6:	f7fc fb47 	bl	8000468 <Thread::ThrowNullException#4411>
 8003dda:	f7fd f869 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	17ffcd6e 	.word	0x17ffcd6e
 8003de4:	fffffe98 	.word	0xfffffe98

08003de8 <GC::KeepAlive#4163>:
 8003de8:	4770      	bx	lr
 8003dea:	46c0      	nop			; (mov r8, r8)

08003dec <SyncBlockTable::AssignSyncBlockSlow#5134>:

            return Instance.AssignSyncBlockSlow( obj );
        }

        private int AssignSyncBlockSlow( object obj )
        {
 8003dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df0:	b081      	sub	sp, #4
 8003df2:	4606      	mov	r6, r0
 8003df4:	4861      	ldr	r0, [pc, #388]	; (8003f7c <SyncBlockTable::AssignSyncBlockSlow#5134+0x190>)
 8003df6:	4962      	ldr	r1, [pc, #392]	; (8003f80 <SyncBlockTable::AssignSyncBlockSlow#5134+0x194>)
 8003df8:	4478      	add	r0, pc
 8003dfa:	180c      	adds	r4, r1, r0
            ObjectHeader oh = ObjectHeader.Unpack( obj );

            using(new SmartHandles.YieldLockHolder( this.Lock ))
 8003dfc:	f7ff ff6c 	bl	8003cd8 <SyncBlockTable::get_Lock#5140>
 8003e00:	f8d4 b108 	ldr.w	fp, [r4, #264]	; 0x108
 8003e04:	4682      	mov	sl, r0
 8003e06:	f1bb 0f00 	cmp.w	fp, #0
 8003e0a:	d004      	beq.n	8003e16 <SyncBlockTable::AssignSyncBlockSlow#5134+0x2a>
 8003e0c:	f000 80ae 	beq.w	8003f6c <SyncBlockTable::AssignSyncBlockSlow#5134+0x180>
 8003e10:	f8db 8010 	ldr.w	r8, [fp, #16]
 8003e14:	e001      	b.n	8003e1a <SyncBlockTable::AssignSyncBlockSlow#5134+0x2e>
 8003e16:	f04f 0802 	mov.w	r8, #2
 8003e1a:	f1ba 0f00 	cmp.w	sl, #0
 8003e1e:	f000 80a5 	beq.w	8003f6c <SyncBlockTable::AssignSyncBlockSlow#5134+0x180>
 8003e22:	4650      	mov	r0, sl
 8003e24:	4659      	mov	r1, fp
 8003e26:	f7ff ff6d 	bl	8003d04 <YieldLock::Acquire#5617>
            {
                //
                // Check again, under lock, in case we had a race condition.
                //
                if(oh.ExtensionKind == ObjectHeader.ExtensionKinds.SyncBlock)
 8003e2a:	2e00      	cmp	r6, #0
 8003e2c:	f000 809a 	beq.w	8003f64 <SyncBlockTable::AssignSyncBlockSlow#5134+0x178>
 8003e30:	6830      	ldr	r0, [r6, #0]
 8003e32:	2102      	movs	r1, #2
 8003e34:	f400 7040 	and.w	r0, r0, #768	; 0x300
 8003e38:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
 8003e3c:	d10b      	bne.n	8003e56 <SyncBlockTable::AssignSyncBlockSlow#5134+0x6a>
                if(oh.IsImmutable == false)
                {
                    oh.UpdateExtension( ObjectHeader.ExtensionKinds.SyncBlock, idx );
                }

                return idx;
 8003e3e:	f1ba 0f00 	cmp.w	sl, #0
 8003e42:	f000 8093 	beq.w	8003f6c <SyncBlockTable::AssignSyncBlockSlow#5134+0x180>
 8003e46:	6830      	ldr	r0, [r6, #0]
 8003e48:	f64f 4100 	movw	r1, #64512	; 0xfc00
 8003e4c:	f2c0 01ff 	movt	r1, #255	; 0xff
 8003e50:	4008      	ands	r0, r1
 8003e52:	0a87      	lsrs	r7, r0, #10
 8003e54:	e072      	b.n	8003f3c <SyncBlockTable::AssignSyncBlockSlow#5134+0x150>
 8003e56:	2e00      	cmp	r6, #0
 8003e58:	f000 8084 	beq.w	8003f64 <SyncBlockTable::AssignSyncBlockSlow#5134+0x178>
 8003e5c:	7830      	ldrb	r0, [r6, #0]
 8003e5e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8003f88 <SyncBlockTable::AssignSyncBlockSlow#5134+0x19c>
 8003e62:	f04f 37ff 	mov.w	r7, #4294967295
 8003e66:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
                    return oh.Payload;
                }

                int idx = -1;

                if(oh.IsImmutable)
 8003e6a:	2804      	cmp	r0, #4
 8003e6c:	d12e      	bne.n	8003ecc <SyncBlockTable::AssignSyncBlockSlow#5134+0xe0>
 8003e6e:	4845      	ldr	r0, [pc, #276]	; (8003f84 <SyncBlockTable::AssignSyncBlockSlow#5134+0x198>)
 8003e70:	4478      	add	r0, pc
 8003e72:	4448      	add	r0, r9
 8003e74:	68c0      	ldr	r0, [r0, #12]
 8003e76:	b348      	cbz	r0, 8003ecc <SyncBlockTable::AssignSyncBlockSlow#5134+0xe0>
 8003e78:	4844      	ldr	r0, [pc, #272]	; (8003f8c <SyncBlockTable::AssignSyncBlockSlow#5134+0x1a0>)
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	f04f 37ff 	mov.w	r7, #4294967295
 8003e80:	4478      	add	r0, pc
                {
                    if(m_clusters != null)
                    {
                        foreach(var blocks in m_clusters)
 8003e82:	4448      	add	r0, r9
 8003e84:	68c0      	ldr	r0, [r0, #12]
 8003e86:	e000      	b.n	8003e8a <SyncBlockTable::AssignSyncBlockSlow#5134+0x9e>

                            if(idx >= 0)
                            {
                                break;
                            }
                        }
 8003e88:	3101      	adds	r1, #1

                if(oh.IsImmutable)
                {
                    if(m_clusters != null)
                    {
                        foreach(var blocks in m_clusters)
 8003e8a:	2800      	cmp	r0, #0
 8003e8c:	d06a      	beq.n	8003f64 <SyncBlockTable::AssignSyncBlockSlow#5134+0x178>
 8003e8e:	6882      	ldr	r2, [r0, #8]
 8003e90:	4291      	cmp	r1, r2
 8003e92:	da1b      	bge.n	8003ecc <SyncBlockTable::AssignSyncBlockSlow#5134+0xe0>
 8003e94:	6882      	ldr	r2, [r0, #8]
 8003e96:	4291      	cmp	r1, r2
 8003e98:	d266      	bcs.n	8003f68 <SyncBlockTable::AssignSyncBlockSlow#5134+0x17c>
 8003e9a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	68d2      	ldr	r2, [r2, #12]
 8003ea2:	e000      	b.n	8003ea6 <SyncBlockTable::AssignSyncBlockSlow#5134+0xba>
                        {
                            for(int pos = 0; pos < BlocksInACluster; pos++)
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	2b1f      	cmp	r3, #31
 8003ea8:	dc0d      	bgt.n	8003ec6 <SyncBlockTable::AssignSyncBlockSlow#5134+0xda>
                            {
                                var sb = blocks[pos];
 8003eaa:	2a00      	cmp	r2, #0
 8003eac:	d05a      	beq.n	8003f64 <SyncBlockTable::AssignSyncBlockSlow#5134+0x178>
 8003eae:	6895      	ldr	r5, [r2, #8]
 8003eb0:	42ab      	cmp	r3, r5
 8003eb2:	d259      	bcs.n	8003f68 <SyncBlockTable::AssignSyncBlockSlow#5134+0x17c>
 8003eb4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8003eb8:	68ed      	ldr	r5, [r5, #12]

                                if(sb.AssociatedObject == obj)
 8003eba:	2d00      	cmp	r5, #0
 8003ebc:	d052      	beq.n	8003f64 <SyncBlockTable::AssignSyncBlockSlow#5134+0x178>
 8003ebe:	68ac      	ldr	r4, [r5, #8]
 8003ec0:	42b4      	cmp	r4, r6
 8003ec2:	d1ef      	bne.n	8003ea4 <SyncBlockTable::AssignSyncBlockSlow#5134+0xb8>
 8003ec4:	692f      	ldr	r7, [r5, #16]
                                    idx = sb.Index;
                                    break;
                                }
                            }

                            if(idx >= 0)
 8003ec6:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003eca:	dddd      	ble.n	8003e88 <SyncBlockTable::AssignSyncBlockSlow#5134+0x9c>
                            }
                        }
                    }
                }

                if(idx < 0)
 8003ecc:	2f00      	cmp	r7, #0
 8003ece:	da12      	bge.n	8003ef6 <SyncBlockTable::AssignSyncBlockSlow#5134+0x10a>
 8003ed0:	e001      	b.n	8003ed6 <SyncBlockTable::AssignSyncBlockSlow#5134+0xea>

                            idx = sb.Index;
                            break;
                        }

                        ExpandClusters();
 8003ed2:	f000 f8cf 	bl	8004074 <SyncBlockTable::ExpandClusters#5138>

                if(idx < 0)
                {
                    while(true)
                    {
                        var sb = SyncBlock.ExtractFromFreeList();
 8003ed6:	f000 f8a5 	bl	8004024 <SyncBlock::ExtractFromFreeList#5152>
 8003eda:	4607      	mov	r7, r0
                        if(sb != null)
 8003edc:	2f00      	cmp	r7, #0
 8003ede:	d0f8      	beq.n	8003ed2 <SyncBlockTable::AssignSyncBlockSlow#5134+0xe6>
 8003ee0:	482b      	ldr	r0, [pc, #172]	; (8003f90 <SyncBlockTable::AssignSyncBlockSlow#5134+0x1a4>)
 8003ee2:	4478      	add	r0, pc
                        {
                            sb.Prepare( obj, m_uniqueHashCode++ );
 8003ee4:	4448      	add	r0, r9
 8003ee6:	6942      	ldr	r2, [r0, #20]
 8003ee8:	1c51      	adds	r1, r2, #1
 8003eea:	6141      	str	r1, [r0, #20]
 8003eec:	4638      	mov	r0, r7
 8003eee:	4631      	mov	r1, r6
 8003ef0:	f000 f8bc 	bl	800406c <SyncBlock::Prepare#5150>
 8003ef4:	693f      	ldr	r7, [r7, #16]
 8003ef6:	6830      	ldr	r0, [r6, #0]
 8003ef8:	2500      	movs	r5, #0
 8003efa:	f400 7040 	and.w	r0, r0, #768	; 0x300

                        ExpandClusters();
                    }
                }

                switch(oh.ExtensionKind)
 8003efe:	ebb5 2f10 	cmp.w	r5, r0, lsr #8
 8003f02:	d00c      	beq.n	8003f1e <SyncBlockTable::AssignSyncBlockSlow#5134+0x132>
 8003f04:	0a00      	lsrs	r0, r0, #8
 8003f06:	2801      	cmp	r0, #1
 8003f08:	d132      	bne.n	8003f70 <SyncBlockTable::AssignSyncBlockSlow#5134+0x184>
 8003f0a:	6830      	ldr	r0, [r6, #0]
 8003f0c:	f64f 4100 	movw	r1, #64512	; 0xfc00
 8003f10:	f2c0 01ff 	movt	r1, #255	; 0xff
 8003f14:	4008      	ands	r0, r1
 8003f16:	0a81      	lsrs	r1, r0, #10

                    case ObjectHeader.ExtensionKinds.HashCode:
                        //
                        // Copy hash code from header.
                        //
                        SetHashCode( idx, oh.Payload );
 8003f18:	4638      	mov	r0, r7
 8003f1a:	f000 f901 	bl	8004120 <SyncBlockTable::SetHashCode#5136>
 8003f1e:	7830      	ldrb	r0, [r6, #0]
 8003f20:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8003f24:	2804      	cmp	r0, #4
 8003f26:	bf08      	it	eq
 8003f28:	2501      	moveq	r5, #1
 8003f2a:	b925      	cbnz	r5, 8003f36 <SyncBlockTable::AssignSyncBlockSlow#5134+0x14a>
                        break;
                }

                if(oh.IsImmutable == false)
                {
                    oh.UpdateExtension( ObjectHeader.ExtensionKinds.SyncBlock, idx );
 8003f2c:	4630      	mov	r0, r6
 8003f2e:	2102      	movs	r1, #2
 8003f30:	463a      	mov	r2, r7
 8003f32:	f7fe ffce 	bl	8002ed2 <ObjectHeader::UpdateExtension#3488>
                }

                return idx;
 8003f36:	f1ba 0f00 	cmp.w	sl, #0
 8003f3a:	d017      	beq.n	8003f6c <SyncBlockTable::AssignSyncBlockSlow#5134+0x180>
 8003f3c:	4650      	mov	r0, sl
 8003f3e:	4659      	mov	r1, fp
 8003f40:	f7ff ff08 	bl	8003d54 <YieldLock::Release#5618>
 8003f44:	f1bb 0f00 	cmp.w	fp, #0
 8003f48:	bf1c      	itt	ne
 8003f4a:	f8db 0010 	ldrne.w	r0, [fp, #16]
 8003f4e:	4540      	cmpne	r0, r8
 8003f50:	d004      	beq.n	8003f5c <SyncBlockTable::AssignSyncBlockSlow#5134+0x170>
 8003f52:	f1bb 0f00 	cmp.w	fp, #0
 8003f56:	d009      	beq.n	8003f6c <SyncBlockTable::AssignSyncBlockSlow#5134+0x180>
 8003f58:	f8cb 8010 	str.w	r8, [fp, #16]
 8003f5c:	4638      	mov	r0, r7
 8003f5e:	b001      	add	sp, #4
 8003f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            using(new SmartHandles.YieldLockHolder( this.Lock ))
            {
                //
                // Check again, under lock, in case we had a race condition.
                //
                if(oh.ExtensionKind == ObjectHeader.ExtensionKinds.SyncBlock)
 8003f64:	f7fc fa80 	bl	8000468 <Thread::ThrowNullException#4411>

                if(oh.IsImmutable)
                {
                    if(m_clusters != null)
                    {
                        foreach(var blocks in m_clusters)
 8003f68:	f7fc ffa2 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 8003f6c:	f7fc fa7c 	bl	8000468 <Thread::ThrowNullException#4411>
 8003f70:	2802      	cmp	r0, #2

                    default:
                        //
                        // Not implemented yet, so it has to be a corruption.
                        //
                        BugCheck.Raise( BugCheck.StopCode.SyncBlockCorruption );
 8003f72:	f04f 0007 	mov.w	r0, #7
 8003f76:	f7fc f999 	bl	80002ac <BugCheck::Raise#5282>
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	17ffcd1c 	.word	0x17ffcd1c
 8003f80:	fffffcf8 	.word	0xfffffcf8
 8003f84:	17ffcca4 	.word	0x17ffcca4
 8003f88:	fffffe98 	.word	0xfffffe98
 8003f8c:	17ffcc94 	.word	0x17ffcc94
 8003f90:	17ffcc32 	.word	0x17ffcc32

08003f94 <SyncBlockTable::GetLock#5132>:
            return hashCode;
        }

        public static Synchronization.CriticalSection GetLock( object target )
        {
            BugCheck.Assert(null != target, BugCheck.StopCode.SyncBlockCorruption );
 8003f94:	b510      	push	{r4, lr}
 8003f96:	2800      	cmp	r0, #0
 8003f98:	4601      	mov	r1, r0
 8003f9a:	bf18      	it	ne
 8003f9c:	2101      	movne	r1, #1
 8003f9e:	b1c1      	cbz	r1, 8003fd2 <SyncBlockTable::GetLock#5132+0x3e>
        {
            BugCheck.Assert(null != obj, BugCheck.StopCode.SyncBlockCorruption);

            ObjectHeader oh = ObjectHeader.Unpack( obj );

            if(oh.ExtensionKind == ObjectHeader.ExtensionKinds.SyncBlock)
 8003fa0:	b1d0      	cbz	r0, 8003fd8 <SyncBlockTable::GetLock#5132+0x44>
 8003fa2:	6801      	ldr	r1, [r0, #0]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8003faa:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
 8003fae:	d107      	bne.n	8003fc0 <SyncBlockTable::GetLock#5132+0x2c>
 8003fb0:	6800      	ldr	r0, [r0, #0]
 8003fb2:	f64f 4100 	movw	r1, #64512	; 0xfc00
 8003fb6:	f2c0 01ff 	movt	r1, #255	; 0xff
 8003fba:	4008      	ands	r0, r1
 8003fbc:	0a80      	lsrs	r0, r0, #10
 8003fbe:	e001      	b.n	8003fc4 <SyncBlockTable::GetLock#5132+0x30>
            {
                return oh.Payload;
            }

            return Instance.AssignSyncBlockSlow( obj );
 8003fc0:	f7ff ff14 	bl	8003dec <SyncBlockTable::AssignSyncBlockSlow#5134>
        {
            BugCheck.Assert(null != target, BugCheck.StopCode.SyncBlockCorruption );

            int idx = AssignSyncBlock( target );

            Synchronization.CriticalSection res = Instance.GetLock( idx );
 8003fc4:	f000 f80a 	bl	8003fdc <SyncBlockTable::GetLock#5137>
 8003fc8:	4604      	mov	r4, r0

            GC.KeepAlive( target );
 8003fca:	f7ff ff0d 	bl	8003de8 <GC::KeepAlive#4163>
 8003fce:	4620      	mov	r0, r4
 8003fd0:	bd10      	pop	{r4, pc}
 8003fd2:	2007      	movs	r0, #7
 8003fd4:	f7fc f96a 	bl	80002ac <BugCheck::Raise#5282>
        {
            BugCheck.Assert(null != obj, BugCheck.StopCode.SyncBlockCorruption);

            ObjectHeader oh = ObjectHeader.Unpack( obj );

            if(oh.ExtensionKind == ObjectHeader.ExtensionKinds.SyncBlock)
 8003fd8:	f7fc fa46 	bl	8000468 <Thread::ThrowNullException#4411>

08003fdc <SyncBlockTable::GetLock#5137>:

            m_clusters[clusterIndex][blockIndex].HashCode = hashCode;
        }

        public Synchronization.CriticalSection GetLock( int idx )
        {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	490f      	ldr	r1, [pc, #60]	; (800401c <SyncBlockTable::GetLock#5137+0x40>)
            int clusterIndex = idx / BlocksInACluster;
            int blockIndex   = idx % BlocksInACluster;

            return m_clusters[clusterIndex][blockIndex].Lock;
 8003fe0:	4a0f      	ldr	r2, [pc, #60]	; (8004020 <SyncBlockTable::GetLock#5137+0x44>)
 8003fe2:	4479      	add	r1, pc
 8003fe4:	4411      	add	r1, r2
 8003fe6:	68c9      	ldr	r1, [r1, #12]
 8003fe8:	b199      	cbz	r1, 8004012 <SyncBlockTable::GetLock#5137+0x36>
 8003fea:	688b      	ldr	r3, [r1, #8]
            m_clusters[clusterIndex][blockIndex].HashCode = hashCode;
        }

        public Synchronization.CriticalSection GetLock( int idx )
        {
            int clusterIndex = idx / BlocksInACluster;
 8003fec:	1142      	asrs	r2, r0, #5
            int blockIndex   = idx % BlocksInACluster;

            return m_clusters[clusterIndex][blockIndex].Lock;
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d211      	bcs.n	8004016 <SyncBlockTable::GetLock#5137+0x3a>
 8003ff2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003ff6:	68c9      	ldr	r1, [r1, #12]
 8003ff8:	b159      	cbz	r1, 8004012 <SyncBlockTable::GetLock#5137+0x36>
 8003ffa:	688a      	ldr	r2, [r1, #8]
        }

        public Synchronization.CriticalSection GetLock( int idx )
        {
            int clusterIndex = idx / BlocksInACluster;
            int blockIndex   = idx % BlocksInACluster;
 8003ffc:	f000 001f 	and.w	r0, r0, #31

            return m_clusters[clusterIndex][blockIndex].Lock;
 8004000:	4290      	cmp	r0, r2
 8004002:	d208      	bcs.n	8004016 <SyncBlockTable::GetLock#5137+0x3a>
 8004004:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8004008:	68c0      	ldr	r0, [r0, #12]
 800400a:	b110      	cbz	r0, 8004012 <SyncBlockTable::GetLock#5137+0x36>
 800400c:	f000 f8ac 	bl	8004168 <SyncBlock::get_Lock#5153>
 8004010:	bd80      	pop	{r7, pc}
 8004012:	f7fc fa29 	bl	8000468 <Thread::ThrowNullException#4411>
 8004016:	f7fc ff4b 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	17ffcb32 	.word	0x17ffcb32
 8004020:	fffffe98 	.word	0xfffffe98

08004024 <SyncBlock::ExtractFromFreeList#5152>:
                }
            }
        }

        internal static SyncBlock ExtractFromFreeList()
        {
 8004024:	480f      	ldr	r0, [pc, #60]	; (8004064 <SyncBlock::ExtractFromFreeList#5152+0x40>)
                    return null;
                }

                var next = first.m_next;

                if(System.Threading.Interlocked.CompareExchange( ref table.m_freeList, next, first ) == first)
 8004026:	4910      	ldr	r1, [pc, #64]	; (8004068 <SyncBlock::ExtractFromFreeList#5152+0x44>)
 8004028:	4478      	add	r0, pc
 800402a:	4401      	add	r1, r0
 800402c:	6908      	ldr	r0, [r1, #16]

            while(true)
            {
                var first = table.m_freeList;

                if(first == null)
 800402e:	2800      	cmp	r0, #0
 8004030:	bf04      	itt	eq
 8004032:	2000      	moveq	r0, #0
 8004034:	4770      	bxeq	lr
                {
                    return null;
                }

                var next = first.m_next;
 8004036:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800403a:	f3bf 8f5f 	dmb	sy
 800403e:	e851 2f04 	ldrex	r2, [r1, #16]
 8004042:	4282      	cmp	r2, r0
 8004044:	d103      	bne.n	800404e <SyncBlock::ExtractFromFreeList#5152+0x2a>
 8004046:	e841 c304 	strex	r3, ip, [r1, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f7      	bne.n	800403e <SyncBlock::ExtractFromFreeList#5152+0x1a>
 800404e:	f3bf 8f5f 	dmb	sy

                if(System.Threading.Interlocked.CompareExchange( ref table.m_freeList, next, first ) == first)
 8004052:	4282      	cmp	r2, r0
 8004054:	d1ea      	bne.n	800402c <SyncBlock::ExtractFromFreeList#5152+0x8>
                {
                    first.m_counterUse++;
 8004056:	69c1      	ldr	r1, [r0, #28]
 8004058:	3101      	adds	r1, #1
 800405a:	61c1      	str	r1, [r0, #28]
 800405c:	2100      	movs	r1, #0
 800405e:	60c1      	str	r1, [r0, #12]
 8004060:	4770      	bx	lr
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	17ffcaec 	.word	0x17ffcaec
 8004068:	fffffe98 	.word	0xfffffe98

0800406c <SyncBlock::Prepare#5150>:
 800406c:	6081      	str	r1, [r0, #8]
 800406e:	6142      	str	r2, [r0, #20]
 8004070:	4770      	bx	lr
 8004072:	46c0      	nop			; (mov r8, r8)

08004074 <SyncBlockTable::ExpandClusters#5138>:
        }

        //--//

        private void ExpandClusters()
        {
 8004074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004078:	b081      	sub	sp, #4
 800407a:	4821      	ldr	r0, [pc, #132]	; (8004100 <SyncBlockTable::ExpandClusters#5138+0x8c>)
            int clusterIndex = (m_clusters == null) ? 0 : m_clusters.Length;
 800407c:	4921      	ldr	r1, [pc, #132]	; (8004104 <SyncBlockTable::ExpandClusters#5138+0x90>)
 800407e:	4478      	add	r0, pc
 8004080:	4408      	add	r0, r1
 8004082:	68c0      	ldr	r0, [r0, #12]
 8004084:	b130      	cbz	r0, 8004094 <SyncBlockTable::ExpandClusters#5138+0x20>
 8004086:	4820      	ldr	r0, [pc, #128]	; (8004108 <SyncBlockTable::ExpandClusters#5138+0x94>)
 8004088:	4478      	add	r0, pc
 800408a:	4408      	add	r0, r1
 800408c:	68c0      	ldr	r0, [r0, #12]
 800408e:	b3a8      	cbz	r0, 80040fc <SyncBlockTable::ExpandClusters#5138+0x88>
 8004090:	6884      	ldr	r4, [r0, #8]
 8004092:	e000      	b.n	8004096 <SyncBlockTable::ExpandClusters#5138+0x22>
 8004094:	2400      	movs	r4, #0
 8004096:	4e1d      	ldr	r6, [pc, #116]	; (800410c <SyncBlockTable::ExpandClusters#5138+0x98>)

            var blocks = new SyncBlock[BlocksInACluster];
 8004098:	481d      	ldr	r0, [pc, #116]	; (8004110 <SyncBlockTable::ExpandClusters#5138+0x9c>)
 800409a:	2220      	movs	r2, #32
 800409c:	447e      	add	r6, pc
 800409e:	eb00 0a06 	add.w	sl, r0, r6
 80040a2:	481c      	ldr	r0, [pc, #112]	; (8004114 <SyncBlockTable::ExpandClusters#5138+0xa0>)
 80040a4:	1981      	adds	r1, r0, r6
 80040a6:	4650      	mov	r0, sl
 80040a8:	f7fd fcb4 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 80040ac:	4681      	mov	r9, r0
            //
            int index = clusterIndex * BlocksInACluster;

            for(int i = 0; i < BlocksInACluster; i++)
            {
                blocks[i] = new SyncBlock( index++ );
 80040ae:	481b      	ldr	r0, [pc, #108]	; (800411c <SyncBlockTable::ExpandClusters#5138+0xa8>)
            var blocks = new SyncBlock[BlocksInACluster];

            //
            // Link each block to the next one, except for the last one.
            //
            int index = clusterIndex * BlocksInACluster;
 80040b0:	0164      	lsls	r4, r4, #5
 80040b2:	2500      	movs	r5, #0

            for(int i = 0; i < BlocksInACluster; i++)
 80040b4:	f109 0b0c 	add.w	fp, r9, #12
            {
                blocks[i] = new SyncBlock( index++ );
 80040b8:	4406      	add	r6, r0
 80040ba:	e002      	b.n	80040c2 <SyncBlockTable::ExpandClusters#5138+0x4e>
 80040bc:	f84b 7025 	str.w	r7, [fp, r5, lsl #2]
            //
            // Link each block to the next one, except for the last one.
            //
            int index = clusterIndex * BlocksInACluster;

            for(int i = 0; i < BlocksInACluster; i++)
 80040c0:	3501      	adds	r5, #1
 80040c2:	2d1f      	cmp	r5, #31
 80040c4:	dc0e      	bgt.n	80040e4 <SyncBlockTable::ExpandClusters#5138+0x70>
            {
                blocks[i] = new SyncBlock( index++ );
 80040c6:	4650      	mov	r0, sl
 80040c8:	4631      	mov	r1, r6
            //
            // Link each block to the next one, except for the last one.
            //
            int index = clusterIndex * BlocksInACluster;

            for(int i = 0; i < BlocksInACluster; i++)
 80040ca:	eb04 0805 	add.w	r8, r4, r5
            {
                blocks[i] = new SyncBlock( index++ );
 80040ce:	f000 f855 	bl	800417c <DefaultTypeSystemManager::AllocateObjectWithExtensions#5604>
 80040d2:	4607      	mov	r7, r0
 80040d4:	f8c7 8010 	str.w	r8, [r7, #16]
 80040d8:	f000 f866 	bl	80041a8 <SyncBlock::AddToFreeList#5151>
 80040dc:	2d20      	cmp	r5, #32
 80040de:	d3ed      	bcc.n	80040bc <SyncBlockTable::ExpandClusters#5138+0x48>
 80040e0:	f7fc fee6 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 80040e4:	480c      	ldr	r0, [pc, #48]	; (8004118 <SyncBlockTable::ExpandClusters#5138+0xa4>)

        //--//

        private void ExpandClusters()
        {
            int clusterIndex = (m_clusters == null) ? 0 : m_clusters.Length;
 80040e6:	4907      	ldr	r1, [pc, #28]	; (8004104 <SyncBlockTable::ExpandClusters#5138+0x90>)
 80040e8:	4478      	add	r0, pc
            for(int i = 0; i < BlocksInACluster; i++)
            {
                blocks[i] = new SyncBlock( index++ );
            }

            m_clusters = ArrayUtility.AppendToArray( m_clusters, blocks );
 80040ea:	180c      	adds	r4, r1, r0
 80040ec:	4649      	mov	r1, r9
 80040ee:	68e0      	ldr	r0, [r4, #12]
 80040f0:	f000 f87e 	bl	80041f0 <ArrayUtility::AppendToArray#36186>
 80040f4:	60e0      	str	r0, [r4, #12]
 80040f6:	b001      	add	sp, #4
 80040f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        private void ExpandClusters()
        {
            int clusterIndex = (m_clusters == null) ? 0 : m_clusters.Length;

            var blocks = new SyncBlock[BlocksInACluster];
 80040fc:	f7fc f9b4 	bl	8000468 <Thread::ThrowNullException#4411>
 8004100:	17ffca96 	.word	0x17ffca96
 8004104:	fffffe98 	.word	0xfffffe98
 8004108:	17ffca8c 	.word	0x17ffca8c
 800410c:	17ffca78 	.word	0x17ffca78
 8004110:	fffffe0c 	.word	0xfffffe0c
 8004114:	e8019a48 	.word	0xe8019a48
 8004118:	17ffca2c 	.word	0x17ffca2c
 800411c:	e8019a78 	.word	0xe8019a78

08004120 <SyncBlockTable::SetHashCode#5136>:
            return m_clusters[clusterIndex][blockIndex].HashCode;
        }

        public void SetHashCode( int idx      ,
                                 int hashCode )
        {
 8004120:	b580      	push	{r7, lr}
 8004122:	4a0f      	ldr	r2, [pc, #60]	; (8004160 <SyncBlockTable::SetHashCode#5136+0x40>)
            int clusterIndex = idx / BlocksInACluster;
            int blockIndex   = idx % BlocksInACluster;

            m_clusters[clusterIndex][blockIndex].HashCode = hashCode;
 8004124:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <SyncBlockTable::SetHashCode#5136+0x44>)
 8004126:	447a      	add	r2, pc
 8004128:	441a      	add	r2, r3
 800412a:	68d2      	ldr	r2, [r2, #12]
 800412c:	b1a2      	cbz	r2, 8004158 <SyncBlockTable::SetHashCode#5136+0x38>
 800412e:	6893      	ldr	r3, [r2, #8]
        }

        public void SetHashCode( int idx      ,
                                 int hashCode )
        {
            int clusterIndex = idx / BlocksInACluster;
 8004130:	ea4f 1c60 	mov.w	ip, r0, asr #5
            int blockIndex   = idx % BlocksInACluster;

            m_clusters[clusterIndex][blockIndex].HashCode = hashCode;
 8004134:	459c      	cmp	ip, r3
 8004136:	d211      	bcs.n	800415c <SyncBlockTable::SetHashCode#5136+0x3c>
 8004138:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800413c:	68d2      	ldr	r2, [r2, #12]
 800413e:	b15a      	cbz	r2, 8004158 <SyncBlockTable::SetHashCode#5136+0x38>
 8004140:	6893      	ldr	r3, [r2, #8]

        public void SetHashCode( int idx      ,
                                 int hashCode )
        {
            int clusterIndex = idx / BlocksInACluster;
            int blockIndex   = idx % BlocksInACluster;
 8004142:	f000 001f 	and.w	r0, r0, #31

            m_clusters[clusterIndex][blockIndex].HashCode = hashCode;
 8004146:	4298      	cmp	r0, r3
 8004148:	d208      	bcs.n	800415c <SyncBlockTable::SetHashCode#5136+0x3c>
 800414a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800414e:	68c0      	ldr	r0, [r0, #12]
 8004150:	2800      	cmp	r0, #0
 8004152:	bf1c      	itt	ne
 8004154:	6141      	strne	r1, [r0, #20]
 8004156:	bd80      	popne	{r7, pc}
 8004158:	f7fc f986 	bl	8000468 <Thread::ThrowNullException#4411>
 800415c:	f7fc fea8 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 8004160:	17ffc9ee 	.word	0x17ffc9ee
 8004164:	fffffe98 	.word	0xfffffe98

08004168 <SyncBlock::get_Lock#5153>:

        internal Synchronization.CriticalSection Lock
        {
            get
            {
                return TypeSystemManager.AtomicAllocator( ref m_lock );
 8004168:	b580      	push	{r7, lr}
 800416a:	f850 1f18 	ldr.w	r1, [r0, #24]!
 800416e:	2900      	cmp	r1, #0
 8004170:	bf1c      	itt	ne
 8004172:	6800      	ldrne	r0, [r0, #0]
 8004174:	bd80      	popne	{r7, pc}
 8004176:	f000 f871 	bl	800425c <TypeSystemManager::AtomicAllocatorSlow#41498>
 800417a:	bd80      	pop	{r7, pc}

0800417c <DefaultTypeSystemManager::AllocateObjectWithExtensions#5604>:
            return InitializeObject( ptr, vTable, referenceCounting: true );
        }

        [NoInline]
        public override Object AllocateObjectWithExtensions( TS.VTable vTable )
        {
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	460c      	mov	r4, r1
            uint   size = ComputeObjectSize( vTable       );
 8004180:	4620      	mov	r0, r4
 8004182:	f000 fe93 	bl	8004eac <DefaultTypeSystemManager::ComputeObjectSize#5610>
 8004186:	4606      	mov	r6, r0
            UIntPtr ptr = AllocateInner    ( vTable, size );
 8004188:	f000 fe9a 	bl	8004ec0 <DefaultTypeSystemManager::AllocateInner#5612>
 800418c:	4631      	mov	r1, r6
 800418e:	4605      	mov	r5, r0
 8004190:	f007 f9b0 	bl	800b4f4 <__aeabi_memclr>
 8004194:	2d00      	cmp	r5, #0
 8004196:	bf1f      	itttt	ne
 8004198:	200a      	movne	r0, #10
 800419a:	e9c5 0400 	strdne	r0, r4, [r5]
 800419e:	4628      	movne	r0, r5
 80041a0:	bd70      	popne	{r4, r5, r6, pc}
 80041a2:	f7fc f961 	bl	8000468 <Thread::ThrowNullException#4411>
 80041a6:	46c0      	nop			; (mov r8, r8)

080041a8 <SyncBlock::AddToFreeList#5151>:
            m_associatedObject = target;
            m_hashCode         = hashCode;
        }

        internal void AddToFreeList()
        {
 80041a8:	2100      	movs	r1, #0
            {
                var first = table.m_freeList;

                m_next = first;

                if(System.Threading.Interlocked.CompareExchange( ref table.m_freeList, this, first ) == first)
 80041aa:	4a10      	ldr	r2, [pc, #64]	; (80041ec <SyncBlock::AddToFreeList#5151+0x44>)
 80041ac:	6081      	str	r1, [r0, #8]
 80041ae:	6181      	str	r1, [r0, #24]
            var table = SyncBlockTable.Instance;

            m_associatedObject = null;
            m_lock             = null;

            m_counterFree++;
 80041b0:	6a01      	ldr	r1, [r0, #32]
 80041b2:	3101      	adds	r1, #1
 80041b4:	6201      	str	r1, [r0, #32]
 80041b6:	490c      	ldr	r1, [pc, #48]	; (80041e8 <SyncBlock::AddToFreeList#5151+0x40>)
 80041b8:	4479      	add	r1, pc
            {
                var first = table.m_freeList;

                m_next = first;

                if(System.Threading.Interlocked.CompareExchange( ref table.m_freeList, this, first ) == first)
 80041ba:	4411      	add	r1, r2
 80041bc:	e004      	b.n	80041c8 <SyncBlock::AddToFreeList#5151+0x20>
 80041be:	f3bf 8f5f 	dmb	sy
 80041c2:	4563      	cmp	r3, ip
 80041c4:	bf08      	it	eq
 80041c6:	4770      	bxeq	lr
 80041c8:	f8d1 c010 	ldr.w	ip, [r1, #16]
 80041cc:	f8c0 c00c 	str.w	ip, [r0, #12]
 80041d0:	f3bf 8f5f 	dmb	sy
 80041d4:	e851 3f04 	ldrex	r3, [r1, #16]
 80041d8:	4563      	cmp	r3, ip
 80041da:	d1f0      	bne.n	80041be <SyncBlock::AddToFreeList#5151+0x16>
 80041dc:	e841 0204 	strex	r2, r0, [r1, #16]
 80041e0:	2a00      	cmp	r2, #0
 80041e2:	d1f7      	bne.n	80041d4 <SyncBlock::AddToFreeList#5151+0x2c>
 80041e4:	e7eb      	b.n	80041be <SyncBlock::AddToFreeList#5151+0x16>
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	17ffc95c 	.word	0x17ffc95c
 80041ec:	fffffe98 	.word	0xfffffe98

080041f0 <ArrayUtility::AppendToArray#36186>:

        //--//

        public static T[] AppendToArray<T>( T[] array   ,
                                            T   element )
        {
 80041f0:	b510      	push	{r4, lr}
 80041f2:	460c      	mov	r4, r1
 80041f4:	b118      	cbz	r0, 80041fe <ArrayUtility::AppendToArray#36186+0xe>
            {
                return new T[] { element };
            }
            else
            {
                return AppendToNotNullArray( array, element );
 80041f6:	4621      	mov	r1, r4
 80041f8:	f003 fb50 	bl	800789c <ArrayUtility::AppendToNotNullArray#41493>
 80041fc:	bd10      	pop	{r4, pc}
 80041fe:	4905      	ldr	r1, [pc, #20]	; (8004214 <ArrayUtility::AppendToArray#36186+0x24>)
        public static T[] AppendToArray<T>( T[] array   ,
                                            T   element )
        {
            if(array == null)
            {
                return new T[] { element };
 8004200:	4805      	ldr	r0, [pc, #20]	; (8004218 <ArrayUtility::AppendToArray#36186+0x28>)
 8004202:	4a06      	ldr	r2, [pc, #24]	; (800421c <ArrayUtility::AppendToArray#36186+0x2c>)
 8004204:	4479      	add	r1, pc
 8004206:	4408      	add	r0, r1
 8004208:	4411      	add	r1, r2
 800420a:	2201      	movs	r2, #1
 800420c:	f7fd fc02 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 8004210:	60c4      	str	r4, [r0, #12]
 8004212:	bd10      	pop	{r4, pc}
 8004214:	17ffc910 	.word	0x17ffc910
 8004218:	fffffe0c 	.word	0xfffffe0c
 800421c:	e8019f28 	.word	0xe8019f28

08004220 <TypeSystemManager::AtomicAllocatorSlow#41496>:
        }

        [NoInline]
        private static T AtomicAllocatorSlow<T>(ref T obj) where T : class, new()
        {
            T newObj = new T();
 8004220:	b580      	push	{r7, lr}
 8004222:	f000 fe1f 	bl	8004e64 <Activator::CreateInstance#43007>
 8004226:	4a0a      	ldr	r2, [pc, #40]	; (8004250 <TypeSystemManager::AtomicAllocatorSlow#41496+0x30>)
 8004228:	490a      	ldr	r1, [pc, #40]	; (8004254 <TypeSystemManager::AtomicAllocatorSlow#41496+0x34>)
 800422a:	f3bf 8f5f 	dmb	sy
 800422e:	447a      	add	r2, pc
 8004230:	440a      	add	r2, r1
 8004232:	e852 3f02 	ldrex	r3, [r2, #8]
 8004236:	b91b      	cbnz	r3, 8004240 <TypeSystemManager::AtomicAllocatorSlow#41496+0x20>
 8004238:	e842 0302 	strex	r3, r0, [r2, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1f8      	bne.n	8004232 <TypeSystemManager::AtomicAllocatorSlow#41496+0x12>
 8004240:	4805      	ldr	r0, [pc, #20]	; (8004258 <TypeSystemManager::AtomicAllocatorSlow#41496+0x38>)
 8004242:	f3bf 8f5f 	dmb	sy
 8004246:	4478      	add	r0, pc

            System.Threading.Interlocked.CompareExchange(ref obj, newObj, default(T));

            return obj;
 8004248:	4408      	add	r0, r1
 800424a:	6880      	ldr	r0, [r0, #8]
 800424c:	bd80      	pop	{r7, pc}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	17ffc8e6 	.word	0x17ffc8e6
 8004254:	fffffe98 	.word	0xfffffe98
 8004258:	17ffc8ce 	.word	0x17ffc8ce

0800425c <TypeSystemManager::AtomicAllocatorSlow#41498>:
            return obj;
        }

        [NoInline]
        private static T AtomicAllocatorSlow<T>(ref T obj) where T : class, new()
        {
 800425c:	b510      	push	{r4, lr}
 800425e:	4604      	mov	r4, r0
            T newObj = new T();
 8004260:	f000 fe10 	bl	8004e84 <Activator::CreateInstance#43010>
 8004264:	f3bf 8f5f 	dmb	sy
 8004268:	e854 1f00 	ldrex	r1, [r4]
 800426c:	b919      	cbnz	r1, 8004276 <TypeSystemManager::AtomicAllocatorSlow#41498+0x1a>
 800426e:	e844 0100 	strex	r1, r0, [r4]
 8004272:	2900      	cmp	r1, #0
 8004274:	d1f8      	bne.n	8004268 <TypeSystemManager::AtomicAllocatorSlow#41498+0xc>
 8004276:	f3bf 8f5f 	dmb	sy

            System.Threading.Interlocked.CompareExchange(ref obj, newObj, default(T));

            return obj;
 800427a:	6820      	ldr	r0, [r4, #0]
 800427c:	bd10      	pop	{r4, pc}

0800427e <MemoryFreeBlock::Unpack#5163>:

        public static MemoryFreeBlock* Unpack( byte[] ptr )
        {
            ArrayImpl array = ArrayImpl.CastAsArray( ptr );

            return (MemoryFreeBlock*)array.GetDataPointer();
 800427e:	b580      	push	{r7, lr}
 8004280:	2800      	cmp	r0, #0
 8004282:	bf1c      	itt	ne
 8004284:	300c      	addne	r0, #12
 8004286:	bd80      	popne	{r7, pc}
 8004288:	f7fc f8ee 	bl	8000468 <Thread::ThrowNullException#4411>

0800428c <MemoryFreeBlock::ZeroFreeMemory#5173>:
            return ToObjectHeader().ToPointer();
        }

        [TS.WellKnownMethod("DebugGC_MemoryFreeBlock_ZeroFreeMemory")]
        public void ZeroFreeMemory()
        {
 800428c:	b580      	push	{r7, lr}
 800428e:	380c      	subs	r0, #12
            byte[] array = Pack();
            byte*  ptr   = (byte*)ArrayImpl.CastAsArray( array ).GetDataPointer();
 8004290:	d007      	beq.n	80042a2 <MemoryFreeBlock::ZeroFreeMemory#5173+0x16>
 8004292:	6881      	ldr	r1, [r0, #8]
 8004294:	4401      	add	r1, r0

            UIntPtr start = new UIntPtr( ptr + sizeof(MemoryFreeBlock) );
 8004296:	3014      	adds	r0, #20
            UIntPtr end   = new UIntPtr( ptr + array.Length );
 8004298:	310c      	adds	r1, #12
 800429a:	1a09      	subs	r1, r1, r0
 800429c:	f007 f92a 	bl	800b4f4 <__aeabi_memclr>
 80042a0:	bd80      	pop	{r7, pc}

        [TS.WellKnownMethod("DebugGC_MemoryFreeBlock_ZeroFreeMemory")]
        public void ZeroFreeMemory()
        {
            byte[] array = Pack();
            byte*  ptr   = (byte*)ArrayImpl.CastAsArray( array ).GetDataPointer();
 80042a2:	f7fc f8e1 	bl	8000468 <Thread::ThrowNullException#4411>

080042a6 <MemoryFreeBlock::DirtyFreeMemory#5175>:
            Memory.Zero( start, end );
        }

        [TS.WellKnownMethod("DebugGC_MemoryFreeBlock_DirtyFreeMemory")]
        public void DirtyFreeMemory()
        {
 80042a6:	b580      	push	{r7, lr}
 80042a8:	380c      	subs	r0, #12
            byte[] array = Pack();
            byte*  ptr   = (byte*)ArrayImpl.CastAsArray( array ).GetDataPointer();
 80042aa:	d008      	beq.n	80042be <MemoryFreeBlock::DirtyFreeMemory#5175+0x18>
 80042ac:	6881      	ldr	r1, [r0, #8]
 80042ae:	22dd      	movs	r2, #221	; 0xdd
 80042b0:	4401      	add	r1, r0

            UIntPtr start = new UIntPtr( ptr + sizeof(MemoryFreeBlock) );
 80042b2:	3014      	adds	r0, #20
            UIntPtr end   = new UIntPtr( ptr + array.Length );
 80042b4:	310c      	adds	r1, #12
 80042b6:	1a09      	subs	r1, r1, r0
 80042b8:	f007 f93e 	bl	800b538 <__aeabi_memset>
 80042bc:	bd80      	pop	{r7, pc}

        [TS.WellKnownMethod("DebugGC_MemoryFreeBlock_DirtyFreeMemory")]
        public void DirtyFreeMemory()
        {
            byte[] array = Pack();
            byte*  ptr   = (byte*)ArrayImpl.CastAsArray( array ).GetDataPointer();
 80042be:	f7fc f8d3 	bl	8000468 <Thread::ThrowNullException#4411>
 80042c2:	46c0      	nop			; (mov r8, r8)

080042c4 <MemoryFreeBlock::Allocate#5177>:
            Memory.Dirty( start, end );
        }

        [TS.WellKnownMethod("DebugGC_MemoryFreeBlock_Allocate")]
        public UIntPtr Allocate( ref MemorySegment memorySegment, uint size )
        {
 80042c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042c8:	4614      	mov	r4, r2
 80042ca:	4602      	mov	r2, r0
 80042cc:	f1b2 050c 	subs.w	r5, r2, #12
 80042d0:	d031      	beq.n	8004336 <MemoryFreeBlock::Allocate#5177+0x72>
 80042d2:	462f      	mov	r7, r5
 80042d4:	f857 0f08 	ldr.w	r0, [r7, #8]!
            ArrayImpl array          = ArrayImpl.CastAsArray( Pack() );
            uint      fixedSize      = FixedSize();
            uint      numElements    = (uint)array.Length;
            uint      availableSize  = numElements + fixedSize;
 80042d8:	f100 030c 	add.w	r3, r0, #12

            if(size <= availableSize)
 80042dc:	429c      	cmp	r4, r3
 80042de:	d814      	bhi.n	800430a <MemoryFreeBlock::Allocate#5177+0x46>
            {
                uint left = availableSize - size;
 80042e0:	1b1e      	subs	r6, r3, r4

                numElements -= size;
 80042e2:	eba0 0804 	sub.w	r8, r0, r4

                if(left <= MinimumSpaceRequired())
 80042e6:	2e15      	cmp	r6, #21
 80042e8:	d217      	bcs.n	800431a <MemoryFreeBlock::Allocate#5177+0x56>
                {
                    fixed(MemoryFreeBlock* ptr = &this)
                    {
                        memorySegment.RemoveFreeBlock( ptr );
 80042ea:	4608      	mov	r0, r1
 80042ec:	4611      	mov	r1, r2
 80042ee:	f000 f829 	bl	8004344 <MemorySegment::RemoveFreeBlock#5215>
 80042f2:	4628      	mov	r0, r5

                    ObjectHeader oh = ObjectHeader.Unpack( array );

                    if(MemoryManager.Configuration.TrashFreeMemory)
                    {
                        DirtyHeader( oh.ToPointer() );
 80042f4:	2114      	movs	r1, #20
 80042f6:	22dd      	movs	r2, #221	; 0xdd
 80042f8:	f007 f91e 	bl	800b538 <__aeabi_memset>
 80042fc:	b17e      	cbz	r6, 800431e <MemoryFreeBlock::Allocate#5177+0x5a>
 80042fe:	b1d5      	cbz	r5, 8004336 <MemoryFreeBlock::Allocate#5177+0x72>
                        ZeroHeader( oh.ToPointer() );
                    }

                    if(left > 0)
                    {
                        oh.InsertPlug( left );
 8004300:	4628      	mov	r0, r5
 8004302:	4631      	mov	r1, r6
 8004304:	f7fe fdd6 	bl	8002eb4 <ObjectHeader::InsertPlug#3486>
 8004308:	e009      	b.n	800431e <MemoryFreeBlock::Allocate#5177+0x5a>
 800430a:	480c      	ldr	r0, [pc, #48]	; (800433c <MemoryFreeBlock::Allocate#5177+0x78>)
                ObjectHeader.CastAsObjectHeader( newAllocation ).InitializeAllocatedRawBytes( size );

                return newAllocation;
            }

            return UIntPtr.Zero;
 800430c:	490c      	ldr	r1, [pc, #48]	; (8004340 <MemoryFreeBlock::Allocate#5177+0x7c>)
 800430e:	4478      	add	r0, pc
 8004310:	4408      	add	r0, r1
 8004312:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8004316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800431a:	f8c7 8000 	str.w	r8, [r7]
 800431e:	eb07 0008 	add.w	r0, r7, r8
                    // Resize the array, as a way of marking memory allocation.
                    //
                    array.SetLength( numElements );
                }

                UIntPtr newAllocation = new UIntPtr( (byte*)array.GetDataPointer() + numElements );
 8004322:	3004      	adds	r0, #4
 8004324:	bf1e      	ittt	ne
 8004326:	210c      	movne	r1, #12
 8004328:	6001      	strne	r1, [r0, #0]
 800432a:	f110 0f04 	cmnne.w	r0, #4
 800432e:	d002      	beq.n	8004336 <MemoryFreeBlock::Allocate#5177+0x72>
 8004330:	6044      	str	r4, [r0, #4]
 8004332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        [TS.WellKnownMethod("DebugGC_MemoryFreeBlock_Allocate")]
        public UIntPtr Allocate( ref MemorySegment memorySegment, uint size )
        {
            ArrayImpl array          = ArrayImpl.CastAsArray( Pack() );
            uint      fixedSize      = FixedSize();
            uint      numElements    = (uint)array.Length;
 8004336:	f7fc f897 	bl	8000468 <Thread::ThrowNullException#4411>
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	17ffc806 	.word	0x17ffc806
 8004340:	fffffcf8 	.word	0xfffffcf8

08004344 <MemorySegment::RemoveFreeBlock#5215>:
        }

        [TS.WellKnownMethod("DebugGC_MemorySegment_RemoveFreeBlock")]
        public void RemoveFreeBlock( MemoryFreeBlock* ptr )
        {
            MemoryFreeBlock* ptrNext = ptr->Next;
 8004344:	b580      	push	{r7, lr}
 8004346:	b1a1      	cbz	r1, 8004372 <MemorySegment::RemoveFreeBlock#5215+0x2e>
 8004348:	e9d1 3c00 	ldrd	r3, ip, [r1]
            MemoryFreeBlock* ptrPrev = ptr->Previous;

            if(ptrNext != null               ) ptrNext->Previous   = ptrPrev;
 800434c:	2b00      	cmp	r3, #0
 800434e:	bf18      	it	ne
 8004350:	f8c3 c004 	strne.w	ip, [r3, #4]
            if(ptrPrev != null               ) ptrPrev->Next       = ptrNext;
 8004354:	f1bc 0f00 	cmp.w	ip, #0
 8004358:	bf18      	it	ne
 800435a:	f8cc 3000 	strne.w	r3, [ip]
            if(ptr     == this.FirstFreeBlock) this.FirstFreeBlock = ptrNext;
 800435e:	6942      	ldr	r2, [r0, #20]
 8004360:	4291      	cmp	r1, r2
 8004362:	bf08      	it	eq
 8004364:	6143      	streq	r3, [r0, #20]
            if(ptr     == this.LastFreeBlock ) this.LastFreeBlock  = ptrPrev;
 8004366:	6982      	ldr	r2, [r0, #24]
 8004368:	4291      	cmp	r1, r2
 800436a:	bf08      	it	eq
 800436c:	f8c0 c018 	streq.w	ip, [r0, #24]
 8004370:	bd80      	pop	{r7, pc}
        }

        [TS.WellKnownMethod("DebugGC_MemorySegment_RemoveFreeBlock")]
        public void RemoveFreeBlock( MemoryFreeBlock* ptr )
        {
            MemoryFreeBlock* ptrNext = ptr->Next;
 8004372:	f7fc f879 	bl	8000468 <Thread::ThrowNullException#4411>
 8004376:	46c0      	nop			; (mov r8, r8)

08004378 <MemoryFreeBlock::InitializeFromRawMemory#5186>:

        [TS.WellKnownMethod("DebugGC_MemoryFreeBlock_InitializeFromRawMemory")]
        public static MemoryFreeBlock* InitializeFromRawMemory( UIntPtr baseAddress, uint sizeInBytes )
        {
            TS.VTable vTable        = TS.VTable.GetFromType( typeof(byte[]) );
            uint      numOfElements = sizeInBytes - FixedSize();
 8004378:	b580      	push	{r7, lr}
 800437a:	b1b0      	cbz	r0, 80043aa <MemoryFreeBlock::InitializeFromRawMemory#5186+0x32>
 800437c:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <MemoryFreeBlock::InitializeFromRawMemory#5186+0x38>)
 800437e:	f8df c034 	ldr.w	ip, [pc, #52]	; 80043b4 <MemoryFreeBlock::InitializeFromRawMemory#5186+0x3c>
 8004382:	2208      	movs	r2, #8
 8004384:	2800      	cmp	r0, #0
 8004386:	447b      	add	r3, pc
 8004388:	4463      	add	r3, ip
 800438a:	e9c0 2300 	strd	r2, r3, [r0]
 800438e:	d00c      	beq.n	80043aa <MemoryFreeBlock::InitializeFromRawMemory#5186+0x32>
 8004390:	390c      	subs	r1, #12
 8004392:	6081      	str	r1, [r0, #8]
 8004394:	4908      	ldr	r1, [pc, #32]	; (80043b8 <MemoryFreeBlock::InitializeFromRawMemory#5186+0x40>)
 8004396:	4479      	add	r1, pc

            byte[] externalRepresentation = (byte[])TypeSystemManager.Instance.InitializeArray( baseAddress, vTable, numOfElements, referenceCounting: false );
 8004398:	4461      	add	r1, ip
 800439a:	f7ff fb21 	bl	80039e0 <TypeSystemManager::CastToType#5590>
 800439e:	b120      	cbz	r0, 80043aa <MemoryFreeBlock::InitializeFromRawMemory#5186+0x32>
 80043a0:	2100      	movs	r1, #0
 80043a2:	6001      	str	r1, [r0, #0]

            ObjectHeader oh = ObjectHeader.Unpack( externalRepresentation );

            oh.MultiUseWord = (int)(ObjectHeader.GarbageCollectorFlags.FreeBlock | ObjectHeader.GarbageCollectorFlags.Unmarked);

            return Unpack( externalRepresentation );
 80043a4:	f7ff ff6b 	bl	800427e <MemoryFreeBlock::Unpack#5163>
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	f7fc f85d 	bl	8000468 <Thread::ThrowNullException#4411>
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	17ffc78e 	.word	0x17ffc78e
 80043b4:	e8019aa8 	.word	0xe8019aa8
 80043b8:	17ffc77e 	.word	0x17ffc77e

080043bc <MemorySegment::Initialize#5203>:
        // Helper Methods
        //

        [TS.WellKnownMethod("DebugGC_MemorySegment_Initialize")]
        public void Initialize()
        {
 80043bc:	b510      	push	{r4, lr}
 80043be:	4604      	mov	r4, r0
 80043c0:	b16c      	cbz	r4, 80043de <MemorySegment::Initialize#5203+0x22>
            fixed(MemorySegment* seg = &this)
            {
                byte* firstBlockPtr =        (byte*)&seg[1];
                uint  size          = (uint)((byte*) seg->End.ToPointer() - firstBlockPtr);
 80043c2:	68e1      	ldr	r1, [r4, #12]
        [TS.WellKnownMethod("DebugGC_MemorySegment_Initialize")]
        public void Initialize()
        {
            fixed(MemorySegment* seg = &this)
            {
                byte* firstBlockPtr =        (byte*)&seg[1];
 80043c4:	f104 001c 	add.w	r0, r4, #28
                uint  size          = (uint)((byte*) seg->End.ToPointer() - firstBlockPtr);
 80043c8:	1a09      	subs	r1, r1, r0

                MemoryFreeBlock* firstBlock = MemoryFreeBlock.InitializeFromRawMemory( new UIntPtr( firstBlockPtr ), size );
 80043ca:	f7ff ffd5 	bl	8004378 <MemoryFreeBlock::InitializeFromRawMemory#5186>

                seg->FirstFreeBlock  = firstBlock;
                seg->LastFreeBlock   = firstBlock;

                firstBlock->Next     = null;
 80043ce:	2800      	cmp	r0, #0
 80043d0:	e9c4 0005 	strd	r0, r0, [r4, #20]
 80043d4:	bf1e      	ittt	ne
 80043d6:	2100      	movne	r1, #0
 80043d8:	e9c0 1100 	strdne	r1, r1, [r0]
 80043dc:	bd10      	popne	{r4, pc}
        public void Initialize()
        {
            fixed(MemorySegment* seg = &this)
            {
                byte* firstBlockPtr =        (byte*)&seg[1];
                uint  size          = (uint)((byte*) seg->End.ToPointer() - firstBlockPtr);
 80043de:	f7fc f843 	bl	8000468 <Thread::ThrowNullException#4411>

080043e2 <MemorySegment::ZeroFreeMemory#5205>:
                firstBlock->Previous = null;
            }
        }

        public void ZeroFreeMemory()
        {
 80043e2:	b510      	push	{r4, lr}
 80043e4:	4604      	mov	r4, r0
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
 80043e6:	2c00      	cmp	r4, #0
 80043e8:	bf08      	it	eq
 80043ea:	bd10      	popeq	{r4, pc}
            {
                ptr->ZeroFreeMemory();
 80043ec:	4620      	mov	r0, r4
 80043ee:	f7ff ff4d 	bl	800428c <MemoryFreeBlock::ZeroFreeMemory#5173>
            }
        }

        public void ZeroFreeMemory()
        {
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
 80043f2:	6824      	ldr	r4, [r4, #0]
 80043f4:	e7f7      	b.n	80043e6 <MemorySegment::ZeroFreeMemory#5205+0x4>

080043f6 <MemorySegment::DirtyFreeMemory#5207>:
                ptr->ZeroFreeMemory();
            }
        }

        public void DirtyFreeMemory()
        {
 80043f6:	b510      	push	{r4, lr}
 80043f8:	4604      	mov	r4, r0
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
 80043fa:	2c00      	cmp	r4, #0
 80043fc:	bf08      	it	eq
 80043fe:	bd10      	popeq	{r4, pc}
            {
                ptr->DirtyFreeMemory();
 8004400:	4620      	mov	r0, r4
 8004402:	f7ff ff50 	bl	80042a6 <MemoryFreeBlock::DirtyFreeMemory#5175>
            }
        }

        public void DirtyFreeMemory()
        {
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
 8004406:	6824      	ldr	r4, [r4, #0]
 8004408:	e7f7      	b.n	80043fa <MemorySegment::DirtyFreeMemory#5207+0x4>
 800440a:	46c0      	nop			; (mov r8, r8)

0800440c <MemorySegment::Allocate#5209>:
                ptr->DirtyFreeMemory();
            }
        }

        public UIntPtr Allocate( uint size )
        {
 800440c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004410:	4605      	mov	r5, r0
 8004412:	4811      	ldr	r0, [pc, #68]	; (8004458 <MemorySegment::Allocate#5209+0x4c>)
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
            {
                UIntPtr res = ptr->Allocate( ref this, size );

                if(res != UIntPtr.Zero)
 8004414:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8004454 <MemorySegment::Allocate#5209+0x48>
 8004418:	460c      	mov	r4, r1
            }
        }

        public UIntPtr Allocate( uint size )
        {
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
 800441a:	696e      	ldr	r6, [r5, #20]
 800441c:	4478      	add	r0, pc
            {
                UIntPtr res = ptr->Allocate( ref this, size );

                if(res != UIntPtr.Zero)
 800441e:	eb08 0700 	add.w	r7, r8, r0
 8004422:	e00b      	b.n	800443c <MemorySegment::Allocate#5209+0x30>

        public UIntPtr Allocate( uint size )
        {
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
            {
                UIntPtr res = ptr->Allocate( ref this, size );
 8004424:	4630      	mov	r0, r6
 8004426:	4629      	mov	r1, r5
 8004428:	4622      	mov	r2, r4
 800442a:	f7ff ff4b 	bl	80042c4 <MemoryFreeBlock::Allocate#5177>

                if(res != UIntPtr.Zero)
 800442e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8004432:	4288      	cmp	r0, r1
 8004434:	bf18      	it	ne
 8004436:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
        }

        public UIntPtr Allocate( uint size )
        {
            for(MemoryFreeBlock* ptr = this.FirstFreeBlock; ptr != null; ptr = ptr->Next)
 800443a:	6836      	ldr	r6, [r6, #0]
 800443c:	2e00      	cmp	r6, #0
 800443e:	d1f1      	bne.n	8004424 <MemorySegment::Allocate#5209+0x18>
 8004440:	4803      	ldr	r0, [pc, #12]	; (8004450 <MemorySegment::Allocate#5209+0x44>)
 8004442:	4478      	add	r0, pc

                    return res;
                }
            }

            return UIntPtr.Zero;
 8004444:	4440      	add	r0, r8
 8004446:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 800444a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	17ffc6d2 	.word	0x17ffc6d2
 8004454:	fffffcf8 	.word	0xfffffcf8
 8004458:	17ffc6f8 	.word	0x17ffc6f8

0800445c <MemorySegment::Release#5213>:
                return null;
            }
        }

        public void Release(UIntPtr address)
        {
 800445c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004460:	b081      	sub	sp, #4
 8004462:	460f      	mov	r7, r1
 8004464:	9000      	str	r0, [sp, #0]
            UIntPtr newFreeBlockBaseAddress = address;
            uint newFreeBlockSize = ObjectHeader.CastAsObjectHeader(address).TotalSize;
 8004466:	2f00      	cmp	r7, #0
 8004468:	f000 80b3 	beq.w	80045d2 <MemorySegment::Release#5213+0x176>
 800446c:	4638      	mov	r0, r7
 800446e:	f7fe fcff 	bl	8002e70 <ObjectHeader::get_TotalSize#3485>
 8004472:	4604      	mov	r4, r0
            Log("MemorySegment(0x%x).Release - address 0x%x, size: %d", (int)this.Beginning.ToUInt32(), (int)address.ToUInt32(), (int)newFreeBlockSize);

            // Find the position in the FreeBlock linked list where it should go
            Log("Locating insertion point...");
            MemoryFreeBlock* insertAfter = null;
            for (MemoryFreeBlock* current = this.FirstFreeBlock; current != null; current = current->Next)
 8004474:	9800      	ldr	r0, [sp, #0]
 8004476:	2600      	movs	r6, #0
 8004478:	6940      	ldr	r0, [r0, #20]
 800447a:	e002      	b.n	8004482 <MemorySegment::Release#5213+0x26>
 800447c:	6801      	ldr	r1, [r0, #0]
 800447e:	4606      	mov	r6, r0
 8004480:	4608      	mov	r0, r1
 8004482:	2800      	cmp	r0, #0
 8004484:	bf18      	it	ne
 8004486:	4287      	cmpne	r7, r0
 8004488:	d8f8      	bhi.n	800447c <MemorySegment::Release#5213+0x20>
 800448a:	b14e      	cbz	r6, 80044a0 <MemorySegment::Release#5213+0x44>
 800448c:	f1b6 050c 	subs.w	r5, r6, #12
 8004490:	f000 809f 	beq.w	80045d2 <MemorySegment::Release#5213+0x176>
 8004494:	4628      	mov	r0, r5
 8004496:	f7fe fceb 	bl	8002e70 <ObjectHeader::get_TotalSize#3485>
 800449a:	4428      	add	r0, r5
                UIntPtr previousBlockEndAddress = previousBlockObjectHeader.GetNextObjectPointer();

                Log("Comparing with previous FreeBlock baseAddress 0x%x, end 0x%x",
                    (int)previousBlockObjectHeader.ToPointer().ToUInt32(), (int)previousBlockEndAddress.ToUInt32());

                if (previousBlockEndAddress == address)
 800449c:	42b8      	cmp	r0, r7
 800449e:	d002      	beq.n	80044a6 <MemorySegment::Release#5213+0x4a>
 80044a0:	f04f 0a00 	mov.w	sl, #0
 80044a4:	e006      	b.n	80044b4 <MemorySegment::Release#5213+0x58>
                {
                    // We need to merge with the previous block
                    newFreeBlockBaseAddress = previousBlockObjectHeader.ToPointer();
                    newFreeBlockSize += previousBlockObjectHeader.TotalSize;
 80044a6:	4628      	mov	r0, r5
 80044a8:	f7fe fce2 	bl	8002e70 <ObjectHeader::get_TotalSize#3485>
 80044ac:	4404      	add	r4, r0
 80044ae:	f04f 0a01 	mov.w	sl, #1
 80044b2:	462f      	mov	r7, r5
 80044b4:	b116      	cbz	r6, 80044bc <MemorySegment::Release#5213+0x60>
                    Log("Need to merge with previous block! New address 0x%x, size:%d",
                        (int)newFreeBlockBaseAddress.ToUInt32(), (int)newFreeBlockSize);
                }
            }

            MemoryFreeBlock* nextBlock = (insertAfter != null) ? insertAfter->Next : this.FirstFreeBlock;
 80044b6:	f8d6 9000 	ldr.w	r9, [r6]
 80044ba:	e002      	b.n	80044c2 <MemorySegment::Release#5213+0x66>
 80044bc:	9800      	ldr	r0, [sp, #0]
 80044be:	f8d0 9014 	ldr.w	r9, [r0, #20]
            if (nextBlock != null)
 80044c2:	f1b9 0f00 	cmp.w	r9, #0
 80044c6:	d004      	beq.n	80044d2 <MemorySegment::Release#5213+0x76>
 80044c8:	f1a9 000c 	sub.w	r0, r9, #12
 80044cc:	1939      	adds	r1, r7, r4
                UIntPtr nextBlockBaseAddress = nextBlock->ToObjectHeaderPointer();

                Log("Comparing with next FreeBlock 0x%x (base address 0x%x)", 
                    (int)nextBlock, (int)nextBlockBaseAddress.ToUInt32());

                if (AddressMath.Increment(newFreeBlockBaseAddress, newFreeBlockSize) == nextBlockBaseAddress)
 80044ce:	4281      	cmp	r1, r0
 80044d0:	d002      	beq.n	80044d8 <MemorySegment::Release#5213+0x7c>
 80044d2:	f04f 0b00 	mov.w	fp, #0
 80044d6:	e006      	b.n	80044e6 <MemorySegment::Release#5213+0x8a>
                {
                    // We need to merge with the next block
                    newFreeBlockSize += ObjectHeader.CastAsObjectHeader(nextBlockBaseAddress).TotalSize;
 80044d8:	2800      	cmp	r0, #0
 80044da:	d07a      	beq.n	80045d2 <MemorySegment::Release#5213+0x176>
 80044dc:	f7fe fcc8 	bl	8002e70 <ObjectHeader::get_TotalSize#3485>
 80044e0:	4404      	add	r4, r0
 80044e2:	f04f 0b01 	mov.w	fp, #1
                    Log("Need to merge with next block! New address 0x%x, size:%d",
                        (int)newFreeBlockBaseAddress.ToUInt32(), (int)newFreeBlockSize);
                }
            }

            if (!mergeWithPrevious)
 80044e6:	f1ba 0f00 	cmp.w	sl, #0
 80044ea:	d123      	bne.n	8004534 <MemorySegment::Release#5213+0xd8>
            {
                // Unless previous block was a free block, look for gap before the object to be deleted
                uint* target = (uint*)newFreeBlockBaseAddress.ToPointer();
                uint* limit = (uint*)this.Beginning.ToPointer();
 80044ec:	9800      	ldr	r0, [sp, #0]
 80044ee:	4639      	mov	r1, r7
 80044f0:	6880      	ldr	r0, [r0, #8]
 80044f2:	4688      	mov	r8, r1

                Log("Checking for plug gap before starting from 0x%x...", (int)target);

                while ((target > limit) && (*(target - 1) == (uint)ObjectHeader.GarbageCollectorFlags.GapPlug))
 80044f4:	4580      	cmp	r8, r0
 80044f6:	d905      	bls.n	8004504 <MemorySegment::Release#5213+0xa8>
 80044f8:	f1b8 0104 	subs.w	r1, r8, #4
 80044fc:	d069      	beq.n	80045d2 <MemorySegment::Release#5213+0x176>
 80044fe:	680a      	ldr	r2, [r1, #0]
 8004500:	2a02      	cmp	r2, #2
 8004502:	d0f6      	beq.n	80044f2 <MemorySegment::Release#5213+0x96>
                }

                // If we detect any gap plugs before the object we are freeing, we need to
                // walk the ObjectHeader chain to ensure that they are indeed gap plugs, rather 
                // than valid data that just happen to look like GarbageCollectorFlags.GapPlug 
                if (AddressMath.IsLessThan(new UIntPtr(target), newFreeBlockBaseAddress))
 8004504:	45b8      	cmp	r8, r7
 8004506:	d215      	bcs.n	8004534 <MemorySegment::Release#5213+0xd8>
 8004508:	b11e      	cbz	r6, 8004512 <MemorySegment::Release#5213+0xb6>
 800450a:	f1b6 050c 	subs.w	r5, r6, #12
 800450e:	d14f      	bne.n	80045b0 <MemorySegment::Release#5213+0x154>
 8004510:	e05f      	b.n	80045d2 <MemorySegment::Release#5213+0x176>
        {
            get
            {
                fixed(MemorySegment* seg = &this)
                {
                    return new UIntPtr( &seg[1] );
 8004512:	9800      	ldr	r0, [sp, #0]
 8004514:	f100 051c 	add.w	r5, r0, #28
 8004518:	e050      	b.n	80045bc <MemorySegment::Release#5213+0x160>
 800451a:	2000      	movs	r0, #0
 800451c:	42bd      	cmp	r5, r7
 800451e:	eba7 0105 	sub.w	r1, r7, r5
 8004522:	bf38      	it	cc
 8004524:	2001      	movcc	r0, #1
 8004526:	45a8      	cmp	r8, r5
 8004528:	bf88      	it	hi
 800452a:	2000      	movhi	r0, #0
                        Log("    Next object header address 0x%x", (int)objectPointer.ToUInt32());
                    }

                    // At this point, oh >= gapStart

                    if (AddressMath.IsInRange(objectPointer, gapStart, newFreeBlockBaseAddress)) // Note, IsInRange instead of == since it's possible that some of the GapPlug markings are real data
 800452c:	2800      	cmp	r0, #0
 800452e:	bf1c      	itt	ne
 8004530:	440c      	addne	r4, r1
 8004532:	462f      	movne	r7, r5
                            (int)gapSize, (int)newFreeBlockBaseAddress.ToUInt32(), (int)newFreeBlockSize);
                    }
                }
            }

            if (!mergeWithNext)
 8004534:	f1bb 0f00 	cmp.w	fp, #0
 8004538:	d10c      	bne.n	8004554 <MemorySegment::Release#5213+0xf8>
            {
                // Unless next block was a free block, look for gap after the object to be deleted
                uint* target = (uint*)AddressMath.Increment(newFreeBlockBaseAddress, newFreeBlockSize).ToPointer();
                uint* limit = (uint*)this.End.ToPointer();
 800453a:	9900      	ldr	r1, [sp, #0]
 800453c:	1938      	adds	r0, r7, r4
 800453e:	68c9      	ldr	r1, [r1, #12]
 8004540:	e001      	b.n	8004546 <MemorySegment::Release#5213+0xea>
                {
                    newFreeBlockSize += sizeof(uint);

                    Log("    Found plug gap at 0x%x, new size: %d", (int)target, (int)newFreeBlockSize);

                    target++;
 8004542:	3004      	adds	r0, #4

                Log("Checking for plug gap after starting from 0x%x...", (int)target);

                while ((target < limit) && (*target == (uint)ObjectHeader.GarbageCollectorFlags.GapPlug))
                {
                    newFreeBlockSize += sizeof(uint);
 8004544:	3404      	adds	r4, #4
                uint* target = (uint*)AddressMath.Increment(newFreeBlockBaseAddress, newFreeBlockSize).ToPointer();
                uint* limit = (uint*)this.End.ToPointer();

                Log("Checking for plug gap after starting from 0x%x...", (int)target);

                while ((target < limit) && (*target == (uint)ObjectHeader.GarbageCollectorFlags.GapPlug))
 8004546:	4288      	cmp	r0, r1
 8004548:	d204      	bcs.n	8004554 <MemorySegment::Release#5213+0xf8>
 800454a:	2800      	cmp	r0, #0
 800454c:	d041      	beq.n	80045d2 <MemorySegment::Release#5213+0x176>
 800454e:	6802      	ldr	r2, [r0, #0]
 8004550:	2a02      	cmp	r2, #2
 8004552:	d0f6      	beq.n	8004542 <MemorySegment::Release#5213+0xe6>
                }
            }

            // Once we get here, we have gather all the information and have the correct newFreeBlockAddress and 
            // newFreeBlockSize. It's now time to manipulate the free list.
            if (mergeWithPrevious || mergeWithNext)
 8004554:	ea5a 000b 	orrs.w	r0, sl, fp
 8004558:	d014      	beq.n	8004584 <MemorySegment::Release#5213+0x128>
            {
                // Note that in the case where mergeWithPrevious and mergeWithNext is both true
                // we will do both and return early.
                if (mergeWithNext)
 800455a:	f1bb 0f00 	cmp.w	fp, #0
 800455e:	d003      	beq.n	8004568 <MemorySegment::Release#5213+0x10c>
                {
                    // Remove the next block from the linked list, so we can add a new (combined) one later
                    RemoveFreeBlock(nextBlock);
 8004560:	9800      	ldr	r0, [sp, #0]
 8004562:	4649      	mov	r1, r9
 8004564:	f7ff feee 	bl	8004344 <MemorySegment::RemoveFreeBlock#5215>

                    Log("Removing next block 0x%x", (int)nextBlock);
                }

                if (mergeWithPrevious)
 8004568:	f1ba 0f00 	cmp.w	sl, #0
 800456c:	d00a      	beq.n	8004584 <MemorySegment::Release#5213+0x128>
                {
                    // Merging with previous block can be done easily by increasing the size of the previous block
                    ArrayImpl array = ArrayImpl.CastAsArray(insertAfter->Pack());
 800456e:	2e00      	cmp	r6, #0
 8004570:	bf18      	it	ne
 8004572:	f1b6 000c 	subsne.w	r0, r6, #12
 8004576:	d02c      	beq.n	80045d2 <MemorySegment::Release#5213+0x176>
                    array.SetLength(newFreeBlockSize - MemoryFreeBlock.FixedSize());
 8004578:	f1a4 010c 	sub.w	r1, r4, #12
 800457c:	6081      	str	r1, [r0, #8]
 800457e:	b001      	add	sp, #4
 8004580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

                    return;
                }
            }

            if (newFreeBlockSize >= MemoryFreeBlock.MinimumSpaceRequired())
 8004584:	2c13      	cmp	r4, #19
 8004586:	d90b      	bls.n	80045a0 <MemorySegment::Release#5213+0x144>
            {
                // If the block is big enough for a MemoryFreeBlock, build one and insert it into the free list
                MemoryFreeBlock* newFreeBlock = MemoryFreeBlock.InitializeFromRawMemory(newFreeBlockBaseAddress, newFreeBlockSize);
 8004588:	4638      	mov	r0, r7
 800458a:	4621      	mov	r1, r4
 800458c:	f7ff fef4 	bl	8004378 <MemoryFreeBlock::InitializeFromRawMemory#5186>
 8004590:	4601      	mov	r1, r0
                InsertFreeBlock(newFreeBlock, insertAfter);
 8004592:	9800      	ldr	r0, [sp, #0]
 8004594:	4632      	mov	r2, r6
 8004596:	f000 f81e 	bl	80045d6 <MemorySegment::InsertFreeBlock#5217>
 800459a:	b001      	add	sp, #4
 800459c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045a0:	b1bf      	cbz	r7, 80045d2 <MemorySegment::Release#5213+0x176>
                Log("New free block: address 0x%x (0x%x), size %d", (int)newFreeBlock, (int)newFreeBlockBaseAddress.ToUInt32(), (int)newFreeBlockSize);
            }
            else
            {
                // Otherwise, insert gap plugs instead.
                ObjectHeader.CastAsObjectHeader(newFreeBlockBaseAddress).InsertPlug(newFreeBlockSize);
 80045a2:	4638      	mov	r0, r7
 80045a4:	4621      	mov	r1, r4
 80045a6:	f7fe fc85 	bl	8002eb4 <ObjectHeader::InsertPlug#3486>
 80045aa:	b001      	add	sp, #4
 80045ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045b0:	4628      	mov	r0, r5
 80045b2:	f7fe fc5d 	bl	8002e70 <ObjectHeader::get_TotalSize#3485>
 80045b6:	4405      	add	r5, r0
 80045b8:	e000      	b.n	80045bc <MemorySegment::Release#5213+0x160>
 80045ba:	3504      	adds	r5, #4
                    UIntPtr objectPointer = (insertAfter != null) ? insertAfter->ToObjectHeader().GetNextObjectPointer() : this.FirstBlock;
                    UIntPtr gapStart = new UIntPtr(target);

                    Log("Verifying plug gap starting at object header address 0x%x", (int)objectPointer.ToUInt32());

                    while (AddressMath.IsLessThan(objectPointer, gapStart))
 80045bc:	4545      	cmp	r5, r8
 80045be:	d2ac      	bcs.n	800451a <MemorySegment::Release#5213+0xbe>
                    {
                        ObjectHeader oh = ObjectHeader.CastAsObjectHeader(objectPointer);
                        if (oh.GarbageCollectorStateWithoutMutableBits == ObjectHeader.GarbageCollectorFlags.GapPlug)
 80045c0:	2d00      	cmp	r5, #0
 80045c2:	d006      	beq.n	80045d2 <MemorySegment::Release#5213+0x176>
 80045c4:	d005      	beq.n	80045d2 <MemorySegment::Release#5213+0x176>
 80045c6:	7828      	ldrb	r0, [r5, #0]
 80045c8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 80045cc:	2802      	cmp	r0, #2
 80045ce:	d1ef      	bne.n	80045b0 <MemorySegment::Release#5213+0x154>
 80045d0:	e7f3      	b.n	80045ba <MemorySegment::Release#5213+0x15e>
        }

        public void Release(UIntPtr address)
        {
            UIntPtr newFreeBlockBaseAddress = address;
            uint newFreeBlockSize = ObjectHeader.CastAsObjectHeader(address).TotalSize;
 80045d2:	f7fb ff49 	bl	8000468 <Thread::ThrowNullException#4411>

080045d6 <MemorySegment::InsertFreeBlock#5217>:
            if(ptr     == this.LastFreeBlock ) this.LastFreeBlock  = ptrPrev;
        }

        private void InsertFreeBlock(MemoryFreeBlock* ptr, MemoryFreeBlock* insertAfter)
        {
            if (insertAfter == null)
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b11a      	cbz	r2, 80045e2 <MemorySegment::InsertFreeBlock#5217+0xc>
 80045da:	b199      	cbz	r1, 8004604 <MemorySegment::InsertFreeBlock#5217+0x2e>
                ptr->Next = this.FirstFreeBlock;
                this.FirstFreeBlock = ptr;
            }
            else
            {
                ptr->Next = insertAfter->Next;
 80045dc:	6813      	ldr	r3, [r2, #0]
 80045de:	600b      	str	r3, [r1, #0]
 80045e0:	e003      	b.n	80045ea <MemorySegment::InsertFreeBlock#5217+0x14>
 80045e2:	b179      	cbz	r1, 8004604 <MemorySegment::InsertFreeBlock#5217+0x2e>
        private void InsertFreeBlock(MemoryFreeBlock* ptr, MemoryFreeBlock* insertAfter)
        {
            if (insertAfter == null)
            {
                // Insert at head
                ptr->Next = this.FirstFreeBlock;
 80045e4:	6943      	ldr	r3, [r0, #20]
 80045e6:	600b      	str	r3, [r1, #0]
 80045e8:	6141      	str	r1, [r0, #20]
 80045ea:	b159      	cbz	r1, 8004604 <MemorySegment::InsertFreeBlock#5217+0x2e>
            else
            {
                ptr->Next = insertAfter->Next;
            }

            if (ptr->Next != null)
 80045ec:	680b      	ldr	r3, [r1, #0]
 80045ee:	b11b      	cbz	r3, 80045f8 <MemorySegment::InsertFreeBlock#5217+0x22>
            {
                ptr->Next->Previous = ptr;
 80045f0:	6808      	ldr	r0, [r1, #0]
 80045f2:	b138      	cbz	r0, 8004604 <MemorySegment::InsertFreeBlock#5217+0x2e>
 80045f4:	6041      	str	r1, [r0, #4]
 80045f6:	e000      	b.n	80045fa <MemorySegment::InsertFreeBlock#5217+0x24>
 80045f8:	6181      	str	r1, [r0, #24]
                // The new block is at the end of the list
                this.LastFreeBlock = ptr;
            }

            ptr->Previous = insertAfter;
            if (ptr->Previous != null)
 80045fa:	2a00      	cmp	r2, #0
 80045fc:	604a      	str	r2, [r1, #4]
 80045fe:	bf18      	it	ne
 8004600:	6011      	strne	r1, [r2, #0]
 8004602:	bd80      	pop	{r7, pc}
                ptr->Next = this.FirstFreeBlock;
                this.FirstFreeBlock = ptr;
            }
            else
            {
                ptr->Next = insertAfter->Next;
 8004604:	f7fb ff30 	bl	8000468 <Thread::ThrowNullException#4411>

08004608 <LinearMemoryManager::InitializeMemoryManager#5272>:
        // Helper Methods
        //

        public override void InitializeMemoryManager()
        {
            base.InitializeMemoryManager();
 8004608:	b580      	push	{r7, lr}
 800460a:	f000 f801 	bl	8004610 <MemoryManager::InitializeMemoryManager#5530>
 800460e:	bd80      	pop	{r7, pc}

08004610 <MemoryManager::InitializeMemoryManager#5530>:
 8004610:	2100      	movs	r1, #0
 8004612:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8004616:	6101      	str	r1, [r0, #16]
 8004618:	4770      	bx	lr

0800461a <MemoryManager::AddLinearSection#5541>:
        //--//

        protected void AddLinearSection( UIntPtr          beginning  ,
                                         UIntPtr          end        ,
                                         MemoryAttributes attributes )
        {
 800461a:	b580      	push	{r7, lr}
 800461c:	1a53      	subs	r3, r2, r1
            uint size = AddressMath.RangeSize( beginning, end );

            if(size >= MemorySegment.MinimumSpaceRequired())
 800461e:	2b30      	cmp	r3, #48	; 0x30
 8004620:	bf38      	it	cc
 8004622:	bd80      	popcc	{r7, pc}
 8004624:	b1b1      	cbz	r1, 8004654 <MemoryManager::AddLinearSection#5541+0x3a>
 8004626:	2300      	movs	r3, #0
 8004628:	600b      	str	r3, [r1, #0]
            {
                MemorySegment* seg = (MemorySegment*)beginning.ToPointer();

                seg->Next       = null;
                seg->Previous   = m_heapTail;
 800462a:	68c3      	ldr	r3, [r0, #12]
 800462c:	e9c1 3101 	strd	r3, r1, [r1, #4]
 8004630:	60ca      	str	r2, [r1, #12]
 8004632:	f44f 6228 	mov.w	r2, #2688	; 0xa80
 8004636:	610a      	str	r2, [r1, #16]
                seg->Beginning  = beginning;
                seg->End        = end;
                seg->Attributes = attributes;

                if(m_heapHead == null)
 8004638:	6882      	ldr	r2, [r0, #8]
 800463a:	2a00      	cmp	r2, #0
 800463c:	bf08      	it	eq
 800463e:	6081      	streq	r1, [r0, #8]
                {
                    m_heapHead = seg;
                }

                if(m_heapTail != null)
 8004640:	68c2      	ldr	r2, [r0, #12]
 8004642:	b112      	cbz	r2, 800464a <MemoryManager::AddLinearSection#5541+0x30>
                {
                    m_heapTail->Next = seg;
 8004644:	68c2      	ldr	r2, [r0, #12]
 8004646:	b12a      	cbz	r2, 8004654 <MemoryManager::AddLinearSection#5541+0x3a>
 8004648:	6011      	str	r1, [r2, #0]
 800464a:	60c1      	str	r1, [r0, #12]
                }

                m_heapTail = seg;

                seg->Initialize();
 800464c:	4608      	mov	r0, r1
 800464e:	f7ff feb5 	bl	80043bc <MemorySegment::Initialize#5203>
 8004652:	bd80      	pop	{r7, pc}

            if(size >= MemorySegment.MinimumSpaceRequired())
            {
                MemorySegment* seg = (MemorySegment*)beginning.ToPointer();

                seg->Next       = null;
 8004654:	f7fb ff08 	bl	8000468 <Thread::ThrowNullException#4411>

08004658 <MemoryManager::DirtyFreeMemory#5533>:
            }
        }

        public virtual void DirtyFreeMemory()
        {
            MemorySegment* ptr = m_heapHead;
 8004658:	b510      	push	{r4, lr}
 800465a:	6884      	ldr	r4, [r0, #8]

            while(ptr != null)
 800465c:	2c00      	cmp	r4, #0
 800465e:	bf08      	it	eq
 8004660:	bd10      	popeq	{r4, pc}
 8004662:	6960      	ldr	r0, [r4, #20]
            {
                ptr->DirtyFreeMemory();
 8004664:	f7ff fec7 	bl	80043f6 <MemorySegment::DirtyFreeMemory#5207>

                ptr = ptr->Next;
 8004668:	6824      	ldr	r4, [r4, #0]
 800466a:	e7f7      	b.n	800465c <MemoryManager::DirtyFreeMemory#5533+0x4>

0800466c <LinearMemoryManager::Allocate#5274>:
        }

        //--//

        public override unsafe UIntPtr Allocate( uint size )
        {
 800466c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004670:	b081      	sub	sp, #4
 8004672:	4680      	mov	r8, r0
 8004674:	4835      	ldr	r0, [pc, #212]	; (800474c <LinearMemoryManager::Allocate#5274+0xe0>)
 8004676:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004750 <LinearMemoryManager::Allocate#5274+0xe4>
 800467a:	460f      	mov	r7, r1
 800467c:	4478      	add	r0, pc
 800467e:	4450      	add	r0, sl
 8004680:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
            using(SmartHandles.YieldLockHolder hnd = new SmartHandles.YieldLockHolder( MemoryManager.Lock ))
 8004684:	2c00      	cmp	r4, #0
 8004686:	d002      	beq.n	800468e <LinearMemoryManager::Allocate#5274+0x22>
 8004688:	d05e      	beq.n	8004748 <LinearMemoryManager::Allocate#5274+0xdc>
 800468a:	6926      	ldr	r6, [r4, #16]
 800468c:	e000      	b.n	8004690 <LinearMemoryManager::Allocate#5274+0x24>
 800468e:	2602      	movs	r6, #2
 8004690:	4830      	ldr	r0, [pc, #192]	; (8004754 <LinearMemoryManager::Allocate#5274+0xe8>)
 8004692:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8004758 <LinearMemoryManager::Allocate#5274+0xec>
 8004696:	4621      	mov	r1, r4
 8004698:	4478      	add	r0, pc
 800469a:	4458      	add	r0, fp
 800469c:	f7ff fb32 	bl	8003d04 <YieldLock::Acquire#5617>
            {
                MemorySegment* ptr = m_active;
 80046a0:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80046a4:	b1c0      	cbz	r0, 80046d8 <LinearMemoryManager::Allocate#5274+0x6c>

                if(ptr != null)
                {
                    UIntPtr res = ptr->Allocate( size );
 80046a6:	4639      	mov	r1, r7
 80046a8:	f7ff feb0 	bl	800440c <MemorySegment::Allocate#5209>
 80046ac:	4605      	mov	r5, r0
 80046ae:	482b      	ldr	r0, [pc, #172]	; (800475c <LinearMemoryManager::Allocate#5274+0xf0>)
 80046b0:	4478      	add	r0, pc

                    if(res != UIntPtr.Zero)
 80046b2:	4450      	add	r0, sl
 80046b4:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 80046b8:	4285      	cmp	r5, r0
 80046ba:	d00d      	beq.n	80046d8 <LinearMemoryManager::Allocate#5274+0x6c>
 80046bc:	482b      	ldr	r0, [pc, #172]	; (800476c <LinearMemoryManager::Allocate#5274+0x100>)
 80046be:	4621      	mov	r1, r4
 80046c0:	4478      	add	r0, pc
 80046c2:	4458      	add	r0, fp
 80046c4:	f7ff fb46 	bl	8003d54 <YieldLock::Release#5618>
 80046c8:	2c00      	cmp	r4, #0
 80046ca:	bf1c      	itt	ne
 80046cc:	6920      	ldrne	r0, [r4, #16]
 80046ce:	42b0      	cmpne	r0, r6
 80046d0:	d036      	beq.n	8004740 <LinearMemoryManager::Allocate#5274+0xd4>
 80046d2:	b3cc      	cbz	r4, 8004748 <LinearMemoryManager::Allocate#5274+0xdc>
 80046d4:	6126      	str	r6, [r4, #16]
 80046d6:	e033      	b.n	8004740 <LinearMemoryManager::Allocate#5274+0xd4>
 80046d8:	4822      	ldr	r0, [pc, #136]	; (8004764 <LinearMemoryManager::Allocate#5274+0xf8>)
 80046da:	9600      	str	r6, [sp, #0]
                    {
                        return res;
                    }
                }

                ptr = m_heapHead;
 80046dc:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80046e0:	4478      	add	r0, pc
                while(ptr != null)
                {
                    UIntPtr res = ptr->Allocate( size );

                    if(res != UIntPtr.Zero)
 80046e2:	eb0a 0900 	add.w	r9, sl, r0
 80046e6:	e000      	b.n	80046ea <LinearMemoryManager::Allocate#5274+0x7e>
                        m_active = ptr;

                        return res;
                    }

                    ptr = ptr->Next;
 80046e8:	6836      	ldr	r6, [r6, #0]
 80046ea:	b1c6      	cbz	r6, 800471e <LinearMemoryManager::Allocate#5274+0xb2>
                }

                ptr = m_heapHead;
                while(ptr != null)
                {
                    UIntPtr res = ptr->Allocate( size );
 80046ec:	4630      	mov	r0, r6
 80046ee:	4639      	mov	r1, r7
 80046f0:	f7ff fe8c 	bl	800440c <MemorySegment::Allocate#5209>
 80046f4:	4605      	mov	r5, r0

                    if(res != UIntPtr.Zero)
 80046f6:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
 80046fa:	4285      	cmp	r5, r0
 80046fc:	d0f4      	beq.n	80046e8 <LinearMemoryManager::Allocate#5274+0x7c>
 80046fe:	481a      	ldr	r0, [pc, #104]	; (8004768 <LinearMemoryManager::Allocate#5274+0xfc>)
 8004700:	4621      	mov	r1, r4
 8004702:	f8c8 6010 	str.w	r6, [r8, #16]
 8004706:	4478      	add	r0, pc
 8004708:	4458      	add	r0, fp
 800470a:	f7ff fb23 	bl	8003d54 <YieldLock::Release#5618>
 800470e:	b1bc      	cbz	r4, 8004740 <LinearMemoryManager::Allocate#5274+0xd4>
 8004710:	9900      	ldr	r1, [sp, #0]
 8004712:	6920      	ldr	r0, [r4, #16]
 8004714:	4288      	cmp	r0, r1
 8004716:	d013      	beq.n	8004740 <LinearMemoryManager::Allocate#5274+0xd4>
 8004718:	b1b4      	cbz	r4, 8004748 <LinearMemoryManager::Allocate#5274+0xdc>
 800471a:	6121      	str	r1, [r4, #16]
 800471c:	e010      	b.n	8004740 <LinearMemoryManager::Allocate#5274+0xd4>
 800471e:	4810      	ldr	r0, [pc, #64]	; (8004760 <LinearMemoryManager::Allocate#5274+0xf4>)
 8004720:	4478      	add	r0, pc
                    }

                    ptr = ptr->Next;
                }
                
                return UIntPtr.Zero;
 8004722:	eb0a 0100 	add.w	r1, sl, r0
 8004726:	4458      	add	r0, fp
 8004728:	f8d1 5110 	ldr.w	r5, [r1, #272]	; 0x110
 800472c:	4621      	mov	r1, r4
 800472e:	f7ff fb11 	bl	8003d54 <YieldLock::Release#5618>
 8004732:	b12c      	cbz	r4, 8004740 <LinearMemoryManager::Allocate#5274+0xd4>
 8004734:	9900      	ldr	r1, [sp, #0]
 8004736:	6920      	ldr	r0, [r4, #16]
 8004738:	4288      	cmp	r0, r1
 800473a:	d001      	beq.n	8004740 <LinearMemoryManager::Allocate#5274+0xd4>
 800473c:	b124      	cbz	r4, 8004748 <LinearMemoryManager::Allocate#5274+0xdc>
 800473e:	6121      	str	r1, [r4, #16]
 8004740:	4628      	mov	r0, r5
 8004742:	b001      	add	sp, #4
 8004744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004748:	f7fb fe8e 	bl	8000468 <Thread::ThrowNullException#4411>
 800474c:	17ffc498 	.word	0x17ffc498
 8004750:	fffffcf8 	.word	0xfffffcf8
 8004754:	17ffc47c 	.word	0x17ffc47c
 8004758:	fffffeb0 	.word	0xfffffeb0
 800475c:	17ffc464 	.word	0x17ffc464
 8004760:	17ffc3f4 	.word	0x17ffc3f4
 8004764:	17ffc434 	.word	0x17ffc434
 8004768:	17ffc40e 	.word	0x17ffc40e
 800476c:	17ffc454 	.word	0x17ffc454

08004770 <LinearMemoryManager::Release#5275>:
            }
        }

        public override unsafe void Release(UIntPtr address)
        {
 8004770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004774:	460d      	mov	r5, r1
 8004776:	4923      	ldr	r1, [pc, #140]	; (8004804 <LinearMemoryManager::Release#5275+0x94>)
 8004778:	4606      	mov	r6, r0
            if (address != UIntPtr.Zero)
 800477a:	4823      	ldr	r0, [pc, #140]	; (8004808 <LinearMemoryManager::Release#5275+0x98>)
 800477c:	4479      	add	r1, pc
 800477e:	4401      	add	r1, r0
 8004780:	f8d1 1110 	ldr.w	r1, [r1, #272]	; 0x110
 8004784:	428d      	cmp	r5, r1
 8004786:	bf08      	it	eq
 8004788:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
 800478c:	491f      	ldr	r1, [pc, #124]	; (800480c <LinearMemoryManager::Release#5275+0x9c>)
 800478e:	4479      	add	r1, pc
 8004790:	4408      	add	r0, r1
 8004792:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
            {
                using (SmartHandles.YieldLockHolder hnd = new SmartHandles.YieldLockHolder(MemoryManager.Lock))
 8004796:	2c00      	cmp	r4, #0
 8004798:	d003      	beq.n	80047a2 <LinearMemoryManager::Release#5275+0x32>
 800479a:	d030      	beq.n	80047fe <LinearMemoryManager::Release#5275+0x8e>
 800479c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80047a0:	e001      	b.n	80047a6 <LinearMemoryManager::Release#5275+0x36>
 80047a2:	f04f 0802 	mov.w	r8, #2
 80047a6:	481a      	ldr	r0, [pc, #104]	; (8004810 <LinearMemoryManager::Release#5275+0xa0>)
 80047a8:	4f1a      	ldr	r7, [pc, #104]	; (8004814 <LinearMemoryManager::Release#5275+0xa4>)
 80047aa:	4621      	mov	r1, r4
 80047ac:	4478      	add	r0, pc
 80047ae:	4438      	add	r0, r7
 80047b0:	f7ff faa8 	bl	8003d04 <YieldLock::Acquire#5617>
                {
                    for (MemorySegment* heap = m_heapHead; heap != null; heap = heap->Next)
 80047b4:	68b6      	ldr	r6, [r6, #8]
 80047b6:	e000      	b.n	80047ba <LinearMemoryManager::Release#5275+0x4a>
 80047b8:	6836      	ldr	r6, [r6, #0]
 80047ba:	b186      	cbz	r6, 80047de <LinearMemoryManager::Release#5275+0x6e>
                    {
                        if (AddressMath.IsInRange(address, heap->Beginning, heap->End))
 80047bc:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
 80047c0:	428d      	cmp	r5, r1
 80047c2:	f04f 0100 	mov.w	r1, #0
 80047c6:	bf38      	it	cc
 80047c8:	2101      	movcc	r1, #1
 80047ca:	42a8      	cmp	r0, r5
 80047cc:	bf88      	it	hi
 80047ce:	2100      	movhi	r1, #0
 80047d0:	2900      	cmp	r1, #0
 80047d2:	d0f1      	beq.n	80047b8 <LinearMemoryManager::Release#5275+0x48>
                        {
                            heap->Release(address);
 80047d4:	4630      	mov	r0, r6
 80047d6:	4629      	mov	r1, r5
 80047d8:	f7ff fe40 	bl	800445c <MemorySegment::Release#5213>
 80047dc:	e7ec      	b.n	80047b8 <LinearMemoryManager::Release#5275+0x48>
 80047de:	480e      	ldr	r0, [pc, #56]	; (8004818 <LinearMemoryManager::Release#5275+0xa8>)
 80047e0:	4621      	mov	r1, r4
 80047e2:	4478      	add	r0, pc
 80047e4:	4438      	add	r0, r7
 80047e6:	f7ff fab5 	bl	8003d54 <YieldLock::Release#5618>
 80047ea:	2c00      	cmp	r4, #0
 80047ec:	bf1c      	itt	ne
 80047ee:	6920      	ldrne	r0, [r4, #16]
 80047f0:	4540      	cmpne	r0, r8
 80047f2:	d002      	beq.n	80047fa <LinearMemoryManager::Release#5275+0x8a>
 80047f4:	b11c      	cbz	r4, 80047fe <LinearMemoryManager::Release#5275+0x8e>
 80047f6:	f8c4 8010 	str.w	r8, [r4, #16]
 80047fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047fe:	f7fb fe33 	bl	8000468 <Thread::ThrowNullException#4411>
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	17ffc398 	.word	0x17ffc398
 8004808:	fffffcf8 	.word	0xfffffcf8
 800480c:	17ffc386 	.word	0x17ffc386
 8004810:	17ffc368 	.word	0x17ffc368
 8004814:	fffffeb0 	.word	0xfffffeb0
 8004818:	17ffc332 	.word	0x17ffc332

0800481c <BugCheck::Log#5283>:
        {
            Device.Instance.ProcessBugCheck( code );
        }

        public static void Log(string format)
        {
 800481c:	b580      	push	{r7, lr}
 800481e:	4601      	mov	r1, r0
 8004820:	4803      	ldr	r0, [pc, #12]	; (8004830 <BugCheck::Log#5283+0x14>)
            Device.Instance.ProcessLog(format);
 8004822:	4a04      	ldr	r2, [pc, #16]	; (8004834 <BugCheck::Log#5283+0x18>)
 8004824:	4478      	add	r0, pc
 8004826:	4410      	add	r0, r2
 8004828:	f000 f806 	bl	8004838 <Device::ProcessLog#18573>
 800482c:	bd80      	pop	{r7, pc}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	17ffc2f0 	.word	0x17ffc2f0
 8004834:	e8014a84 	.word	0xe8014a84

08004838 <Device::ProcessLog#18573>:
            RT.TargetPlatform.ARMv7.ProcessorARMv7M.Breakpoint( (uint)code ); 
        }

        public override unsafe void ProcessLog(string format)
        {
            fixed (char* pS = format)
 8004838:	b580      	push	{r7, lr}
 800483a:	2900      	cmp	r1, #0
 800483c:	4608      	mov	r0, r1
 800483e:	bf18      	it	ne
 8004840:	3010      	addne	r0, #16
            {
                uint length = (uint)format.Length;
 8004842:	d003      	beq.n	800484c <Device::ProcessLog#18573+0x14>
 8004844:	68c9      	ldr	r1, [r1, #12]
                RTOS.Utilities.DebugLog0(pS, length);
 8004846:	f004 ffff 	bl	8009848 <DebugLog0>
 800484a:	bd80      	pop	{r7, pc}

        public override unsafe void ProcessLog(string format)
        {
            fixed (char* pS = format)
            {
                uint length = (uint)format.Length;
 800484c:	f7fb fe0c 	bl	8000468 <Thread::ThrowNullException#4411>

08004850 <Device::ProcessLog#18574>:
            }
        }

        public override unsafe void ProcessLog(string format, int p1)
        {
            fixed (char* pS = format)
 8004850:	b580      	push	{r7, lr}
 8004852:	2900      	cmp	r1, #0
 8004854:	4608      	mov	r0, r1
 8004856:	bf18      	it	ne
 8004858:	3010      	addne	r0, #16
            {
                uint length = (uint)format.Length;
 800485a:	d003      	beq.n	8004864 <Device::ProcessLog#18574+0x14>
 800485c:	68c9      	ldr	r1, [r1, #12]
                RTOS.Utilities.DebugLog1(pS, length, p1);
 800485e:	f005 f80d 	bl	800987c <DebugLog1>
 8004862:	bd80      	pop	{r7, pc}

        public override unsafe void ProcessLog(string format, int p1)
        {
            fixed (char* pS = format)
            {
                uint length = (uint)format.Length;
 8004864:	f7fb fe00 	bl	8000468 <Thread::ThrowNullException#4411>

08004868 <Device::ProcessLog#18576>:
            }
        }

        public override unsafe void ProcessLog(string format, int p1, int p2, int p3)
        {
            fixed (char* pS = format)
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	2900      	cmp	r1, #0
 800486e:	4608      	mov	r0, r1
 8004870:	bf18      	it	ne
 8004872:	3010      	addne	r0, #16
            {
                uint length = (uint)format.Length;
 8004874:	d008      	beq.n	8004888 <Device::ProcessLog#18576+0x20>
 8004876:	68c9      	ldr	r1, [r1, #12]
 8004878:	f8dd c010 	ldr.w	ip, [sp, #16]
                RTOS.Utilities.DebugLog3(pS, length, p1, p2, p3);
 800487c:	f8cd c000 	str.w	ip, [sp]
 8004880:	f005 f820 	bl	80098c4 <DebugLog3>
 8004884:	b002      	add	sp, #8
 8004886:	bd80      	pop	{r7, pc}

        public override unsafe void ProcessLog(string format, int p1, int p2, int p3)
        {
            fixed (char* pS = format)
            {
                uint length = (uint)format.Length;
 8004888:	f7fb fdee 	bl	8000468 <Thread::ThrowNullException#4411>

0800488c <Device::ProcessLog#18578>:
            }
        }

        public override unsafe void ProcessLog(string format, int p1, int p2, int p3, int p4, int p5)
        {
            fixed (char* pS = format)
 800488c:	b510      	push	{r4, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	2900      	cmp	r1, #0
 8004892:	4608      	mov	r0, r1
 8004894:	bf18      	it	ne
 8004896:	3010      	addne	r0, #16
            {
                uint length = (uint)format.Length;
 8004898:	b161      	cbz	r1, 80048b4 <Device::ProcessLog#18578+0x28>
 800489a:	e9dd 4e06 	ldrd	r4, lr, [sp, #24]
 800489e:	68c9      	ldr	r1, [r1, #12]
 80048a0:	f8dd c020 	ldr.w	ip, [sp, #32]
                RTOS.Utilities.DebugLog5(pS, length, p1, p2, p3, p4, p5);
 80048a4:	e9cd 4e00 	strd	r4, lr, [sp]
 80048a8:	f8cd c008 	str.w	ip, [sp, #8]
 80048ac:	f005 f832 	bl	8009914 <DebugLog5>
 80048b0:	b004      	add	sp, #16
 80048b2:	bd10      	pop	{r4, pc}

        public override unsafe void ProcessLog(string format, int p1, int p2, int p3, int p4, int p5)
        {
            fixed (char* pS = format)
            {
                uint length = (uint)format.Length;
 80048b4:	f7fb fdd8 	bl	8000468 <Thread::ThrowNullException#4411>

080048b8 <SchedulerTime::op_Explicit#5460>:

        //--//

        public static explicit operator SchedulerTime ( int milliseconds )
        {
            return new SchedulerTime( ConvertFromMillisecondsToUnits( milliseconds ) );
 80048b8:	b580      	push	{r7, lr}
 80048ba:	f000 f801 	bl	80048c0 <SchedulerTime::ConvertFromMillisecondsToUnits#18604>
 80048be:	bd80      	pop	{r7, pc}

080048c0 <SchedulerTime::ConvertFromMillisecondsToUnits#18604>:
        // Helper Methods
        //

        private static ulong ConvertFromMillisecondsToUnits( int milliSeconds )
        {
            if(milliSeconds < 0)
 80048c0:	b510      	push	{r4, lr}
 80048c2:	2800      	cmp	r0, #0
 80048c4:	bfbe      	ittt	lt
 80048c6:	f04f 30ff 	movlt.w	r0, #4294967295
 80048ca:	f04f 31ff 	movlt.w	r1, #4294967295
 80048ce:	bd10      	poplt	{r4, pc}
                // The 1MHz timer.
                //
                //  => 1000000 / 1000 == 1000
                //

                ulong res = (uint)milliSeconds * 1000;
 80048d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80048d4:	fb00 f401 	mul.w	r4, r0, r1
                
                return GetCurrentTime() + res;
 80048d8:	f000 f806 	bl	80048e8 <SchedulerTime::GetCurrentTime#18612>
 80048dc:	1900      	adds	r0, r0, r4
 80048de:	f141 0100 	adc.w	r1, r1, #0
 80048e2:	bd10      	pop	{r4, pc}

080048e4 <SchedulerTime::FromUnits#5490>:
 80048e4:	4770      	bx	lr
 80048e6:	46c0      	nop			; (mov r8, r8)

080048e8 <SchedulerTime::GetCurrentTime#18612>:
        {
            return (long)((double)units * RatioFromUnitsToDateTimeTicks);
        }

        private static ulong GetCurrentTime()
        {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	4803      	ldr	r0, [pc, #12]	; (80048f8 <SchedulerTime::GetCurrentTime#18612+0x10>)
            return Drivers.SystemTimer.Instance.CurrentTime;
 80048ec:	4903      	ldr	r1, [pc, #12]	; (80048fc <SchedulerTime::GetCurrentTime#18612+0x14>)
 80048ee:	4478      	add	r0, pc
 80048f0:	4408      	add	r0, r1
 80048f2:	f000 f805 	bl	8004900 <SystemTimer::get_CurrentTime#18661>
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	17ffc226 	.word	0x17ffc226
 80048fc:	fffffec8 	.word	0xfffffec8

08004900 <SystemTimer::get_CurrentTime#18661>:
        /// Gets the current accumulator time
        /// </summary>
        public ulong CurrentTime
        {
            get
            {
 8004900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004902:	b081      	sub	sp, #4
 8004904:	4604      	mov	r4, r0
 8004906:	2001      	movs	r0, #1
 8004908:	f004 fed2 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
                using (RT.SmartHandles.InterruptState.Disable())
                {
                    // Current time is the accumulator + time since it was updated
                    return m_accumulator + TimeSinceAccumulatorUpdate( this.Counter ); 
 800490c:	e9d4 6703 	ldrd	r6, r7, [r4, #12]
 8004910:	4605      	mov	r5, r0
        public uint Counter
        {
            [RT.Inline]
            get
            {
                return (uint)LLOS.HAL.Timer.LLOS_SYSTEM_TIMER_GetTicks();
 8004912:	f005 f8fb 	bl	8009b0c <LLOS_SYSTEM_TIMER_GetTicks>
 8004916:	4601      	mov	r1, r0
 8004918:	6960      	ldr	r0, [r4, #20]
            get
            {
                using (RT.SmartHandles.InterruptState.Disable())
                {
                    // Current time is the accumulator + time since it was updated
                    return m_accumulator + TimeSinceAccumulatorUpdate( this.Counter ); 
 800491a:	f003 ff11 	bl	8008740 <SystemTimer::TimeSinceAccumulatorUpdate#18670>
 800491e:	4604      	mov	r4, r0
 8004920:	4628      	mov	r0, r5
 8004922:	f004 fec5 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8004926:	1930      	adds	r0, r6, r4
 8004928:	f147 0100 	adc.w	r1, r7, #0
 800492c:	b001      	add	sp, #4
 800492e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004930 <SchedulerTime::.cctor#5506>:
    {
        //
        // State
        //

        public static readonly SchedulerTime MinValue = new SchedulerTime( ulong.MinValue );
 8004930:	4805      	ldr	r0, [pc, #20]	; (8004948 <SchedulerTime::.cctor#5506+0x18>)
 8004932:	4906      	ldr	r1, [pc, #24]	; (800494c <SchedulerTime::.cctor#5506+0x1c>)
        public static readonly SchedulerTime MaxValue = new SchedulerTime( ulong.MaxValue );
 8004934:	f04f 32ff 	mov.w	r2, #4294967295
 8004938:	4478      	add	r0, pc
 800493a:	4408      	add	r0, r1
 800493c:	2100      	movs	r1, #0
 800493e:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
 8004942:	e9c0 1121 	strd	r1, r1, [r0, #132]	; 0x84
 8004946:	4770      	bx	lr
 8004948:	17ffc1dc 	.word	0x17ffc1dc
 800494c:	fffffcf8 	.word	0xfffffcf8

08004950 <MemoryManager::InitializationComplete#5531>:
 8004950:	4770      	bx	lr

08004952 <MemoryManager::ZeroFreeMemory#5532>:
        {
        }

        public virtual void ZeroFreeMemory()
        {
            MemorySegment* ptr = m_heapHead;
 8004952:	b510      	push	{r4, lr}
 8004954:	6884      	ldr	r4, [r0, #8]

            while(ptr != null)
 8004956:	2c00      	cmp	r4, #0
 8004958:	bf08      	it	eq
 800495a:	bd10      	popeq	{r4, pc}
 800495c:	6960      	ldr	r0, [r4, #20]
            {
                ptr->ZeroFreeMemory();
 800495e:	f7ff fd40 	bl	80043e2 <MemorySegment::ZeroFreeMemory#5205>

                ptr = ptr->Next;
 8004962:	6824      	ldr	r4, [r4, #0]
 8004964:	e7f7      	b.n	8004956 <MemoryManager::ZeroFreeMemory#5532+0x4>
 8004966:	46c0      	nop			; (mov r8, r8)

08004968 <AllocateFromManagedHeap>:
        public abstract bool RefersToMemory( UIntPtr address );

        [ExportedMethod]
        public static UIntPtr AllocateFromManagedHeap( uint size )
        {
            size += ObjectHeader.HeaderSize;
 8004968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800496a:	b081      	sub	sp, #4
 800496c:	4f1d      	ldr	r7, [pc, #116]	; (80049e4 <AllocateFromManagedHeap+0x7c>)
 800496e:	f100 0408 	add.w	r4, r0, #8
            if(0 != unalignedBytes)
            {
                size += 4u - unalignedBytes;
            }

            UIntPtr ptr = Instance.Allocate( size );
 8004972:	4d1d      	ldr	r5, [pc, #116]	; (80049e8 <AllocateFromManagedHeap+0x80>)
        [ExportedMethod]
        public static UIntPtr AllocateFromManagedHeap( uint size )
        {
            size += ObjectHeader.HeaderSize;

            uint unalignedBytes = size & 0x3u;
 8004974:	f014 0003 	ands.w	r0, r4, #3
            // Force all heap allocations to be multiples of 4-bytes so that we guarantee 
            // 4-byte alignment for all allocations.
            //
            if(0 != unalignedBytes)
            {
                size += 4u - unalignedBytes;
 8004978:	f1c0 0004 	rsb	r0, r0, #4

            //
            // Force all heap allocations to be multiples of 4-bytes so that we guarantee 
            // 4-byte alignment for all allocations.
            //
            if(0 != unalignedBytes)
 800497c:	bf18      	it	ne
 800497e:	4404      	addne	r4, r0
 8004980:	447f      	add	r7, pc
            {
                size += 4u - unalignedBytes;
            }

            UIntPtr ptr = Instance.Allocate( size );
 8004982:	4621      	mov	r1, r4
 8004984:	19e8      	adds	r0, r5, r7
 8004986:	f7ff fe71 	bl	800466c <LinearMemoryManager::Allocate#5274>

            if( ptr == UIntPtr.Zero )
 800498a:	4e18      	ldr	r6, [pc, #96]	; (80049ec <AllocateFromManagedHeap+0x84>)
 800498c:	19f1      	adds	r1, r6, r7
 800498e:	f8d1 1110 	ldr.w	r1, [r1, #272]	; 0x110
 8004992:	4288      	cmp	r0, r1
 8004994:	d10a      	bne.n	80049ac <AllocateFromManagedHeap+0x44>
 8004996:	4f16      	ldr	r7, [pc, #88]	; (80049f0 <AllocateFromManagedHeap+0x88>)
            {
                GarbageCollectionManager.Instance.Collect();

                ptr = Instance.Allocate( size );
 8004998:	4621      	mov	r1, r4
 800499a:	447f      	add	r7, pc
 800499c:	19e8      	adds	r0, r5, r7
 800499e:	f7ff fe65 	bl	800466c <LinearMemoryManager::Allocate#5274>

                if(ptr == UIntPtr.Zero)
 80049a2:	19f1      	adds	r1, r6, r7
 80049a4:	f8d1 1110 	ldr.w	r1, [r1, #272]	; 0x110
 80049a8:	4288      	cmp	r0, r1
 80049aa:	d00a      	beq.n	80049c2 <AllocateFromManagedHeap+0x5a>
                    throw new OutOfMemoryException( );
                }
            }

            ObjectHeader hdr = ObjectHeader.CastAsObjectHeader(ptr);
            hdr.MultiUseWord |= (int)(ObjectHeader.GarbageCollectorFlags.UnreclaimableObject | ObjectHeader.GarbageCollectorFlags.Marked);
 80049ac:	2800      	cmp	r0, #0
 80049ae:	bf1f      	itttt	ne
 80049b0:	6801      	ldrne	r1, [r0, #0]
 80049b2:	f041 0107 	orrne.w	r1, r1, #7
 80049b6:	6001      	strne	r1, [r0, #0]
 80049b8:	b001      	addne	sp, #4
 80049ba:	bf18      	it	ne
 80049bc:	bdf0      	popne	{r4, r5, r6, r7, pc}
            if(0 != unalignedBytes)
            {
                size += 4u - unalignedBytes;
            }

            UIntPtr ptr = Instance.Allocate( size );
 80049be:	f7fb fd53 	bl	8000468 <Thread::ThrowNullException#4411>
 80049c2:	480c      	ldr	r0, [pc, #48]	; (80049f4 <AllocateFromManagedHeap+0x8c>)

                ptr = Instance.Allocate( size );

                if(ptr == UIntPtr.Zero)
                {
                    throw new OutOfMemoryException( );
 80049c4:	490c      	ldr	r1, [pc, #48]	; (80049f8 <AllocateFromManagedHeap+0x90>)
 80049c6:	4478      	add	r0, pc
 80049c8:	180c      	adds	r4, r1, r0
 80049ca:	490c      	ldr	r1, [pc, #48]	; (80049fc <AllocateFromManagedHeap+0x94>)
 80049cc:	4401      	add	r1, r0
 80049ce:	4620      	mov	r0, r4
 80049d0:	f7fb ff60 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80049d4:	4605      	mov	r5, r0
 80049d6:	f000 f813 	bl	8004a00 <Exception::GetMessageFromNativeResources#7756>
 80049da:	60a8      	str	r0, [r5, #8]
 80049dc:	4620      	mov	r0, r4
 80049de:	4629      	mov	r1, r5
 80049e0:	f7fb ff6e 	bl	80008c0 <TypeSystemManager::Throw#5596>
 80049e4:	17ffc194 	.word	0x17ffc194
 80049e8:	fffffe68 	.word	0xfffffe68
 80049ec:	fffffcf8 	.word	0xfffffcf8
 80049f0:	17ffc17a 	.word	0x17ffc17a
 80049f4:	17ffc14e 	.word	0x17ffc14e
 80049f8:	fffffe0c 	.word	0xfffffe0c
 80049fc:	e8019ad8 	.word	0xe8019ad8

08004a00 <Exception::GetMessageFromNativeResources#7756>:
        // See comment on ExceptionMessageKind
////    [ResourceExposure( ResourceScope.None )]
////    [MethodImpl( MethodImplOptions.InternalCall )]
////    internal static extern String GetMessageFromNativeResources( ExceptionMessageKind kind );
        internal static String GetMessageFromNativeResources( ExceptionMessageKind kind )
        {
 8004a00:	b580      	push	{r7, lr}
 8004a02:	4906      	ldr	r1, [pc, #24]	; (8004a1c <Exception::GetMessageFromNativeResources#7756+0x1c>)
            //
            // BUGBUG: This needs to be implemented as an internal call.
            // 
            return kind.ToString();
 8004a04:	4806      	ldr	r0, [pc, #24]	; (8004a20 <Exception::GetMessageFromNativeResources#7756+0x20>)
 8004a06:	4a07      	ldr	r2, [pc, #28]	; (8004a24 <Exception::GetMessageFromNativeResources#7756+0x24>)
 8004a08:	4479      	add	r1, pc
 8004a0a:	4408      	add	r0, r1
 8004a0c:	4411      	add	r1, r2
 8004a0e:	f7fb ff41 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8004a12:	2103      	movs	r1, #3
 8004a14:	6081      	str	r1, [r0, #8]
 8004a16:	f7fc fafd 	bl	8001014 <Object::ToString#2584>
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	17ffc10c 	.word	0x17ffc10c
 8004a20:	fffffe0c 	.word	0xfffffe0c
 8004a24:	e8019c88 	.word	0xe8019c88

08004a28 <FreeFromManagedHeap>:
            return hdr.Pack().ToPointer();
        }

        [ExportedMethod]
        public static void FreeFromManagedHeap( UIntPtr address )
        {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	4601      	mov	r1, r0
            ObjectHeader hdr = ObjectHeader.Unpack(ObjectImpl.FromPointer(address));
            hdr.MultiUseWord = (int)(ObjectHeader.GarbageCollectorFlags.FreeBlock | ObjectHeader.GarbageCollectorFlags.Unmarked);
 8004a2c:	b141      	cbz	r1, 8004a40 <FreeFromManagedHeap+0x18>
 8004a2e:	2000      	movs	r0, #0

            Instance.Release(hdr.ToPointer());
 8004a30:	4a05      	ldr	r2, [pc, #20]	; (8004a48 <FreeFromManagedHeap+0x20>)
 8004a32:	6008      	str	r0, [r1, #0]
 8004a34:	4803      	ldr	r0, [pc, #12]	; (8004a44 <FreeFromManagedHeap+0x1c>)
 8004a36:	4478      	add	r0, pc
 8004a38:	4410      	add	r0, r2
 8004a3a:	f7ff fe99 	bl	8004770 <LinearMemoryManager::Release#5275>
 8004a3e:	bd80      	pop	{r7, pc}

        [ExportedMethod]
        public static void FreeFromManagedHeap( UIntPtr address )
        {
            ObjectHeader hdr = ObjectHeader.Unpack(ObjectImpl.FromPointer(address));
            hdr.MultiUseWord = (int)(ObjectHeader.GarbageCollectorFlags.FreeBlock | ObjectHeader.GarbageCollectorFlags.Unmarked);
 8004a40:	f7fb fd12 	bl	8000468 <Thread::ThrowNullException#4411>
 8004a44:	17ffc0de 	.word	0x17ffc0de
 8004a48:	fffffe68 	.word	0xfffffe68

08004a4c <ARMv7ThreadManager::InitializeAfterStaticConstructors#5562>:
        // Helper methods
        //

        public override void InitializeAfterStaticConstructors( uint[] systemStack )
        {
            base.InitializeAfterStaticConstructors( systemStack );
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	f7fe faa7 	bl	8002fa0 <ThreadManager::InitializeAfterStaticConstructors#3520>
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <ARMv7ThreadManager::StartThreads#5563>:
            //m_SysTick        .SetupForExceptionHandling( unchecked((uint)TargetPlatform.ARMv7.ProcessorARMv7M.IRQn_Type.SysTick_IRQn   ) );
            //m_interruptThread.SetupForExceptionHandling( unchecked((uint)TargetPlatform.ARMv7.ProcessorARMv7M.IRQn_Type.AnyInterrupt16 ) );
        }

        public override unsafe void StartThreads( )
        {
 8004a54:	b510      	push	{r4, lr}
 8004a56:	4604      	mov	r4, r0
 8004a58:	2006      	movs	r0, #6
 8004a5a:	f004 fe29 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>

            //
            // Let the standard thread manager set up the next thread to run and request the switch to its context
            // It will be a switch to the idle thread (bootstrap thread)
            //
            base.StartThreads( );
 8004a5e:	4620      	mov	r0, r4
 8004a60:	f7fe fb70 	bl	8003144 <ThreadManager::StartThreads#3524>

08004a64 <ARMv7ThreadManager::RemoveThread#5564>:
        public override void RemoveThread( ThreadImpl thread )
        {
            //
            // This should schedule a context switch
            //
            base.RemoveThread( thread ); 
 8004a64:	b580      	push	{r7, lr}
 8004a66:	f7fd ff0b 	bl	8002880 <ThreadManager::RemoveThread#3527>
                
            //
            // If context switch was not already performed, we need to jump else where
            //
            ProcessorARMv7M.RaiseSupervisorCall( ProcessorARMv7M.SVC_Code.SupervisorCall__RetireThread );
 8004a6a:	2013      	movs	r0, #19
 8004a6c:	f7fd ff28 	bl	80028c0 <ProcessorARMv7M::RaiseSupervisorCall#3606>
 8004a70:	2012      	movs	r0, #18
 8004a72:	f7fb fc1b 	bl	80002ac <BugCheck::Raise#5282>

08004a76 <ARMv7ThreadManager::get_InterruptThread#5565>:

        public override ThreadImpl InterruptThread
        {
            get
            {
                return m_interruptThread;
 8004a76:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004a78:	4770      	bx	lr

08004a7a <ARMv7ThreadManager::get_FastInterruptThread#5566>:
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	2011      	movs	r0, #17
 8004a7e:	f7fb fc15 	bl	80002ac <BugCheck::Raise#5282>

08004a82 <TypeSystemManager::InitializeTypeSystemManager#5569>:
        // Helper Methods
        //

        public virtual void InitializeTypeSystemManager()
        {
            InvokeStaticConstructors();
 8004a82:	b580      	push	{r7, lr}
 8004a84:	f7ff f8cd 	bl	8003c22 <TypeSystemManager::InvokeStaticConstructors#5589>
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	46c0      	nop			; (mov r8, r8)

08004a8c <WaitingRecord::.cctor#5644>:
        //
        // Constructor Methods
        //

        static WaitingRecord()
        {
 8004a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a8e:	b081      	sub	sp, #4
 8004a90:	4e11      	ldr	r6, [pc, #68]	; (8004ad8 <WaitingRecord::.cctor#5644+0x4c>)
            s_recycledList = new KernelList< WaitingRecord >();
 8004a92:	4812      	ldr	r0, [pc, #72]	; (8004adc <WaitingRecord::.cctor#5644+0x50>)
 8004a94:	447e      	add	r6, pc
 8004a96:	1984      	adds	r4, r0, r6
 8004a98:	4811      	ldr	r0, [pc, #68]	; (8004ae0 <WaitingRecord::.cctor#5644+0x54>)
 8004a9a:	1981      	adds	r1, r0, r6
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f7fb fef9 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8004aa2:	4605      	mov	r5, r0
 8004aa4:	f7fd fe78 	bl	8002798 <KernelList`1::.ctor#19900>
 8004aa8:	480e      	ldr	r0, [pc, #56]	; (8004ae4 <WaitingRecord::.cctor#5644+0x58>)
 8004aaa:	1987      	adds	r7, r0, r6

            while(s_recycledCount < RecycleLimit)
            {
                WaitingRecord wr = new WaitingRecord();
 8004aac:	480e      	ldr	r0, [pc, #56]	; (8004ae8 <WaitingRecord::.cctor#5644+0x5c>)
 8004aae:	f8c7 5090 	str.w	r5, [r7, #144]	; 0x90
 8004ab2:	1985      	adds	r5, r0, r6

        static WaitingRecord()
        {
            s_recycledList = new KernelList< WaitingRecord >();

            while(s_recycledCount < RecycleLimit)
 8004ab4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004ab8:	281f      	cmp	r0, #31
 8004aba:	bfc4      	itt	gt
 8004abc:	b001      	addgt	sp, #4
 8004abe:	bdf0      	popgt	{r4, r5, r6, r7, pc}
            {
                WaitingRecord wr = new WaitingRecord();
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	f7fb fee6 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8004ac8:	4606      	mov	r6, r0
 8004aca:	f000 fb61 	bl	8005190 <WaitingRecord::.ctor#5645>

                wr.Recycle();
 8004ace:	4630      	mov	r0, r6
 8004ad0:	f000 fb7a 	bl	80051c8 <WaitingRecord::Recycle#5649>
 8004ad4:	e7ee      	b.n	8004ab4 <WaitingRecord::.cctor#5644+0x28>
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	17ffc080 	.word	0x17ffc080
 8004adc:	fffffe0c 	.word	0xfffffe0c
 8004ae0:	e80198c8 	.word	0xe80198c8
 8004ae4:	fffffcf8 	.word	0xfffffcf8
 8004ae8:	e8019b98 	.word	0xe8019b98

08004aec <Number::.cctor#8000>:
        private const int SCALE_NAN = unchecked( (int)0x80000000 );
        private const int SCALE_INF = 0x7FFFFFFF;

        private static String[] posPercentFormats = {
            "# %", "#%", "%#"
        };
 8004aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aee:	b081      	sub	sp, #4
 8004af0:	4e21      	ldr	r6, [pc, #132]	; (8004b78 <Number::.cctor#8000+0x8c>)
        private const int DOUBLE_PRECISION = 15;
        private const int MIN_BUFFER_SIZE = 105;
        private const int SCALE_NAN = unchecked( (int)0x80000000 );
        private const int SCALE_INF = 0x7FFFFFFF;

        private static String[] posPercentFormats = {
 8004af2:	4822      	ldr	r0, [pc, #136]	; (8004b7c <Number::.cctor#8000+0x90>)
 8004af4:	2203      	movs	r2, #3
 8004af6:	447e      	add	r6, pc
 8004af8:	1984      	adds	r4, r0, r6
 8004afa:	4821      	ldr	r0, [pc, #132]	; (8004b80 <Number::.cctor#8000+0x94>)
 8004afc:	1985      	adds	r5, r0, r6
 8004afe:	4620      	mov	r0, r4
 8004b00:	4629      	mov	r1, r5
 8004b02:	f7fc ff87 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 8004b06:	491f      	ldr	r1, [pc, #124]	; (8004b84 <Number::.cctor#8000+0x98>)
 8004b08:	2203      	movs	r2, #3
 8004b0a:	4431      	add	r1, r6
 8004b0c:	60c1      	str	r1, [r0, #12]
 8004b0e:	491e      	ldr	r1, [pc, #120]	; (8004b88 <Number::.cctor#8000+0x9c>)
 8004b10:	4431      	add	r1, r6
 8004b12:	6101      	str	r1, [r0, #16]
 8004b14:	491d      	ldr	r1, [pc, #116]	; (8004b8c <Number::.cctor#8000+0xa0>)
 8004b16:	4431      	add	r1, r6
 8004b18:	6141      	str	r1, [r0, #20]
 8004b1a:	491d      	ldr	r1, [pc, #116]	; (8004b90 <Number::.cctor#8000+0xa4>)
 8004b1c:	198f      	adds	r7, r1, r6
            "# %", "#%", "%#"
        };

        // BUGBUG yslin: have to verify on the negative Percent
        // format for real format.
        private static String[] negPercentFormats = {
 8004b1e:	4629      	mov	r1, r5
 8004b20:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 8004b24:	4620      	mov	r0, r4
 8004b26:	f7fc ff75 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 8004b2a:	491a      	ldr	r1, [pc, #104]	; (8004b94 <Number::.cctor#8000+0xa8>)
            "-# %", "-#%", "-%#"
        };
        private static String[] negNumberFormats = {
 8004b2c:	2205      	movs	r2, #5
 8004b2e:	4431      	add	r1, r6
 8004b30:	60c1      	str	r1, [r0, #12]
 8004b32:	4919      	ldr	r1, [pc, #100]	; (8004b98 <Number::.cctor#8000+0xac>)
 8004b34:	4431      	add	r1, r6
 8004b36:	6101      	str	r1, [r0, #16]
 8004b38:	4918      	ldr	r1, [pc, #96]	; (8004b9c <Number::.cctor#8000+0xb0>)
 8004b3a:	4431      	add	r1, r6
 8004b3c:	6141      	str	r1, [r0, #20]
 8004b3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b42:	4620      	mov	r0, r4
 8004b44:	4629      	mov	r1, r5
 8004b46:	f7fc ff65 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 8004b4a:	4915      	ldr	r1, [pc, #84]	; (8004ba0 <Number::.cctor#8000+0xb4>)
 8004b4c:	4431      	add	r1, r6
 8004b4e:	60c1      	str	r1, [r0, #12]
 8004b50:	4914      	ldr	r1, [pc, #80]	; (8004ba4 <Number::.cctor#8000+0xb8>)
 8004b52:	4431      	add	r1, r6
 8004b54:	6101      	str	r1, [r0, #16]
 8004b56:	4914      	ldr	r1, [pc, #80]	; (8004ba8 <Number::.cctor#8000+0xbc>)
 8004b58:	4431      	add	r1, r6
 8004b5a:	6141      	str	r1, [r0, #20]
 8004b5c:	4913      	ldr	r1, [pc, #76]	; (8004bac <Number::.cctor#8000+0xc0>)
 8004b5e:	4431      	add	r1, r6
 8004b60:	6181      	str	r1, [r0, #24]
 8004b62:	4913      	ldr	r1, [pc, #76]	; (8004bb0 <Number::.cctor#8000+0xc4>)
 8004b64:	4431      	add	r1, r6
 8004b66:	61c1      	str	r1, [r0, #28]
 8004b68:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8004b6c:	4811      	ldr	r0, [pc, #68]	; (8004bb4 <Number::.cctor#8000+0xc8>)
 8004b6e:	4430      	add	r0, r6
 8004b70:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8004b74:	b001      	add	sp, #4
 8004b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b78:	17ffc01e 	.word	0x17ffc01e
 8004b7c:	fffffe0c 	.word	0xfffffe0c
 8004b80:	e8019d48 	.word	0xe8019d48
 8004b84:	e80118e8 	.word	0xe80118e8
 8004b88:	e8011908 	.word	0xe8011908
 8004b8c:	e8011928 	.word	0xe8011928
 8004b90:	fffffcf8 	.word	0xfffffcf8
 8004b94:	e8011948 	.word	0xe8011948
 8004b98:	e8011968 	.word	0xe8011968
 8004b9c:	e8011988 	.word	0xe8011988
 8004ba0:	e80119a8 	.word	0xe80119a8
 8004ba4:	e80119c8 	.word	0xe80119c8
 8004ba8:	e80119e8 	.word	0xe80119e8
 8004bac:	e8011a08 	.word	0xe8011a08
 8004bb0:	e8011a28 	.word	0xe8011a28
 8004bb4:	e8011a48 	.word	0xe8011a48

08004bb8 <CultureInfo::.cctor#10302>:
        //
        // All of the following will be created on demand.
        //
    
        //The Invariant culture;
        private static CultureInfo  m_InvariantCultureInfo = null;
 8004bb8:	b5b0      	push	{r4, r5, r7, lr}
 8004bba:	4909      	ldr	r1, [pc, #36]	; (8004be0 <CultureInfo::.cctor#10302+0x28>)
 8004bbc:	4809      	ldr	r0, [pc, #36]	; (8004be4 <CultureInfo::.cctor#10302+0x2c>)
        //
        static unsafe CultureInfo()
        {
            if(m_InvariantCultureInfo == null)
            {
                CultureInfo temp = new CultureInfo( LOCALE_INVARIANT, false );
 8004bbe:	4a0b      	ldr	r2, [pc, #44]	; (8004bec <CultureInfo::.cctor#10302+0x34>)
 8004bc0:	4479      	add	r1, pc
 8004bc2:	1845      	adds	r5, r0, r1
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	f8c5 00f4 	str.w	r0, [r5, #244]	; 0xf4
 8004bca:	4807      	ldr	r0, [pc, #28]	; (8004be8 <CultureInfo::.cctor#10302+0x30>)
 8004bcc:	4408      	add	r0, r1
 8004bce:	4411      	add	r1, r2
 8004bd0:	f7fb fe60 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	f002 fc8d 	bl	80074f4 <CultureInfo::.ctor#10306>
 8004bda:	f8c5 40f4 	str.w	r4, [r5, #244]	; 0xf4
 8004bde:	bdb0      	pop	{r4, r5, r7, pc}
 8004be0:	17ffbf54 	.word	0x17ffbf54
 8004be4:	fffffcf8 	.word	0xfffffcf8
 8004be8:	fffffe0c 	.word	0xfffffe0c
 8004bec:	e8019e98 	.word	0xe8019e98

08004bf0 <Processor::.cctor#18550>:
 8004bf0:	4804      	ldr	r0, [pc, #16]	; (8004c04 <Processor::.cctor#18550+0x14>)
 8004bf2:	4905      	ldr	r1, [pc, #20]	; (8004c08 <Processor::.cctor#18550+0x18>)
 8004bf4:	4478      	add	r0, pc
 8004bf6:	4408      	add	r0, r1
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
 8004bfe:	64c1      	str	r1, [r0, #76]	; 0x4c
 8004c00:	4770      	bx	lr
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	17ffbf20 	.word	0x17ffbf20
 8004c08:	fffffcf8 	.word	0xfffffcf8

08004c0c <LwipMailbox::.cctor#19077>:
    using Microsoft.Zelig.Runtime;
    using Microsoft.Zelig.Runtime.TypeSystem;

    internal class LwipMailbox : IDisposable
    {
        private static ArrayList s_mailboxes = new ArrayList();
 8004c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c0e:	b081      	sub	sp, #4
 8004c10:	4e0b      	ldr	r6, [pc, #44]	; (8004c40 <LwipMailbox::.cctor#19077+0x34>)
 8004c12:	480c      	ldr	r0, [pc, #48]	; (8004c44 <LwipMailbox::.cctor#19077+0x38>)
 8004c14:	447e      	add	r6, pc
 8004c16:	1984      	adds	r4, r0, r6
 8004c18:	480b      	ldr	r0, [pc, #44]	; (8004c48 <LwipMailbox::.cctor#19077+0x3c>)
 8004c1a:	1981      	adds	r1, r0, r6
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	f7fb fe39 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8004c22:	4605      	mov	r5, r0
 8004c24:	f002 fd32 	bl	800768c <ArrayList::.ctor#10890>
 8004c28:	4808      	ldr	r0, [pc, #32]	; (8004c4c <LwipMailbox::.cctor#19077+0x40>)
 8004c2a:	1987      	adds	r7, r0, r6
        private static object s_sync = new object();
 8004c2c:	4808      	ldr	r0, [pc, #32]	; (8004c50 <LwipMailbox::.cctor#19077+0x44>)
 8004c2e:	65bd      	str	r5, [r7, #88]	; 0x58
 8004c30:	1981      	adds	r1, r0, r6
 8004c32:	4620      	mov	r0, r4
 8004c34:	f7fb fe2e 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8004c38:	65f8      	str	r0, [r7, #92]	; 0x5c
 8004c3a:	b001      	add	sp, #4
 8004c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	17ffbf00 	.word	0x17ffbf00
 8004c44:	fffffe0c 	.word	0xfffffe0c
 8004c48:	e801a2b8 	.word	0xe801a2b8
 8004c4c:	fffffcf8 	.word	0xfffffcf8
 8004c50:	e801a2e8 	.word	0xe801a2e8

08004c54 <LwipMutex::.cctor#19088>:
    using System.Threading;
    using Microsoft.Zelig.Runtime.TypeSystem;

    internal class LwipMutex : IDisposable
    {
        private static ArrayList s_mutexes = new ArrayList();
 8004c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c56:	b081      	sub	sp, #4
 8004c58:	4e0b      	ldr	r6, [pc, #44]	; (8004c88 <LwipMutex::.cctor#19088+0x34>)
 8004c5a:	480c      	ldr	r0, [pc, #48]	; (8004c8c <LwipMutex::.cctor#19088+0x38>)
 8004c5c:	447e      	add	r6, pc
 8004c5e:	1984      	adds	r4, r0, r6
 8004c60:	480b      	ldr	r0, [pc, #44]	; (8004c90 <LwipMutex::.cctor#19088+0x3c>)
 8004c62:	1981      	adds	r1, r0, r6
 8004c64:	4620      	mov	r0, r4
 8004c66:	f7fb fe15 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8004c6a:	4605      	mov	r5, r0
 8004c6c:	f002 fd0e 	bl	800768c <ArrayList::.ctor#10890>
 8004c70:	4808      	ldr	r0, [pc, #32]	; (8004c94 <LwipMutex::.cctor#19088+0x40>)
 8004c72:	1987      	adds	r7, r0, r6
        private static object s_sync = new object();
 8004c74:	4808      	ldr	r0, [pc, #32]	; (8004c98 <LwipMutex::.cctor#19088+0x44>)
 8004c76:	663d      	str	r5, [r7, #96]	; 0x60
 8004c78:	1981      	adds	r1, r0, r6
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f7fb fe0a 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8004c80:	6678      	str	r0, [r7, #100]	; 0x64
 8004c82:	b001      	add	sp, #4
 8004c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	17ffbeb8 	.word	0x17ffbeb8
 8004c8c:	fffffe0c 	.word	0xfffffe0c
 8004c90:	e801a2b8 	.word	0xe801a2b8
 8004c94:	fffffcf8 	.word	0xfffffcf8
 8004c98:	e801a2e8 	.word	0xe801a2e8

08004c9c <LwipSemaphore::.cctor#19102>:
    using Microsoft.Zelig.Runtime.TypeSystem;
    using LLOS = Microsoft.Zelig.LlilumOSAbstraction;

    internal class LwipSemaphore : IDisposable
    {
        private static ArrayList s_semaphores = new ArrayList();
 8004c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9e:	b081      	sub	sp, #4
 8004ca0:	4e0b      	ldr	r6, [pc, #44]	; (8004cd0 <LwipSemaphore::.cctor#19102+0x34>)
 8004ca2:	480c      	ldr	r0, [pc, #48]	; (8004cd4 <LwipSemaphore::.cctor#19102+0x38>)
 8004ca4:	447e      	add	r6, pc
 8004ca6:	1984      	adds	r4, r0, r6
 8004ca8:	480b      	ldr	r0, [pc, #44]	; (8004cd8 <LwipSemaphore::.cctor#19102+0x3c>)
 8004caa:	1981      	adds	r1, r0, r6
 8004cac:	4620      	mov	r0, r4
 8004cae:	f7fb fdf1 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8004cb2:	4605      	mov	r5, r0
 8004cb4:	f002 fcea 	bl	800768c <ArrayList::.ctor#10890>
 8004cb8:	4808      	ldr	r0, [pc, #32]	; (8004cdc <LwipSemaphore::.cctor#19102+0x40>)
 8004cba:	1987      	adds	r7, r0, r6
        private static object s_sync = new object();
 8004cbc:	4808      	ldr	r0, [pc, #32]	; (8004ce0 <LwipSemaphore::.cctor#19102+0x44>)
 8004cbe:	66bd      	str	r5, [r7, #104]	; 0x68
 8004cc0:	1981      	adds	r1, r0, r6
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f7fb fde6 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8004cc8:	66f8      	str	r0, [r7, #108]	; 0x6c
 8004cca:	b001      	add	sp, #4
 8004ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	17ffbe70 	.word	0x17ffbe70
 8004cd4:	fffffe0c 	.word	0xfffffe0c
 8004cd8:	e801a2b8 	.word	0xe801a2b8
 8004cdc:	fffffcf8 	.word	0xfffffcf8
 8004ce0:	e801a2e8 	.word	0xe801a2e8

08004ce4 <Sys_Arch::.cctor#19065>:
    using Microsoft.Zelig.Runtime;
    using LLOS = Microsoft.Zelig.LlilumOSAbstraction;

    public static class Sys_Arch
    {
        static List<Thread> threads = new List<Thread>();
 8004ce4:	b5b0      	push	{r4, r5, r7, lr}
 8004ce6:	4d07      	ldr	r5, [pc, #28]	; (8004d04 <Sys_Arch::.cctor#19065+0x20>)
 8004ce8:	4807      	ldr	r0, [pc, #28]	; (8004d08 <Sys_Arch::.cctor#19065+0x24>)
 8004cea:	4908      	ldr	r1, [pc, #32]	; (8004d0c <Sys_Arch::.cctor#19065+0x28>)
 8004cec:	447d      	add	r5, pc
 8004cee:	4428      	add	r0, r5
 8004cf0:	4429      	add	r1, r5
 8004cf2:	f7fb fdcf 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	f004 fa78 	bl	80091ec <List`1::.ctor#25792>
 8004cfc:	4804      	ldr	r0, [pc, #16]	; (8004d10 <Sys_Arch::.cctor#19065+0x2c>)
 8004cfe:	4428      	add	r0, r5
 8004d00:	6704      	str	r4, [r0, #112]	; 0x70
 8004d02:	bdb0      	pop	{r4, r5, r7, pc}
 8004d04:	17ffbe28 	.word	0x17ffbe28
 8004d08:	fffffe0c 	.word	0xfffffe0c
 8004d0c:	e801a228 	.word	0xe801a228
 8004d10:	fffffcf8 	.word	0xfffffcf8

08004d14 <TypeSystemManager::CastToInterface#5594>:

        [TS.WellKnownMethod("TypeSystemManager_CastToInterface")]
        public static object CastToInterface(object obj,
                                              TS.VTable expected)
        {
            if (obj != null)
 8004d14:	b510      	push	{r4, lr}
 8004d16:	b198      	cbz	r0, 8004d40 <TypeSystemManager::CastToInterface#5594+0x2c>
            {
                obj = CastToInterfaceNoThrow(obj, expected);
 8004d18:	f000 f81a 	bl	8004d50 <TypeSystemManager::CastToInterfaceNoThrow#5595>
                if (obj == null)
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	bf18      	it	ne
 8004d20:	bd10      	popne	{r4, pc}
 8004d22:	4808      	ldr	r0, [pc, #32]	; (8004d44 <TypeSystemManager::CastToInterface#5594+0x30>)
                {
                    throw new InvalidCastException();
 8004d24:	4908      	ldr	r1, [pc, #32]	; (8004d48 <TypeSystemManager::CastToInterface#5594+0x34>)
 8004d26:	4478      	add	r0, pc
 8004d28:	180c      	adds	r4, r1, r0
 8004d2a:	4908      	ldr	r1, [pc, #32]	; (8004d4c <TypeSystemManager::CastToInterface#5594+0x38>)
 8004d2c:	4401      	add	r1, r0
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f7fb fdb0 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8004d34:	4601      	mov	r1, r0
 8004d36:	2000      	movs	r0, #0
 8004d38:	6088      	str	r0, [r1, #8]
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f7fb fdc0 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8004d40:	2000      	movs	r0, #0
 8004d42:	bd10      	pop	{r4, pc}
 8004d44:	17ffbdee 	.word	0x17ffbdee
 8004d48:	fffffe0c 	.word	0xfffffe0c
 8004d4c:	e8019b08 	.word	0xe8019b08

08004d50 <TypeSystemManager::CastToInterfaceNoThrow#5595>:
        }

        [TS.WellKnownMethod("TypeSystemManager_CastToInterfaceNoThrow")]
        public static object CastToInterfaceNoThrow(object obj,
                                                     TS.VTable expected)
        {
 8004d50:	b510      	push	{r4, lr}
 8004d52:	4604      	mov	r4, r0
            if (obj != null)
 8004d54:	2c00      	cmp	r4, #0
 8004d56:	bf02      	ittt	eq
 8004d58:	2400      	moveq	r4, #0
 8004d5a:	4620      	moveq	r0, r4
 8004d5c:	bd10      	popeq	{r4, pc}
 8004d5e:	bf1c      	itt	ne
 8004d60:	6860      	ldrne	r0, [r4, #4]
            {
                TS.VTable got = TS.VTable.Get(obj);

                if (got.ImplementsInterface(expected))
 8004d62:	2800      	cmpne	r0, #0
 8004d64:	d00c      	beq.n	8004d80 <TypeSystemManager::CastToInterfaceNoThrow#5595+0x30>
 8004d66:	4907      	ldr	r1, [pc, #28]	; (8004d84 <TypeSystemManager::CastToInterfaceNoThrow#5595+0x34>)
 8004d68:	4a07      	ldr	r2, [pc, #28]	; (8004d88 <TypeSystemManager::CastToInterfaceNoThrow#5595+0x38>)
 8004d6a:	6a00      	ldr	r0, [r0, #32]
 8004d6c:	4479      	add	r1, pc
 8004d6e:	4411      	add	r1, r2
 8004d70:	f7fe fe56 	bl	8003a20 <VTable::ImplementsInterface#4056>
 8004d74:	b2c0      	uxtb	r0, r0
                {
                    return obj;
 8004d76:	2800      	cmp	r0, #0
 8004d78:	bf08      	it	eq
 8004d7a:	4604      	moveq	r4, r0
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	bd10      	pop	{r4, pc}
 8004d80:	f7fb fb72 	bl	8000468 <Thread::ThrowNullException#4411>
 8004d84:	17ffbda8 	.word	0x17ffbda8
 8004d88:	e8019e08 	.word	0xe8019e08

08004d8c <TypeSystemManager::DeliverException#5599>:
        }

        //--//

        private void DeliverException(Exception obj)
        {
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	4605      	mov	r5, r0
 8004d90:	4818      	ldr	r0, [pc, #96]	; (8004df4 <TypeSystemManager::DeliverException#5599+0x68>)
 8004d92:	4919      	ldr	r1, [pc, #100]	; (8004df8 <TypeSystemManager::DeliverException#5599+0x6c>)
 8004d94:	4478      	add	r0, pc
 8004d96:	4408      	add	r0, r1
 8004d98:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004d9a:	b1b0      	cbz	r0, 8004dca <TypeSystemManager::DeliverException#5599+0x3e>
 8004d9c:	6a04      	ldr	r4, [r0, #32]
 8004d9e:	60c5      	str	r5, [r0, #12]
 8004da0:	b19c      	cbz	r4, 8004dca <TypeSystemManager::DeliverException#5599+0x3e>
            ThreadImpl thread     = ThreadManager.Instance.CurrentThread;
            Processor.Context ctx = thread.ThrowContext;

            thread.CurrentException = obj;

            ctx.Populate();
 8004da2:	4620      	mov	r0, r4
 8004da4:	f7fd fc40 	bl	8002628 <Context::Populate#6381>
 8004da8:	f7fd fb1c 	bl	80023e4 <UIntPtr::op_Explicit#3229>
 8004dac:	1f06      	subs	r6, r0, #4
            {
                //
                // The PC points to the instruction AFTER the call, but the ExceptionMap could not cover it.
                //
                UIntPtr pc = AddressMath.Decrement(ctx.ProgramCounter, sizeof(uint));
                TS.CodeMap cm = TS.CodeMap.ResolveAddressToCodeMap(pc);
 8004dae:	4630      	mov	r0, r6
 8004db0:	f000 f824 	bl	8004dfc <CodeMap::ResolveAddressToCodeMap#15086>

                if (cm != null && cm.ExceptionMap != null)
 8004db4:	2800      	cmp	r0, #0
 8004db6:	bf1c      	itt	ne
 8004db8:	6881      	ldrne	r1, [r0, #8]
 8004dba:	2900      	cmpne	r1, #0
 8004dbc:	d013      	beq.n	8004de6 <TypeSystemManager::DeliverException#5599+0x5a>
                {
                    TS.CodePointer cp = cm.ExceptionMap.ResolveAddressToHandler(pc, TS.VTable.Get(obj));
 8004dbe:	2d00      	cmp	r5, #0
 8004dc0:	d003      	beq.n	8004dca <TypeSystemManager::DeliverException#5599+0x3e>
 8004dc2:	bf1c      	itt	ne
 8004dc4:	6880      	ldrne	r0, [r0, #8]
 8004dc6:	2800      	cmpne	r0, #0
 8004dc8:	d101      	bne.n	8004dce <TypeSystemManager::DeliverException#5599+0x42>
        private void DeliverException(Exception obj)
        {
            //
            // TODO: LT72: Only RT.ThreadManager can implement this method correctly
            //
            ThreadImpl thread     = ThreadManager.Instance.CurrentThread;
 8004dca:	f7fb fb4d 	bl	8000468 <Thread::ThrowNullException#4411>
 8004dce:	686a      	ldr	r2, [r5, #4]
 8004dd0:	6880      	ldr	r0, [r0, #8]
                UIntPtr pc = AddressMath.Decrement(ctx.ProgramCounter, sizeof(uint));
                TS.CodeMap cm = TS.CodeMap.ResolveAddressToCodeMap(pc);

                if (cm != null && cm.ExceptionMap != null)
                {
                    TS.CodePointer cp = cm.ExceptionMap.ResolveAddressToHandler(pc, TS.VTable.Get(obj));
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	f000 f820 	bl	8004e18 <ExceptionMap::ResolveAddressToHandler#15225>
 8004dd8:	b128      	cbz	r0, 8004de6 <TypeSystemManager::DeliverException#5599+0x5a>
 8004dda:	2011      	movs	r0, #17
 8004ddc:	f7fd fd70 	bl	80028c0 <ProcessorARMv7M::RaiseSupervisorCall#3606>
 8004de0:	200e      	movs	r0, #14
 8004de2:	f7fb fa63 	bl	80002ac <BugCheck::Raise#5282>
                        ctx.ProgramCounter = new UIntPtr((uint)cp.Target.ToInt32());
                        ctx.SwitchTo();
                    }
                }

                if (ctx.Unwind() == false)
 8004de6:	4620      	mov	r0, r4
 8004de8:	f7fd fc84 	bl	80026f4 <Context::Unwind#6385>
                {
                    break;
                }
            }

            BugCheck.Raise(BugCheck.StopCode.UnwindFailure);
 8004dec:	2002      	movs	r0, #2
 8004dee:	f7fb fa5d 	bl	80002ac <BugCheck::Raise#5282>
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	17ffbd80 	.word	0x17ffbd80
 8004df8:	fffffe18 	.word	0xfffffe18

08004dfc <CodeMap::ResolveAddressToCodeMap#15086>:
            return -1;
        }

        [NoInline]
        public static CodeMap ResolveAddressToCodeMap( UIntPtr address )
        {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	4904      	ldr	r1, [pc, #16]	; (8004e10 <CodeMap::ResolveAddressToCodeMap#15086+0x14>)
            return ResolveAddressToCodeMap( address, CodeMap.LookupAddress );
 8004e00:	4a04      	ldr	r2, [pc, #16]	; (8004e14 <CodeMap::ResolveAddressToCodeMap#15086+0x18>)
 8004e02:	4479      	add	r1, pc
 8004e04:	4411      	add	r1, r2
 8004e06:	f8d1 10dc 	ldr.w	r1, [r1, #220]	; 0xdc
 8004e0a:	f002 fe46 	bl	8007a9a <CodeMap::ResolveAddressToCodeMap#15087>
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	17ffbd12 	.word	0x17ffbd12
 8004e14:	fffffcf8 	.word	0xfffffcf8

08004e18 <ExceptionMap::ResolveAddressToHandler#15225>:
        }

        [NoInline]
        public CodePointer ResolveAddressToHandler( UIntPtr address   ,
                                                    VTable  exception )
        {
 8004e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e1c:	4606      	mov	r6, r0
 8004e1e:	4690      	mov	r8, r2
 8004e20:	460d      	mov	r5, r1
 8004e22:	b1d6      	cbz	r6, 8004e5a <ExceptionMap::ResolveAddressToHandler#15225+0x42>
 8004e24:	f106 000c 	add.w	r0, r6, #12
 8004e28:	f04f 37ff 	mov.w	r7, #4294967295
 8004e2c:	e00c      	b.n	8004e48 <ExceptionMap::ResolveAddressToHandler#15225+0x30>

            if(ranges != null)
            {
                for(int i = 0; i < ranges.Length; i++)
                {
                    CodePointer res = ranges[i].Match( address, exception );
 8004e2e:	4629      	mov	r1, r5
 8004e30:	4642      	mov	r2, r8
 8004e32:	f100 040c 	add.w	r4, r0, #12
 8004e36:	f002 fe4f 	bl	8007ad8 <Range::Match#16491>
 8004e3a:	4601      	mov	r1, r0
 8004e3c:	4620      	mov	r0, r4

                    if(res.IsValid)
 8004e3e:	2900      	cmp	r1, #0
 8004e40:	bf1c      	itt	ne
 8004e42:	4608      	movne	r0, r1
 8004e44:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e48:	68b1      	ldr	r1, [r6, #8]
        {
            Range[] ranges = this.Ranges;

            if(ranges != null)
            {
                for(int i = 0; i < ranges.Length; i++)
 8004e4a:	3701      	adds	r7, #1
 8004e4c:	428f      	cmp	r7, r1
 8004e4e:	da04      	bge.n	8004e5a <ExceptionMap::ResolveAddressToHandler#15225+0x42>
                {
                    CodePointer res = ranges[i].Match( address, exception );
 8004e50:	68b1      	ldr	r1, [r6, #8]
 8004e52:	428f      	cmp	r7, r1
 8004e54:	d3eb      	bcc.n	8004e2e <ExceptionMap::ResolveAddressToHandler#15225+0x16>
 8004e56:	f7fc f82b 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	4608      	mov	r0, r1
 8004e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e62:	46c0      	nop			; (mov r8, r8)

08004e64 <Activator::CreateInstance#43007>:
////
////        return rt.CreateInstanceImpl( !nonPublic, false, false );
////    }
    
        static public T CreateInstance<T>()
        {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	4904      	ldr	r1, [pc, #16]	; (8004e78 <Activator::CreateInstance#43007+0x14>)
            return (T)CreateInstanceInner( typeof(T) );
 8004e68:	4804      	ldr	r0, [pc, #16]	; (8004e7c <Activator::CreateInstance#43007+0x18>)
 8004e6a:	4a05      	ldr	r2, [pc, #20]	; (8004e80 <Activator::CreateInstance#43007+0x1c>)
 8004e6c:	4479      	add	r1, pc
 8004e6e:	4408      	add	r0, r1
 8004e70:	4411      	add	r1, r2
 8004e72:	f7fb fd0f 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	17ffbca8 	.word	0x17ffbca8
 8004e7c:	fffffe0c 	.word	0xfffffe0c
 8004e80:	e8019c28 	.word	0xe8019c28

08004e84 <Activator::CreateInstance#43010>:
////
////        return rt.CreateInstanceImpl( !nonPublic, false, false );
////    }
    
        static public T CreateInstance<T>()
        {
 8004e84:	b510      	push	{r4, lr}
 8004e86:	4906      	ldr	r1, [pc, #24]	; (8004ea0 <Activator::CreateInstance#43010+0x1c>)
            return (T)CreateInstanceInner( typeof(T) );
 8004e88:	4806      	ldr	r0, [pc, #24]	; (8004ea4 <Activator::CreateInstance#43010+0x20>)
 8004e8a:	4a07      	ldr	r2, [pc, #28]	; (8004ea8 <Activator::CreateInstance#43010+0x24>)
 8004e8c:	4479      	add	r1, pc
 8004e8e:	4408      	add	r0, r1
 8004e90:	4411      	add	r1, r2
 8004e92:	f7fb fcff 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8004e96:	4604      	mov	r4, r0
 8004e98:	f000 f848 	bl	8004f2c <WaitableObject::.ctor#5627>
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	bd10      	pop	{r4, pc}
 8004ea0:	17ffbc88 	.word	0x17ffbc88
 8004ea4:	fffffe0c 	.word	0xfffffe0c
 8004ea8:	e8019c58 	.word	0xe8019c58

08004eac <DefaultTypeSystemManager::ComputeObjectSize#5610>:

        public static uint ComputeObjectSize( TS.VTable vTable )
        {
            uint size = (uint)System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader) );

            size += vTable.BaseSize;
 8004eac:	b580      	push	{r7, lr}
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	bf1f      	itttt	ne
 8004eb2:	6880      	ldrne	r0, [r0, #8]

            //
            // Align to word boundary.
            //
            size = (size + (sizeof(uint)-1)) & ~(uint)(sizeof(uint)-1);
 8004eb4:	300b      	addne	r0, #11
 8004eb6:	f020 0003 	bicne.w	r0, r0, #3
 8004eba:	bd80      	popne	{r7, pc}

        public static uint ComputeObjectSize( TS.VTable vTable )
        {
            uint size = (uint)System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader) );

            size += vTable.BaseSize;
 8004ebc:	f7fb fad4 	bl	8000468 <Thread::ThrowNullException#4411>

08004ec0 <DefaultTypeSystemManager::AllocateInner#5612>:
        //--//

        [TS.WellKnownMethod("DebugGC_DefaultTypeSystemManager_AllocateInner")]
        private UIntPtr AllocateInner( TS.VTable vTable ,
                                       uint      size   )
        {
 8004ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ec2:	b081      	sub	sp, #4
 8004ec4:	4f0e      	ldr	r7, [pc, #56]	; (8004f00 <DefaultTypeSystemManager::AllocateInner#5612+0x40>)
            UIntPtr ptr = MemoryManager.Instance.Allocate( size );
 8004ec6:	4d0f      	ldr	r5, [pc, #60]	; (8004f04 <DefaultTypeSystemManager::AllocateInner#5612+0x44>)
 8004ec8:	4604      	mov	r4, r0
 8004eca:	4621      	mov	r1, r4
 8004ecc:	447f      	add	r7, pc
 8004ece:	19e8      	adds	r0, r5, r7
 8004ed0:	f7ff fbcc 	bl	800466c <LinearMemoryManager::Allocate#5274>

            if(ptr == UIntPtr.Zero)
 8004ed4:	4e0c      	ldr	r6, [pc, #48]	; (8004f08 <DefaultTypeSystemManager::AllocateInner#5612+0x48>)
 8004ed6:	19f1      	adds	r1, r6, r7
 8004ed8:	f8d1 1110 	ldr.w	r1, [r1, #272]	; 0x110
 8004edc:	4288      	cmp	r0, r1
 8004ede:	d10a      	bne.n	8004ef6 <DefaultTypeSystemManager::AllocateInner#5612+0x36>
 8004ee0:	4f0a      	ldr	r7, [pc, #40]	; (8004f0c <DefaultTypeSystemManager::AllocateInner#5612+0x4c>)
            {
                GarbageCollectionManager.Instance.Collect();

                ptr = MemoryManager.Instance.Allocate( size );
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	447f      	add	r7, pc
 8004ee6:	19e8      	adds	r0, r5, r7
 8004ee8:	f7ff fbc0 	bl	800466c <LinearMemoryManager::Allocate#5274>
                if(ptr == UIntPtr.Zero)
 8004eec:	19f1      	adds	r1, r6, r7
 8004eee:	f8d1 1110 	ldr.w	r1, [r1, #272]	; 0x110
 8004ef2:	4288      	cmp	r0, r1
 8004ef4:	d001      	beq.n	8004efa <DefaultTypeSystemManager::AllocateInner#5612+0x3a>
 8004ef6:	b001      	add	sp, #4
 8004ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004efa:	200a      	movs	r0, #10
 8004efc:	f7fb f9d6 	bl	80002ac <BugCheck::Raise#5282>
 8004f00:	17ffbc48 	.word	0x17ffbc48
 8004f04:	fffffe68 	.word	0xfffffe68
 8004f08:	fffffcf8 	.word	0xfffffcf8
 8004f0c:	17ffbc30 	.word	0x17ffbc30

08004f10 <DefaultTypeSystemManager::ComputeArraySize#5611>:
        public static uint ComputeArraySize( TS.VTable vTable ,
                                             uint      length )
        {
            uint size = (uint)System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader) );

            size += vTable.BaseSize;
 8004f10:	b580      	push	{r7, lr}
 8004f12:	2800      	cmp	r0, #0
 8004f14:	bf1f      	itttt	ne
 8004f16:	e9d0 2002 	ldrdne	r2, r0, [r0, #8]
 8004f1a:	fb00 2001 	mlane	r0, r0, r1, r2
            size += vTable.ElementSize * length;
 8004f1e:	300b      	addne	r0, #11
 8004f20:	f020 0003 	bicne.w	r0, r0, #3
 8004f24:	bf18      	it	ne
 8004f26:	bd80      	popne	{r7, pc}
        public static uint ComputeArraySize( TS.VTable vTable ,
                                             uint      length )
        {
            uint size = (uint)System.Runtime.InteropServices.Marshal.SizeOf( typeof(ObjectHeader) );

            size += vTable.BaseSize;
 8004f28:	f7fb fa9e 	bl	8000468 <Thread::ThrowNullException#4411>

08004f2c <WaitableObject::.ctor#5627>:

        //
        // Constructor Methods
        //

        protected WaitableObject()
 8004f2c:	b570      	push	{r4, r5, r6, lr}
 8004f2e:	4e0b      	ldr	r6, [pc, #44]	; (8004f5c <WaitableObject::.ctor#5627+0x30>)
 8004f30:	4604      	mov	r4, r0
        {
            m_ownershipLink = new KernelNode< WaitableObject >( this );
 8004f32:	480b      	ldr	r0, [pc, #44]	; (8004f60 <WaitableObject::.ctor#5627+0x34>)
 8004f34:	447e      	add	r6, pc
 8004f36:	1985      	adds	r5, r0, r6
 8004f38:	480a      	ldr	r0, [pc, #40]	; (8004f64 <WaitableObject::.ctor#5627+0x38>)
 8004f3a:	1981      	adds	r1, r0, r6
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	f7fb fca9 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8004f42:	6104      	str	r4, [r0, #16]
 8004f44:	60a0      	str	r0, [r4, #8]
            m_listWaiting   = new KernelList< WaitingRecord  >();
 8004f46:	4808      	ldr	r0, [pc, #32]	; (8004f68 <WaitableObject::.ctor#5627+0x3c>)
 8004f48:	1981      	adds	r1, r0, r6
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	f7fb fca2 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8004f50:	4605      	mov	r5, r0
 8004f52:	f7fd fc21 	bl	8002798 <KernelList`1::.ctor#19900>
 8004f56:	60e5      	str	r5, [r4, #12]
 8004f58:	bd70      	pop	{r4, r5, r6, pc}
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	17ffbbe0 	.word	0x17ffbbe0
 8004f60:	fffffe0c 	.word	0xfffffe0c
 8004f64:	e8019b68 	.word	0xe8019b68
 8004f68:	e80198c8 	.word	0xe80198c8

08004f6c <CriticalSection::Acquire#5622>:
        //
        // Helper Methods
        //

        public override bool Acquire( SchedulerTime timeout )
        {
 8004f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f70:	b081      	sub	sp, #4
 8004f72:	4681      	mov	r9, r0
 8004f74:	482a      	ldr	r0, [pc, #168]	; (8005020 <CriticalSection::Acquire#5622+0xb4>)
                                fNotify = true;
                                fResult = true;
                            }
                            else
                            {
                                if(m_ownerThread == thisThread)
 8004f76:	492b      	ldr	r1, [pc, #172]	; (8005024 <CriticalSection::Acquire#5622+0xb8>)
 8004f78:	4478      	add	r0, pc
 8004f7a:	4408      	add	r0, r1
 8004f7c:	f8d0 8108 	ldr.w	r8, [r0, #264]	; 0x108

        public override bool Acquire( SchedulerTime timeout )
        {
            ThreadImpl thisThread = ThreadImpl.CurrentThread;

            if(thisThread == null)
 8004f80:	f1b8 0f00 	cmp.w	r8, #0
 8004f84:	d045      	beq.n	8005012 <CriticalSection::Acquire#5622+0xa6>
            }

            //
            // Fast shortcut for non-contended case.
            //
            if(m_ownerThread == null)
 8004f86:	f8d9 0010 	ldr.w	r0, [r9, #16]
            }

            //
            // Fast shortcut for nested calls.
            //
            if(m_ownerThread == thisThread)
 8004f8a:	4540      	cmp	r0, r8
 8004f8c:	d03c      	beq.n	8005008 <CriticalSection::Acquire#5622+0x9c>
            {
                m_nestingCount++;
                return true;
            }

            using(Synchronization.WaitingRecord.Holder holder = WaitingRecord.Holder.Get( thisThread, this, timeout ))
 8004f8e:	4640      	mov	r0, r8
 8004f90:	4649      	mov	r1, r9
 8004f92:	f000 f849 	bl	8005028 <Holder::Get#6313>
 8004f96:	4606      	mov	r6, r0
 8004f98:	2001      	movs	r0, #1
 8004f9a:	f004 fb89 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8004f9e:	4605      	mov	r5, r0
                    bool fNotify = false;
                    bool fResult = false;

                    using(SmartHandles.InterruptState.Disable())
                    {
                        if(holder.ShouldTryToAcquire)
 8004fa0:	b3e6      	cbz	r6, 800501c <CriticalSection::Acquire#5622+0xb0>
 8004fa2:	69b0      	ldr	r0, [r6, #24]
 8004fa4:	f000 f850 	bl	8005048 <Holder::get_ShouldTryToAcquire#6314>
 8004fa8:	f010 0fff 	tst.w	r0, #255	; 0xff
 8004fac:	d006      	beq.n	8004fbc <CriticalSection::Acquire#5622+0x50>
                        {
                            if(m_ownerThread == null)
 8004fae:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8004fb2:	b130      	cbz	r0, 8004fc2 <CriticalSection::Acquire#5622+0x56>
                                fNotify = true;
                                fResult = true;
                            }
                            else
                            {
                                if(m_ownerThread == thisThread)
 8004fb4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8004fb8:	4540      	cmp	r0, r8
 8004fba:	d007      	beq.n	8004fcc <CriticalSection::Acquire#5622+0x60>
 8004fbc:	2400      	movs	r4, #0
 8004fbe:	2700      	movs	r7, #0
 8004fc0:	e00b      	b.n	8004fda <CriticalSection::Acquire#5622+0x6e>
 8004fc2:	f8c9 8010 	str.w	r8, [r9, #16]
 8004fc6:	2401      	movs	r4, #1
 8004fc8:	2701      	movs	r7, #1
 8004fca:	e006      	b.n	8004fda <CriticalSection::Acquire#5622+0x6e>
                                {
                                    m_nestingCount++;
 8004fcc:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8004fd0:	2701      	movs	r7, #1
 8004fd2:	2400      	movs	r4, #0
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	f8c9 0014 	str.w	r0, [r9, #20]
 8004fda:	4628      	mov	r0, r5
 8004fdc:	f004 fb68 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8004fe0:	b11c      	cbz	r4, 8004fea <CriticalSection::Acquire#5622+0x7e>
                        }
                    }

                    if(fNotify)
                    {
                        thisThread.AcquiredWaitableObject( this );
 8004fe2:	4640      	mov	r0, r8
 8004fe4:	4649      	mov	r1, r9
 8004fe6:	f7fd fe70 	bl	8002cca <Thread::AcquiredWaitableObject#4403>
 8004fea:	b94f      	cbnz	r7, 8005000 <CriticalSection::Acquire#5622+0x94>
                    if(fResult)
                    {
                        return fResult;
                    }

                    if(holder.RequestProcessed)
 8004fec:	4630      	mov	r0, r6
 8004fee:	f000 f836 	bl	800505e <Holder::get_RequestProcessed#6315>
 8004ff2:	f010 0fff 	tst.w	r0, #255	; 0xff
 8004ff6:	d0cf      	beq.n	8004f98 <CriticalSection::Acquire#5622+0x2c>
 8004ff8:	69b0      	ldr	r0, [r6, #24]
                    {
                        return holder.RequestFulfilled;
 8004ffa:	f000 f854 	bl	80050a6 <Holder::get_RequestFulfilled#6316>
 8004ffe:	4607      	mov	r7, r0
                return true;
            }

            using(Synchronization.WaitingRecord.Holder holder = WaitingRecord.Holder.Get( thisThread, this, timeout ))
            {
                while(true)
 8005000:	4630      	mov	r0, r6
 8005002:	f7fd faf9 	bl	80025f8 <Holder::Dispose#6312>
 8005006:	e005      	b.n	8005014 <CriticalSection::Acquire#5622+0xa8>
            //
            // Fast shortcut for nested calls.
            //
            if(m_ownerThread == thisThread)
            {
                m_nestingCount++;
 8005008:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800500c:	3001      	adds	r0, #1
 800500e:	f8c9 0014 	str.w	r0, [r9, #20]
 8005012:	2701      	movs	r7, #1
 8005014:	4638      	mov	r0, r7
 8005016:	b001      	add	sp, #4
 8005018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    bool fNotify = false;
                    bool fResult = false;

                    using(SmartHandles.InterruptState.Disable())
                    {
                        if(holder.ShouldTryToAcquire)
 800501c:	f7fb fa24 	bl	8000468 <Thread::ThrowNullException#4411>
 8005020:	17ffbb9c 	.word	0x17ffbb9c
 8005024:	fffffcf8 	.word	0xfffffcf8

08005028 <Holder::Get#6313>:
            //
            public static Holder Get( ThreadImpl                     thread         ,
                                      Synchronization.WaitableObject waitableObject ,
                                      SchedulerTime                  timeout        )
            {
                Holder hld = thread.m_holder;
 8005028:	b580      	push	{r7, lr}
 800502a:	2800      	cmp	r0, #0
 800502c:	bf1f      	itttt	ne
 800502e:	f8d0 c048 	ldrne.w	ip, [r0, #72]	; 0x48
 8005032:	f04f 0e00 	movne.w	lr, #0
 8005036:	f10c 0708 	addne.w	r7, ip, #8
 800503a:	e887 400f 	stmiane.w	r7, {r0, r1, r2, r3, lr}
 800503e:	bf1c      	itt	ne
 8005040:	4660      	movne	r0, ip
 8005042:	bd80      	popne	{r7, pc}
 8005044:	f7fb fa10 	bl	8000468 <Thread::ThrowNullException#4411>

08005048 <Holder::get_ShouldTryToAcquire#6314>:

            public bool ShouldTryToAcquire
            {
                get
                {
                    return m_wr == null || m_wr.Processed == false;
 8005048:	2800      	cmp	r0, #0
 800504a:	bf04      	itt	eq
 800504c:	2001      	moveq	r0, #1
 800504e:	4770      	bxeq	lr

        public bool Processed
        {
            get
            {
                return m_processed;
 8005050:	f890 1020 	ldrb.w	r1, [r0, #32]

            public bool ShouldTryToAcquire
            {
                get
                {
                    return m_wr == null || m_wr.Processed == false;
 8005054:	2000      	movs	r0, #0
 8005056:	2900      	cmp	r1, #0
 8005058:	bf08      	it	eq
 800505a:	2001      	moveq	r0, #1
 800505c:	4770      	bx	lr

0800505e <Holder::get_RequestProcessed#6315>:
            }

            public bool RequestProcessed
            {
                get
                {
 800505e:	b5b0      	push	{r4, r5, r7, lr}
 8005060:	4604      	mov	r4, r0
                    // On the first pass, we don't allocate a WaitingRecord, we just try to acquire the resource.
                    // If that fails, we allocate a WaitingRecord, connect it and 
                    //
                    // On the second pass, we retry to acquire the resource and if that fails, we simply wait.
                    //
                    if(m_wr == null)
 8005062:	69a0      	ldr	r0, [r4, #24]
 8005064:	b158      	cbz	r0, 800507e <Holder::get_RequestProcessed#6315+0x20>

                        return false;
                    }
                    else
                    {
                        m_wr.Wait();
 8005066:	69a0      	ldr	r0, [r4, #24]
 8005068:	b138      	cbz	r0, 800507a <Holder::get_RequestProcessed#6315+0x1c>
 800506a:	f000 f94f 	bl	800530c <WaitingRecord::Wait#5648>

                        return m_wr.Processed;
 800506e:	69a0      	ldr	r0, [r4, #24]
 8005070:	2800      	cmp	r0, #0

        public bool Processed
        {
            get
            {
                return m_processed;
 8005072:	bf1c      	itt	ne
 8005074:	f890 0020 	ldrbne.w	r0, [r0, #32]
 8005078:	bdb0      	popne	{r4, r5, r7, pc}

                        return false;
                    }
                    else
                    {
                        m_wr.Wait();
 800507a:	f7fb f9f5 	bl	8000468 <Thread::ThrowNullException#4411>
                    //
                    // On the second pass, we retry to acquire the resource and if that fails, we simply wait.
                    //
                    if(m_wr == null)
                    {
                        m_wr = WaitingRecord.GetInstance( m_thread, m_waitableObject, m_timeout );
 800507e:	f104 0308 	add.w	r3, r4, #8
 8005082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005084:	f000 f8ca 	bl	800521c <WaitingRecord::GetInstance#5646>
 8005088:	61a0      	str	r0, [r4, #24]
 800508a:	2001      	movs	r0, #1
 800508c:	f004 fb10 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8005090:	4605      	mov	r5, r0

                        using(SmartHandles.InterruptState.Disable())
                        {
                            m_wr.Connect();
 8005092:	69a0      	ldr	r0, [r4, #24]
 8005094:	2800      	cmp	r0, #0
 8005096:	d0f0      	beq.n	800507a <Holder::get_RequestProcessed#6315+0x1c>
 8005098:	f000 f925 	bl	80052e6 <WaitingRecord::Connect#5647>
                        }
 800509c:	4628      	mov	r0, r5
 800509e:	f004 fb07 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 80050a2:	2000      	movs	r0, #0
 80050a4:	bdb0      	pop	{r4, r5, r7, pc}

080050a6 <Holder::get_RequestFulfilled#6316>:

            public bool RequestFulfilled
            {
                get
                {
                    return m_wr.RequestFulfilled;
 80050a6:	b580      	push	{r7, lr}
 80050a8:	2800      	cmp	r0, #0
 80050aa:	bf1c      	itt	ne
 80050ac:	f890 0021 	ldrbne.w	r0, [r0, #33]	; 0x21
 80050b0:	bd80      	popne	{r7, pc}
 80050b2:	f7fb f9d9 	bl	8000468 <Thread::ThrowNullException#4411>
 80050b6:	46c0      	nop			; (mov r8, r8)

080050b8 <CriticalSection::Release#5623>:
                }
            }
        }

        public override void Release()
        {
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	4604      	mov	r4, r0
 80050bc:	481f      	ldr	r0, [pc, #124]	; (800513c <CriticalSection::Release#5623+0x84>)
                // Special case for boot code path: all locks are transparent.
                //
                return;
            }

            if(m_ownerThread != thisThread)
 80050be:	4920      	ldr	r1, [pc, #128]	; (8005140 <CriticalSection::Release#5623+0x88>)
 80050c0:	4478      	add	r0, pc
 80050c2:	4408      	add	r0, r1
 80050c4:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108

        public override void Release()
        {
            ThreadImpl thisThread = ThreadImpl.CurrentThread;

            if(thisThread == null)
 80050c8:	2800      	cmp	r0, #0
 80050ca:	bf08      	it	eq
 80050cc:	bd70      	popeq	{r4, r5, r6, pc}
                // Special case for boot code path: all locks are transparent.
                //
                return;
            }

            if(m_ownerThread != thisThread)
 80050ce:	6921      	ldr	r1, [r4, #16]
 80050d0:	4281      	cmp	r1, r0
 80050d2:	d124      	bne.n	800511e <CriticalSection::Release#5623+0x66>
#else
                throw new Exception();
#endif
            }

            if(m_nestingCount > 0)
 80050d4:	6960      	ldr	r0, [r4, #20]
 80050d6:	2801      	cmp	r0, #1
            {
                m_nestingCount--;
 80050d8:	bfa1      	itttt	ge
 80050da:	6960      	ldrge	r0, [r4, #20]
 80050dc:	3801      	subge	r0, #1
 80050de:	6160      	strge	r0, [r4, #20]
 80050e0:	bd70      	popge	{r4, r5, r6, pc}
                return;
            }

            thisThread.ReleasedWaitableObject( this );
 80050e2:	4620      	mov	r0, r4
 80050e4:	f7fd fe0e 	bl	8002d04 <Thread::ReleasedWaitableObject#4404>
 80050e8:	2001      	movs	r0, #1

            ThreadImpl ownerThread  = null;
            ThreadImpl wakeupThread = null;
 80050ea:	f004 fae1 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 80050ee:	4605      	mov	r5, r0

            using(SmartHandles.InterruptState.Disable())
            {
                WaitingRecord wr = m_listWaiting.FirstTarget();
 80050f0:	68e0      	ldr	r0, [r4, #12]
 80050f2:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
 80050f6:	6890      	ldr	r0, [r2, #8]
 80050f8:	f7fd fd6a 	bl	8002bd0 <KernelList`1::FirstTarget#19903>

                if(wr != null)
 80050fc:	2800      	cmp	r0, #0
 80050fe:	f04f 0600 	mov.w	r6, #0
 8005102:	f04f 0100 	mov.w	r1, #0
 8005106:	bf18      	it	ne
 8005108:	6906      	ldrne	r6, [r0, #16]
                        wr.RequestFulfilled = true;
                    }
                }

                m_ownerThread = ownerThread;
            }
 800510a:	4628      	mov	r0, r5
 800510c:	6121      	str	r1, [r4, #16]
 800510e:	f004 facf 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8005112:	b11e      	cbz	r6, 800511c <CriticalSection::Release#5623+0x64>
                ownerThread.AcquiredWaitableObject( this );
            }

            if(wakeupThread != null)
            {
                wakeupThread.Wakeup();
 8005114:	4630      	mov	r0, r6
 8005116:	f7fd fda7 	bl	8002c68 <Thread::Wakeup#4402>
 800511a:	bd70      	pop	{r4, r5, r6, pc}
 800511c:	bd70      	pop	{r4, r5, r6, pc}
 800511e:	4809      	ldr	r0, [pc, #36]	; (8005144 <CriticalSection::Release#5623+0x8c>)
            if(m_ownerThread != thisThread)
            {
#if EXCEPTION_STRINGS
                throw new Exception( "Releasing waitable object not owned by thread" );
#else
                throw new Exception();
 8005120:	4909      	ldr	r1, [pc, #36]	; (8005148 <CriticalSection::Release#5623+0x90>)
 8005122:	4478      	add	r0, pc
 8005124:	180c      	adds	r4, r1, r0
 8005126:	4909      	ldr	r1, [pc, #36]	; (800514c <CriticalSection::Release#5623+0x94>)
 8005128:	4401      	add	r1, r0
 800512a:	4620      	mov	r0, r4
 800512c:	f7fb fbb2 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8005130:	4601      	mov	r1, r0
 8005132:	2000      	movs	r0, #0
 8005134:	6088      	str	r0, [r1, #8]
 8005136:	4620      	mov	r0, r4
 8005138:	f7fb fbc2 	bl	80008c0 <TypeSystemManager::Throw#5596>
 800513c:	17ffba54 	.word	0x17ffba54
 8005140:	fffffcf8 	.word	0xfffffcf8
 8005144:	17ffb9f2 	.word	0x17ffb9f2
 8005148:	fffffe0c 	.word	0xfffffe0c
 800514c:	e8019b38 	.word	0xe8019b38

08005150 <WaitableObject::Acquire#5630>:

        //--//

        public bool Acquire()
        {
            return Acquire( SchedulerTime.MaxValue );
 8005150:	b580      	push	{r7, lr}
 8005152:	b150      	cbz	r0, 800516a <WaitableObject::Acquire#5630+0x1a>
 8005154:	4906      	ldr	r1, [pc, #24]	; (8005170 <WaitableObject::Acquire#5630+0x20>)
 8005156:	4a07      	ldr	r2, [pc, #28]	; (8005174 <WaitableObject::Acquire#5630+0x24>)
 8005158:	4479      	add	r1, pc
 800515a:	4411      	add	r1, r2
 800515c:	e9d1 231f 	ldrd	r2, r3, [r1, #124]	; 0x7c
 8005160:	6841      	ldr	r1, [r0, #4]
 8005162:	69c9      	ldr	r1, [r1, #28]
 8005164:	6989      	ldr	r1, [r1, #24]
 8005166:	4788      	blx	r1
 8005168:	bd80      	pop	{r7, pc}
 800516a:	f7fb f97d 	bl	8000468 <Thread::ThrowNullException#4411>
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	17ffb9bc 	.word	0x17ffb9bc
 8005174:	fffffcf8 	.word	0xfffffcf8

08005178 <WaitableObject::RegisterWait#5632>:

        //--//

        public void RegisterWait( KernelNode< WaitingRecord > node )
        {
            m_listWaiting.InsertAtTail( node );
 8005178:	b580      	push	{r7, lr}
 800517a:	f7fd fc6e 	bl	8002a5a <KernelList`1::InsertAtTail#19901>
 800517e:	bd80      	pop	{r7, pc}

08005180 <WaitableObject::UnregisterWait#5633>:
        }

        public void UnregisterWait( KernelNode< WaitingRecord > node )
        {
            node.RemoveFromList();
 8005180:	b580      	push	{r7, lr}
 8005182:	b110      	cbz	r0, 800518a <WaitableObject::UnregisterWait#5633+0xa>
 8005184:	f7fd fcf6 	bl	8002b74 <KernelNode`1::RemoveFromList#19915>
 8005188:	bd80      	pop	{r7, pc}
 800518a:	f7fb f96d 	bl	8000468 <Thread::ThrowNullException#4411>
 800518e:	46c0      	nop			; (mov r8, r8)

08005190 <WaitingRecord::.ctor#5645>:

                wr.Recycle();
            }
        }

        private WaitingRecord()
 8005190:	b570      	push	{r4, r5, r6, lr}
 8005192:	4604      	mov	r4, r0
 8005194:	4809      	ldr	r0, [pc, #36]	; (80051bc <WaitingRecord::.ctor#5645+0x2c>)
        {
            m_linkTowardSource = new KernelNode< WaitingRecord >( this );
 8005196:	490a      	ldr	r1, [pc, #40]	; (80051c0 <WaitingRecord::.ctor#5645+0x30>)
 8005198:	4478      	add	r0, pc
 800519a:	180d      	adds	r5, r1, r0
 800519c:	4909      	ldr	r1, [pc, #36]	; (80051c4 <WaitingRecord::.ctor#5645+0x34>)
 800519e:	180e      	adds	r6, r1, r0
 80051a0:	4628      	mov	r0, r5
 80051a2:	4631      	mov	r1, r6
 80051a4:	f7fb fb76 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80051a8:	6104      	str	r4, [r0, #16]
 80051aa:	60a0      	str	r0, [r4, #8]
            m_linkTowardTarget = new KernelNode< WaitingRecord >( this );
 80051ac:	4628      	mov	r0, r5
 80051ae:	4631      	mov	r1, r6
 80051b0:	f7fb fb70 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80051b4:	6104      	str	r4, [r0, #16]
 80051b6:	60e0      	str	r0, [r4, #12]
 80051b8:	bd70      	pop	{r4, r5, r6, pc}
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	17ffb97c 	.word	0x17ffb97c
 80051c0:	fffffe0c 	.word	0xfffffe0c
 80051c4:	e8019bc8 	.word	0xe8019bc8

080051c8 <WaitingRecord::Recycle#5649>:
        {
            ThreadManager.Instance.SwitchToWait( this );
        }

        void Recycle()
        {
 80051c8:	b510      	push	{r4, lr}
 80051ca:	4604      	mov	r4, r0
            BugCheck.AssertInterruptsOff();
 80051cc:	f7fd fc38 	bl	8002a40 <BugCheck::AssertInterruptsOff#5289>

            Disconnect();
 80051d0:	4620      	mov	r0, r4
 80051d2:	f000 f8a9 	bl	8005328 <WaitingRecord::Disconnect#5650>
 80051d6:	490e      	ldr	r1, [pc, #56]	; (8005210 <WaitingRecord::Recycle#5649+0x48>)

            if(s_recycledCount < RecycleLimit)
 80051d8:	480e      	ldr	r0, [pc, #56]	; (8005214 <WaitingRecord::Recycle#5649+0x4c>)
 80051da:	4479      	add	r1, pc
 80051dc:	4401      	add	r1, r0
 80051de:	f8d1 108c 	ldr.w	r1, [r1, #140]	; 0x8c
 80051e2:	291f      	cmp	r1, #31
 80051e4:	bfc8      	it	gt
 80051e6:	bd10      	popgt	{r4, pc}
 80051e8:	2100      	movs	r1, #0
 80051ea:	f884 1020 	strb.w	r1, [r4, #32]
 80051ee:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
 80051f2:	4909      	ldr	r1, [pc, #36]	; (8005218 <WaitingRecord::Recycle#5649+0x50>)
 80051f4:	4479      	add	r1, pc
            {
                m_processed = false;
                m_fulfilled = false;

                s_recycledCount++;
 80051f6:	4408      	add	r0, r1
 80051f8:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 80051fc:	3101      	adds	r1, #1
 80051fe:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
                s_recycledList.InsertAtTail( m_linkTowardTarget );
 8005202:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
 8005206:	68e1      	ldr	r1, [r4, #12]
 8005208:	68c0      	ldr	r0, [r0, #12]
 800520a:	f7fd fc26 	bl	8002a5a <KernelList`1::InsertAtTail#19901>
 800520e:	bd10      	pop	{r4, pc}
 8005210:	17ffb93a 	.word	0x17ffb93a
 8005214:	fffffcf8 	.word	0xfffffcf8
 8005218:	17ffb920 	.word	0x17ffb920

0800521c <WaitingRecord::GetInstance#5646>:
        //

        static WaitingRecord GetInstance( ThreadImpl     source  ,
                                          WaitableObject target  ,
                                          SchedulerTime  timeout )
        {
 800521c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005220:	4607      	mov	r7, r0
 8005222:	4822      	ldr	r0, [pc, #136]	; (80052ac <WaitingRecord::GetInstance#5646+0x90>)
            BugCheck.AssertInterruptsOn();

            WaitingRecord wr = null;
            
            if(s_recycledCount > 0)
 8005224:	4c22      	ldr	r4, [pc, #136]	; (80052b0 <WaitingRecord::GetInstance#5646+0x94>)
 8005226:	4698      	mov	r8, r3
 8005228:	4691      	mov	r9, r2
 800522a:	468a      	mov	sl, r1
 800522c:	4478      	add	r0, pc
 800522e:	1825      	adds	r5, r4, r0

        static WaitingRecord GetInstance( ThreadImpl     source  ,
                                          WaitableObject target  ,
                                          SchedulerTime  timeout )
        {
            BugCheck.AssertInterruptsOn();
 8005230:	f7fd fff2 	bl	8003218 <BugCheck::AssertInterruptsOn#5290>

            WaitingRecord wr = null;
            
            if(s_recycledCount > 0)
 8005234:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
 8005238:	2801      	cmp	r0, #1
 800523a:	db18      	blt.n	800526e <WaitingRecord::GetInstance#5646+0x52>
 800523c:	481d      	ldr	r0, [pc, #116]	; (80052b4 <WaitingRecord::GetInstance#5646+0x98>)
 800523e:	4478      	add	r0, pc
            {
                using(SmartHandles.InterruptState.Disable())
                {
                    KernelNode< WaitingRecord > node = s_recycledList.ExtractFirstNode();
 8005240:	1826      	adds	r6, r4, r0
 8005242:	2001      	movs	r0, #1
 8005244:	f004 fa34 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8005248:	4605      	mov	r5, r0
 800524a:	f8d6 0090 	ldr.w	r0, [r6, #144]	; 0x90
 800524e:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
 8005252:	6890      	ldr	r0, [r2, #8]
 8005254:	f000 f838 	bl	80052c8 <KernelList`1::ExtractFirstNode#19906>
 8005258:	b158      	cbz	r0, 8005272 <WaitingRecord::GetInstance#5646+0x56>
 800525a:	4917      	ldr	r1, [pc, #92]	; (80052b8 <WaitingRecord::GetInstance#5646+0x9c>)
 800525c:	4479      	add	r1, pc
                    if(node != null)
                    {
                        wr = node.Target;

                        s_recycledCount--;
 800525e:	4421      	add	r1, r4
 8005260:	6904      	ldr	r4, [r0, #16]
 8005262:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8005266:	3a01      	subs	r2, #1
 8005268:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
 800526c:	e002      	b.n	8005274 <WaitingRecord::GetInstance#5646+0x58>
 800526e:	2400      	movs	r4, #0
 8005270:	e003      	b.n	800527a <WaitingRecord::GetInstance#5646+0x5e>
 8005272:	2400      	movs	r4, #0
                    }
                }
 8005274:	4628      	mov	r0, r5
 8005276:	f004 fa1b 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 800527a:	b964      	cbnz	r4, 8005296 <WaitingRecord::GetInstance#5646+0x7a>
 800527c:	490f      	ldr	r1, [pc, #60]	; (80052bc <WaitingRecord::GetInstance#5646+0xa0>)
            }

            if(wr == null)
            {
                wr = new WaitingRecord();
 800527e:	4810      	ldr	r0, [pc, #64]	; (80052c0 <WaitingRecord::GetInstance#5646+0xa4>)
 8005280:	4a10      	ldr	r2, [pc, #64]	; (80052c4 <WaitingRecord::GetInstance#5646+0xa8>)
 8005282:	4479      	add	r1, pc
 8005284:	4408      	add	r0, r1
 8005286:	4411      	add	r1, r2
 8005288:	f7fb fb04 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 800528c:	4604      	mov	r4, r0
 800528e:	b15c      	cbz	r4, 80052a8 <WaitingRecord::GetInstance#5646+0x8c>
 8005290:	4620      	mov	r0, r4
 8005292:	f7ff ff7d 	bl	8005190 <WaitingRecord::.ctor#5645>
            }

            wr.m_source  = source;
 8005296:	2c00      	cmp	r4, #0
 8005298:	bf1f      	itttt	ne
 800529a:	e9c4 7a04 	strdne	r7, sl, [r4, #16]
 800529e:	e9c4 9806 	strdne	r9, r8, [r4, #24]
 80052a2:	4620      	movne	r0, r4
 80052a4:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a8:	f7fb f8de 	bl	8000468 <Thread::ThrowNullException#4411>
 80052ac:	17ffb8e8 	.word	0x17ffb8e8
 80052b0:	fffffcf8 	.word	0xfffffcf8
 80052b4:	17ffb8d6 	.word	0x17ffb8d6
 80052b8:	17ffb8b8 	.word	0x17ffb8b8
 80052bc:	17ffb892 	.word	0x17ffb892
 80052c0:	fffffe0c 	.word	0xfffffe0c
 80052c4:	e8019b98 	.word	0xe8019b98

080052c8 <KernelList`1::ExtractFirstNode#19906>:
        }

        //--//

        public KernelNode< T > ExtractFirstNode()
        {
 80052c8:	b510      	push	{r4, lr}
 80052ca:	4604      	mov	r4, r0
            KernelNode< T > node = m_head.Next;

            if(node != m_tail)
 80052cc:	428c      	cmp	r4, r1
 80052ce:	bf02      	ittt	eq
 80052d0:	2400      	moveq	r4, #0
 80052d2:	4620      	moveq	r0, r4
 80052d4:	bd10      	popeq	{r4, pc}
            {
                node.RemoveFromList();
 80052d6:	b124      	cbz	r4, 80052e2 <KernelList`1::ExtractFirstNode#19906+0x1a>
 80052d8:	4620      	mov	r0, r4
 80052da:	f7fd fc4b 	bl	8002b74 <KernelNode`1::RemoveFromList#19915>
 80052de:	4620      	mov	r0, r4
 80052e0:	bd10      	pop	{r4, pc}

        //--//

        public KernelNode< T > ExtractFirstNode()
        {
            KernelNode< T > node = m_head.Next;
 80052e2:	f7fb f8c1 	bl	8000468 <Thread::ThrowNullException#4411>

080052e6 <WaitingRecord::Connect#5647>:

            return wr;
        }

        void Connect()
        {
 80052e6:	b510      	push	{r4, lr}
 80052e8:	4604      	mov	r4, r0
            BugCheck.AssertInterruptsOff();
 80052ea:	f7fd fba9 	bl	8002a40 <BugCheck::AssertInterruptsOff#5289>

            m_target.RegisterWait( m_linkTowardTarget );
 80052ee:	6960      	ldr	r0, [r4, #20]
 80052f0:	b150      	cbz	r0, 8005308 <WaitingRecord::Connect#5647+0x22>
 80052f2:	68c0      	ldr	r0, [r0, #12]
 80052f4:	68e1      	ldr	r1, [r4, #12]
 80052f6:	68c0      	ldr	r0, [r0, #12]
 80052f8:	f7ff ff3e 	bl	8005178 <WaitableObject::RegisterWait#5632>
            m_source.RegisterWait( m_linkTowardSource );
 80052fc:	6920      	ldr	r0, [r4, #16]
 80052fe:	b118      	cbz	r0, 8005308 <WaitingRecord::Connect#5647+0x22>
 8005300:	68a1      	ldr	r1, [r4, #8]
 8005302:	f7fd fb3d 	bl	8002980 <Thread::RegisterWait#4397>
 8005306:	bd10      	pop	{r4, pc}

        void Connect()
        {
            BugCheck.AssertInterruptsOff();

            m_target.RegisterWait( m_linkTowardTarget );
 8005308:	f7fb f8ae 	bl	8000468 <Thread::ThrowNullException#4411>

0800530c <WaitingRecord::Wait#5648>:
            m_source.RegisterWait( m_linkTowardSource );
        }

        void Wait()
        {
 800530c:	b580      	push	{r7, lr}
 800530e:	4601      	mov	r1, r0
 8005310:	4803      	ldr	r0, [pc, #12]	; (8005320 <WaitingRecord::Wait#5648+0x14>)
            ThreadManager.Instance.SwitchToWait( this );
 8005312:	4a04      	ldr	r2, [pc, #16]	; (8005324 <WaitingRecord::Wait#5648+0x18>)
 8005314:	4478      	add	r0, pc
 8005316:	4410      	add	r0, r2
 8005318:	f7fd ff8b 	bl	8003232 <ThreadManager::SwitchToWait#3530>
 800531c:	bd80      	pop	{r7, pc}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	17ffb800 	.word	0x17ffb800
 8005324:	fffffe18 	.word	0xfffffe18

08005328 <WaitingRecord::Disconnect#5650>:
                s_recycledList.InsertAtTail( m_linkTowardTarget );
            }
        }

        void Disconnect()
        {
 8005328:	b510      	push	{r4, lr}
 800532a:	4604      	mov	r4, r0
            BugCheck.AssertInterruptsOff();
 800532c:	f7fd fb88 	bl	8002a40 <BugCheck::AssertInterruptsOff#5289>

            if(m_linkTowardSource.IsLinked)
 8005330:	68a0      	ldr	r0, [r4, #8]
 8005332:	6880      	ldr	r0, [r0, #8]
 8005334:	b120      	cbz	r0, 8005340 <WaitingRecord::Disconnect#5650+0x18>
            {
                m_source.UnregisterWait( m_linkTowardSource );
 8005336:	6920      	ldr	r0, [r4, #16]
 8005338:	b170      	cbz	r0, 8005358 <WaitingRecord::Disconnect#5650+0x30>
 800533a:	68a0      	ldr	r0, [r4, #8]
 800533c:	f7fd fbe8 	bl	8002b10 <Thread::UnregisterWait#4399>
            }

            if(m_linkTowardTarget.IsLinked)
 8005340:	68e0      	ldr	r0, [r4, #12]
 8005342:	6880      	ldr	r0, [r0, #8]
 8005344:	b120      	cbz	r0, 8005350 <WaitingRecord::Disconnect#5650+0x28>
            {
                m_target.UnregisterWait( m_linkTowardTarget );
 8005346:	6960      	ldr	r0, [r4, #20]
 8005348:	b130      	cbz	r0, 8005358 <WaitingRecord::Disconnect#5650+0x30>
 800534a:	68e0      	ldr	r0, [r4, #12]
 800534c:	f7ff ff18 	bl	8005180 <WaitableObject::UnregisterWait#5633>
 8005350:	2000      	movs	r0, #0
 8005352:	e9c4 0004 	strd	r0, r0, [r4, #16]
 8005356:	bd10      	pop	{r4, pc}

        void Disconnect()
        {
            BugCheck.AssertInterruptsOff();

            if(m_linkTowardSource.IsLinked)
 8005358:	f7fb f886 	bl	8000468 <Thread::ThrowNullException#4411>

0800535c <InterruptState::GetMode#5949>:

        //--//

        private ProcessorARMv7M.ISR_NUMBER GetMode( )
        {
            return (ProcessorARMv7M.ISR_NUMBER)(ProcessorARMv7M.CMSIS_STUB_SCB__get_IPSR( ) & 0x1FF);
 800535c:	b580      	push	{r7, lr}
 800535e:	f004 f999 	bl	8009694 <CMSIS_STUB_SCB__get_IPSR>
 8005362:	f36f 205f 	bfc	r0, #9, #23
 8005366:	bd80      	pop	{r7, pc}

08005368 <ProcessorARMv7M_VFP::InitializeProcessor#5919>:
        //
        // Helper Methods
        //

        public override void InitializeProcessor( )
        {
 8005368:	b580      	push	{r7, lr}
 800536a:	2001      	movs	r0, #1
 800536c:	f004 f9a0 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8005370:	2000      	movs	r0, #0
 8005372:	f004 f9d1 	bl	8009718 <CUSTOM_STUB_SCB_SCR_SetSystemControlRegister>
 8005376:	f240 2011 	movw	r0, #529	; 0x211
 800537a:	f004 f9b7 	bl	80096ec <CUSTOM_STUB_SCB_set_CCR>
 800537e:	f06f 000c 	mvn.w	r0, #12
 8005382:	f7fe f87d 	bl	8003480 <ProcessorARMv7M::EnableSystemHandler#3614>
 8005386:	f06f 000a 	mvn.w	r0, #10
 800538a:	f7fe f879 	bl	8003480 <ProcessorARMv7M::EnableSystemHandler#3614>
 800538e:	f06f 000b 	mvn.w	r0, #11
 8005392:	f7fe f875 	bl	8003480 <ProcessorARMv7M::EnableSystemHandler#3614>
 8005396:	f06f 0009 	mvn.w	r0, #9
 800539a:	f7fe f871 	bl	8003480 <ProcessorARMv7M::EnableSystemHandler#3614>
            base.InitializeProcessor( );

            DisableLazyStacking( );
 800539e:	f000 f801 	bl	80053a4 <ProcessorARMv7M_VFP::DisableLazyStacking#5924>
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <ProcessorARMv7M_VFP::DisableLazyStacking#5924>:
            CUSTOM_STUB_SCB__set_FPCCR( value ); 
        }

        protected void DisableLazyStacking()
        {
            uint value = CUSTOM_STUB_SCB__get_FPCCR( );
 80053a4:	b580      	push	{r7, lr}
 80053a6:	f004 f995 	bl	80096d4 <CUSTOM_STUB_SCB__get_FPCCR>

            value &= ~c_FPCCR__LSPEN_ENABLED;
 80053aa:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000

            CUSTOM_STUB_SCB__set_FPCCR( value ); 
 80053ae:	f004 f997 	bl	80096e0 <CUSTOM_STUB_SCB__set_FPCCR>
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <EventWaitableObject::.ctor#6006>:

            //
            // Constructor Methods
            //

            internal EventWaitableObject( EventWaitHandleImpl owner )
 80053b4:	b5b0      	push	{r4, r5, r7, lr}
 80053b6:	460c      	mov	r4, r1
 80053b8:	4605      	mov	r5, r0
 80053ba:	f7ff fdb7 	bl	8004f2c <WaitableObject::.ctor#5627>
 80053be:	612c      	str	r4, [r5, #16]
 80053c0:	bdb0      	pop	{r4, r5, r7, pc}
 80053c2:	46c0      	nop			; (mov r8, r8)

080053c4 <EventWaitableObject::Acquire#6007>:
            //
            // Helper Methods
            //

            public override bool Acquire( SchedulerTime timeout )
            {
 80053c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053c6:	b081      	sub	sp, #4
 80053c8:	4604      	mov	r4, r0
 80053ca:	4834      	ldr	r0, [pc, #208]	; (800549c <EventWaitableObject::Acquire#6007+0xd8>)
 80053cc:	4934      	ldr	r1, [pc, #208]	; (80054a0 <EventWaitableObject::Acquire#6007+0xdc>)
 80053ce:	461d      	mov	r5, r3
 80053d0:	4616      	mov	r6, r2
 80053d2:	4478      	add	r0, pc
 80053d4:	4408      	add	r0, r1
 80053d6:	f8d0 7108 	ldr.w	r7, [r0, #264]	; 0x108
                ThreadImpl thisThread = ThreadImpl.CurrentThread;

                BugCheck.Assert( thisThread != null, BugCheck.StopCode.NoCurrentThread );
 80053da:	2f00      	cmp	r7, #0
 80053dc:	4638      	mov	r0, r7
 80053de:	bf18      	it	ne
 80053e0:	2001      	movne	r0, #1
 80053e2:	2800      	cmp	r0, #0
 80053e4:	d054      	beq.n	8005490 <EventWaitableObject::Acquire#6007+0xcc>

                //
                // Let's try to shortcut the acquisition of the event.
                //
                if(m_owner.m_state)
 80053e6:	6920      	ldr	r0, [r4, #16]
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d054      	beq.n	8005496 <EventWaitableObject::Acquire#6007+0xd2>
 80053ec:	7b00      	ldrb	r0, [r0, #12]
 80053ee:	b1a8      	cbz	r0, 800541c <EventWaitableObject::Acquire#6007+0x58>
 80053f0:	2001      	movs	r0, #1
 80053f2:	f004 f95d 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
                {
                    using(SmartHandles.InterruptState.Disable())
                    {
                        if(m_owner.m_state)
 80053f6:	6921      	ldr	r1, [r4, #16]
 80053f8:	2900      	cmp	r1, #0
 80053fa:	d047      	beq.n	800548c <EventWaitableObject::Acquire#6007+0xc8>
 80053fc:	7b09      	ldrb	r1, [r1, #12]
 80053fe:	b159      	cbz	r1, 8005418 <EventWaitableObject::Acquire#6007+0x54>
                        {
                            if(m_owner.m_mode == System.Threading.EventResetMode.AutoReset)
 8005400:	6921      	ldr	r1, [r4, #16]
 8005402:	2900      	cmp	r1, #0
 8005404:	d042      	beq.n	800548c <EventWaitableObject::Acquire#6007+0xc8>
 8005406:	6909      	ldr	r1, [r1, #16]
 8005408:	b919      	cbnz	r1, 8005412 <EventWaitableObject::Acquire#6007+0x4e>
                            {
                                m_owner.m_state = false;
 800540a:	6921      	ldr	r1, [r4, #16]
 800540c:	b3f1      	cbz	r1, 800548c <EventWaitableObject::Acquire#6007+0xc8>
 800540e:	2200      	movs	r2, #0
 8005410:	730a      	strb	r2, [r1, #12]
                            }

                            return true;
                        }
                    }
 8005412:	f004 f94d 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8005416:	e033      	b.n	8005480 <EventWaitableObject::Acquire#6007+0xbc>
 8005418:	f004 f94a 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
                }

                using(Synchronization.WaitingRecord.Holder holder = Synchronization.WaitingRecord.Holder.Get( thisThread, this, timeout ))
 800541c:	4638      	mov	r0, r7
 800541e:	4621      	mov	r1, r4
 8005420:	4632      	mov	r2, r6
 8005422:	462b      	mov	r3, r5
 8005424:	f7ff fe00 	bl	8005028 <Holder::Get#6313>
 8005428:	4605      	mov	r5, r0
 800542a:	2001      	movs	r0, #1
 800542c:	f004 f940 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8005430:	4606      	mov	r6, r0
 8005432:	b34d      	cbz	r5, 8005488 <EventWaitableObject::Acquire#6007+0xc4>
 8005434:	69a8      	ldr	r0, [r5, #24]
                {
                    while(true)
                    {
                        using(SmartHandles.InterruptState.Disable())
                        {
                            if(holder.ShouldTryToAcquire)
 8005436:	f7ff fe07 	bl	8005048 <Holder::get_ShouldTryToAcquire#6314>
 800543a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800543e:	d003      	beq.n	8005448 <EventWaitableObject::Acquire#6007+0x84>
                            {
                                if(m_owner.m_state)
 8005440:	6920      	ldr	r0, [r4, #16]
 8005442:	b308      	cbz	r0, 8005488 <EventWaitableObject::Acquire#6007+0xc4>
 8005444:	7b00      	ldrb	r0, [r0, #12]
 8005446:	b980      	cbnz	r0, 800546a <EventWaitableObject::Acquire#6007+0xa6>
 8005448:	4630      	mov	r0, r6
 800544a:	f004 f931 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
                                    return true;
                                }
                            }
                        }

                        if(holder.RequestProcessed)
 800544e:	4628      	mov	r0, r5
 8005450:	f7ff fe05 	bl	800505e <Holder::get_RequestProcessed#6315>
 8005454:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005458:	d0e7      	beq.n	800542a <EventWaitableObject::Acquire#6007+0x66>
 800545a:	69a8      	ldr	r0, [r5, #24]
                        {
                            return holder.RequestFulfilled;
 800545c:	f7ff fe23 	bl	80050a6 <Holder::get_RequestFulfilled#6316>
 8005460:	4604      	mov	r4, r0
                    }
                }

                using(Synchronization.WaitingRecord.Holder holder = Synchronization.WaitingRecord.Holder.Get( thisThread, this, timeout ))
                {
                    while(true)
 8005462:	4628      	mov	r0, r5
 8005464:	f7fd f8c8 	bl	80025f8 <Holder::Dispose#6312>
 8005468:	e00b      	b.n	8005482 <EventWaitableObject::Acquire#6007+0xbe>
                        {
                            if(holder.ShouldTryToAcquire)
                            {
                                if(m_owner.m_state)
                                {
                                    if(m_owner.m_mode == System.Threading.EventResetMode.AutoReset)
 800546a:	6920      	ldr	r0, [r4, #16]
 800546c:	b160      	cbz	r0, 8005488 <EventWaitableObject::Acquire#6007+0xc4>
 800546e:	6900      	ldr	r0, [r0, #16]
 8005470:	b918      	cbnz	r0, 800547a <EventWaitableObject::Acquire#6007+0xb6>
                                    {
                                        m_owner.m_state = false;
 8005472:	6920      	ldr	r0, [r4, #16]
 8005474:	b140      	cbz	r0, 8005488 <EventWaitableObject::Acquire#6007+0xc4>
 8005476:	2100      	movs	r1, #0
 8005478:	7301      	strb	r1, [r0, #12]
                    }
                }

                using(Synchronization.WaitingRecord.Holder holder = Synchronization.WaitingRecord.Holder.Get( thisThread, this, timeout ))
                {
                    while(true)
 800547a:	4628      	mov	r0, r5
 800547c:	f7fd f8bc 	bl	80025f8 <Holder::Dispose#6312>
 8005480:	2401      	movs	r4, #1
 8005482:	4620      	mov	r0, r4
 8005484:	b001      	add	sp, #4
 8005486:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    {
                        using(SmartHandles.InterruptState.Disable())
                        {
                            if(holder.ShouldTryToAcquire)
 8005488:	f7fa ffee 	bl	8000468 <Thread::ThrowNullException#4411>
                //
                if(m_owner.m_state)
                {
                    using(SmartHandles.InterruptState.Disable())
                    {
                        if(m_owner.m_state)
 800548c:	f7fa ffec 	bl	8000468 <Thread::ThrowNullException#4411>
 8005490:	2004      	movs	r0, #4
 8005492:	f7fa ff0b 	bl	80002ac <BugCheck::Raise#5282>
                BugCheck.Assert( thisThread != null, BugCheck.StopCode.NoCurrentThread );

                //
                // Let's try to shortcut the acquisition of the event.
                //
                if(m_owner.m_state)
 8005496:	f7fa ffe7 	bl	8000468 <Thread::ThrowNullException#4411>
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	17ffb742 	.word	0x17ffb742
 80054a0:	fffffcf8 	.word	0xfffffcf8

080054a4 <EventWaitableObject::Release#6008>:
                    }
                }
            }

            public override void Release()
            {
 80054a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054a6:	b081      	sub	sp, #4
 80054a8:	4604      	mov	r4, r0
 80054aa:	2700      	movs	r7, #0
 80054ac:	e002      	b.n	80054b4 <EventWaitableObject::Release#6008+0x10>
                        {
                            m_owner.m_state = false;
                        }
                    }

                    wakeUpThread.Wakeup();
 80054ae:	4630      	mov	r0, r6
 80054b0:	f7fd fbda 	bl	8002c68 <Thread::Wakeup#4402>
 80054b4:	2001      	movs	r0, #1
 80054b6:	f004 f8fb 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 80054ba:	4605      	mov	r5, r0
                {
                    ThreadImpl wakeUpThread;

                    using(SmartHandles.InterruptState.Disable())
                    {
                        if(m_owner.m_state == false)
 80054bc:	6920      	ldr	r0, [r4, #16]
 80054be:	b1f8      	cbz	r0, 8005500 <EventWaitableObject::Release#6008+0x5c>
 80054c0:	7b00      	ldrb	r0, [r0, #12]
 80054c2:	b1c0      	cbz	r0, 80054f6 <EventWaitableObject::Release#6008+0x52>
                        {
                            return;
                        }

                        Synchronization.WaitingRecord wr = m_listWaiting.FirstTarget();
 80054c4:	68e0      	ldr	r0, [r4, #12]
 80054c6:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
 80054ca:	6890      	ldr	r0, [r2, #8]
 80054cc:	f7fd fb80 	bl	8002bd0 <KernelList`1::FirstTarget#19903>
 80054d0:	b188      	cbz	r0, 80054f6 <EventWaitableObject::Release#6008+0x52>
 80054d2:	6906      	ldr	r6, [r0, #16]
 80054d4:	2101      	movs	r1, #1
                            return;
                        }

                        wakeUpThread = wr.Source;

                        wr.RequestFulfilled = true;
 80054d6:	f7fd fbb9 	bl	8002c4c <WaitingRecord::set_RequestFulfilled#5656>

                        if(m_owner.m_mode == System.Threading.EventResetMode.AutoReset)
 80054da:	6920      	ldr	r0, [r4, #16]
 80054dc:	b180      	cbz	r0, 8005500 <EventWaitableObject::Release#6008+0x5c>
 80054de:	6900      	ldr	r0, [r0, #16]
 80054e0:	b910      	cbnz	r0, 80054e8 <EventWaitableObject::Release#6008+0x44>
                        {
                            m_owner.m_state = false;
 80054e2:	6920      	ldr	r0, [r4, #16]
 80054e4:	b160      	cbz	r0, 8005500 <EventWaitableObject::Release#6008+0x5c>
 80054e6:	7307      	strb	r7, [r0, #12]
                        }
                    }
 80054e8:	4628      	mov	r0, r5
 80054ea:	f004 f8e1 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>

                    wakeUpThread.Wakeup();
 80054ee:	2e00      	cmp	r6, #0
 80054f0:	d1dd      	bne.n	80054ae <EventWaitableObject::Release#6008+0xa>
 80054f2:	f7fa ffb9 	bl	8000468 <Thread::ThrowNullException#4411>

                        if(m_owner.m_mode == System.Threading.EventResetMode.AutoReset)
                        {
                            m_owner.m_state = false;
                        }
                    }
 80054f6:	4628      	mov	r0, r5
 80054f8:	f004 f8da 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 80054fc:	b001      	add	sp, #4
 80054fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
                {
                    ThreadImpl wakeUpThread;

                    using(SmartHandles.InterruptState.Disable())
                    {
                        if(m_owner.m_state == false)
 8005500:	f7fa ffb2 	bl	8000468 <Thread::ThrowNullException#4411>

08005504 <EmptyManager::InitializeGarbageCollectionManager#6268>:
 8005504:	4770      	bx	lr

08005506 <EmptyManager::NotifyNewObject#6269>:
 8005506:	4770      	bx	lr

08005508 <EmptyManager::Collect#6271>:
 8005508:	2000      	movs	r0, #0
 800550a:	4770      	bx	lr

0800550c <EmptyManager::ThrowOutOfMemory#6273>:
                return 0;
            }

            public override void ThrowOutOfMemory( TS.VTable vTable )
            {
                BugCheck.Raise( BugCheck.StopCode.NoMemory );
 800550c:	b580      	push	{r7, lr}
 800550e:	200a      	movs	r0, #10
 8005510:	f7fa fecc 	bl	80002ac <BugCheck::Raise#5282>

08005514 <Context::SwitchTo#6343>:
            public override unsafe void SwitchTo( )
            {
                //
                // The long jump selects the current thread's context and sets its EXC_RETURN value
                //
                ProcessorARMv7M.RaiseSupervisorCall( SVC_Code.SupervisorCall__LongJump );
 8005514:	b580      	push	{r7, lr}
 8005516:	2011      	movs	r0, #17
 8005518:	f7fd f9d2 	bl	80028c0 <ProcessorARMv7M::RaiseSupervisorCall#3606>
 800551c:	200e      	movs	r0, #14
 800551e:	f7fa fec5 	bl	80002ac <BugCheck::Raise#5282>
 8005522:	46c0      	nop			; (mov r8, r8)

08005524 <Context::Populate#6344>:

                RT.BugCheck.Assert( false, BugCheck.StopCode.IllegalMode );
            }
            
            public override void Populate( )
            {
 8005524:	b580      	push	{r7, lr}
 8005526:	490b      	ldr	r1, [pc, #44]	; (8005554 <Context::Populate#6344+0x30>)
 8005528:	4a0b      	ldr	r2, [pc, #44]	; (8005558 <Context::Populate#6344+0x34>)
 800552a:	4479      	add	r1, pc
 800552c:	4411      	add	r1, r2
 800552e:	f8d1 1108 	ldr.w	r1, [r1, #264]	; 0x108
                //
                // This woudl be called on the throw context, but in ARMv7M we do not have one
                //
                ThreadImpl        thisThread = ThreadImpl.CurrentThread;
                Processor.Context ctx        = thisThread.SwappedOutContext; 
 8005532:	2900      	cmp	r1, #0
 8005534:	bf1c      	itt	ne
 8005536:	69c9      	ldrne	r1, [r1, #28]
                
                this.BaseSP     = ctx.BaseStackPointer;
 8005538:	2900      	cmpne	r1, #0
 800553a:	d008      	beq.n	800554e <Context::Populate#6344+0x2a>
 800553c:	bf1f      	itttt	ne
 800553e:	688a      	ldrne	r2, [r1, #8]
 8005540:	6082      	strne	r2, [r0, #8]
 8005542:	68ca      	ldrne	r2, [r1, #12]
 8005544:	60c2      	strne	r2, [r0, #12]
 8005546:	bf1e      	ittt	ne
 8005548:	6909      	ldrne	r1, [r1, #16]
 800554a:	6101      	strne	r1, [r0, #16]
 800554c:	bd80      	popne	{r7, pc}
            {
                //
                // This woudl be called on the throw context, but in ARMv7M we do not have one
                //
                ThreadImpl        thisThread = ThreadImpl.CurrentThread;
                Processor.Context ctx        = thisThread.SwappedOutContext; 
 800554e:	f7fa ff8b 	bl	8000468 <Thread::ThrowNullException#4411>
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	17ffb5ea 	.word	0x17ffb5ea
 8005558:	fffffcf8 	.word	0xfffffcf8

0800555c <Context::PopulateFromDelegate#6346>:
                this.SP         = context.StackPointer;
                this.EXC_RETURN = context.ExcReturn;
            }

            public unsafe override void PopulateFromDelegate( Delegate dlg, uint[] stack )
            {
 800555c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800555e:	b081      	sub	sp, #4
 8005560:	460c      	mov	r4, r1
 8005562:	4617      	mov	r7, r2
 8005564:	4605      	mov	r5, r0
                DelegateImpl dlgImpl   = (DelegateImpl)(object)dlg;
                ArrayImpl    stackImpl = (ArrayImpl   )(object)stack;
                ObjectImpl   objImpl   = (ObjectImpl  )(object)dlg.Target;
 8005566:	2c00      	cmp	r4, #0
 8005568:	d03d      	beq.n	80055e6 <Context::PopulateFromDelegate#6346+0x8a>
 800556a:	d03c      	beq.n	80055e6 <Context::PopulateFromDelegate#6346+0x8a>
 800556c:	6860      	ldr	r0, [r4, #4]
 800556e:	69c0      	ldr	r0, [r0, #28]
 8005570:	6981      	ldr	r1, [r0, #24]
 8005572:	4620      	mov	r0, r4
 8005574:	4788      	blx	r1
 8005576:	4606      	mov	r6, r0
 8005578:	b3af      	cbz	r7, 80055e6 <Context::PopulateFromDelegate#6346+0x8a>
 800557a:	68b9      	ldr	r1, [r7, #8]
 800557c:	4638      	mov	r0, r7
 800557e:	f7fb fa53 	bl	8000a28 <Array::GetPointerToElement#4081>
 8005582:	f020 0007 	bic.w	r0, r0, #7
 8005586:	f06f 0202 	mvn.w	r2, #2
 800558a:	f105 0308 	add.w	r3, r5, #8
                // In the general case the SP will be at the top of the current frame we are building
                // When we do a LongJump though, or we start the thread first, we will have to use the base stack pointer
                //
                
                this.BaseSP     = AddressMath.AlignToLowerBoundary( new UIntPtr( stackImpl.GetEndDataPointer( ) ), 8 );
                this.SP         = AddressMath.Decrement( this.BaseSP, RegistersOnStack.TotalFrameSize );
 800558e:	f1a0 0148 	sub.w	r1, r0, #72	; 0x48
 8005592:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005596:	4638      	mov	r0, r7
 8005598:	68b9      	ldr	r1, [r7, #8]
 800559a:	f7fb fa45 	bl	8000a28 <Array::GetPointerToElement#4081>
                this.EXC_RETURN = c_MODE_RETURN__THREAD_PSP;

                //
                // Initial offset from start of stack storage must be at least as large as a frame
                //
                RT.BugCheck.Assert((((int)stackImpl.GetEndDataPointer() - this.SP.ToUInt32()) >= RegistersOnStack.TotalFrameSize),
 800559e:	68ea      	ldr	r2, [r5, #12]
 80055a0:	17c1      	asrs	r1, r0, #31
 80055a2:	2300      	movs	r3, #0
 80055a4:	1a80      	subs	r0, r0, r2
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	f161 0100 	sbc.w	r1, r1, #0
 80055ae:	2900      	cmp	r1, #0
 80055b0:	bfc8      	it	gt
 80055b2:	2301      	movgt	r3, #1
 80055b4:	2847      	cmp	r0, #71	; 0x47
 80055b6:	bf88      	it	hi
 80055b8:	2201      	movhi	r2, #1
 80055ba:	2900      	cmp	r1, #0
 80055bc:	bf18      	it	ne
 80055be:	461a      	movne	r2, r3
 80055c0:	b19a      	cbz	r2, 80055ea <Context::PopulateFromDelegate#6346+0x8e>
                    BugCheck.StopCode.StackCorruptionDetected
                    );

                RegistersOnStack* firstFrame = GetFrame(this.SP);
 80055c2:	68e8      	ldr	r0, [r5, #12]

                //
                // build the first stack frame
                //
                firstFrame->HardwareFrameRegisters.PC         = new UIntPtr( dlgImpl.InnerGetCodePointer( ).Target.ToPointer( ) );
 80055c4:	2800      	cmp	r0, #0
 80055c6:	bf1f      	itttt	ne
 80055c8:	68e1      	ldrne	r1, [r4, #12]
 80055ca:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 80055ce:	e9c0 1210 	strdne	r1, r2, [r0, #64]	; 0x40
 80055d2:	f06f 0102 	mvnne.w	r1, #2
 80055d6:	bf1f      	itttt	ne
 80055d8:	6001      	strne	r1, [r0, #0]
 80055da:	2102      	movne	r1, #2
 80055dc:	6041      	strne	r1, [r0, #4]
 80055de:	6286      	strne	r6, [r0, #40]	; 0x28
 80055e0:	bf1c      	itt	ne
 80055e2:	b001      	addne	sp, #4
 80055e4:	bdf0      	popne	{r4, r5, r6, r7, pc}

            public unsafe override void PopulateFromDelegate( Delegate dlg, uint[] stack )
            {
                DelegateImpl dlgImpl   = (DelegateImpl)(object)dlg;
                ArrayImpl    stackImpl = (ArrayImpl   )(object)stack;
                ObjectImpl   objImpl   = (ObjectImpl  )(object)dlg.Target;
 80055e6:	f7fa ff3f 	bl	8000468 <Thread::ThrowNullException#4411>
 80055ea:	2013      	movs	r0, #19
 80055ec:	f7fa fe5e 	bl	80002ac <BugCheck::Raise#5282>

080055f0 <Context::Unwind#6348>:
            }
            
#region Tracking Collector and Exceptions  

            public override bool Unwind( )
            {
 80055f0:	b5b0      	push	{r4, r5, r7, lr}
 80055f2:	4d08      	ldr	r5, [pc, #32]	; (8005614 <Context::Unwind#6348+0x24>)
                throw new Exception( "Unwind not implemented" );
 80055f4:	4808      	ldr	r0, [pc, #32]	; (8005618 <Context::Unwind#6348+0x28>)
 80055f6:	447d      	add	r5, pc
 80055f8:	1944      	adds	r4, r0, r5
 80055fa:	4808      	ldr	r0, [pc, #32]	; (800561c <Context::Unwind#6348+0x2c>)
 80055fc:	1941      	adds	r1, r0, r5
 80055fe:	4620      	mov	r0, r4
 8005600:	f7fb f948 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8005604:	4601      	mov	r1, r0
 8005606:	4806      	ldr	r0, [pc, #24]	; (8005620 <Context::Unwind#6348+0x30>)
 8005608:	4428      	add	r0, r5
 800560a:	6088      	str	r0, [r1, #8]
 800560c:	4620      	mov	r0, r4
 800560e:	f7fb f957 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8005612:	46c0      	nop			; (mov r8, r8)
 8005614:	17ffb51e 	.word	0x17ffb51e
 8005618:	fffffe0c 	.word	0xfffffe0c
 800561c:	e8019b38 	.word	0xe8019b38
 8005620:	e8011888 	.word	0xe8011888

08005624 <Context::get_StackPointer#6355>:
            // Access Methods
            //

            public override UIntPtr StackPointer
            {
                get { return this.SP; }
 8005624:	68c0      	ldr	r0, [r0, #12]
 8005626:	4770      	bx	lr

08005628 <Context::set_StackPointer#6356>:
 8005628:	60c1      	str	r1, [r0, #12]
 800562a:	4770      	bx	lr

0800562c <Context::get_BaseStackPointer#6357>:
            }

            public override UIntPtr BaseStackPointer
            {
                [RT.Inline]
                get { return this.BaseSP; }
 800562c:	6880      	ldr	r0, [r0, #8]
 800562e:	4770      	bx	lr

08005630 <Context::get_ExcReturn#6358>:
            }

            public override uint ExcReturn
            {
                [RT.Inline]
                get { return this.EXC_RETURN;  }
 8005630:	6900      	ldr	r0, [r0, #16]
 8005632:	4770      	bx	lr

08005634 <Context::get_ProgramCounter#6360>:
            public override UIntPtr ProgramCounter
            {
                get
                {
                    //return Registers.PC;
                    return (UIntPtr)0;
 8005634:	b580      	push	{r7, lr}
 8005636:	f7fc fed5 	bl	80023e4 <UIntPtr::op_Explicit#3229>
 800563a:	bd80      	pop	{r7, pc}

0800563c <Context::set_ProgramCounter#6361>:
 800563c:	4770      	bx	lr

0800563e <Context::SwitchTo#6380>:
            //

            public override void SwitchTo( )
            {
                // The long jump selects the current thread's context and sets its EXC_RETURN value
                ProcessorARMv7M.RaiseSupervisorCall( ProcessorARMv7M.SVC_Code.SupervisorCall__LongJump );
 800563e:	b580      	push	{r7, lr}
 8005640:	2011      	movs	r0, #17
 8005642:	f7fd f93d 	bl	80028c0 <ProcessorARMv7M::RaiseSupervisorCall#3606>
 8005646:	200e      	movs	r0, #14
 8005648:	f7fa fe30 	bl	80002ac <BugCheck::Raise#5282>

0800564c <Number::.ctor#7949>:
    internal class Number
    {
        private int precision;
        private int scale;
        private bool negative;
        private char[] digits = new char[NumberMaxDigits + 1];
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	460d      	mov	r5, r1
 8005650:	4921      	ldr	r1, [pc, #132]	; (80056d8 <Number::.ctor#7949+0x8c>)
 8005652:	4604      	mov	r4, r0
 8005654:	4821      	ldr	r0, [pc, #132]	; (80056dc <Number::.ctor#7949+0x90>)
 8005656:	4a22      	ldr	r2, [pc, #136]	; (80056e0 <Number::.ctor#7949+0x94>)
 8005658:	4479      	add	r1, pc
 800565a:	4408      	add	r0, r1
 800565c:	4411      	add	r1, r2
 800565e:	2233      	movs	r2, #51	; 0x33
 8005660:	f7fc f9d8 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 8005664:	6160      	str	r0, [r4, #20]
 8005666:	200a      	movs	r0, #10
////    }

        private Number( int value )
        {
            this.precision = Int32Precision;
            if(value >= 0)
 8005668:	2d00      	cmp	r5, #0
 800566a:	60a0      	str	r0, [r4, #8]
 800566c:	db02      	blt.n	8005674 <Number::.ctor#7949+0x28>
 800566e:	2000      	movs	r0, #0
 8005670:	7420      	strb	r0, [r4, #16]
 8005672:	e002      	b.n	800567a <Number::.ctor#7949+0x2e>
 8005674:	2001      	movs	r0, #1
                this.negative = false;
            }
            else
            {
                this.negative = true;
                value = -value;
 8005676:	426d      	negs	r5, r5
 8005678:	7420      	strb	r0, [r4, #16]
            }

            int index = Int32ToDecChars( this.digits, Int32Precision, unchecked( (uint)value ), 0 );
 800567a:	6960      	ldr	r0, [r4, #20]
 800567c:	210a      	movs	r1, #10
 800567e:	462a      	mov	r2, r5
 8005680:	2300      	movs	r3, #0
 8005682:	2600      	movs	r6, #0
 8005684:	f000 f82e 	bl	80056e4 <Number::Int32ToDecChars#7987>
            int digitCount = Int32Precision - index;
 8005688:	f1c0 010a 	rsb	r1, r0, #10
 800568c:	60e1      	str	r1, [r4, #12]
 800568e:	e008      	b.n	80056a2 <Number::.ctor#7949+0x56>
            int destIndex = 0;
            this.scale = digitCount;
            while(digitCount > 0)
            {
                this.digits[destIndex] = this.digits[index];
 8005690:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8005694:	eb02 0246 	add.w	r2, r2, r6, lsl #1
                destIndex++;
                index++;
                digitCount--;
 8005698:	3901      	subs	r1, #1
            this.scale = digitCount;
            while(digitCount > 0)
            {
                this.digits[destIndex] = this.digits[index];
                destIndex++;
                index++;
 800569a:	3001      	adds	r0, #1
            int destIndex = 0;
            this.scale = digitCount;
            while(digitCount > 0)
            {
                this.digits[destIndex] = this.digits[index];
                destIndex++;
 800569c:	3601      	adds	r6, #1
            int digitCount = Int32Precision - index;
            int destIndex = 0;
            this.scale = digitCount;
            while(digitCount > 0)
            {
                this.digits[destIndex] = this.digits[index];
 800569e:	899b      	ldrh	r3, [r3, #12]
 80056a0:	8193      	strh	r3, [r2, #12]

            int index = Int32ToDecChars( this.digits, Int32Precision, unchecked( (uint)value ), 0 );
            int digitCount = Int32Precision - index;
            int destIndex = 0;
            this.scale = digitCount;
            while(digitCount > 0)
 80056a2:	2901      	cmp	r1, #1
 80056a4:	db09      	blt.n	80056ba <Number::.ctor#7949+0x6e>
            {
                this.digits[destIndex] = this.digits[index];
 80056a6:	6962      	ldr	r2, [r4, #20]
 80056a8:	b19a      	cbz	r2, 80056d2 <Number::.ctor#7949+0x86>
 80056aa:	6893      	ldr	r3, [r2, #8]
 80056ac:	4298      	cmp	r0, r3
 80056ae:	d20e      	bcs.n	80056ce <Number::.ctor#7949+0x82>
 80056b0:	b17a      	cbz	r2, 80056d2 <Number::.ctor#7949+0x86>
 80056b2:	6893      	ldr	r3, [r2, #8]
 80056b4:	429e      	cmp	r6, r3
 80056b6:	d3eb      	bcc.n	8005690 <Number::.ctor#7949+0x44>
 80056b8:	e009      	b.n	80056ce <Number::.ctor#7949+0x82>
                destIndex++;
                index++;
                digitCount--;
            }
            this.digits[destIndex] = '\0';
 80056ba:	6960      	ldr	r0, [r4, #20]
 80056bc:	b148      	cbz	r0, 80056d2 <Number::.ctor#7949+0x86>
 80056be:	6881      	ldr	r1, [r0, #8]
 80056c0:	428e      	cmp	r6, r1
 80056c2:	bf3f      	itttt	cc
 80056c4:	eb00 0046 	addcc.w	r0, r0, r6, lsl #1
 80056c8:	2100      	movcc	r1, #0
 80056ca:	8181      	strhcc	r1, [r0, #12]
 80056cc:	bd70      	popcc	{r4, r5, r6, pc}
 80056ce:	f7fb fbef 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
    internal class Number
    {
        private int precision;
        private int scale;
        private bool negative;
        private char[] digits = new char[NumberMaxDigits + 1];
 80056d2:	f7fa fec9 	bl	8000468 <Thread::ThrowNullException#4411>
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	17ffb4bc 	.word	0x17ffb4bc
 80056dc:	fffffe0c 	.word	0xfffffe0c
 80056e0:	e80196e8 	.word	0xe80196e8

080056e4 <Number::Int32ToDecChars#7987>:
        // There's a x86 asm version there too.
        private static int Int32ToDecChars( char[] buffer      ,
                                            int    bufferIndex ,
                                            uint   value       ,
                                            int    digits      )
        {
 80056e4:	b5b0      	push	{r4, r5, r7, lr}
            while(--digits >= 0 || value != 0)
            {
                buffer[--bufferIndex] = (char)(value % 10 + '0');
 80056e6:	f64c 4ccd 	movw	ip, #52429	; 0xcccd
        // There's a x86 asm version there too.
        private static int Int32ToDecChars( char[] buffer      ,
                                            int    bufferIndex ,
                                            uint   value       ,
                                            int    digits      )
        {
 80056ea:	f1a3 0e01 	sub.w	lr, r3, #1
            while(--digits >= 0 || value != 0)
            {
                buffer[--bufferIndex] = (char)(value % 10 + '0');
 80056ee:	f6cc 4ccc 	movt	ip, #52428	; 0xcccc
 80056f2:	e00d      	b.n	8005710 <Number::Int32ToDecChars#7987+0x2c>
 80056f4:	08e4      	lsrs	r4, r4, #3
 80056f6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
                value /= 10;
 80056fa:	f1ae 0e01 	sub.w	lr, lr, #1
                                            uint   value       ,
                                            int    digits      )
        {
            while(--digits >= 0 || value != 0)
            {
                buffer[--bufferIndex] = (char)(value % 10 + '0');
 80056fe:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 8005702:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
 8005706:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800570a:	814a      	strh	r2, [r1, #10]
 800570c:	4619      	mov	r1, r3
 800570e:	4622      	mov	r2, r4
        private static int Int32ToDecChars( char[] buffer      ,
                                            int    bufferIndex ,
                                            uint   value       ,
                                            int    digits      )
        {
            while(--digits >= 0 || value != 0)
 8005710:	f1be 3fff 	cmp.w	lr, #4294967295
 8005714:	dc03      	bgt.n	800571e <Number::Int32ToDecChars#7987+0x3a>
 8005716:	2a00      	cmp	r2, #0
 8005718:	bf04      	itt	eq
 800571a:	4608      	moveq	r0, r1
 800571c:	bdb0      	popeq	{r4, r5, r7, pc}
            {
                buffer[--bufferIndex] = (char)(value % 10 + '0');
 800571e:	fba2 340c 	umull	r3, r4, r2, ip
 8005722:	b128      	cbz	r0, 8005730 <Number::Int32ToDecChars#7987+0x4c>
 8005724:	6885      	ldr	r5, [r0, #8]
 8005726:	1e4b      	subs	r3, r1, #1
 8005728:	42ab      	cmp	r3, r5
 800572a:	d3e3      	bcc.n	80056f4 <Number::Int32ToDecChars#7987+0x10>
 800572c:	f7fb fbc0 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 8005730:	f7fa fe9a 	bl	8000468 <Thread::ThrowNullException#4411>

08005734 <Number::.ctor#7950>:
    internal class Number
    {
        private int precision;
        private int scale;
        private bool negative;
        private char[] digits = new char[NumberMaxDigits + 1];
 8005734:	b570      	push	{r4, r5, r6, lr}
 8005736:	460d      	mov	r5, r1
 8005738:	491d      	ldr	r1, [pc, #116]	; (80057b0 <Number::.ctor#7950+0x7c>)
 800573a:	4604      	mov	r4, r0
 800573c:	481d      	ldr	r0, [pc, #116]	; (80057b4 <Number::.ctor#7950+0x80>)
 800573e:	4a1e      	ldr	r2, [pc, #120]	; (80057b8 <Number::.ctor#7950+0x84>)
 8005740:	4479      	add	r1, pc
 8005742:	4408      	add	r0, r1
 8005744:	4411      	add	r1, r2
 8005746:	2233      	movs	r2, #51	; 0x33
 8005748:	f7fc f964 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 800574c:	6160      	str	r0, [r4, #20]
 800574e:	200a      	movs	r0, #10
 8005750:	2600      	movs	r6, #0
 8005752:	210a      	movs	r1, #10

        private Number( uint value )
        {
            this.precision = Int32Precision;
            this.negative = false;
            int index = Int32ToDecChars( this.digits, Int32Precision, value, 0 );
 8005754:	462a      	mov	r2, r5
 8005756:	2300      	movs	r3, #0
 8005758:	60a0      	str	r0, [r4, #8]
 800575a:	7426      	strb	r6, [r4, #16]
 800575c:	6960      	ldr	r0, [r4, #20]
 800575e:	f7ff ffc1 	bl	80056e4 <Number::Int32ToDecChars#7987>
            int digitCount = Int32Precision - index;
 8005762:	f1c0 010a 	rsb	r1, r0, #10
 8005766:	60e1      	str	r1, [r4, #12]
 8005768:	e008      	b.n	800577c <Number::.ctor#7950+0x48>
            int destIndex = 0;
            this.scale = digitCount;
            while(digitCount > 0)
            {
                this.digits[destIndex] = this.digits[index];
 800576a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800576e:	eb02 0246 	add.w	r2, r2, r6, lsl #1
                destIndex++;
                index++;
                digitCount--;
 8005772:	3901      	subs	r1, #1
            this.scale = digitCount;
            while(digitCount > 0)
            {
                this.digits[destIndex] = this.digits[index];
                destIndex++;
                index++;
 8005774:	3001      	adds	r0, #1
            int destIndex = 0;
            this.scale = digitCount;
            while(digitCount > 0)
            {
                this.digits[destIndex] = this.digits[index];
                destIndex++;
 8005776:	3601      	adds	r6, #1
            int digitCount = Int32Precision - index;
            int destIndex = 0;
            this.scale = digitCount;
            while(digitCount > 0)
            {
                this.digits[destIndex] = this.digits[index];
 8005778:	899b      	ldrh	r3, [r3, #12]
 800577a:	8193      	strh	r3, [r2, #12]
            this.negative = false;
            int index = Int32ToDecChars( this.digits, Int32Precision, value, 0 );
            int digitCount = Int32Precision - index;
            int destIndex = 0;
            this.scale = digitCount;
            while(digitCount > 0)
 800577c:	2901      	cmp	r1, #1
 800577e:	db09      	blt.n	8005794 <Number::.ctor#7950+0x60>
            {
                this.digits[destIndex] = this.digits[index];
 8005780:	6962      	ldr	r2, [r4, #20]
 8005782:	b19a      	cbz	r2, 80057ac <Number::.ctor#7950+0x78>
 8005784:	6893      	ldr	r3, [r2, #8]
 8005786:	4298      	cmp	r0, r3
 8005788:	d20e      	bcs.n	80057a8 <Number::.ctor#7950+0x74>
 800578a:	b17a      	cbz	r2, 80057ac <Number::.ctor#7950+0x78>
 800578c:	6893      	ldr	r3, [r2, #8]
 800578e:	429e      	cmp	r6, r3
 8005790:	d3eb      	bcc.n	800576a <Number::.ctor#7950+0x36>
 8005792:	e009      	b.n	80057a8 <Number::.ctor#7950+0x74>
                destIndex++;
                index++;
                digitCount--;
            }
            this.digits[destIndex] = '\0';
 8005794:	6960      	ldr	r0, [r4, #20]
 8005796:	b148      	cbz	r0, 80057ac <Number::.ctor#7950+0x78>
 8005798:	6881      	ldr	r1, [r0, #8]
 800579a:	428e      	cmp	r6, r1
 800579c:	bf3f      	itttt	cc
 800579e:	eb00 0046 	addcc.w	r0, r0, r6, lsl #1
 80057a2:	2100      	movcc	r1, #0
 80057a4:	8181      	strhcc	r1, [r0, #12]
 80057a6:	bd70      	popcc	{r4, r5, r6, pc}
 80057a8:	f7fb fb82 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
    internal class Number
    {
        private int precision;
        private int scale;
        private bool negative;
        private char[] digits = new char[NumberMaxDigits + 1];
 80057ac:	f7fa fe5c 	bl	8000468 <Thread::ThrowNullException#4411>
 80057b0:	17ffb3d4 	.word	0x17ffb3d4
 80057b4:	fffffe0c 	.word	0xfffffe0c
 80057b8:	e80196e8 	.word	0xe80196e8

080057bc <Number::Get#7955>:
        private static String posNumberFormat = "#";

        // code below depends on seeing the null terminator...
        private static char Get( String str, int i )
        {
            return i < str.Length ? str[i] : '\0';
 80057bc:	b580      	push	{r7, lr}
 80057be:	b140      	cbz	r0, 80057d2 <Number::Get#7955+0x16>
 80057c0:	68c2      	ldr	r2, [r0, #12]
 80057c2:	4291      	cmp	r1, r2
 80057c4:	bfa4      	itt	ge
 80057c6:	2000      	movge	r0, #0
 80057c8:	bd80      	popge	{r7, pc}
 80057ca:	f7fb fdeb 	bl	80013a4 <String::get_Chars#4269>
 80057ce:	b280      	uxth	r0, r0
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	f7fa fe49 	bl	8000468 <Thread::ThrowNullException#4411>
 80057d6:	46c0      	nop			; (mov r8, r8)

080057d8 <Number::ToString#7973>:
        }

        private String ToString( char             format ,
                                 int              digits ,
                                 NumberFormatInfo info   )
        {
 80057d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057dc:	b085      	sub	sp, #20
 80057de:	4680      	mov	r8, r0
 80057e0:	460c      	mov	r4, r1
            long                      newBufferLen = MIN_BUFFER_SIZE;
            System.Text.StringBuilder sb           = null;
            int                       digCount     = 0;
            char                      ftype        = (char)(format & 0xFFDF);
 80057e2:	f64f 70df 	movw	r0, #65503	; 0xffdf
 80057e6:	461d      	mov	r5, r3
 80057e8:	4693      	mov	fp, r2
 80057ea:	4020      	ands	r0, r4

            switch(ftype)
 80057ec:	f1a0 0145 	sub.w	r1, r0, #69	; 0x45
 80057f0:	2902      	cmp	r1, #2
 80057f2:	d012      	beq.n	800581a <Number::ToString#7973+0x42>
 80057f4:	2901      	cmp	r1, #1
 80057f6:	d14d      	bne.n	8005894 <Number::ToString#7973+0xbc>
            {
                case 'F':
                    if(digits < 0) digits = info.numberDecimalDigits;
 80057f8:	f1bb 0f00 	cmp.w	fp, #0
 80057fc:	da04      	bge.n	8005808 <Number::ToString#7973+0x30>
 80057fe:	2d00      	cmp	r5, #0
 8005800:	f000 8149 	beq.w	8005a96 <Number::ToString#7973+0x2be>
 8005804:	f8d5 b058 	ldr.w	fp, [r5, #88]	; 0x58

                    if(this.scale < 0)
 8005808:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800580c:	2800      	cmp	r0, #0
 800580e:	f2c0 8094 	blt.w	800593a <Number::ToString#7973+0x162>
                        digCount = 0;
                    else
                        digCount = this.scale + digits;
 8005812:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8005816:	4458      	add	r0, fp
 8005818:	e090      	b.n	800593c <Number::ToString#7973+0x164>

                    FormatScientific( sb, digits, format, info );
                    break;

                case 'G':
                    if(digits < 1) digits = this.precision;
 800581a:	f1bb 0f01 	cmp.w	fp, #1
 800581e:	bfb8      	it	lt
 8005820:	f8d8 b008 	ldrlt.w	fp, [r8, #8]
                    newBufferLen += digits;
 8005824:	f11b 0069 	adds.w	r0, fp, #105	; 0x69

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 8005828:	9004      	str	r0, [sp, #16]
 800582a:	2d00      	cmp	r5, #0
 800582c:	f000 8133 	beq.w	8005a96 <Number::ToString#7973+0x2be>
 8005830:	49a1      	ldr	r1, [pc, #644]	; (8005ab8 <Number::ToString#7973+0x2e0>)
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 8005832:	48a2      	ldr	r0, [pc, #648]	; (8005abc <Number::ToString#7973+0x2e4>)
 8005834:	4aa2      	ldr	r2, [pc, #648]	; (8005ac0 <Number::ToString#7973+0x2e8>)
                case 'G':
                    if(digits < 1) digits = this.precision;
                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 8005836:	f105 0714 	add.w	r7, r5, #20
 800583a:	4479      	add	r1, pc
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 800583c:	4408      	add	r0, r1
 800583e:	4411      	add	r1, r2
                case 'G':
                    if(digits < 1) digits = this.precision;
                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 8005840:	cf8c      	ldmia	r7, {r2, r3, r7}
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;
 8005842:	f8d7 a00c 	ldr.w	sl, [r7, #12]
                case 'G':
                    if(digits < 1) digits = this.precision;
                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 8005846:	68d6      	ldr	r6, [r2, #12]
 8005848:	f8d3 900c 	ldr.w	r9, [r3, #12]
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 800584c:	f7fb f822 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8005850:	4607      	mov	r7, r0
 8005852:	2f00      	cmp	r7, #0
 8005854:	f000 811f 	beq.w	8005a96 <Number::ToString#7973+0x2be>
                case 'G':
                    if(digits < 1) digits = this.precision;
                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 8005858:	9904      	ldr	r1, [sp, #16]
 800585a:	eb09 0006 	add.w	r0, r9, r6
                                 NumberFormatInfo info   )
        {
            long                      newBufferLen = MIN_BUFFER_SIZE;
            System.Text.StringBuilder sb           = null;
            int                       digCount     = 0;
            char                      ftype        = (char)(format & 0xFFDF);
 800585e:	b2a4      	uxth	r4, r4
                case 'G':
                    if(digits < 1) digits = this.precision;
                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 8005860:	eb01 0040 	add.w	r0, r1, r0, lsl #1
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;
 8005864:	eb00 010a 	add.w	r1, r0, sl

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 8005868:	4638      	mov	r0, r7
 800586a:	f7fc f9c7 	bl	8001bfc <StringBuilder::.ctor#9219>

                    RoundNumber( digits );
 800586e:	4640      	mov	r0, r8
 8005870:	4659      	mov	r1, fp
 8005872:	f000 fd17 	bl	80062a4 <Number::RoundNumber#7989>
                    if(this.negative)
 8005876:	f898 0010 	ldrb.w	r0, [r8, #16]
 800587a:	b118      	cbz	r0, 8005884 <Number::ToString#7973+0xac>
                    {
                        sb.Append( info.negativeSign );
 800587c:	69a9      	ldr	r1, [r5, #24]
 800587e:	4638      	mov	r0, r7
 8005880:	f000 fd84 	bl	800638c <StringBuilder::Append#9238>
                    }

                    FormatGeneral( sb, digits, (char)(format - ('G' - 'E')), info );
 8005884:	1ea3      	subs	r3, r4, #2
 8005886:	4640      	mov	r0, r8
 8005888:	4639      	mov	r1, r7
 800588a:	465a      	mov	r2, fp
 800588c:	9500      	str	r5, [sp, #0]
 800588e:	f000 fdb5 	bl	80063fc <Number::FormatGeneral#7991>
 8005892:	e0f9      	b.n	8005a88 <Number::ToString#7973+0x2b0>
 8005894:	bbe9      	cbnz	r1, 8005912 <Number::ToString#7973+0x13a>
                    RoundNumber( this.scale + digits );
                    FormatNumber( sb, digits, info );
                    break;

                case 'E':
                    if(digits < 0) digits = 6;
 8005896:	f1bb 0f00 	cmp.w	fp, #0
 800589a:	bfb8      	it	lt
 800589c:	f04f 0b06 	movlt.w	fp, #6
                    digits++;
 80058a0:	f10b 0a01 	add.w	sl, fp, #1

                    newBufferLen += digits;
 80058a4:	f11a 0069 	adds.w	r0, sl, #105	; 0x69

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 80058a8:	9004      	str	r0, [sp, #16]
 80058aa:	2d00      	cmp	r5, #0
 80058ac:	f000 80f3 	beq.w	8005a96 <Number::ToString#7973+0x2be>
 80058b0:	4985      	ldr	r1, [pc, #532]	; (8005ac8 <Number::ToString#7973+0x2f0>)
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 80058b2:	4882      	ldr	r0, [pc, #520]	; (8005abc <Number::ToString#7973+0x2e4>)
 80058b4:	4a82      	ldr	r2, [pc, #520]	; (8005ac0 <Number::ToString#7973+0x2e8>)
                    digits++;

                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 80058b6:	f105 0714 	add.w	r7, r5, #20
 80058ba:	4479      	add	r1, pc
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 80058bc:	4408      	add	r0, r1
 80058be:	4411      	add	r1, r2
                    digits++;

                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 80058c0:	cf8c      	ldmia	r7, {r2, r3, r7}
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;
 80058c2:	f8d7 b00c 	ldr.w	fp, [r7, #12]
                    digits++;

                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 80058c6:	68d6      	ldr	r6, [r2, #12]
 80058c8:	f8d3 900c 	ldr.w	r9, [r3, #12]
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 80058cc:	f7fa ffe2 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80058d0:	4607      	mov	r7, r0
 80058d2:	2f00      	cmp	r7, #0
 80058d4:	f000 80df 	beq.w	8005a96 <Number::ToString#7973+0x2be>
                    digits++;

                    newBufferLen += digits;

                    // For number and exponent
                    newBufferLen += (info.negativeSign.Length +
 80058d8:	9904      	ldr	r1, [sp, #16]
 80058da:	eb09 0006 	add.w	r0, r9, r6
 80058de:	eb01 0040 	add.w	r0, r1, r0, lsl #1
                                     info.positiveSign.Length) * 2;
                    newBufferLen += info.numberDecimalSeparator.Length;
 80058e2:	eb00 010b 	add.w	r1, r0, fp

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 80058e6:	4638      	mov	r0, r7
 80058e8:	f7fc f988 	bl	8001bfc <StringBuilder::.ctor#9219>

                    RoundNumber( digits );
 80058ec:	4640      	mov	r0, r8
 80058ee:	4651      	mov	r1, sl
 80058f0:	f000 fcd8 	bl	80062a4 <Number::RoundNumber#7989>
                    if(this.negative)
 80058f4:	f898 0010 	ldrb.w	r0, [r8, #16]
 80058f8:	b118      	cbz	r0, 8005902 <Number::ToString#7973+0x12a>
                    {
                        sb.Append( info.negativeSign );
 80058fa:	69a9      	ldr	r1, [r5, #24]
 80058fc:	4638      	mov	r0, r7
 80058fe:	f000 fd45 	bl	800638c <StringBuilder::Append#9238>
                    }

                    FormatScientific( sb, digits, format, info );
 8005902:	4640      	mov	r0, r8
 8005904:	4639      	mov	r1, r7
 8005906:	4652      	mov	r2, sl
 8005908:	4623      	mov	r3, r4
 800590a:	9500      	str	r5, [sp, #0]
 800590c:	f000 ff62 	bl	80067d4 <Number::FormatScientific#7992>
 8005910:	e0ba      	b.n	8005a88 <Number::ToString#7973+0x2b0>
            long                      newBufferLen = MIN_BUFFER_SIZE;
            System.Text.StringBuilder sb           = null;
            int                       digCount     = 0;
            char                      ftype        = (char)(format & 0xFFDF);

            switch(ftype)
 8005912:	284e      	cmp	r0, #78	; 0x4e
 8005914:	d146      	bne.n	80059a4 <Number::ToString#7973+0x1cc>
                    FormatFixed( sb, digits, null, info.numberDecimalSeparator, null, info );
                    break;

                case 'N':
                    // Since we are using digits in our calculation
                    if(digits < 0) digits = info.numberDecimalDigits;
 8005916:	f1bb 3fff 	cmp.w	fp, #4294967295
 800591a:	dc04      	bgt.n	8005926 <Number::ToString#7973+0x14e>
 800591c:	2d00      	cmp	r5, #0
 800591e:	f000 80ba 	beq.w	8005a96 <Number::ToString#7973+0x2be>
 8005922:	f8d5 b058 	ldr.w	fp, [r5, #88]	; 0x58

                    if(this.scale < 0)
 8005926:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800592a:	2800      	cmp	r0, #0
 800592c:	f2c0 8080 	blt.w	8005a30 <Number::ToString#7973+0x258>
                        digCount = 0;
                    else
                        digCount = this.scale + digits;
 8005930:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8005934:	eb00 0a0b 	add.w	sl, r0, fp
 8005938:	e07c      	b.n	8005a34 <Number::ToString#7973+0x25c>
 800593a:	2000      	movs	r0, #0
                    if(this.scale < 0)
                        digCount = 0;
                    else
                        digCount = this.scale + digits;

                    newBufferLen += digCount;
 800593c:	f110 0969 	adds.w	r9, r0, #105	; 0x69

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 8005940:	2d00      	cmp	r5, #0
 8005942:	f000 80a8 	beq.w	8005a96 <Number::ToString#7973+0x2be>
 8005946:	495f      	ldr	r1, [pc, #380]	; (8005ac4 <Number::ToString#7973+0x2ec>)

                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 8005948:	485c      	ldr	r0, [pc, #368]	; (8005abc <Number::ToString#7973+0x2e4>)
 800594a:	4a5d      	ldr	r2, [pc, #372]	; (8005ac0 <Number::ToString#7973+0x2e8>)
 800594c:	4479      	add	r1, pc
 800594e:	4408      	add	r0, r1
 8005950:	4411      	add	r1, r2
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 8005952:	e9d5 2306 	ldrd	r2, r3, [r5, #24]

                    newBufferLen += info.numberDecimalSeparator.Length;
 8005956:	68de      	ldr	r6, [r3, #12]
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 8005958:	68d4      	ldr	r4, [r2, #12]

                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 800595a:	f7fa ff9b 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 800595e:	4607      	mov	r7, r0
 8005960:	2f00      	cmp	r7, #0
 8005962:	f000 8098 	beq.w	8005a96 <Number::ToString#7973+0x2be>
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 8005966:	eb09 0004 	add.w	r0, r9, r4

                    newBufferLen += info.numberDecimalSeparator.Length;
 800596a:	1981      	adds	r1, r0, r6

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 800596c:	4638      	mov	r0, r7
 800596e:	f7fc f945 	bl	8001bfc <StringBuilder::.ctor#9219>

                    RoundNumber( this.scale + digits );
 8005972:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8005976:	eb00 010b 	add.w	r1, r0, fp
 800597a:	4640      	mov	r0, r8
 800597c:	f000 fc92 	bl	80062a4 <Number::RoundNumber#7989>
                    if(this.negative)
 8005980:	f898 0010 	ldrb.w	r0, [r8, #16]
 8005984:	b118      	cbz	r0, 800598e <Number::ToString#7973+0x1b6>
                    {
                        sb.Append( info.negativeSign );
 8005986:	69a9      	ldr	r1, [r5, #24]
 8005988:	4638      	mov	r0, r7
 800598a:	f000 fcff 	bl	800638c <StringBuilder::Append#9238>
                    }
                    FormatFixed( sb, digits, null, info.numberDecimalSeparator, null, info );
 800598e:	69e8      	ldr	r0, [r5, #28]
 8005990:	2100      	movs	r1, #0
 8005992:	465a      	mov	r2, fp
 8005994:	2300      	movs	r3, #0
 8005996:	e9cd 0100 	strd	r0, r1, [sp]
 800599a:	4640      	mov	r0, r8
 800599c:	4639      	mov	r1, r7
 800599e:	f000 fdc1 	bl	8006524 <Number::FormatFixed#7994>
 80059a2:	e071      	b.n	8005a88 <Number::ToString#7973+0x2b0>
 80059a4:	2850      	cmp	r0, #80	; 0x50
 80059a6:	d178      	bne.n	8005a9a <Number::ToString#7973+0x2c2>

                    FormatGeneral( sb, digits, (char)(format - ('G' - 'E')), info );
                    break;

                case 'P':
                    if(digits < 0) digits = info.percentDecimalDigits;
 80059a8:	f1bb 0f00 	cmp.w	fp, #0
 80059ac:	da03      	bge.n	80059b6 <Number::ToString#7973+0x1de>
 80059ae:	2d00      	cmp	r5, #0
 80059b0:	d071      	beq.n	8005a96 <Number::ToString#7973+0x2be>
 80059b2:	f8d5 b074 	ldr.w	fp, [r5, #116]	; 0x74
                    this.scale += 2;
 80059b6:	f8d8 000c 	ldr.w	r0, [r8, #12]

                    if(this.scale < 0)
                        digCount = 0;
                    else
                        digCount = this.scale + digits;
 80059ba:	3002      	adds	r0, #2
 80059bc:	eb00 040b 	add.w	r4, r0, fp

                case 'P':
                    if(digits < 0) digits = info.percentDecimalDigits;
                    this.scale += 2;

                    if(this.scale < 0)
 80059c0:	2800      	cmp	r0, #0
 80059c2:	f8c8 000c 	str.w	r0, [r8, #12]
 80059c6:	bfb8      	it	lt
 80059c8:	2400      	movlt	r4, #0
                        digCount = 0;
                    else
                        digCount = this.scale + digits;

                    newBufferLen += digCount;
 80059ca:	f114 0069 	adds.w	r0, r4, #105	; 0x69

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 80059ce:	9004      	str	r0, [sp, #16]
 80059d0:	2d00      	cmp	r5, #0
 80059d2:	d060      	beq.n	8005a96 <Number::ToString#7973+0x2be>
 80059d4:	493d      	ldr	r1, [pc, #244]	; (8005acc <Number::ToString#7973+0x2f4>)
                    // For all the grouping sizes
                    newBufferLen += info.percentGroupSeparator.Length * digCount;
                    newBufferLen += info.percentDecimalSeparator.Length;
                    newBufferLen += info.percentSymbol.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 80059d6:	4839      	ldr	r0, [pc, #228]	; (8005abc <Number::ToString#7973+0x2e4>)
 80059d8:	4a39      	ldr	r2, [pc, #228]	; (8005ac0 <Number::ToString#7973+0x2e8>)
 80059da:	4479      	add	r1, pc
 80059dc:	4408      	add	r0, r1
 80059de:	4411      	add	r1, r2
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 80059e0:	69aa      	ldr	r2, [r5, #24]

                    // For all the grouping sizes
                    newBufferLen += info.percentGroupSeparator.Length * digCount;
                    newBufferLen += info.percentDecimalSeparator.Length;
 80059e2:	e9d5 3710 	ldrd	r3, r7, [r5, #64]	; 0x40
                    newBufferLen += info.percentSymbol.Length;
 80059e6:	6cae      	ldr	r6, [r5, #72]	; 0x48
 80059e8:	68f6      	ldr	r6, [r6, #12]

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;

                    // For all the grouping sizes
                    newBufferLen += info.percentGroupSeparator.Length * digCount;
 80059ea:	f8d7 900c 	ldr.w	r9, [r7, #12]
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 80059ee:	f8d2 a00c 	ldr.w	sl, [r2, #12]

                    // For all the grouping sizes
                    newBufferLen += info.percentGroupSeparator.Length * digCount;
                    newBufferLen += info.percentDecimalSeparator.Length;
 80059f2:	9603      	str	r6, [sp, #12]
 80059f4:	68de      	ldr	r6, [r3, #12]
                    newBufferLen += info.percentSymbol.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 80059f6:	f7fa ff4d 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80059fa:	4607      	mov	r7, r0
 80059fc:	2f00      	cmp	r7, #0
 80059fe:	d04a      	beq.n	8005a96 <Number::ToString#7973+0x2be>
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 8005a00:	9804      	ldr	r0, [sp, #16]

                    // For all the grouping sizes
                    newBufferLen += info.percentGroupSeparator.Length * digCount;
                    newBufferLen += info.percentDecimalSeparator.Length;
                    newBufferLen += info.percentSymbol.Length;
 8005a02:	9903      	ldr	r1, [sp, #12]
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 8005a04:	4450      	add	r0, sl

                    // For all the grouping sizes
                    newBufferLen += info.percentGroupSeparator.Length * digCount;
 8005a06:	fb09 0004 	mla	r0, r9, r4, r0
                    newBufferLen += info.percentDecimalSeparator.Length;
 8005a0a:	4430      	add	r0, r6
                    newBufferLen += info.percentSymbol.Length;
 8005a0c:	4401      	add	r1, r0

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 8005a0e:	4638      	mov	r0, r7
 8005a10:	f7fc f8f4 	bl	8001bfc <StringBuilder::.ctor#9219>

                    RoundNumber( this.scale + digits );
 8005a14:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8005a18:	eb00 010b 	add.w	r1, r0, fp
 8005a1c:	4640      	mov	r0, r8
 8005a1e:	f000 fc41 	bl	80062a4 <Number::RoundNumber#7989>
                    FormatPercent( sb, digits, info );
 8005a22:	4640      	mov	r0, r8
 8005a24:	4639      	mov	r1, r7
 8005a26:	465a      	mov	r2, fp
 8005a28:	462b      	mov	r3, r5
 8005a2a:	f000 ff93 	bl	8006954 <Number::FormatPercent#7996>
 8005a2e:	e02b      	b.n	8005a88 <Number::ToString#7973+0x2b0>
 8005a30:	f04f 0a00 	mov.w	sl, #0
                    if(this.scale < 0)
                        digCount = 0;
                    else
                        digCount = this.scale + digits;

                    newBufferLen += digCount;
 8005a34:	f11a 0069 	adds.w	r0, sl, #105	; 0x69

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 8005a38:	9004      	str	r0, [sp, #16]
 8005a3a:	b365      	cbz	r5, 8005a96 <Number::ToString#7973+0x2be>
 8005a3c:	4924      	ldr	r1, [pc, #144]	; (8005ad0 <Number::ToString#7973+0x2f8>)

                    // For all the grouping sizes
                    newBufferLen += info.numberGroupSeparator.Length * digCount;
                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 8005a3e:	481f      	ldr	r0, [pc, #124]	; (8005abc <Number::ToString#7973+0x2e4>)
 8005a40:	4a1f      	ldr	r2, [pc, #124]	; (8005ac0 <Number::ToString#7973+0x2e8>)
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 8005a42:	f105 0718 	add.w	r7, r5, #24
 8005a46:	4479      	add	r1, pc

                    // For all the grouping sizes
                    newBufferLen += info.numberGroupSeparator.Length * digCount;
                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 8005a48:	4408      	add	r0, r1
 8005a4a:	4411      	add	r1, r2
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 8005a4c:	cf8c      	ldmia	r7, {r2, r3, r7}

                    // For all the grouping sizes
                    newBufferLen += info.numberGroupSeparator.Length * digCount;
                    newBufferLen += info.numberDecimalSeparator.Length;
 8005a4e:	68de      	ldr	r6, [r3, #12]

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;

                    // For all the grouping sizes
                    newBufferLen += info.numberGroupSeparator.Length * digCount;
 8005a50:	68fc      	ldr	r4, [r7, #12]
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 8005a52:	f8d2 900c 	ldr.w	r9, [r2, #12]

                    // For all the grouping sizes
                    newBufferLen += info.numberGroupSeparator.Length * digCount;
                    newBufferLen += info.numberDecimalSeparator.Length;

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 8005a56:	f7fa ff1d 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8005a5a:	4607      	mov	r7, r0
 8005a5c:	b1df      	cbz	r7, 8005a96 <Number::ToString#7973+0x2be>
                        digCount = this.scale + digits;

                    newBufferLen += digCount;

                    // For number and exponent
                    newBufferLen += info.negativeSign.Length;
 8005a5e:	9804      	ldr	r0, [sp, #16]
 8005a60:	4448      	add	r0, r9

                    // For all the grouping sizes
                    newBufferLen += info.numberGroupSeparator.Length * digCount;
 8005a62:	fb04 000a 	mla	r0, r4, sl, r0
                    newBufferLen += info.numberDecimalSeparator.Length;
 8005a66:	1981      	adds	r1, r0, r6

                    sb = new System.Text.StringBuilder( (int)newBufferLen );
 8005a68:	4638      	mov	r0, r7
 8005a6a:	f7fc f8c7 	bl	8001bfc <StringBuilder::.ctor#9219>

                    RoundNumber( this.scale + digits );
 8005a6e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8005a72:	eb00 010b 	add.w	r1, r0, fp
 8005a76:	4640      	mov	r0, r8
 8005a78:	f000 fc14 	bl	80062a4 <Number::RoundNumber#7989>
                    FormatNumber( sb, digits, info );
 8005a7c:	4640      	mov	r0, r8
 8005a7e:	4639      	mov	r1, r7
 8005a80:	465a      	mov	r2, fp
 8005a82:	462b      	mov	r3, r5
 8005a84:	f000 ff0a 	bl	800689c <Number::FormatNumber#7995>
 8005a88:	b12f      	cbz	r7, 8005a96 <Number::ToString#7973+0x2be>
                    throw new FormatException();
#endif
                // COMPlusThrow(kFormatException,L"Format_BadFormatSpecifier");
            }

            return sb.ToString();
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	f7fc f892 	bl	8001bb4 <StringBuilder::ToString#9230>
 8005a90:	b005      	add	sp, #20
 8005a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

                default:
#if EXCEPTION_STRINGS
                    throw new FormatException( "Format_BadFormatSpecifier" );
#else
                    throw new FormatException();
 8005a96:	f7fa fce7 	bl	8000468 <Thread::ThrowNullException#4411>
 8005a9a:	480e      	ldr	r0, [pc, #56]	; (8005ad4 <Number::ToString#7973+0x2fc>)
 8005a9c:	4907      	ldr	r1, [pc, #28]	; (8005abc <Number::ToString#7973+0x2e4>)
 8005a9e:	4478      	add	r0, pc
 8005aa0:	180c      	adds	r4, r1, r0
 8005aa2:	490d      	ldr	r1, [pc, #52]	; (8005ad8 <Number::ToString#7973+0x300>)
 8005aa4:	4401      	add	r1, r0
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f7fa fef4 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8005aac:	4601      	mov	r1, r0
 8005aae:	2000      	movs	r0, #0
 8005ab0:	6088      	str	r0, [r1, #8]
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f7fa ff04 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8005ab8:	17ffb2da 	.word	0x17ffb2da
 8005abc:	fffffe0c 	.word	0xfffffe0c
 8005ac0:	e8019718 	.word	0xe8019718
 8005ac4:	17ffb1c8 	.word	0x17ffb1c8
 8005ac8:	17ffb25a 	.word	0x17ffb25a
 8005acc:	17ffb13a 	.word	0x17ffb13a
 8005ad0:	17ffb0ce 	.word	0x17ffb0ce
 8005ad4:	17ffb076 	.word	0x17ffb076
 8005ad8:	e8019ce8 	.word	0xe8019ce8

08005adc <Number::ParseFormatSpecifier#7974>:
////        value = 0;
////        return false;
////    }
    
        private static char ParseFormatSpecifier( string format, out int digits )
        {
 8005adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ade:	b081      	sub	sp, #4
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	460c      	mov	r4, r1
 8005ae4:	b3dd      	cbz	r5, 8005b5e <Number::ParseFormatSpecifier#7974+0x82>
            if(format != null)
            {
                int index = 0;
                char c = Get( format, index );
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	2100      	movs	r1, #0
 8005aea:	f7ff fe67 	bl	80057bc <Number::Get#7955>
                if(c != 0)
 8005aee:	b280      	uxth	r0, r0
 8005af0:	b3a8      	cbz	r0, 8005b5e <Number::ParseFormatSpecifier#7974+0x82>
                {
                    if(c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')
 8005af2:	2841      	cmp	r0, #65	; 0x41
 8005af4:	db01      	blt.n	8005afa <Number::ParseFormatSpecifier#7974+0x1e>
 8005af6:	285b      	cmp	r0, #91	; 0x5b
 8005af8:	db03      	blt.n	8005b02 <Number::ParseFormatSpecifier#7974+0x26>
 8005afa:	2861      	cmp	r0, #97	; 0x61
 8005afc:	db29      	blt.n	8005b52 <Number::ParseFormatSpecifier#7974+0x76>
 8005afe:	287a      	cmp	r0, #122	; 0x7a
 8005b00:	dc27      	bgt.n	8005b52 <Number::ParseFormatSpecifier#7974+0x76>
                    {
                        index++;
                        int n = -1;
                        c = Get( format, index );
 8005b02:	4628      	mov	r0, r5
 8005b04:	2101      	movs	r1, #1
 8005b06:	f7ff fe59 	bl	80057bc <Number::Get#7955>
                        if(c >= '0' && c <= '9')
 8005b0a:	b286      	uxth	r6, r0
 8005b0c:	f04f 37ff 	mov.w	r7, #4294967295
 8005b10:	2e30      	cmp	r6, #48	; 0x30
 8005b12:	db1a      	blt.n	8005b4a <Number::ParseFormatSpecifier#7974+0x6e>
 8005b14:	2e3a      	cmp	r6, #58	; 0x3a
 8005b16:	da18      	bge.n	8005b4a <Number::ParseFormatSpecifier#7974+0x6e>
                        {
                            n = (c - '0');
                            index++;
                            c = Get( format, index );
 8005b18:	4628      	mov	r0, r5
 8005b1a:	2102      	movs	r1, #2
 8005b1c:	f7ff fe4e 	bl	80057bc <Number::Get#7955>
                        index++;
                        int n = -1;
                        c = Get( format, index );
                        if(c >= '0' && c <= '9')
                        {
                            n = (c - '0');
 8005b20:	f1a6 0730 	sub.w	r7, r6, #48	; 0x30
 8005b24:	2603      	movs	r6, #3
                            index++;
                            c = Get( format, index );
                            while(c >= '0' && c <= '9')
 8005b26:	b281      	uxth	r1, r0
 8005b28:	2930      	cmp	r1, #48	; 0x30
 8005b2a:	db0e      	blt.n	8005b4a <Number::ParseFormatSpecifier#7974+0x6e>
 8005b2c:	2939      	cmp	r1, #57	; 0x39
 8005b2e:	dc0c      	bgt.n	8005b4a <Number::ParseFormatSpecifier#7974+0x6e>
                            {
                                n = n * 10 + (c - '0');
 8005b30:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 8005b34:	eb01 0040 	add.w	r0, r1, r0, lsl #1
                                index++;
                                c = Get( format, index );
 8005b38:	4631      	mov	r1, r6
                            n = (c - '0');
                            index++;
                            c = Get( format, index );
                            while(c >= '0' && c <= '9')
                            {
                                n = n * 10 + (c - '0');
 8005b3a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
                                index++;
                                c = Get( format, index );
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f7ff fe3c 	bl	80057bc <Number::Get#7955>
                                if(n >= 10) break;
 8005b44:	3601      	adds	r6, #1
 8005b46:	2f09      	cmp	r7, #9
 8005b48:	dded      	ble.n	8005b26 <Number::ParseFormatSpecifier#7974+0x4a>
                            }
                        }
                        if(c == 0)
 8005b4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b4e:	4208      	tst	r0, r1
 8005b50:	d00b      	beq.n	8005b6a <Number::ParseFormatSpecifier#7974+0x8e>
 8005b52:	f04f 30ff 	mov.w	r0, #4294967295
 8005b56:	6020      	str	r0, [r4, #0]
 8005b58:	2000      	movs	r0, #0
 8005b5a:	b001      	add	sp, #4
 8005b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b62:	6020      	str	r0, [r4, #0]
 8005b64:	2047      	movs	r0, #71	; 0x47
 8005b66:	b001      	add	sp, #4
 8005b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        {
                            digits = n;
                            return Get( format, 0 );
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	6027      	str	r7, [r4, #0]
 8005b70:	f7ff fe24 	bl	80057bc <Number::Get#7955>
 8005b74:	b001      	add	sp, #4
 8005b76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b78 <Number::Int32ToDecString#7977>:
        }

        // markples: see also Lightning\Src\VM\COMNumber.cpp::
        // STRINGREF Int32ToDecStr(int value, int digits, STRINGREF sNegative)
        private static String Int32ToDecString( int value, int digits, String sign )
        {
 8005b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b7c:	460d      	mov	r5, r1
 8005b7e:	4692      	mov	sl, r2
 8005b80:	4607      	mov	r7, r0
            //CQuickBytes buf;

            int bufferLength = 100; // was UINT
            int negLength = 0;
            // wchar* src = NULL;
            if(digits < 1) digits = 1;
 8005b82:	2d01      	cmp	r5, #1
 8005b84:	bfb8      	it	lt
 8005b86:	2501      	movlt	r5, #1

            if(value < 0)
 8005b88:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005b8c:	dd04      	ble.n	8005b98 <Number::Int32ToDecString#7977+0x20>
 8005b8e:	f04f 0900 	mov.w	r9, #0
 8005b92:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005b96:	e00b      	b.n	8005bb0 <Number::Int32ToDecString#7977+0x38>
            {
                //src = sNegative->GetBuffer();
                negLength = sign.Length;
 8005b98:	f1ba 0f00 	cmp.w	sl, #0
 8005b9c:	d045      	beq.n	8005c2a <Number::Int32ToDecString#7977+0xb2>
 8005b9e:	f8da 900c 	ldr.w	r9, [sl, #12]
                if(negLength > 85)
 8005ba2:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005ba6:	f1b9 0f55 	cmp.w	r9, #85	; 0x55
 8005baa:	bfc8      	it	gt
 8005bac:	f109 080f 	addgt.w	r8, r9, #15
 8005bb0:	491f      	ldr	r1, [pc, #124]	; (8005c30 <Number::Int32ToDecString#7977+0xb8>)
                {
                    bufferLength = negLength + 15; //was implicit C++ cast
                }
            }

            char[] buffer = new char[bufferLength];
 8005bb2:	4820      	ldr	r0, [pc, #128]	; (8005c34 <Number::Int32ToDecString#7977+0xbc>)
 8005bb4:	4a20      	ldr	r2, [pc, #128]	; (8005c38 <Number::Int32ToDecString#7977+0xc0>)
 8005bb6:	4479      	add	r1, pc
 8005bb8:	4408      	add	r0, r1
 8005bba:	4411      	add	r1, r2
 8005bbc:	4642      	mov	r2, r8
 8005bbe:	f7fb ff29 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 8005bc2:	4606      	mov	r6, r0
 8005bc4:	2f00      	cmp	r7, #0
 8005bc6:	463a      	mov	r2, r7
            //if (!buffer)
            //    COMPlusThrowOM();

            int p = Int32ToDecChars( buffer, bufferLength, (uint)(value >= 0 ? value : -value), digits );
 8005bc8:	4641      	mov	r1, r8
 8005bca:	462b      	mov	r3, r5
 8005bcc:	bf48      	it	mi
 8005bce:	427a      	negmi	r2, r7
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	f7ff fd87 	bl	80056e4 <Number::Int32ToDecChars#7987>
 8005bd6:	4604      	mov	r4, r0
            if(value < 0)
 8005bd8:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005bdc:	dc17      	bgt.n	8005c0e <Number::Int32ToDecString#7977+0x96>
            {
                for(int i = negLength - 1; i >= 0; i--)
 8005bde:	f1a9 0701 	sub.w	r7, r9, #1
 8005be2:	e005      	b.n	8005bf0 <Number::Int32ToDecString#7977+0x78>
 8005be4:	eb06 0144 	add.w	r1, r6, r4, lsl #1
                {
                    buffer[--p] = sign[i];
 8005be8:	b280      	uxth	r0, r0
            //    COMPlusThrowOM();

            int p = Int32ToDecChars( buffer, bufferLength, (uint)(value >= 0 ? value : -value), digits );
            if(value < 0)
            {
                for(int i = negLength - 1; i >= 0; i--)
 8005bea:	3f01      	subs	r7, #1
 8005bec:	462c      	mov	r4, r5
 8005bee:	8148      	strh	r0, [r1, #10]
 8005bf0:	2f00      	cmp	r7, #0
 8005bf2:	db0c      	blt.n	8005c0e <Number::Int32ToDecString#7977+0x96>
                {
                    buffer[--p] = sign[i];
 8005bf4:	f1ba 0f00 	cmp.w	sl, #0
 8005bf8:	d017      	beq.n	8005c2a <Number::Int32ToDecString#7977+0xb2>
 8005bfa:	4650      	mov	r0, sl
 8005bfc:	4639      	mov	r1, r7
 8005bfe:	1e65      	subs	r5, r4, #1
 8005c00:	f7fb fbd0 	bl	80013a4 <String::get_Chars#4269>
 8005c04:	68b1      	ldr	r1, [r6, #8]
 8005c06:	428d      	cmp	r5, r1
 8005c08:	d3ec      	bcc.n	8005be4 <Number::Int32ToDecString#7977+0x6c>
 8005c0a:	f7fb f951 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
                    // *(--p) = *(src+i);
                }
            }

            // _ASSERTE( buffer + bufferLength - p >=0 && buffer <= p);
            return new string( buffer, p, bufferLength - p );
 8005c0e:	eba8 0504 	sub.w	r5, r8, r4
 8005c12:	4628      	mov	r0, r5
 8005c14:	f7fb fb3c 	bl	8001290 <String::FastAllocateString#4262>
 8005c18:	4631      	mov	r1, r6
 8005c1a:	4622      	mov	r2, r4
 8005c1c:	462b      	mov	r3, r5
 8005c1e:	4607      	mov	r7, r0
 8005c20:	f7fb ff64 	bl	8001aec <String::.ctor#4259>
 8005c24:	4638      	mov	r0, r7
 8005c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                {
                    bufferLength = negLength + 15; //was implicit C++ cast
                }
            }

            char[] buffer = new char[bufferLength];
 8005c2a:	f7fa fc1d 	bl	8000468 <Thread::ThrowNullException#4411>
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	17ffaf5e 	.word	0x17ffaf5e
 8005c34:	fffffe0c 	.word	0xfffffe0c
 8005c38:	e80196e8 	.word	0xe80196e8

08005c3c <Number::Int32ToHexString#7978>:
        }

        private static String Int32ToHexString( uint value,
                                               char hexBase,
                                               int digits )
        {
 8005c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3e:	b081      	sub	sp, #4
 8005c40:	460d      	mov	r5, r1
 8005c42:	4911      	ldr	r1, [pc, #68]	; (8005c88 <Number::Int32ToHexString#7978+0x4c>)
 8005c44:	4614      	mov	r4, r2
 8005c46:	4606      	mov	r6, r0
            char[] buffer = new char[100];
 8005c48:	4810      	ldr	r0, [pc, #64]	; (8005c8c <Number::Int32ToHexString#7978+0x50>)
 8005c4a:	4a11      	ldr	r2, [pc, #68]	; (8005c90 <Number::Int32ToHexString#7978+0x54>)
 8005c4c:	4479      	add	r1, pc
 8005c4e:	4408      	add	r0, r1
 8005c50:	4411      	add	r1, r2
 8005c52:	2264      	movs	r2, #100	; 0x64
 8005c54:	f7fb fede 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
            if(digits < 1)
 8005c58:	2c01      	cmp	r4, #1
            {
                digits = 1;
            }
            int start = Int32ToHexChars( buffer, 100, value, hexBase, digits );
 8005c5a:	4631      	mov	r1, r6
 8005c5c:	462a      	mov	r2, r5

        private static String Int32ToHexString( uint value,
                                               char hexBase,
                                               int digits )
        {
            char[] buffer = new char[100];
 8005c5e:	4607      	mov	r7, r0
            if(digits < 1)
 8005c60:	bfb8      	it	lt
 8005c62:	2401      	movlt	r4, #1
            {
                digits = 1;
            }
            int start = Int32ToHexChars( buffer, 100, value, hexBase, digits );
 8005c64:	4623      	mov	r3, r4
 8005c66:	f001 f893 	bl	8006d90 <Number::Int32ToHexChars#7979>
 8005c6a:	4604      	mov	r4, r0
            return new string( buffer, start, 100 - start );
 8005c6c:	f1c4 0564 	rsb	r5, r4, #100	; 0x64
 8005c70:	4628      	mov	r0, r5
 8005c72:	f7fb fb0d 	bl	8001290 <String::FastAllocateString#4262>
 8005c76:	4639      	mov	r1, r7
 8005c78:	4622      	mov	r2, r4
 8005c7a:	462b      	mov	r3, r5
 8005c7c:	4606      	mov	r6, r0
 8005c7e:	f7fb ff35 	bl	8001aec <String::.ctor#4259>
 8005c82:	4630      	mov	r0, r6
 8005c84:	b001      	add	sp, #4
 8005c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c88:	17ffaec8 	.word	0x17ffaec8
 8005c8c:	fffffe0c 	.word	0xfffffe0c
 8005c90:	e80196e8 	.word	0xe80196e8

08005c94 <Number::ToStringFormat#7975>:
        }

        // rusa: see also Lightning\Src\VM\COMNumber.cpp::NumberToStringFormat
        private String ToStringFormat( String           format ,
                                       NumberFormatInfo info   )
        {
 8005c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c98:	b097      	sub	sp, #92	; 0x5c
 8005c9a:	9205      	str	r2, [sp, #20]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	e9cd 2215 	strd	r2, r2, [sp, #84]	; 0x54
 8005ca2:	e9cd 2213 	strd	r2, r2, [sp, #76]	; 0x4c
 8005ca6:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
 8005caa:	e9cd 220f 	strd	r2, r2, [sp, #60]	; 0x3c
 8005cae:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 8005cb2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8005cb6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 8005cba:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8005cbe:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
 8005cc2:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
 8005cc6:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8005cca:	9115      	str	r1, [sp, #84]	; 0x54
 8005ccc:	4602      	mov	r2, r0
            ToStringFormatState state = new ToStringFormatState();

            state.format        = format;
            state.section       = (this.digits[0] == 0 ? 2 : (this.negative ? 1 : 0));
 8005cce:	6943      	ldr	r3, [r0, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 82af 	beq.w	8006234 <Number::ToStringFormat#7975+0x5a0>
 8005cd6:	6899      	ldr	r1, [r3, #8]
 8005cd8:	2900      	cmp	r1, #0
 8005cda:	f000 82a9 	beq.w	8006230 <Number::ToStringFormat#7975+0x59c>
 8005cde:	8998      	ldrh	r0, [r3, #12]
 8005ce0:	b128      	cbz	r0, 8005cee <Number::ToStringFormat#7975+0x5a>
 8005ce2:	4615      	mov	r5, r2
 8005ce4:	7c29      	ldrb	r1, [r5, #16]
 8005ce6:	2900      	cmp	r1, #0
 8005ce8:	bf18      	it	ne
 8005cea:	2101      	movne	r1, #1
 8005cec:	e001      	b.n	8005cf2 <Number::ToStringFormat#7975+0x5e>
 8005cee:	2102      	movs	r1, #2
 8005cf0:	4615      	mov	r5, r2
 8005cf2:	9108      	str	r1, [sp, #32]
            state.sectionOffset = FindSection( state.format, state.section );
 8005cf4:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005cf6:	f000 fe91 	bl	8006a1c <Number::FindSection#7976>
 8005cfa:	ac08      	add	r4, sp, #32
 8005cfc:	9009      	str	r0, [sp, #36]	; 0x24
 8005cfe:	e000      	b.n	8005d02 <Number::ToStringFormat#7975+0x6e>
 8005d00:	9009      	str	r0, [sp, #36]	; 0x24

            while(true)
            {
                state.Reset();
 8005d02:	4620      	mov	r0, r4
 8005d04:	f000 feda 	bl	8006abc <ToStringFormatState::Reset#11593>

                char ch = state.DecodeFormat( state.Get() );
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f000 fee6 	bl	8006ada <ToStringFormatState::Get#11597>
 8005d0e:	4601      	mov	r1, r0
 8005d10:	4620      	mov	r0, r4
 8005d12:	f000 fef7 	bl	8006b04 <ToStringFormatState::DecodeFormat#11595>

                if(this.digits[0] != 0)
 8005d16:	6968      	ldr	r0, [r5, #20]
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	f000 828b 	beq.w	8006234 <Number::ToStringFormat#7975+0x5a0>
 8005d1e:	6881      	ldr	r1, [r0, #8]
 8005d20:	2900      	cmp	r1, #0
 8005d22:	f000 8285 	beq.w	8006230 <Number::ToStringFormat#7975+0x59c>
 8005d26:	8980      	ldrh	r0, [r0, #12]
 8005d28:	b308      	cbz	r0, 8005d6e <Number::ToStringFormat#7975+0xda>
                {
                    this.scale += state.scaleAdjust;
 8005d2a:	68e8      	ldr	r0, [r5, #12]
 8005d2c:	990d      	ldr	r1, [sp, #52]	; 0x34

                    int pos = (state.scientific ?
 8005d2e:	4408      	add	r0, r1
 8005d30:	60e8      	str	r0, [r5, #12]
 8005d32:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8005d36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d38:	2a00      	cmp	r2, #0
 8005d3a:	bf02      	ittt	eq
 8005d3c:	4408      	addeq	r0, r1
 8005d3e:	990f      	ldreq	r1, [sp, #60]	; 0x3c
 8005d40:	1a41      	subeq	r1, r0, r1
                               state.digitCount :
                               (this.scale + state.digitCount - state.decimalPos));

                    this.RoundNumber( pos );
 8005d42:	4628      	mov	r0, r5
 8005d44:	f000 faae 	bl	80062a4 <Number::RoundNumber#7989>

                    if(this.digits[0] == 0)
 8005d48:	6968      	ldr	r0, [r5, #20]
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	f000 8272 	beq.w	8006234 <Number::ToStringFormat#7975+0x5a0>
 8005d50:	6881      	ldr	r1, [r0, #8]
 8005d52:	2900      	cmp	r1, #0
 8005d54:	f000 826c 	beq.w	8006230 <Number::ToStringFormat#7975+0x59c>
 8005d58:	8980      	ldrh	r0, [r0, #12]
 8005d5a:	b950      	cbnz	r0, 8005d72 <Number::ToStringFormat#7975+0xde>
                    {
                        state.src = FindSection( state.format, 2 );
 8005d5c:	9815      	ldr	r0, [sp, #84]	; 0x54
                        if(state.src != state.sectionOffset)
                        {
                            state.sectionOffset = state.src;
 8005d5e:	2102      	movs	r1, #2
 8005d60:	f000 fe5c 	bl	8006a1c <Number::FindSection#7976>
 8005d64:	9016      	str	r0, [sp, #88]	; 0x58
                    this.RoundNumber( pos );

                    if(this.digits[0] == 0)
                    {
                        state.src = FindSection( state.format, 2 );
                        if(state.src != state.sectionOffset)
 8005d66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d68:	4288      	cmp	r0, r1
 8005d6a:	d1c9      	bne.n	8005d00 <Number::ToStringFormat#7975+0x6c>
 8005d6c:	e001      	b.n	8005d72 <Number::ToStringFormat#7975+0xde>
 8005d6e:	2000      	movs	r0, #0
 8005d70:	7428      	strb	r0, [r5, #16]
                    this.negative = false;
                }
                break;
            }

            state.firstDigit = (state.firstDigit < state.decimalPos) ? state.decimalPos - state.firstDigit : 0;
 8005d72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005d74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005d76:	4288      	cmp	r0, r1
 8005d78:	da03      	bge.n	8005d82 <Number::ToStringFormat#7975+0xee>
 8005d7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005d7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005d7e:	1a08      	subs	r0, r1, r0
 8005d80:	e000      	b.n	8005d84 <Number::ToStringFormat#7975+0xf0>
 8005d82:	2000      	movs	r0, #0
 8005d84:	900a      	str	r0, [sp, #40]	; 0x28
            state.lastDigit  = (state.lastDigit  > state.decimalPos) ? state.decimalPos - state. lastDigit : 0;
 8005d86:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005d88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005d8a:	4288      	cmp	r0, r1
 8005d8c:	dd03      	ble.n	8005d96 <Number::ToStringFormat#7975+0x102>
 8005d8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005d90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005d92:	1a08      	subs	r0, r1, r0
 8005d94:	e000      	b.n	8005d98 <Number::ToStringFormat#7975+0x104>
 8005d96:	2000      	movs	r0, #0
 8005d98:	900b      	str	r0, [sp, #44]	; 0x2c

            int digPos;
            int adjust;

            if(state.scientific)
 8005d9a:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8005d9e:	b110      	cbz	r0, 8005da6 <Number::ToStringFormat#7975+0x112>
            {
                digPos = state.decimalPos;
 8005da0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005da2:	2600      	movs	r6, #0
 8005da4:	e008      	b.n	8005db8 <Number::ToStringFormat#7975+0x124>
                adjust = 0;
            }
            else
            {
                digPos = (this.scale > state.decimalPos) ? this.scale : state.decimalPos;
 8005da6:	68e8      	ldr	r0, [r5, #12]
 8005da8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005daa:	4288      	cmp	r0, r1
 8005dac:	bfd4      	ite	le
 8005dae:	9a0f      	ldrle	r2, [sp, #60]	; 0x3c
 8005db0:	68ea      	ldrgt	r2, [r5, #12]
                adjust = this.scale - state.decimalPos;
 8005db2:	68e8      	ldr	r0, [r5, #12]
 8005db4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005db6:	1a46      	subs	r6, r0, r1
            }

            state.src = state.sectionOffset;
 8005db8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dba:	9207      	str	r2, [sp, #28]
 8005dbc:	9016      	str	r0, [sp, #88]	; 0x58
            ulong adjustLength   = (adjust > 0) ? (uint)adjust : 0U;
            int   bufferLength   = 125;
            int[] thousandSepPos = null;
            int   thousandSepCtr = -1;

            if(state.thousandSeps != 0)
 8005dbe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	d076      	beq.n	8005eb2 <Number::ToStringFormat#7975+0x21e>
            {
                int groupSizeLen = info.numberGroupSizes.Length;
 8005dc4:	9805      	ldr	r0, [sp, #20]
 8005dc6:	9506      	str	r5, [sp, #24]
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	f000 8233 	beq.w	8006234 <Number::ToStringFormat#7975+0x5a0>
 8005dce:	f8df 2468 	ldr.w	r2, [pc, #1128]	; 8006238 <Number::ToStringFormat#7975+0x5a4>
                {
                    state.thousandSeps = 0;
                }
                else
                {
                    thousandSepPos = new int[bufferLength];
 8005dd2:	f8df 1468 	ldr.w	r1, [pc, #1128]	; 800623c <Number::ToStringFormat#7975+0x5a8>
 8005dd6:	447a      	add	r2, pc
 8005dd8:	1888      	adds	r0, r1, r2
 8005dda:	f8df 1464 	ldr.w	r1, [pc, #1124]	; 8006240 <Number::ToStringFormat#7975+0x5ac>
 8005dde:	9003      	str	r0, [sp, #12]
 8005de0:	4411      	add	r1, r2
 8005de2:	227d      	movs	r2, #125	; 0x7d
 8005de4:	9102      	str	r1, [sp, #8]
 8005de6:	f7fb fe15 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>

                    long groupTotalSizeCount = info.numberGroupSizes[0];
                    int  groupSizeIndex      = 0;
                    int  groupSize           = (int)groupTotalSizeCount;
                    int  totalDigits         = digPos + ((adjust < 0) ? adjust : 0);
 8005dea:	9c07      	ldr	r4, [sp, #28]
 8005dec:	2e00      	cmp	r6, #0
 8005dee:	9604      	str	r6, [sp, #16]
                {
                    state.thousandSeps = 0;
                }
                else
                {
                    thousandSepPos = new int[bufferLength];
 8005df0:	4680      	mov	r8, r0
 8005df2:	f04f 0a7d 	mov.w	sl, #125	; 0x7d
 8005df6:	f04f 39ff 	mov.w	r9, #4294967295

                    long groupTotalSizeCount = info.numberGroupSizes[0];
                    int  groupSizeIndex      = 0;
                    int  groupSize           = (int)groupTotalSizeCount;
                    int  totalDigits         = digPos + ((adjust < 0) ? adjust : 0);
 8005dfa:	bfb8      	it	lt
 8005dfc:	4434      	addlt	r4, r6
                    int  numDigits           = (state.firstDigit > totalDigits) ? state.firstDigit : totalDigits;
 8005dfe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005e00:	42a0      	cmp	r0, r4
 8005e02:	bfc8      	it	gt
 8005e04:	4604      	movgt	r4, r0
                }
                else
                {
                    thousandSepPos = new int[bufferLength];

                    long groupTotalSizeCount = info.numberGroupSizes[0];
 8005e06:	9805      	ldr	r0, [sp, #20]
 8005e08:	6880      	ldr	r0, [r0, #8]
 8005e0a:	68c7      	ldr	r7, [r0, #12]
 8005e0c:	17fd      	asrs	r5, r7, #31
 8005e0e:	46bb      	mov	fp, r7
 8005e10:	e001      	b.n	8005e16 <Number::ToStringFormat#7975+0x182>
 8005e12:	4680      	mov	r8, r0
 8005e14:	46b1      	mov	r9, r6
                    int  groupSizeIndex      = 0;
                    int  groupSize           = (int)groupTotalSizeCount;
                    int  totalDigits         = digPos + ((adjust < 0) ? adjust : 0);
                    int  numDigits           = (state.firstDigit > totalDigits) ? state.firstDigit : totalDigits;

                    while(numDigits > groupTotalSizeCount)
 8005e16:	ebaa 0009 	sub.w	r0, sl, r9
 8005e1a:	455c      	cmp	r4, fp
 8005e1c:	f04f 0100 	mov.w	r1, #0
 8005e20:	ea4f 73e4 	mov.w	r3, r4, asr #31
 8005e24:	bf98      	it	ls
 8005e26:	2101      	movls	r1, #1
 8005e28:	42ab      	cmp	r3, r5
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	bfd8      	it	le
 8005e30:	2301      	movle	r3, #1
 8005e32:	ebb5 7fe4 	cmp.w	r5, r4, asr #31
 8005e36:	bf08      	it	eq
 8005e38:	460b      	moveq	r3, r1
 8005e3a:	bbbb      	cbnz	r3, 8005eac <Number::ToStringFormat#7975+0x218>
 8005e3c:	b3b7      	cbz	r7, 8005eac <Number::ToStringFormat#7975+0x218>
                        {
                            break;
                        }

                        thousandSepCtr++;
                        thousandSepPos[thousandSepCtr] = (int)groupTotalSizeCount;
 8005e3e:	f1b8 0f00 	cmp.w	r8, #0
 8005e42:	f000 81f7 	beq.w	8006234 <Number::ToStringFormat#7975+0x5a0>
 8005e46:	f8d8 1008 	ldr.w	r1, [r8, #8]
                        if(groupSize == 0)
                        {
                            break;
                        }

                        thousandSepCtr++;
 8005e4a:	f109 0601 	add.w	r6, r9, #1
                        thousandSepPos[thousandSepCtr] = (int)groupTotalSizeCount;
 8005e4e:	428e      	cmp	r6, r1
 8005e50:	f080 81ee 	bcs.w	8006230 <Number::ToStringFormat#7975+0x59c>
 8005e54:	eb08 0189 	add.w	r1, r8, r9, lsl #2
                            groupSizeIndex++;
                            groupSize = info.numberGroupSizes[groupSizeIndex];
                        }

                        groupTotalSizeCount += groupSize;
                        if(bufferLength - thousandSepCtr < 10)
 8005e58:	3801      	subs	r0, #1
 8005e5a:	46b1      	mov	r9, r6
 8005e5c:	f8c1 b010 	str.w	fp, [r1, #16]
                        {
                            groupSizeIndex++;
                            groupSize = info.numberGroupSizes[groupSizeIndex];
                        }

                        groupTotalSizeCount += groupSize;
 8005e60:	eb1b 0b07 	adds.w	fp, fp, r7
 8005e64:	eb45 75e7 	adc.w	r5, r5, r7, asr #31
                        if(bufferLength - thousandSepCtr < 10)
 8005e68:	2809      	cmp	r0, #9
 8005e6a:	dcd6      	bgt.n	8005e1a <Number::ToStringFormat#7975+0x186>
                        {
                            bufferLength *= 2;
                            int[] oldThousandSepPos = thousandSepPos;
                            thousandSepPos = new int[bufferLength];
 8005e6c:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
                        }

                        groupTotalSizeCount += groupSize;
                        if(bufferLength - thousandSepCtr < 10)
                        {
                            bufferLength *= 2;
 8005e70:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
                            int[] oldThousandSepPos = thousandSepPos;
                            thousandSepPos = new int[bufferLength];
 8005e74:	4652      	mov	r2, sl
 8005e76:	f7fb fdcd 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
                            for(int i = 0; i < thousandSepCtr; i++)
 8005e7a:	f100 0c0c 	add.w	ip, r0, #12
 8005e7e:	f108 020c 	add.w	r2, r8, #12
 8005e82:	2300      	movs	r3, #0
 8005e84:	e004      	b.n	8005e90 <Number::ToStringFormat#7975+0x1fc>
                            {
                                thousandSepPos[i] = oldThousandSepPos[i];
 8005e86:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e8a:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
                        if(bufferLength - thousandSepCtr < 10)
                        {
                            bufferLength *= 2;
                            int[] oldThousandSepPos = thousandSepPos;
                            thousandSepPos = new int[bufferLength];
                            for(int i = 0; i < thousandSepCtr; i++)
 8005e8e:	3301      	adds	r3, #1
 8005e90:	42b3      	cmp	r3, r6
 8005e92:	dabe      	bge.n	8005e12 <Number::ToStringFormat#7975+0x17e>
                            {
                                thousandSepPos[i] = oldThousandSepPos[i];
 8005e94:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8005e98:	428b      	cmp	r3, r1
 8005e9a:	f080 81c9 	bcs.w	8006230 <Number::ToStringFormat#7975+0x59c>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	f000 81c8 	beq.w	8006234 <Number::ToStringFormat#7975+0x5a0>
 8005ea4:	6881      	ldr	r1, [r0, #8]
 8005ea6:	428b      	cmp	r3, r1
 8005ea8:	d3ed      	bcc.n	8005e86 <Number::ToStringFormat#7975+0x1f2>
 8005eaa:	e1c1      	b.n	8006230 <Number::ToStringFormat#7975+0x59c>
 8005eac:	9d06      	ldr	r5, [sp, #24]
 8005eae:	9e04      	ldr	r6, [sp, #16]
 8005eb0:	e003      	b.n	8005eba <Number::ToStringFormat#7975+0x226>
 8005eb2:	f04f 39ff 	mov.w	r9, #4294967295
 8005eb6:	f04f 0800 	mov.w	r8, #0
 8005eba:	f8df 1388 	ldr.w	r1, [pc, #904]	; 8006244 <Number::ToStringFormat#7975+0x5b0>

                    adjustLength += (ulong)((thousandSepCtr + 1) * info.numberGroupSeparator.Length);
                }
            }

            System.Text.StringBuilder sb = new System.Text.StringBuilder( 128 );
 8005ebe:	f8df 037c 	ldr.w	r0, [pc, #892]	; 800623c <Number::ToStringFormat#7975+0x5a8>
 8005ec2:	f8df 2384 	ldr.w	r2, [pc, #900]	; 8006248 <Number::ToStringFormat#7975+0x5b4>
 8005ec6:	9506      	str	r5, [sp, #24]
 8005ec8:	4479      	add	r1, pc
 8005eca:	4408      	add	r0, r1
 8005ecc:	4411      	add	r1, r2
 8005ece:	f7fa fce1 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8005ed2:	2180      	movs	r1, #128	; 0x80
 8005ed4:	4607      	mov	r7, r0
 8005ed6:	f7fb fe91 	bl	8001bfc <StringBuilder::.ctor#9219>

            if(this.negative && state.sectionOffset == 0)
 8005eda:	7c28      	ldrb	r0, [r5, #16]
 8005edc:	b150      	cbz	r0, 8005ef4 <Number::ToStringFormat#7975+0x260>
 8005ede:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ee0:	b940      	cbnz	r0, 8005ef4 <Number::ToStringFormat#7975+0x260>
            {
                sb.Append( info.negativeSign );
 8005ee2:	9805      	ldr	r0, [sp, #20]
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	f000 81a5 	beq.w	8006234 <Number::ToStringFormat#7975+0x5a0>
 8005eea:	9805      	ldr	r0, [sp, #20]
 8005eec:	6981      	ldr	r1, [r0, #24]
 8005eee:	4638      	mov	r0, r7
 8005ef0:	f000 fa4c 	bl	800638c <StringBuilder::Append#9238>
 8005ef4:	a808      	add	r0, sp, #32
            }

            {
                char ch          = state.Get();
 8005ef6:	f000 fdf0 	bl	8006ada <ToStringFormatState::Get#11597>
 8005efa:	4605      	mov	r5, r0
 8005efc:	f04f 0b00 	mov.w	fp, #0
                int  digitOffset = 0;

                while(ch != 0 && ch != ';')
 8005f00:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005f04:	4205      	tst	r5, r0
 8005f06:	bf1c      	itt	ne
 8005f08:	b2ac      	uxthne	r4, r5
 8005f0a:	2c3b      	cmpne	r4, #59	; 0x3b
 8005f0c:	f000 818a 	beq.w	8006224 <Number::ToStringFormat#7975+0x590>
                {
                    switch(ch)
 8005f10:	2c46      	cmp	r4, #70	; 0x46
 8005f12:	d30f      	bcc.n	8005f34 <Number::ToStringFormat#7975+0x2a0>
 8005f14:	2c5c      	cmp	r4, #92	; 0x5c
 8005f16:	d056      	beq.n	8005fc6 <Number::ToStringFormat#7975+0x332>
 8005f18:	2c65      	cmp	r4, #101	; 0x65
 8005f1a:	d016      	beq.n	8005f4a <Number::ToStringFormat#7975+0x2b6>
 8005f1c:	f242 0030 	movw	r0, #8240	; 0x2030
 8005f20:	4284      	cmp	r4, r0
 8005f22:	f040 812f 	bne.w	8006184 <Number::ToStringFormat#7975+0x4f0>

                        case '.':
                            break;

                        case '\u2030':
                            sb.Append( info.perMilleSymbol );
 8005f26:	9805      	ldr	r0, [sp, #20]
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	f000 8183 	beq.w	8006234 <Number::ToStringFormat#7975+0x5a0>
 8005f2e:	9805      	ldr	r0, [sp, #20]
 8005f30:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005f32:	e035      	b.n	8005fa0 <Number::ToStringFormat#7975+0x30c>
                char ch          = state.Get();
                int  digitOffset = 0;

                while(ch != 0 && ch != ';')
                {
                    switch(ch)
 8005f34:	f1a4 0022 	sub.w	r0, r4, #34	; 0x22
 8005f38:	2805      	cmp	r0, #5
 8005f3a:	d923      	bls.n	8005f84 <Number::ToStringFormat#7975+0x2f0>
 8005f3c:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
 8005f40:	2804      	cmp	r0, #4
 8005f42:	d94a      	bls.n	8005fda <Number::ToStringFormat#7975+0x346>
 8005f44:	2c45      	cmp	r4, #69	; 0x45
 8005f46:	f040 811d 	bne.w	8006184 <Number::ToStringFormat#7975+0x4f0>
                        case 'e':
                            {
                                String sign = null;
                                int    i    = 0;

                                if(state.scientific)
 8005f4a:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	f000 809e 	beq.w	8006090 <Number::ToStringFormat#7975+0x3fc>
 8005f54:	e9dd 0115 	ldrd	r0, r1, [sp, #84]	; 0x54
 8005f58:	2200      	movs	r2, #0
                                {
                                    char ch2 = state.PeekAt( 0 );
 8005f5a:	9204      	str	r2, [sp, #16]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f000 feba 	bl	8006cd6 <ToStringFormatState::PeekAt#11599>
 8005f62:	4604      	mov	r4, r0
 8005f64:	e9dd 0115 	ldrd	r0, r1, [sp, #84]	; 0x54
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f04f 0a01 	mov.w	sl, #1
                                    char ch3 = state.PeekAt( 1 );
 8005f6e:	f000 feb2 	bl	8006cd6 <ToStringFormatState::PeekAt#11599>

                                    if(ch2 == '0')
 8005f72:	b2a1      	uxth	r1, r4
 8005f74:	292b      	cmp	r1, #43	; 0x2b
 8005f76:	f000 80c3 	beq.w	8006100 <Number::ToStringFormat#7975+0x46c>
 8005f7a:	292d      	cmp	r1, #45	; 0x2d
 8005f7c:	f040 80ca 	bne.w	8006114 <Number::ToStringFormat#7975+0x480>
                                    else if(ch2 == '+' &&
                                            ch3 == '0')
                                    {
                                        sign = info.positiveSign;
                                    }
                                    else if(ch2 == '-' &&
 8005f80:	b280      	uxth	r0, r0
 8005f82:	e0d4      	b.n	800612e <Number::ToStringFormat#7975+0x49a>
 8005f84:	e8df f010 	tbh	[pc, r0, lsl #1]
 8005f88:	00360013 	.word	0x00360013
 8005f8c:	000600fe 	.word	0x000600fe
 8005f90:	001300fe 	.word	0x001300fe
                        case '\u2030':
                            sb.Append( info.perMilleSymbol );
                            break;

                        case '%':
                            sb.Append( info.percentSymbol );
 8005f94:	9805      	ldr	r0, [sp, #20]
 8005f96:	2800      	cmp	r0, #0
 8005f98:	f000 814c 	beq.w	8006234 <Number::ToStringFormat#7975+0x5a0>
 8005f9c:	9805      	ldr	r0, [sp, #20]
 8005f9e:	6c81      	ldr	r1, [r0, #72]	; 0x48

                        case '.':
                            break;

                        case '\u2030':
                            sb.Append( info.perMilleSymbol );
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	f000 f9f3 	bl	800638c <StringBuilder::Append#9238>
 8005fa6:	e01d      	b.n	8005fe4 <Number::ToStringFormat#7975+0x350>
                                if(ch2 == 0 || ch2 == ch)
                                {
                                    break;
                                }

                                sb.Append( ch2 );
 8005fa8:	4638      	mov	r0, r7
 8005faa:	f000 fe68 	bl	8006c7e <StringBuilder::Append#9252>
 8005fae:	a808      	add	r0, sp, #32

                        case '\'':
                        case '"':
                            while(true)
                            {
                                char ch2 = state.Get();
 8005fb0:	f000 fd93 	bl	8006ada <ToStringFormatState::Get#11597>
 8005fb4:	4601      	mov	r1, r0

            {
                char ch          = state.Get();
                int  digitOffset = 0;

                while(ch != 0 && ch != ';')
 8005fb6:	f64f 70ff 	movw	r0, #65535	; 0xffff
                        case '"':
                            while(true)
                            {
                                char ch2 = state.Get();

                                if(ch2 == 0 || ch2 == ch)
 8005fba:	4201      	tst	r1, r0
 8005fbc:	bf1c      	itt	ne
 8005fbe:	b288      	uxthne	r0, r1
 8005fc0:	42a0      	cmpne	r0, r4
 8005fc2:	d1f1      	bne.n	8005fa8 <Number::ToStringFormat#7975+0x314>
 8005fc4:	e00e      	b.n	8005fe4 <Number::ToStringFormat#7975+0x350>
 8005fc6:	a808      	add	r0, sp, #32
                            }
                            break;

                        case '\\':
                            {
                                char ch2 = state.Get();
 8005fc8:	f000 fd87 	bl	8006ada <ToStringFormatState::Get#11597>
 8005fcc:	4601      	mov	r1, r0

            {
                char ch          = state.Get();
                int  digitOffset = 0;

                while(ch != 0 && ch != ';')
 8005fce:	f64f 70ff 	movw	r0, #65535	; 0xffff

                        case '\\':
                            {
                                char ch2 = state.Get();

                                if(ch2 != 0)
 8005fd2:	4201      	tst	r1, r0
 8005fd4:	d006      	beq.n	8005fe4 <Number::ToStringFormat#7975+0x350>
                                {
                                    sb.Append( ch2 );
 8005fd6:	4638      	mov	r0, r7
 8005fd8:	e0d6      	b.n	8006188 <Number::ToStringFormat#7975+0x4f4>
 8005fda:	e8df f000 	tbb	[pc, r0]
 8005fde:	d303      	.short	0xd303
 8005fe0:	000bd303 	.word	0x000bd303
 8005fe4:	a808      	add	r0, sp, #32
                        default:
                            sb.Append( ch );
                            break;
                    }

                    ch = state.Get();
 8005fe6:	f000 fd78 	bl	8006ada <ToStringFormatState::Get#11597>
 8005fea:	4605      	mov	r5, r0
 8005fec:	e788      	b.n	8005f00 <Number::ToStringFormat#7975+0x26c>
                                            sb.Append( info.numberGroupSeparator );
                                            thousandSepCtr--;
                                        }
                                    }

                                    digPos--;
 8005fee:	3a01      	subs	r2, #1
                                    adjust--;
 8005ff0:	3e01      	subs	r6, #1
 8005ff2:	9207      	str	r2, [sp, #28]
                    switch(ch)
                    {
                        case '#':
                        case '0':
                            {
                                while(adjust > 0)
 8005ff4:	2e01      	cmp	r6, #1
 8005ff6:	db62      	blt.n	80060be <Number::ToStringFormat#7975+0x42a>
                                {
                                    sb.Append( this.digits[digitOffset] != 0 ? this.digits[digitOffset++] : '0' );
 8005ff8:	9806      	ldr	r0, [sp, #24]
 8005ffa:	6940      	ldr	r0, [r0, #20]
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	f000 8119 	beq.w	8006234 <Number::ToStringFormat#7975+0x5a0>
 8006002:	6881      	ldr	r1, [r0, #8]
 8006004:	458b      	cmp	fp, r1
 8006006:	f080 8113 	bcs.w	8006230 <Number::ToStringFormat#7975+0x59c>
 800600a:	eb00 004b 	add.w	r0, r0, fp, lsl #1
 800600e:	8980      	ldrh	r0, [r0, #12]
 8006010:	b178      	cbz	r0, 8006032 <Number::ToStringFormat#7975+0x39e>
 8006012:	9806      	ldr	r0, [sp, #24]
 8006014:	6940      	ldr	r0, [r0, #20]
 8006016:	2800      	cmp	r0, #0
 8006018:	f000 810c 	beq.w	8006234 <Number::ToStringFormat#7975+0x5a0>
 800601c:	6881      	ldr	r1, [r0, #8]
 800601e:	458b      	cmp	fp, r1
 8006020:	f080 8106 	bcs.w	8006230 <Number::ToStringFormat#7975+0x59c>
 8006024:	eb00 004b 	add.w	r0, r0, fp, lsl #1
 8006028:	f10b 0201 	add.w	r2, fp, #1
 800602c:	8981      	ldrh	r1, [r0, #12]
 800602e:	4693      	mov	fp, r2
 8006030:	e000      	b.n	8006034 <Number::ToStringFormat#7975+0x3a0>
 8006032:	2130      	movs	r1, #48	; 0x30
 8006034:	4638      	mov	r0, r7
 8006036:	f000 fe22 	bl	8006c7e <StringBuilder::Append#9252>
 800603a:	9a07      	ldr	r2, [sp, #28]
 800603c:	2000      	movs	r0, #0

                                    if(state.thousandSeps != 0 &&
 800603e:	2a01      	cmp	r2, #1
 8006040:	bfc8      	it	gt
 8006042:	2001      	movgt	r0, #1
 8006044:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006046:	2900      	cmp	r1, #0
 8006048:	bf18      	it	ne
 800604a:	2101      	movne	r1, #1
 800604c:	4201      	tst	r1, r0
 800604e:	d0ce      	beq.n	8005fee <Number::ToStringFormat#7975+0x35a>
 8006050:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006054:	ddcb      	ble.n	8005fee <Number::ToStringFormat#7975+0x35a>
                                       digPos             >  1 &&
                                       thousandSepCtr     >= 0  )
                                    {
                                        if(digPos == thousandSepPos[thousandSepCtr] + 1)
 8006056:	f1b8 0f00 	cmp.w	r8, #0
 800605a:	f000 80eb 	beq.w	8006234 <Number::ToStringFormat#7975+0x5a0>
 800605e:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006062:	4581      	cmp	r9, r0
 8006064:	f080 80e4 	bcs.w	8006230 <Number::ToStringFormat#7975+0x59c>
 8006068:	eb08 0089 	add.w	r0, r8, r9, lsl #2
 800606c:	68c0      	ldr	r0, [r0, #12]
 800606e:	3001      	adds	r0, #1
 8006070:	4282      	cmp	r2, r0
 8006072:	d1bc      	bne.n	8005fee <Number::ToStringFormat#7975+0x35a>
                                        {
                                            sb.Append( info.numberGroupSeparator );
 8006074:	9805      	ldr	r0, [sp, #20]
 8006076:	4614      	mov	r4, r2
 8006078:	2800      	cmp	r0, #0
 800607a:	f000 80db 	beq.w	8006234 <Number::ToStringFormat#7975+0x5a0>
 800607e:	9805      	ldr	r0, [sp, #20]
 8006080:	6a01      	ldr	r1, [r0, #32]
 8006082:	4638      	mov	r0, r7
 8006084:	f000 f982 	bl	800638c <StringBuilder::Append#9238>
                                            thousandSepCtr--;
 8006088:	f1a9 0901 	sub.w	r9, r9, #1
 800608c:	4622      	mov	r2, r4
 800608e:	e7ae      	b.n	8005fee <Number::ToStringFormat#7975+0x35a>
                                    FormatExponent( sb, exp, ch, sign, info.negativeSign, i );
                                    state.scientific = false;
                                }
                                else
                                {
                                    sb.Append( ch );
 8006090:	4638      	mov	r0, r7
 8006092:	4629      	mov	r1, r5
 8006094:	f000 fdf3 	bl	8006c7e <StringBuilder::Append#9252>
 8006098:	ac08      	add	r4, sp, #32
 800609a:	e006      	b.n	80060aa <Number::ToStringFormat#7975+0x416>

                                    while(state.PeekAt( 0 ) != 0)
                                    {
                                        sb.Append( state.Get() );
 800609c:	4620      	mov	r0, r4
 800609e:	f000 fd1c 	bl	8006ada <ToStringFormatState::Get#11597>
 80060a2:	4601      	mov	r1, r0
 80060a4:	4638      	mov	r0, r7
 80060a6:	f000 fdea 	bl	8006c7e <StringBuilder::Append#9252>
 80060aa:	e9dd 0115 	ldrd	r0, r1, [sp, #84]	; 0x54
 80060ae:	2200      	movs	r2, #0
                                }
                                else
                                {
                                    sb.Append( ch );

                                    while(state.PeekAt( 0 ) != 0)
 80060b0:	f000 fe11 	bl	8006cd6 <ToStringFormatState::PeekAt#11599>

            {
                char ch          = state.Get();
                int  digitOffset = 0;

                while(ch != 0 && ch != ';')
 80060b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
                                }
                                else
                                {
                                    sb.Append( ch );

                                    while(state.PeekAt( 0 ) != 0)
 80060b8:	4208      	tst	r0, r1
 80060ba:	d1ef      	bne.n	800609c <Number::ToStringFormat#7975+0x408>
 80060bc:	e792      	b.n	8005fe4 <Number::ToStringFormat#7975+0x350>

                                    digPos--;
                                    adjust--;
                                }

                                if(adjust < 0)
 80060be:	2e00      	cmp	r6, #0
 80060c0:	db2b      	blt.n	800611a <Number::ToStringFormat#7975+0x486>
                                    adjust++;
                                    ch = (digPos <= state.firstDigit) ? '0' : '\0';
                                }
                                else
                                {
                                    ch = ((this.digits[digitOffset] != 0) ? this.digits[digitOffset++] : ((digPos > state.lastDigit) ? '0' : '\0'));
 80060c2:	9806      	ldr	r0, [sp, #24]
 80060c4:	6940      	ldr	r0, [r0, #20]
 80060c6:	2800      	cmp	r0, #0
 80060c8:	f000 80b4 	beq.w	8006234 <Number::ToStringFormat#7975+0x5a0>
 80060cc:	6881      	ldr	r1, [r0, #8]
 80060ce:	458b      	cmp	fp, r1
 80060d0:	f080 80ae 	bcs.w	8006230 <Number::ToStringFormat#7975+0x59c>
 80060d4:	eb00 004b 	add.w	r0, r0, fp, lsl #1
 80060d8:	8980      	ldrh	r0, [r0, #12]
 80060da:	2800      	cmp	r0, #0
 80060dc:	d068      	beq.n	80061b0 <Number::ToStringFormat#7975+0x51c>
 80060de:	9806      	ldr	r0, [sp, #24]
 80060e0:	6940      	ldr	r0, [r0, #20]
 80060e2:	2800      	cmp	r0, #0
 80060e4:	f000 80a6 	beq.w	8006234 <Number::ToStringFormat#7975+0x5a0>
 80060e8:	6881      	ldr	r1, [r0, #8]
 80060ea:	458b      	cmp	fp, r1
 80060ec:	f080 80a0 	bcs.w	8006230 <Number::ToStringFormat#7975+0x59c>
 80060f0:	eb00 004b 	add.w	r0, r0, fp, lsl #1
 80060f4:	9c07      	ldr	r4, [sp, #28]
 80060f6:	f10b 0101 	add.w	r1, fp, #1
 80060fa:	8985      	ldrh	r5, [r0, #12]
 80060fc:	468b      	mov	fp, r1
 80060fe:	e05d      	b.n	80061bc <Number::ToStringFormat#7975+0x528>

                                    if(ch2 == '0')
                                    {
                                        i++;
                                    }
                                    else if(ch2 == '+' &&
 8006100:	b280      	uxth	r0, r0
 8006102:	2830      	cmp	r0, #48	; 0x30
 8006104:	d111      	bne.n	800612a <Number::ToStringFormat#7975+0x496>
                                            ch3 == '0')
                                    {
                                        sign = info.positiveSign;
 8006106:	9805      	ldr	r0, [sp, #20]
 8006108:	2800      	cmp	r0, #0
 800610a:	f000 8093 	beq.w	8006234 <Number::ToStringFormat#7975+0x5a0>
 800610e:	9805      	ldr	r0, [sp, #20]
 8006110:	6940      	ldr	r0, [r0, #20]
 8006112:	e00f      	b.n	8006134 <Number::ToStringFormat#7975+0x4a0>
 8006114:	2930      	cmp	r1, #48	; 0x30
 8006116:	d135      	bne.n	8006184 <Number::ToStringFormat#7975+0x4f0>
 8006118:	e00f      	b.n	800613a <Number::ToStringFormat#7975+0x4a6>
                                }

                                if(adjust < 0)
                                {
                                    adjust++;
                                    ch = (digPos <= state.firstDigit) ? '0' : '\0';
 800611a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800611c:	9c07      	ldr	r4, [sp, #28]
 800611e:	2500      	movs	r5, #0
                                    adjust--;
                                }

                                if(adjust < 0)
                                {
                                    adjust++;
 8006120:	3601      	adds	r6, #1
 8006122:	4284      	cmp	r4, r0
 8006124:	bfd8      	it	le
 8006126:	2530      	movle	r5, #48	; 0x30
 8006128:	e048      	b.n	80061bc <Number::ToStringFormat#7975+0x528>
                                    else if(ch2 == '+' &&
                                            ch3 == '0')
                                    {
                                        sign = info.positiveSign;
                                    }
                                    else if(ch2 == '-' &&
 800612a:	292d      	cmp	r1, #45	; 0x2d
 800612c:	d12a      	bne.n	8006184 <Number::ToStringFormat#7975+0x4f0>
 800612e:	2830      	cmp	r0, #48	; 0x30
 8006130:	d128      	bne.n	8006184 <Number::ToStringFormat#7975+0x4f0>
 8006132:	2000      	movs	r0, #0
 8006134:	9004      	str	r0, [sp, #16]
 8006136:	f04f 0a00 	mov.w	sl, #0
 800613a:	ac08      	add	r4, sp, #32
                                    {
                                        sb.Append( ch );
                                        break;
                                    }

                                    state.Advance();
 800613c:	4620      	mov	r0, r4
 800613e:	f000 fdd8 	bl	8006cf2 <ToStringFormatState::Advance#11601>
 8006142:	e004      	b.n	800614e <Number::ToStringFormat#7975+0x4ba>

                                    while(state.PeekAt( 0 ) == '0')
                                    {
                                        state.Advance();
 8006144:	4620      	mov	r0, r4
 8006146:	f000 fdd4 	bl	8006cf2 <ToStringFormatState::Advance#11601>
                                        i++;
 800614a:	f10a 0a01 	add.w	sl, sl, #1
 800614e:	e9dd 0115 	ldrd	r0, r1, [sp, #84]	; 0x54
 8006152:	2200      	movs	r2, #0
                                        break;
                                    }

                                    state.Advance();

                                    while(state.PeekAt( 0 ) == '0')
 8006154:	f000 fdbf 	bl	8006cd6 <ToStringFormatState::PeekAt#11599>
 8006158:	b280      	uxth	r0, r0
 800615a:	2830      	cmp	r0, #48	; 0x30
 800615c:	d0f2      	beq.n	8006144 <Number::ToStringFormat#7975+0x4b0>
                                    if(i > 10)
                                    {
                                        i = 10;
                                    }

                                    int exp = ((this.digits[0] == 0) ? 0 : (this.scale - state.decimalPos));
 800615e:	9806      	ldr	r0, [sp, #24]
                                    {
                                        state.Advance();
                                        i++;
                                    }

                                    if(i > 10)
 8006160:	f1ba 0f0a 	cmp.w	sl, #10
                                    {
                                        i = 10;
                                    }

                                    int exp = ((this.digits[0] == 0) ? 0 : (this.scale - state.decimalPos));
 8006164:	6940      	ldr	r0, [r0, #20]
                                    {
                                        state.Advance();
                                        i++;
                                    }

                                    if(i > 10)
 8006166:	bfc8      	it	gt
 8006168:	f04f 0a0a 	movgt.w	sl, #10
                                    {
                                        i = 10;
                                    }

                                    int exp = ((this.digits[0] == 0) ? 0 : (this.scale - state.decimalPos));
 800616c:	2800      	cmp	r0, #0
 800616e:	d061      	beq.n	8006234 <Number::ToStringFormat#7975+0x5a0>
 8006170:	6881      	ldr	r1, [r0, #8]
 8006172:	2900      	cmp	r1, #0
 8006174:	d05c      	beq.n	8006230 <Number::ToStringFormat#7975+0x59c>
 8006176:	8980      	ldrh	r0, [r0, #12]
 8006178:	b148      	cbz	r0, 800618e <Number::ToStringFormat#7975+0x4fa>
 800617a:	9806      	ldr	r0, [sp, #24]
 800617c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800617e:	68c0      	ldr	r0, [r0, #12]
 8006180:	1a41      	subs	r1, r0, r1
 8006182:	e005      	b.n	8006190 <Number::ToStringFormat#7975+0x4fc>
                                }
                                break;
                            }

                        default:
                            sb.Append( ch );
 8006184:	4638      	mov	r0, r7
 8006186:	4629      	mov	r1, r5
                            {
                                char ch2 = state.Get();

                                if(ch2 != 0)
                                {
                                    sb.Append( ch2 );
 8006188:	f000 fd79 	bl	8006c7e <StringBuilder::Append#9252>
 800618c:	e72a      	b.n	8005fe4 <Number::ToStringFormat#7975+0x350>
 800618e:	2100      	movs	r1, #0
                                        i = 10;
                                    }

                                    int exp = ((this.digits[0] == 0) ? 0 : (this.scale - state.decimalPos));

                                    FormatExponent( sb, exp, ch, sign, info.negativeSign, i );
 8006190:	9805      	ldr	r0, [sp, #20]
 8006192:	2800      	cmp	r0, #0
 8006194:	d04e      	beq.n	8006234 <Number::ToStringFormat#7975+0x5a0>
 8006196:	9805      	ldr	r0, [sp, #20]
 8006198:	462a      	mov	r2, r5
 800619a:	6980      	ldr	r0, [r0, #24]
 800619c:	e9cd 0a00 	strd	r0, sl, [sp]
 80061a0:	4638      	mov	r0, r7
 80061a2:	9b04      	ldr	r3, [sp, #16]
 80061a4:	f000 fdaa 	bl	8006cfc <Number::FormatExponent#7990>
 80061a8:	2000      	movs	r0, #0
 80061aa:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
 80061ae:	e719      	b.n	8005fe4 <Number::ToStringFormat#7975+0x350>
                                    adjust++;
                                    ch = (digPos <= state.firstDigit) ? '0' : '\0';
                                }
                                else
                                {
                                    ch = ((this.digits[digitOffset] != 0) ? this.digits[digitOffset++] : ((digPos > state.lastDigit) ? '0' : '\0'));
 80061b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80061b2:	9c07      	ldr	r4, [sp, #28]
 80061b4:	2500      	movs	r5, #0
 80061b6:	4284      	cmp	r4, r0
 80061b8:	bfc8      	it	gt
 80061ba:	2530      	movgt	r5, #48	; 0x30
 80061bc:	b37d      	cbz	r5, 800621e <Number::ToStringFormat#7975+0x58a>
 80061be:	b934      	cbnz	r4, 80061ce <Number::ToStringFormat#7975+0x53a>

                                if(ch != 0)
                                {
                                    if(digPos == 0)
                                    {
                                        sb.Append( info.numberDecimalSeparator );
 80061c0:	9805      	ldr	r0, [sp, #20]
 80061c2:	b3b8      	cbz	r0, 8006234 <Number::ToStringFormat#7975+0x5a0>
 80061c4:	9805      	ldr	r0, [sp, #20]
 80061c6:	69c1      	ldr	r1, [r0, #28]
 80061c8:	4638      	mov	r0, r7
 80061ca:	f000 f8df 	bl	800638c <StringBuilder::Append#9238>
                                    }

                                    sb.Append( ch );
 80061ce:	4638      	mov	r0, r7
 80061d0:	4629      	mov	r1, r5
 80061d2:	f000 fd54 	bl	8006c7e <StringBuilder::Append#9252>

                                    if(state.thousandSeps != 0 &&
 80061d6:	2c01      	cmp	r4, #1
 80061d8:	f04f 0000 	mov.w	r0, #0
 80061dc:	bfc8      	it	gt
 80061de:	2001      	movgt	r0, #1
 80061e0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80061e2:	2900      	cmp	r1, #0
 80061e4:	bf18      	it	ne
 80061e6:	2101      	movne	r1, #1
 80061e8:	4201      	tst	r1, r0
 80061ea:	d018      	beq.n	800621e <Number::ToStringFormat#7975+0x58a>
 80061ec:	f1b9 3fff 	cmp.w	r9, #4294967295
 80061f0:	dd15      	ble.n	800621e <Number::ToStringFormat#7975+0x58a>
                                       digPos             >  1 &&
                                       thousandSepCtr     >= 0  )
                                    {
                                        if(digPos == thousandSepPos[thousandSepCtr] + 1)
 80061f2:	f1b8 0f00 	cmp.w	r8, #0
 80061f6:	d01d      	beq.n	8006234 <Number::ToStringFormat#7975+0x5a0>
 80061f8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80061fc:	4581      	cmp	r9, r0
 80061fe:	d217      	bcs.n	8006230 <Number::ToStringFormat#7975+0x59c>
 8006200:	eb08 0089 	add.w	r0, r8, r9, lsl #2
 8006204:	68c0      	ldr	r0, [r0, #12]
 8006206:	3001      	adds	r0, #1
 8006208:	4284      	cmp	r4, r0
 800620a:	d108      	bne.n	800621e <Number::ToStringFormat#7975+0x58a>
                                        {
                                            sb.Append( info.numberGroupSeparator );
 800620c:	9805      	ldr	r0, [sp, #20]
 800620e:	b188      	cbz	r0, 8006234 <Number::ToStringFormat#7975+0x5a0>
 8006210:	9805      	ldr	r0, [sp, #20]
 8006212:	6a01      	ldr	r1, [r0, #32]
 8006214:	4638      	mov	r0, r7
 8006216:	f000 f8b9 	bl	800638c <StringBuilder::Append#9238>
                                            thousandSepCtr--;
 800621a:	f1a9 0901 	sub.w	r9, r9, #1
                                        }
                                    }
                                }

                                digPos--;
 800621e:	3c01      	subs	r4, #1
 8006220:	9407      	str	r4, [sp, #28]
 8006222:	e6df      	b.n	8005fe4 <Number::ToStringFormat#7975+0x350>

                    ch = state.Get();
                }
            }

            return sb.ToString();
 8006224:	4638      	mov	r0, r7
 8006226:	f7fb fcc5 	bl	8001bb4 <StringBuilder::ToString#9230>
 800622a:	b017      	add	sp, #92	; 0x5c
 800622c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                       NumberFormatInfo info   )
        {
            ToStringFormatState state = new ToStringFormatState();

            state.format        = format;
            state.section       = (this.digits[0] == 0 ? 2 : (this.negative ? 1 : 0));
 8006230:	f7fa fe3e 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 8006234:	f7fa f918 	bl	8000468 <Thread::ThrowNullException#4411>
 8006238:	17ffad3e 	.word	0x17ffad3e
 800623c:	fffffe0c 	.word	0xfffffe0c
 8006240:	e8019d18 	.word	0xe8019d18
 8006244:	17ffac4c 	.word	0x17ffac4c
 8006248:	e8019718 	.word	0xe8019718

0800624c <Number::UInt32ToDecString#7980>:
            }
            return offset;
        }

        private static String UInt32ToDecString( uint value, int digits )
        {
 800624c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800624e:	b081      	sub	sp, #4
 8006250:	460c      	mov	r4, r1
 8006252:	4911      	ldr	r1, [pc, #68]	; (8006298 <Number::UInt32ToDecString#7980+0x4c>)
 8006254:	4605      	mov	r5, r0
            int bufferLength = 100;
            if(digits < 1) digits = 1;
            char[] buffer = new char[bufferLength];
 8006256:	4811      	ldr	r0, [pc, #68]	; (800629c <Number::UInt32ToDecString#7980+0x50>)
 8006258:	4a11      	ldr	r2, [pc, #68]	; (80062a0 <Number::UInt32ToDecString#7980+0x54>)
 800625a:	4479      	add	r1, pc
 800625c:	4408      	add	r0, r1
 800625e:	4411      	add	r1, r2
 8006260:	2264      	movs	r2, #100	; 0x64
 8006262:	f7fb fbd7 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
        }

        private static String UInt32ToDecString( uint value, int digits )
        {
            int bufferLength = 100;
            if(digits < 1) digits = 1;
 8006266:	2c01      	cmp	r4, #1
            char[] buffer = new char[bufferLength];
 8006268:	f04f 0164 	mov.w	r1, #100	; 0x64
            int p = Int32ToDecChars( buffer, bufferLength, value, digits );
 800626c:	462a      	mov	r2, r5

        private static String UInt32ToDecString( uint value, int digits )
        {
            int bufferLength = 100;
            if(digits < 1) digits = 1;
            char[] buffer = new char[bufferLength];
 800626e:	4606      	mov	r6, r0
        }

        private static String UInt32ToDecString( uint value, int digits )
        {
            int bufferLength = 100;
            if(digits < 1) digits = 1;
 8006270:	bfb8      	it	lt
 8006272:	2401      	movlt	r4, #1
            char[] buffer = new char[bufferLength];
            int p = Int32ToDecChars( buffer, bufferLength, value, digits );
 8006274:	4623      	mov	r3, r4
 8006276:	f7ff fa35 	bl	80056e4 <Number::Int32ToDecChars#7987>
 800627a:	4604      	mov	r4, r0
            return new string( buffer, p, bufferLength - p );
 800627c:	f1c4 0564 	rsb	r5, r4, #100	; 0x64
 8006280:	4628      	mov	r0, r5
 8006282:	f7fb f805 	bl	8001290 <String::FastAllocateString#4262>
 8006286:	4631      	mov	r1, r6
 8006288:	4622      	mov	r2, r4
 800628a:	462b      	mov	r3, r5
 800628c:	4607      	mov	r7, r0
 800628e:	f7fb fc2d 	bl	8001aec <String::.ctor#4259>
 8006292:	4638      	mov	r0, r7
 8006294:	b001      	add	sp, #4
 8006296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006298:	17ffa8ba 	.word	0x17ffa8ba
 800629c:	fffffe0c 	.word	0xfffffe0c
 80062a0:	e80196e8 	.word	0xe80196e8

080062a4 <Number::RoundNumber#7989>:
        }

        // markples: see also Lightning\Src\VM\COMNumber.cpp::
        // void RoundNumber(NUMBER* number, int pos)
        private void RoundNumber( int pos )
        {
 80062a4:	b580      	push	{r7, lr}
 80062a6:	f04f 0e00 	mov.w	lr, #0
 80062aa:	e001      	b.n	80062b0 <Number::RoundNumber#7989+0xc>
            int i = 0;
            while(i < pos && this.digits[i] != 0) i++;
 80062ac:	f10e 0e01 	add.w	lr, lr, #1
 80062b0:	458e      	cmp	lr, r1
 80062b2:	da0a      	bge.n	80062ca <Number::RoundNumber#7989+0x26>
 80062b4:	6942      	ldr	r2, [r0, #20]
 80062b6:	2a00      	cmp	r2, #0
 80062b8:	d066      	beq.n	8006388 <Number::RoundNumber#7989+0xe4>
 80062ba:	6893      	ldr	r3, [r2, #8]
 80062bc:	459e      	cmp	lr, r3
 80062be:	d261      	bcs.n	8006384 <Number::RoundNumber#7989+0xe0>
 80062c0:	eb02 024e 	add.w	r2, r2, lr, lsl #1
 80062c4:	8992      	ldrh	r2, [r2, #12]
 80062c6:	2a00      	cmp	r2, #0
 80062c8:	d1f0      	bne.n	80062ac <Number::RoundNumber#7989+0x8>
            if(i == pos && this.digits[i] >= '5')
 80062ca:	458e      	cmp	lr, r1
 80062cc:	d12b      	bne.n	8006326 <Number::RoundNumber#7989+0x82>
 80062ce:	6942      	ldr	r2, [r0, #20]
 80062d0:	2a00      	cmp	r2, #0
 80062d2:	d059      	beq.n	8006388 <Number::RoundNumber#7989+0xe4>
 80062d4:	6893      	ldr	r3, [r2, #8]
 80062d6:	4299      	cmp	r1, r3
 80062d8:	d254      	bcs.n	8006384 <Number::RoundNumber#7989+0xe0>
 80062da:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80062de:	8992      	ldrh	r2, [r2, #12]
 80062e0:	2a35      	cmp	r2, #53	; 0x35
 80062e2:	db20      	blt.n	8006326 <Number::RoundNumber#7989+0x82>
 80062e4:	468c      	mov	ip, r1
            {
                while(i > 0 && this.digits[i - 1] == '9') i--;
 80062e6:	f1bc 0f00 	cmp.w	ip, #0
 80062ea:	dd0c      	ble.n	8006306 <Number::RoundNumber#7989+0x62>
 80062ec:	6942      	ldr	r2, [r0, #20]
 80062ee:	2a00      	cmp	r2, #0
 80062f0:	d04a      	beq.n	8006388 <Number::RoundNumber#7989+0xe4>
 80062f2:	6893      	ldr	r3, [r2, #8]
 80062f4:	f1ac 0101 	sub.w	r1, ip, #1
 80062f8:	4299      	cmp	r1, r3
 80062fa:	d243      	bcs.n	8006384 <Number::RoundNumber#7989+0xe0>
 80062fc:	eb02 024c 	add.w	r2, r2, ip, lsl #1
 8006300:	8952      	ldrh	r2, [r2, #10]
 8006302:	2a39      	cmp	r2, #57	; 0x39
 8006304:	d0ee      	beq.n	80062e4 <Number::RoundNumber#7989+0x40>
                if(i > 0)
 8006306:	f1bc 0f00 	cmp.w	ip, #0
 800630a:	dd20      	ble.n	800634e <Number::RoundNumber#7989+0xaa>
                {
                    this.digits[i - 1]++;
 800630c:	6941      	ldr	r1, [r0, #20]
 800630e:	b3d9      	cbz	r1, 8006388 <Number::RoundNumber#7989+0xe4>
 8006310:	688b      	ldr	r3, [r1, #8]
 8006312:	f1ac 0201 	sub.w	r2, ip, #1
 8006316:	429a      	cmp	r2, r3
 8006318:	d234      	bcs.n	8006384 <Number::RoundNumber#7989+0xe0>
 800631a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800631e:	898a      	ldrh	r2, [r1, #12]
 8006320:	3201      	adds	r2, #1
 8006322:	818a      	strh	r2, [r1, #12]
 8006324:	e01e      	b.n	8006364 <Number::RoundNumber#7989+0xc0>
                    i = 1;
                }
            }
            else
            {
                while(i > 0 && this.digits[i - 1] == '0') i--;
 8006326:	f1be 0f01 	cmp.w	lr, #1
 800632a:	db0e      	blt.n	800634a <Number::RoundNumber#7989+0xa6>
 800632c:	6941      	ldr	r1, [r0, #20]
 800632e:	b359      	cbz	r1, 8006388 <Number::RoundNumber#7989+0xe4>
 8006330:	688b      	ldr	r3, [r1, #8]
 8006332:	f1ae 0201 	sub.w	r2, lr, #1
 8006336:	429a      	cmp	r2, r3
 8006338:	d224      	bcs.n	8006384 <Number::RoundNumber#7989+0xe0>
 800633a:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 800633e:	46f4      	mov	ip, lr
 8006340:	4696      	mov	lr, r2
 8006342:	8949      	ldrh	r1, [r1, #10]
 8006344:	2930      	cmp	r1, #48	; 0x30
 8006346:	d0ee      	beq.n	8006326 <Number::RoundNumber#7989+0x82>
 8006348:	e00c      	b.n	8006364 <Number::RoundNumber#7989+0xc0>
 800634a:	46f4      	mov	ip, lr
 800634c:	e00a      	b.n	8006364 <Number::RoundNumber#7989+0xc0>
                {
                    this.digits[i - 1]++;
                }
                else
                {
                    this.scale++;
 800634e:	68c1      	ldr	r1, [r0, #12]
 8006350:	3101      	adds	r1, #1
 8006352:	60c1      	str	r1, [r0, #12]
                    this.digits[0] = '1';
 8006354:	6941      	ldr	r1, [r0, #20]
 8006356:	b1b9      	cbz	r1, 8006388 <Number::RoundNumber#7989+0xe4>
 8006358:	688a      	ldr	r2, [r1, #8]
 800635a:	b19a      	cbz	r2, 8006384 <Number::RoundNumber#7989+0xe0>
 800635c:	2231      	movs	r2, #49	; 0x31
 800635e:	f04f 0c01 	mov.w	ip, #1
 8006362:	818a      	strh	r2, [r1, #12]
            }
            else
            {
                while(i > 0 && this.digits[i - 1] == '0') i--;
            }
            if(i == 0)
 8006364:	f1bc 0f00 	cmp.w	ip, #0
 8006368:	bf02      	ittt	eq
 800636a:	2100      	moveq	r1, #0
 800636c:	60c1      	streq	r1, [r0, #12]
 800636e:	7401      	strbeq	r1, [r0, #16]
            {
                this.scale = 0;
                this.negative = false;
            }
            this.digits[i] = '\0';
 8006370:	6940      	ldr	r0, [r0, #20]
 8006372:	b148      	cbz	r0, 8006388 <Number::RoundNumber#7989+0xe4>
 8006374:	6881      	ldr	r1, [r0, #8]
 8006376:	458c      	cmp	ip, r1
 8006378:	bf3f      	itttt	cc
 800637a:	eb00 004c 	addcc.w	r0, r0, ip, lsl #1
 800637e:	2100      	movcc	r1, #0
 8006380:	8181      	strhcc	r1, [r0, #12]
 8006382:	bd80      	popcc	{r7, pc}
        // markples: see also Lightning\Src\VM\COMNumber.cpp::
        // void RoundNumber(NUMBER* number, int pos)
        private void RoundNumber( int pos )
        {
            int i = 0;
            while(i < pos && this.digits[i] != 0) i++;
 8006384:	f7fa fd94 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 8006388:	f7fa f86e 	bl	8000468 <Thread::ThrowNullException#4411>

0800638c <StringBuilder::Append#9238>:
            return this;
        }

        // Appends a copy of this string at the end of this string builder.
        public StringBuilder Append( String value )
        {
 800638c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006390:	b082      	sub	sp, #8
 8006392:	460d      	mov	r5, r1
 8006394:	4680      	mov	r8, r0
 8006396:	2000      	movs	r0, #0
 8006398:	9001      	str	r0, [sp, #4]
 800639a:	b355      	cbz	r5, 80063f2 <StringBuilder::Append#9238+0x66>
 800639c:	a901      	add	r1, sp, #4
            {
                return this;
            }

            Thread th;
            String currentString = GetThreadSafeString( out th );
 800639e:	4640      	mov	r0, r8
 80063a0:	f000 fec8 	bl	8007134 <StringBuilder::GetThreadSafeString#9224>
 80063a4:	4606      	mov	r6, r0
 80063a6:	b33e      	cbz	r6, 80063f8 <StringBuilder::Append#9238+0x6c>
 80063a8:	68e8      	ldr	r0, [r5, #12]
 80063aa:	68f7      	ldr	r7, [r6, #12]

            int currentLength = currentString.Length;

            int requiredLength = currentLength + value.Length;
 80063ac:	183c      	adds	r4, r7, r0

            if(NeedsAllocation( currentString, requiredLength ))
 80063ae:	4630      	mov	r0, r6
 80063b0:	4621      	mov	r1, r4
 80063b2:	f000 ff3f 	bl	8007234 <StringBuilder::NeedsAllocation#9240>
 80063b6:	f010 0fff 	tst.w	r0, #255	; 0xff
 80063ba:	d010      	beq.n	80063de <StringBuilder::Append#9238+0x52>
 80063bc:	f8d8 000c 	ldr.w	r0, [r8, #12]
            {
                String newString = GetNewString( currentString, requiredLength );
 80063c0:	4631      	mov	r1, r6
 80063c2:	4622      	mov	r2, r4
 80063c4:	f000 ff44 	bl	8007250 <StringBuilder::GetNewString#9241>
 80063c8:	4604      	mov	r4, r0
 80063ca:	b1ac      	cbz	r4, 80063f8 <StringBuilder::Append#9238+0x6c>
                newString.AppendInPlace( value, currentLength );
 80063cc:	4620      	mov	r0, r4
 80063ce:	4629      	mov	r1, r5
 80063d0:	463a      	mov	r2, r7
 80063d2:	f7fb fee4 	bl	800219e <String::AppendInPlace#2966>
                ReplaceString( th, newString );
 80063d6:	9901      	ldr	r1, [sp, #4]
 80063d8:	4640      	mov	r0, r8
 80063da:	4622      	mov	r2, r4
 80063dc:	e007      	b.n	80063ee <StringBuilder::Append#9238+0x62>
            }
            else
            {
                currentString.AppendInPlace( value, currentLength );
 80063de:	4630      	mov	r0, r6
 80063e0:	4629      	mov	r1, r5
 80063e2:	463a      	mov	r2, r7
 80063e4:	f7fb fedb 	bl	800219e <String::AppendInPlace#2966>
                ReplaceString( th, currentString );
 80063e8:	9901      	ldr	r1, [sp, #4]
 80063ea:	4640      	mov	r0, r8
 80063ec:	4632      	mov	r2, r6
 80063ee:	f000 ff2b 	bl	8007248 <StringBuilder::ReplaceString#9242>
 80063f2:	b002      	add	sp, #8
 80063f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }

            Thread th;
            String currentString = GetThreadSafeString( out th );

            int currentLength = currentString.Length;
 80063f8:	f7fa f836 	bl	8000468 <Thread::ThrowNullException#4411>

080063fc <Number::FormatGeneral#7991>:

        private void FormatGeneral( System.Text.StringBuilder sb      ,
                                    int                       digits  ,
                                    char                      expChar ,
                                    NumberFormatInfo          info    )
        {
 80063fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006400:	b083      	sub	sp, #12
 8006402:	4682      	mov	sl, r0
 8006404:	2000      	movs	r0, #0
 8006406:	460d      	mov	r5, r1
 8006408:	2100      	movs	r1, #0
 800640a:	4698      	mov	r8, r3
 800640c:	2400      	movs	r4, #0
            int  digPos     = this.scale;
 800640e:	f8da 700c 	ldr.w	r7, [sl, #12]
            bool scientific = false;

            if(digPos > digits || digPos < -3)
 8006412:	4297      	cmp	r7, r2
 8006414:	bfc8      	it	gt
 8006416:	2001      	movgt	r0, #1
 8006418:	f117 0f03 	cmn.w	r7, #3
 800641c:	bfb8      	it	lt
 800641e:	2101      	movlt	r1, #1
 8006420:	ea50 0901 	orrs.w	r9, r0, r1
 8006424:	bf1c      	itt	ne
 8006426:	2701      	movne	r7, #1
 8006428:	f04f 0901 	movne.w	r9, #1
                digPos = 1;
                scientific = true;
            }

            int dig = 0; // number->digits;
            if(digPos > 0)
 800642c:	2f00      	cmp	r7, #0
 800642e:	dd21      	ble.n	8006474 <Number::FormatGeneral#7991+0x78>
            {
                do
                {
                    sb.Append( this.digits[dig] != 0 ? this.digits[dig++] : '0' );
 8006430:	4656      	mov	r6, sl
 8006432:	f856 0f14 	ldr.w	r0, [r6, #20]!
 8006436:	2800      	cmp	r0, #0
 8006438:	d070      	beq.n	800651c <Number::FormatGeneral#7991+0x120>
 800643a:	6881      	ldr	r1, [r0, #8]
 800643c:	428c      	cmp	r4, r1
 800643e:	d26f      	bcs.n	8006520 <Number::FormatGeneral#7991+0x124>
 8006440:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8006444:	8980      	ldrh	r0, [r0, #12]
 8006446:	b158      	cbz	r0, 8006460 <Number::FormatGeneral#7991+0x64>
 8006448:	6830      	ldr	r0, [r6, #0]
 800644a:	2800      	cmp	r0, #0
 800644c:	d066      	beq.n	800651c <Number::FormatGeneral#7991+0x120>
 800644e:	6881      	ldr	r1, [r0, #8]
 8006450:	428c      	cmp	r4, r1
 8006452:	d265      	bcs.n	8006520 <Number::FormatGeneral#7991+0x124>
 8006454:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8006458:	1c62      	adds	r2, r4, #1
 800645a:	8981      	ldrh	r1, [r0, #12]
 800645c:	4614      	mov	r4, r2
 800645e:	e000      	b.n	8006462 <Number::FormatGeneral#7991+0x66>
 8006460:	2130      	movs	r1, #48	; 0x30
 8006462:	2d00      	cmp	r5, #0
 8006464:	d05a      	beq.n	800651c <Number::FormatGeneral#7991+0x120>
 8006466:	4628      	mov	r0, r5
 8006468:	f000 fc09 	bl	8006c7e <StringBuilder::Append#9252>
                } while(--digPos > 0);
 800646c:	3f01      	subs	r7, #1
 800646e:	2f00      	cmp	r7, #0
 8006470:	dcde      	bgt.n	8006430 <Number::FormatGeneral#7991+0x34>
 8006472:	e008      	b.n	8006486 <Number::FormatGeneral#7991+0x8a>
            }
            else
            {
                sb.Append( '0' );
 8006474:	2d00      	cmp	r5, #0
 8006476:	d051      	beq.n	800651c <Number::FormatGeneral#7991+0x120>
 8006478:	4628      	mov	r0, r5
 800647a:	2130      	movs	r1, #48	; 0x30
 800647c:	f000 fbff 	bl	8006c7e <StringBuilder::Append#9252>
            }

            if(this.digits[dig] != 0)
 8006480:	f10a 0614 	add.w	r6, sl, #20
 8006484:	2400      	movs	r4, #0
 8006486:	6830      	ldr	r0, [r6, #0]
 8006488:	2800      	cmp	r0, #0
 800648a:	d047      	beq.n	800651c <Number::FormatGeneral#7991+0x120>
 800648c:	6881      	ldr	r1, [r0, #8]
 800648e:	428c      	cmp	r4, r1
 8006490:	d246      	bcs.n	8006520 <Number::FormatGeneral#7991+0x124>
 8006492:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8006496:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800649a:	8980      	ldrh	r0, [r0, #12]
 800649c:	b348      	cbz	r0, 80064f2 <Number::FormatGeneral#7991+0xf6>
            {
                sb.Append( info.numberDecimalSeparator );
 800649e:	f1bb 0f00 	cmp.w	fp, #0
 80064a2:	bf18      	it	ne
 80064a4:	2d00      	cmpne	r5, #0
 80064a6:	d039      	beq.n	800651c <Number::FormatGeneral#7991+0x120>
 80064a8:	f8db 101c 	ldr.w	r1, [fp, #28]
 80064ac:	4628      	mov	r0, r5
 80064ae:	f7ff ff6d 	bl	800638c <StringBuilder::Append#9238>
 80064b2:	3f01      	subs	r7, #1
 80064b4:	e003      	b.n	80064be <Number::FormatGeneral#7991+0xc2>

                while(digPos < 0)
                {
                    sb.Append( '0' );
 80064b6:	4628      	mov	r0, r5
 80064b8:	2130      	movs	r1, #48	; 0x30
 80064ba:	f000 fbe0 	bl	8006c7e <StringBuilder::Append#9252>

            if(this.digits[dig] != 0)
            {
                sb.Append( info.numberDecimalSeparator );

                while(digPos < 0)
 80064be:	3701      	adds	r7, #1
 80064c0:	2f00      	cmp	r7, #0
 80064c2:	dbf8      	blt.n	80064b6 <Number::FormatGeneral#7991+0xba>
                    digPos++;
                }

                do
                {
                    sb.Append( this.digits[dig++] );
 80064c4:	6830      	ldr	r0, [r6, #0]
 80064c6:	b348      	cbz	r0, 800651c <Number::FormatGeneral#7991+0x120>
 80064c8:	6881      	ldr	r1, [r0, #8]
 80064ca:	428c      	cmp	r4, r1
 80064cc:	d228      	bcs.n	8006520 <Number::FormatGeneral#7991+0x124>
 80064ce:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 80064d2:	8981      	ldrh	r1, [r0, #12]
 80064d4:	4628      	mov	r0, r5
 80064d6:	f000 fbd2 	bl	8006c7e <StringBuilder::Append#9252>
                } while(this.digits[dig] != 0);
 80064da:	6830      	ldr	r0, [r6, #0]
 80064dc:	b1f0      	cbz	r0, 800651c <Number::FormatGeneral#7991+0x120>
 80064de:	6882      	ldr	r2, [r0, #8]
                    digPos++;
                }

                do
                {
                    sb.Append( this.digits[dig++] );
 80064e0:	1c61      	adds	r1, r4, #1
                } while(this.digits[dig] != 0);
 80064e2:	4291      	cmp	r1, r2
 80064e4:	d21c      	bcs.n	8006520 <Number::FormatGeneral#7991+0x124>
 80064e6:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 80064ea:	460c      	mov	r4, r1
 80064ec:	89c0      	ldrh	r0, [r0, #14]
 80064ee:	2800      	cmp	r0, #0
 80064f0:	d1e8      	bne.n	80064c4 <Number::FormatGeneral#7991+0xc8>
            }

            if(scientific)
 80064f2:	f1b9 0f00 	cmp.w	r9, #0
 80064f6:	d00e      	beq.n	8006516 <Number::FormatGeneral#7991+0x11a>
            {
                FormatExponent( sb, this.scale - 1, expChar, info.positiveSign, info.negativeSign, 2 );
 80064f8:	f1bb 0f00 	cmp.w	fp, #0
 80064fc:	d00e      	beq.n	800651c <Number::FormatGeneral#7991+0x120>
 80064fe:	f8da 000c 	ldr.w	r0, [sl, #12]
 8006502:	2202      	movs	r2, #2
 8006504:	1e41      	subs	r1, r0, #1
 8006506:	e9db 3005 	ldrd	r3, r0, [fp, #20]
 800650a:	e9cd 0200 	strd	r0, r2, [sp]
 800650e:	4628      	mov	r0, r5
 8006510:	4642      	mov	r2, r8
 8006512:	f000 fbf3 	bl	8006cfc <Number::FormatExponent#7990>
 8006516:	b003      	add	sp, #12
 8006518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    sb.Append( this.digits[dig] != 0 ? this.digits[dig++] : '0' );
                } while(--digPos > 0);
            }
            else
            {
                sb.Append( '0' );
 800651c:	f7f9 ffa4 	bl	8000468 <Thread::ThrowNullException#4411>
            }

            if(this.digits[dig] != 0)
 8006520:	f7fa fcc6 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>

08006524 <Number::FormatFixed#7994>:
                                  int                       digits      ,
                                  int[]                     groupDigits ,
                                  String                    sDecimal    ,
                                  String                    sGroup      ,
                                  NumberFormatInfo          info        )
        {
 8006524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006528:	b089      	sub	sp, #36	; 0x24
            //          int bufferSize = 0;   // the length of the result buffer string.
            int digPos = this.scale;
 800652a:	68c5      	ldr	r5, [r0, #12]
 800652c:	4616      	mov	r6, r2
 800652e:	4688      	mov	r8, r1
 8006530:	9008      	str	r0, [sp, #32]
            int dig = 0; // = number->digits;

            if(digPos > 0)
 8006532:	2d01      	cmp	r5, #1
 8006534:	db47      	blt.n	80065c6 <Number::FormatFixed#7994+0xa2>
            {
                if(groupDigits != null)
 8006536:	2b00      	cmp	r3, #0
 8006538:	d059      	beq.n	80065ee <Number::FormatFixed#7994+0xca>
                {
                    // index into the groupDigits array.
                    int groupSizeIndex = 0;
                    // the current total of group size.
                    int groupSizeCount = groupDigits[groupSizeIndex];
 800653a:	6898      	ldr	r0, [r3, #8]
 800653c:	9306      	str	r3, [sp, #24]
 800653e:	2800      	cmp	r0, #0
 8006540:	f000 8137 	beq.w	80067b2 <Number::FormatFixed#7994+0x28e>
 8006544:	9a06      	ldr	r2, [sp, #24]
 8006546:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006548:	f852 0f0c 	ldr.w	r0, [r2, #12]!
                    // the length of groupDigits array.
                    int groupSizeLen = groupDigits.Length;
                    // the length of the result buffer string.
                    int bufferSize = digPos;
                    // the length of the group separator string.
                    int groupSeparatorLen = sGroup.Length;
 800654c:	2900      	cmp	r1, #0
 800654e:	9205      	str	r2, [sp, #20]
 8006550:	f000 8134 	beq.w	80067bc <Number::FormatFixed#7994+0x298>
 8006554:	9905      	ldr	r1, [sp, #20]
 8006556:	f04f 0a00 	mov.w	sl, #0
 800655a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800655e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006560:	68cc      	ldr	r4, [r1, #12]
                    int groupSize = 0;

                    //
                    // Find out the size of the string buffer for the result.
                    //
                    if(groupSizeLen != 0) // You can pass in 0 length arrays
 8006562:	2a00      	cmp	r2, #0
 8006564:	d06c      	beq.n	8006640 <Number::FormatFixed#7994+0x11c>
                            {
                                break;
                            }

                            bufferSize += groupSeparatorLen;
                            if(groupSizeIndex < groupSizeLen - 1)
 8006566:	1e51      	subs	r1, r2, #1
 8006568:	46a9      	mov	r9, r5
 800656a:	9201      	str	r2, [sp, #4]
                    //
                    // Find out the size of the string buffer for the result.
                    //
                    if(groupSizeLen != 0) // You can pass in 0 length arrays
                    {
                        while(digPos > groupSizeCount)
 800656c:	4285      	cmp	r5, r0
 800656e:	dd34      	ble.n	80065da <Number::FormatFixed#7994+0xb6>
                        {
                            groupSize = groupDigits[groupSizeIndex];
 8006570:	9a06      	ldr	r2, [sp, #24]
 8006572:	6892      	ldr	r2, [r2, #8]
 8006574:	4592      	cmp	sl, r2
 8006576:	f080 811c 	bcs.w	80067b2 <Number::FormatFixed#7994+0x28e>
 800657a:	9a05      	ldr	r2, [sp, #20]
 800657c:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
 8006580:	b35a      	cbz	r2, 80065da <Number::FormatFixed#7994+0xb6>
                            {
                                break;
                            }

                            bufferSize += groupSeparatorLen;
                            if(groupSizeIndex < groupSizeLen - 1)
 8006582:	458a      	cmp	sl, r1
 8006584:	bfb8      	it	lt
 8006586:	f10a 0a01 	addlt.w	sl, sl, #1
                            {
                                groupSizeIndex++;
                            }
                            groupSizeCount += groupDigits[groupSizeIndex];
 800658a:	9a06      	ldr	r2, [sp, #24]
 800658c:	6892      	ldr	r2, [r2, #8]
 800658e:	4592      	cmp	sl, r2
 8006590:	f080 810f 	bcs.w	80067b2 <Number::FormatFixed#7994+0x28e>
 8006594:	9a05      	ldr	r2, [sp, #20]
 8006596:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
 800659a:	4410      	add	r0, r2
                            if(groupSizeCount < 0 || bufferSize < 0)
 800659c:	2800      	cmp	r0, #0
                            if(groupSize == 0)
                            {
                                break;
                            }

                            bufferSize += groupSeparatorLen;
 800659e:	bfa4      	itt	ge
 80065a0:	44a1      	addge	r9, r4
 80065a2:	f1b9 3fff 	cmpge.w	r9, #4294967295
 80065a6:	dce1      	bgt.n	800656c <Number::FormatFixed#7994+0x48>
 80065a8:	4885      	ldr	r0, [pc, #532]	; (80067c0 <Number::FormatFixed#7994+0x29c>)
                                groupSizeIndex++;
                            }
                            groupSizeCount += groupDigits[groupSizeIndex];
                            if(groupSizeCount < 0 || bufferSize < 0)
                            {
                                throw new ArgumentOutOfRangeException();
 80065aa:	4986      	ldr	r1, [pc, #536]	; (80067c4 <Number::FormatFixed#7994+0x2a0>)
 80065ac:	4478      	add	r0, pc
 80065ae:	180c      	adds	r4, r1, r0
 80065b0:	4985      	ldr	r1, [pc, #532]	; (80067c8 <Number::FormatFixed#7994+0x2a4>)
 80065b2:	4401      	add	r1, r0
 80065b4:	4620      	mov	r0, r4
 80065b6:	f7fa f96d 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80065ba:	4601      	mov	r1, r0
 80065bc:	2000      	movs	r0, #0
 80065be:	6088      	str	r0, [r1, #8]
 80065c0:	4620      	mov	r0, r4
 80065c2:	f7fa f97d 	bl	80008c0 <TypeSystemManager::Throw#5596>
                    } while(--digPos > 0);
                }
            }
            else
            {
                sb.Append( '0' );
 80065c6:	f1b8 0f00 	cmp.w	r8, #0
 80065ca:	f000 80f7 	beq.w	80067bc <Number::FormatFixed#7994+0x298>
 80065ce:	4640      	mov	r0, r8
 80065d0:	2130      	movs	r1, #48	; 0x30
 80065d2:	f000 fb54 	bl	8006c7e <StringBuilder::Append#9252>
 80065d6:	2700      	movs	r7, #0
 80065d8:	e0be      	b.n	8006758 <Number::FormatFixed#7994+0x234>
 80065da:	b3a0      	cbz	r0, 8006646 <Number::FormatFixed#7994+0x122>
                        // If you passed in an array with one
                        // entry as 0, groupSizeCount == 0
                        if(groupSizeCount == 0)
                            groupSize = 0;
                        else
                            groupSize = groupDigits[0];
 80065dc:	9806      	ldr	r0, [sp, #24]
 80065de:	6880      	ldr	r0, [r0, #8]
 80065e0:	2800      	cmp	r0, #0
 80065e2:	f000 80e6 	beq.w	80067b2 <Number::FormatFixed#7994+0x28e>
 80065e6:	9805      	ldr	r0, [sp, #20]
 80065e8:	f8d0 a000 	ldr.w	sl, [r0]
 80065ec:	e02d      	b.n	800664a <Number::FormatFixed#7994+0x126>
 80065ee:	2700      	movs	r7, #0
                }
                else
                {
                    do
                    {
                        sb.Append( this.digits[dig] != 0 ? this.digits[dig++] : '0' );
 80065f0:	9808      	ldr	r0, [sp, #32]
 80065f2:	6940      	ldr	r0, [r0, #20]
 80065f4:	2800      	cmp	r0, #0
 80065f6:	f000 80e1 	beq.w	80067bc <Number::FormatFixed#7994+0x298>
 80065fa:	6881      	ldr	r1, [r0, #8]
 80065fc:	428f      	cmp	r7, r1
 80065fe:	f080 80d8 	bcs.w	80067b2 <Number::FormatFixed#7994+0x28e>
 8006602:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8006606:	8980      	ldrh	r0, [r0, #12]
 8006608:	b170      	cbz	r0, 8006628 <Number::FormatFixed#7994+0x104>
 800660a:	9808      	ldr	r0, [sp, #32]
 800660c:	6940      	ldr	r0, [r0, #20]
 800660e:	2800      	cmp	r0, #0
 8006610:	f000 80d4 	beq.w	80067bc <Number::FormatFixed#7994+0x298>
 8006614:	6881      	ldr	r1, [r0, #8]
 8006616:	428f      	cmp	r7, r1
 8006618:	f080 80cb 	bcs.w	80067b2 <Number::FormatFixed#7994+0x28e>
 800661c:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8006620:	1c7a      	adds	r2, r7, #1
 8006622:	8981      	ldrh	r1, [r0, #12]
 8006624:	4617      	mov	r7, r2
 8006626:	e000      	b.n	800662a <Number::FormatFixed#7994+0x106>
 8006628:	2130      	movs	r1, #48	; 0x30
 800662a:	f1b8 0f00 	cmp.w	r8, #0
 800662e:	f000 80c5 	beq.w	80067bc <Number::FormatFixed#7994+0x298>
 8006632:	4640      	mov	r0, r8
 8006634:	f000 fb23 	bl	8006c7e <StringBuilder::Append#9252>
                    } while(--digPos > 0);
 8006638:	3d01      	subs	r5, #1
 800663a:	2d00      	cmp	r5, #0
 800663c:	dcd8      	bgt.n	80065f0 <Number::FormatFixed#7994+0xcc>
 800663e:	e08b      	b.n	8006758 <Number::FormatFixed#7994+0x234>
 8006640:	46a9      	mov	r9, r5
 8006642:	9201      	str	r2, [sp, #4]
 8006644:	e001      	b.n	800664a <Number::FormatFixed#7994+0x126>
 8006646:	f04f 0a00 	mov.w	sl, #0
                    }

                    groupSizeIndex = 0;

                    int digitCount = 0;
                    int digLength  = (int)wcslen( this.digits, dig );
 800664a:	9808      	ldr	r0, [sp, #32]
 800664c:	6940      	ldr	r0, [r0, #20]
 800664e:	f000 fbc7 	bl	8006de0 <Number::wcslen#7993>
 8006652:	495e      	ldr	r1, [pc, #376]	; (80067cc <Number::FormatFixed#7994+0x2a8>)
 8006654:	4607      	mov	r7, r0
                    int digStart   = (digPos < digLength) ? digPos : digLength;

                    char[] buffer = new char[bufferSize];
 8006656:	485b      	ldr	r0, [pc, #364]	; (80067c4 <Number::FormatFixed#7994+0x2a0>)
 8006658:	4a5d      	ldr	r2, [pc, #372]	; (80067d0 <Number::FormatFixed#7994+0x2ac>)
 800665a:	4479      	add	r1, pc
 800665c:	4408      	add	r0, r1
 800665e:	4411      	add	r1, r2
 8006660:	464a      	mov	r2, r9
 8006662:	f7fb f9d7 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 8006666:	4683      	mov	fp, r0
 8006668:	42bd      	cmp	r5, r7
                    int    p      = bufferSize - 1;
 800666a:	f1a9 0901 	sub.w	r9, r9, #1
 800666e:	f04f 0c00 	mov.w	ip, #0

                    for(int i = digPos - 1; i >= 0; i--)
 8006672:	f10b 000c 	add.w	r0, fp, #12
 8006676:	9004      	str	r0, [sp, #16]
 8006678:	f1a4 0001 	sub.w	r0, r4, #1
 800667c:	bfb8      	it	lt
 800667e:	462f      	movlt	r7, r5
 8006680:	9507      	str	r5, [sp, #28]
                    int digitCount = 0;
                    int digLength  = (int)wcslen( this.digits, dig );
                    int digStart   = (digPos < digLength) ? digPos : digLength;

                    char[] buffer = new char[bufferSize];
                    int    p      = bufferSize - 1;
 8006682:	9003      	str	r0, [sp, #12]
 8006684:	2000      	movs	r0, #0

                    for(int i = digPos - 1; i >= 0; i--)
 8006686:	9002      	str	r0, [sp, #8]
 8006688:	e04d      	b.n	8006726 <Number::FormatFixed#7994+0x202>
                                }

                                if(groupSizeIndex < groupSizeLen - 1)
                                {
                                    groupSizeIndex++;
                                    groupSize = groupDigits[groupSizeIndex];
 800668a:	9805      	ldr	r0, [sp, #20]
 800668c:	9902      	ldr	r1, [sp, #8]
 800668e:	f04f 0c00 	mov.w	ip, #0
 8006692:	f850 a021 	ldr.w	sl, [r0, r1, lsl #2]
 8006696:	e046      	b.n	8006726 <Number::FormatFixed#7994+0x202>
                    int digStart   = (digPos < digLength) ? digPos : digLength;

                    char[] buffer = new char[bufferSize];
                    int    p      = bufferSize - 1;

                    for(int i = digPos - 1; i >= 0; i--)
 8006698:	9807      	ldr	r0, [sp, #28]
 800669a:	4408      	add	r0, r1
 800669c:	1e44      	subs	r4, r0, #1
 800669e:	2c00      	cmp	r4, #0
 80066a0:	db53      	blt.n	800674a <Number::FormatFixed#7994+0x226>
                    {
                        buffer[p--] = (i < digStart) ? this.digits[dig + i] : '0';
 80066a2:	42bc      	cmp	r4, r7
 80066a4:	da0b      	bge.n	80066be <Number::FormatFixed#7994+0x19a>
 80066a6:	9808      	ldr	r0, [sp, #32]
 80066a8:	6940      	ldr	r0, [r0, #20]
 80066aa:	2800      	cmp	r0, #0
 80066ac:	f000 8086 	beq.w	80067bc <Number::FormatFixed#7994+0x298>
 80066b0:	6883      	ldr	r3, [r0, #8]
 80066b2:	429c      	cmp	r4, r3
 80066b4:	d27d      	bcs.n	80067b2 <Number::FormatFixed#7994+0x28e>
 80066b6:	4470      	add	r0, lr
 80066b8:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
 80066bc:	e000      	b.n	80066c0 <Number::FormatFixed#7994+0x19c>
 80066be:	2430      	movs	r4, #48	; 0x30
 80066c0:	f8db 3008 	ldr.w	r3, [fp, #8]
                    int digStart   = (digPos < digLength) ? digPos : digLength;

                    char[] buffer = new char[bufferSize];
                    int    p      = bufferSize - 1;

                    for(int i = digPos - 1; i >= 0; i--)
 80066c4:	eb09 0001 	add.w	r0, r9, r1
                    {
                        buffer[p--] = (i < digStart) ? this.digits[dig + i] : '0';
 80066c8:	4298      	cmp	r0, r3
 80066ca:	d272      	bcs.n	80067b2 <Number::FormatFixed#7994+0x28e>
 80066cc:	f822 4011 	strh.w	r4, [r2, r1, lsl #1]

                        if(groupSize > 0)
 80066d0:	3901      	subs	r1, #1
 80066d2:	f1ba 0f01 	cmp.w	sl, #1
 80066d6:	dbdf      	blt.n	8006698 <Number::FormatFixed#7994+0x174>
                        {
                            digitCount++;
                            if(digitCount == groupSize && i != 0)
 80066d8:	9807      	ldr	r0, [sp, #28]
                    {
                        buffer[p--] = (i < digStart) ? this.digits[dig + i] : '0';

                        if(groupSize > 0)
                        {
                            digitCount++;
 80066da:	f10c 0c01 	add.w	ip, ip, #1
                            if(digitCount == groupSize && i != 0)
 80066de:	4489      	add	r9, r1
 80066e0:	45d4      	cmp	ip, sl
 80066e2:	4408      	add	r0, r1
                    {
                        buffer[p--] = (i < digStart) ? this.digits[dig + i] : '0';

                        if(groupSize > 0)
                        {
                            digitCount++;
 80066e4:	9007      	str	r0, [sp, #28]
 80066e6:	d11e      	bne.n	8006726 <Number::FormatFixed#7994+0x202>
                            if(digitCount == groupSize && i != 0)
 80066e8:	9807      	ldr	r0, [sp, #28]
 80066ea:	9c03      	ldr	r4, [sp, #12]
 80066ec:	46d4      	mov	ip, sl
 80066ee:	b1d0      	cbz	r0, 8006726 <Number::FormatFixed#7994+0x202>
 80066f0:	e007      	b.n	8006702 <Number::FormatFixed#7994+0x1de>
                            {
                                for(int j = groupSeparatorLen - 1; j >= 0; j--)
                                {
                                    buffer[p--] = sGroup[j];
 80066f2:	b280      	uxth	r0, r0
 80066f4:	eb0b 0249 	add.w	r2, fp, r9, lsl #1
 80066f8:	f1a9 0101 	sub.w	r1, r9, #1
                        if(groupSize > 0)
                        {
                            digitCount++;
                            if(digitCount == groupSize && i != 0)
                            {
                                for(int j = groupSeparatorLen - 1; j >= 0; j--)
 80066fc:	3c01      	subs	r4, #1
 80066fe:	8190      	strh	r0, [r2, #12]
 8006700:	4689      	mov	r9, r1
 8006702:	2c00      	cmp	r4, #0
 8006704:	db08      	blt.n	8006718 <Number::FormatFixed#7994+0x1f4>
 8006706:	9813      	ldr	r0, [sp, #76]	; 0x4c
                                {
                                    buffer[p--] = sGroup[j];
 8006708:	4621      	mov	r1, r4
 800670a:	f7fa fe4b 	bl	80013a4 <String::get_Chars#4269>
 800670e:	f8db 1008 	ldr.w	r1, [fp, #8]
 8006712:	4589      	cmp	r9, r1
 8006714:	d3ed      	bcc.n	80066f2 <Number::FormatFixed#7994+0x1ce>
 8006716:	e04c      	b.n	80067b2 <Number::FormatFixed#7994+0x28e>
                                }

                                if(groupSizeIndex < groupSizeLen - 1)
 8006718:	9801      	ldr	r0, [sp, #4]
 800671a:	9902      	ldr	r1, [sp, #8]
 800671c:	f04f 0c00 	mov.w	ip, #0
 8006720:	3801      	subs	r0, #1
 8006722:	4281      	cmp	r1, r0
 8006724:	db08      	blt.n	8006738 <Number::FormatFixed#7994+0x214>
                    int digStart   = (digPos < digLength) ? digPos : digLength;

                    char[] buffer = new char[bufferSize];
                    int    p      = bufferSize - 1;

                    for(int i = digPos - 1; i >= 0; i--)
 8006726:	9804      	ldr	r0, [sp, #16]
 8006728:	9907      	ldr	r1, [sp, #28]
 800672a:	eb00 0249 	add.w	r2, r0, r9, lsl #1
 800672e:	200a      	movs	r0, #10
 8006730:	eb00 0e41 	add.w	lr, r0, r1, lsl #1
 8006734:	2100      	movs	r1, #0
 8006736:	e7af      	b.n	8006698 <Number::FormatFixed#7994+0x174>
 8006738:	9802      	ldr	r0, [sp, #8]
 800673a:	4601      	mov	r1, r0
                                }

                                if(groupSizeIndex < groupSizeLen - 1)
                                {
                                    groupSizeIndex++;
                                    groupSize = groupDigits[groupSizeIndex];
 800673c:	9806      	ldr	r0, [sp, #24]
                                    buffer[p--] = sGroup[j];
                                }

                                if(groupSizeIndex < groupSizeLen - 1)
                                {
                                    groupSizeIndex++;
 800673e:	3101      	adds	r1, #1
                                    groupSize = groupDigits[groupSizeIndex];
 8006740:	9102      	str	r1, [sp, #8]
 8006742:	6880      	ldr	r0, [r0, #8]
 8006744:	4281      	cmp	r1, r0
 8006746:	d3a0      	bcc.n	800668a <Number::FormatFixed#7994+0x166>
 8006748:	e033      	b.n	80067b2 <Number::FormatFixed#7994+0x28e>
                                digitCount = 0;
                            }
                        }
                    }

                    sb.Append( buffer );
 800674a:	f1b8 0f00 	cmp.w	r8, #0
 800674e:	d035      	beq.n	80067bc <Number::FormatFixed#7994+0x298>
 8006750:	4640      	mov	r0, r8
 8006752:	4659      	mov	r1, fp
 8006754:	f000 fb5b 	bl	8006e0e <StringBuilder::Append#9263>
            else
            {
                sb.Append( '0' );
            }

            if(digits > 0)
 8006758:	2e00      	cmp	r6, #0
 800675a:	dd2c      	ble.n	80067b6 <Number::FormatFixed#7994+0x292>
            {
                sb.Append( sDecimal );
 800675c:	f1b8 0f00 	cmp.w	r8, #0
 8006760:	d02c      	beq.n	80067bc <Number::FormatFixed#7994+0x298>
 8006762:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006764:	4640      	mov	r0, r8
 8006766:	f7ff fe11 	bl	800638c <StringBuilder::Append#9238>
 800676a:	e005      	b.n	8006778 <Number::FormatFixed#7994+0x254>

                while(digPos < 0 && digits > 0)
                {
                    sb.Append( '0' );
 800676c:	4640      	mov	r0, r8
 800676e:	2130      	movs	r1, #48	; 0x30
 8006770:	f000 fa85 	bl	8006c7e <StringBuilder::Append#9252>

                    digPos++;
                    digits--;
 8006774:	3e01      	subs	r6, #1

                while(digPos < 0 && digits > 0)
                {
                    sb.Append( '0' );

                    digPos++;
 8006776:	3501      	adds	r5, #1

            if(digits > 0)
            {
                sb.Append( sDecimal );

                while(digPos < 0 && digits > 0)
 8006778:	f1b5 3fff 	cmp.w	r5, #4294967295
 800677c:	dc01      	bgt.n	8006782 <Number::FormatFixed#7994+0x25e>
 800677e:	2e00      	cmp	r6, #0
 8006780:	dcf4      	bgt.n	800676c <Number::FormatFixed#7994+0x248>

                    digPos++;
                    digits--;
                }

                while(digits > 0)
 8006782:	1c74      	adds	r4, r6, #1
 8006784:	e00c      	b.n	80067a0 <Number::FormatFixed#7994+0x27c>
                {
                    char ch = this.digits[dig];
 8006786:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 800678a:	8985      	ldrh	r5, [r0, #12]
                    else
                    {
                        dig++;
                    }

                    sb.Append( ch );
 800678c:	4640      	mov	r0, r8

                while(digits > 0)
                {
                    char ch = this.digits[dig];

                    if(ch == 0)
 800678e:	2d00      	cmp	r5, #0
 8006790:	4629      	mov	r1, r5
 8006792:	bf08      	it	eq
 8006794:	2130      	moveq	r1, #48	; 0x30
                    else
                    {
                        dig++;
                    }

                    sb.Append( ch );
 8006796:	f000 fa72 	bl	8006c7e <StringBuilder::Append#9252>

                while(digits > 0)
                {
                    char ch = this.digits[dig];

                    if(ch == 0)
 800679a:	2d00      	cmp	r5, #0
 800679c:	bf18      	it	ne
 800679e:	3701      	addne	r7, #1

                    digPos++;
                    digits--;
                }

                while(digits > 0)
 80067a0:	3c01      	subs	r4, #1
 80067a2:	2c00      	cmp	r4, #0
 80067a4:	dd07      	ble.n	80067b6 <Number::FormatFixed#7994+0x292>
                {
                    char ch = this.digits[dig];
 80067a6:	9808      	ldr	r0, [sp, #32]
 80067a8:	6940      	ldr	r0, [r0, #20]
 80067aa:	b138      	cbz	r0, 80067bc <Number::FormatFixed#7994+0x298>
 80067ac:	6881      	ldr	r1, [r0, #8]
 80067ae:	428f      	cmp	r7, r1
 80067b0:	d3e9      	bcc.n	8006786 <Number::FormatFixed#7994+0x262>
 80067b2:	f7fa fb7d 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 80067b6:	b009      	add	sp, #36	; 0x24
 80067b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    } while(--digPos > 0);
                }
            }
            else
            {
                sb.Append( '0' );
 80067bc:	f7f9 fe54 	bl	8000468 <Thread::ThrowNullException#4411>
 80067c0:	17ffa568 	.word	0x17ffa568
 80067c4:	fffffe0c 	.word	0xfffffe0c
 80067c8:	e8019568 	.word	0xe8019568
 80067cc:	17ffa4ba 	.word	0x17ffa4ba
 80067d0:	e80196e8 	.word	0xe80196e8

080067d4 <Number::FormatScientific#7992>:

        private void FormatScientific( System.Text.StringBuilder sb      ,
                                       int                       digits  ,
                                       char                      expChar ,
                                       NumberFormatInfo          info    )
        {
 80067d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067d8:	b083      	sub	sp, #12
 80067da:	4606      	mov	r6, r0
 80067dc:	4698      	mov	r8, r3
 80067de:	4617      	mov	r7, r2
 80067e0:	460d      	mov	r5, r1
            int dig = 0;  // number->digits;

            sb.Append( this.digits[dig] != 0 ? this.digits[dig++] : '0' );
 80067e2:	6970      	ldr	r0, [r6, #20]
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d057      	beq.n	8006898 <Number::FormatScientific#7992+0xc4>
 80067e8:	6881      	ldr	r1, [r0, #8]
 80067ea:	2900      	cmp	r1, #0
 80067ec:	d052      	beq.n	8006894 <Number::FormatScientific#7992+0xc0>
 80067ee:	8980      	ldrh	r0, [r0, #12]
 80067f0:	b140      	cbz	r0, 8006804 <Number::FormatScientific#7992+0x30>
 80067f2:	6970      	ldr	r0, [r6, #20]
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d04f      	beq.n	8006898 <Number::FormatScientific#7992+0xc4>
 80067f8:	6881      	ldr	r1, [r0, #8]
 80067fa:	2900      	cmp	r1, #0
 80067fc:	d04a      	beq.n	8006894 <Number::FormatScientific#7992+0xc0>
 80067fe:	8981      	ldrh	r1, [r0, #12]
 8006800:	2401      	movs	r4, #1
 8006802:	e001      	b.n	8006808 <Number::FormatScientific#7992+0x34>
 8006804:	2130      	movs	r1, #48	; 0x30
 8006806:	2400      	movs	r4, #0
 8006808:	2d00      	cmp	r5, #0
 800680a:	d045      	beq.n	8006898 <Number::FormatScientific#7992+0xc4>
 800680c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8006810:	4628      	mov	r0, r5
 8006812:	f000 fa34 	bl	8006c7e <StringBuilder::Append#9252>

            if(digits != 1)
 8006816:	2f01      	cmp	r7, #1
 8006818:	d00b      	beq.n	8006832 <Number::FormatScientific#7992+0x5e>
            {
                // For E0 we would like to suppress the decimal point
                sb.Append( info.numberDecimalSeparator );
 800681a:	f1b9 0f00 	cmp.w	r9, #0
 800681e:	d03b      	beq.n	8006898 <Number::FormatScientific#7992+0xc4>
 8006820:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8006824:	4628      	mov	r0, r5
 8006826:	f7ff fdb1 	bl	800638c <StringBuilder::Append#9238>
 800682a:	e002      	b.n	8006832 <Number::FormatScientific#7992+0x5e>
            }

            while(--digits > 0)
            {
                sb.Append( this.digits[dig] != 0 ? this.digits[dig++] : '0' );
 800682c:	4628      	mov	r0, r5
 800682e:	f000 fa26 	bl	8006c7e <StringBuilder::Append#9252>
 8006832:	6970      	ldr	r0, [r6, #20]
            {
                // For E0 we would like to suppress the decimal point
                sb.Append( info.numberDecimalSeparator );
            }

            while(--digits > 0)
 8006834:	3f01      	subs	r7, #1
 8006836:	2f00      	cmp	r7, #0
 8006838:	dd14      	ble.n	8006864 <Number::FormatScientific#7992+0x90>
 800683a:	b368      	cbz	r0, 8006898 <Number::FormatScientific#7992+0xc4>
            {
                sb.Append( this.digits[dig] != 0 ? this.digits[dig++] : '0' );
 800683c:	6881      	ldr	r1, [r0, #8]
 800683e:	428c      	cmp	r4, r1
 8006840:	d228      	bcs.n	8006894 <Number::FormatScientific#7992+0xc0>
 8006842:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8006846:	8980      	ldrh	r0, [r0, #12]
 8006848:	b150      	cbz	r0, 8006860 <Number::FormatScientific#7992+0x8c>
 800684a:	6970      	ldr	r0, [r6, #20]
 800684c:	b320      	cbz	r0, 8006898 <Number::FormatScientific#7992+0xc4>
 800684e:	6881      	ldr	r1, [r0, #8]
 8006850:	428c      	cmp	r4, r1
 8006852:	d21f      	bcs.n	8006894 <Number::FormatScientific#7992+0xc0>
 8006854:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8006858:	1c62      	adds	r2, r4, #1
 800685a:	8981      	ldrh	r1, [r0, #12]
 800685c:	4614      	mov	r4, r2
 800685e:	e7e5      	b.n	800682c <Number::FormatScientific#7992+0x58>
 8006860:	2130      	movs	r1, #48	; 0x30
 8006862:	e7e3      	b.n	800682c <Number::FormatScientific#7992+0x58>
 8006864:	b1c0      	cbz	r0, 8006898 <Number::FormatScientific#7992+0xc4>
            }

            int e = this.digits[0] == 0 ? 0 : this.scale - 1;
 8006866:	6881      	ldr	r1, [r0, #8]
 8006868:	b1a1      	cbz	r1, 8006894 <Number::FormatScientific#7992+0xc0>
 800686a:	8980      	ldrh	r0, [r0, #12]
 800686c:	b110      	cbz	r0, 8006874 <Number::FormatScientific#7992+0xa0>
 800686e:	68f0      	ldr	r0, [r6, #12]
 8006870:	1e41      	subs	r1, r0, #1
 8006872:	e000      	b.n	8006876 <Number::FormatScientific#7992+0xa2>
 8006874:	2100      	movs	r1, #0

            FormatExponent( sb, e, expChar, info.positiveSign, info.negativeSign, 3 );
 8006876:	f1b9 0f00 	cmp.w	r9, #0
 800687a:	d00d      	beq.n	8006898 <Number::FormatScientific#7992+0xc4>
 800687c:	e9d9 3005 	ldrd	r3, r0, [r9, #20]
 8006880:	2203      	movs	r2, #3
 8006882:	e9cd 0200 	strd	r0, r2, [sp]
 8006886:	4628      	mov	r0, r5
 8006888:	4642      	mov	r2, r8
 800688a:	f000 fa37 	bl	8006cfc <Number::FormatExponent#7990>
 800688e:	b003      	add	sp, #12
 8006890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                                       char                      expChar ,
                                       NumberFormatInfo          info    )
        {
            int dig = 0;  // number->digits;

            sb.Append( this.digits[dig] != 0 ? this.digits[dig++] : '0' );
 8006894:	f7fa fb0c 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 8006898:	f7f9 fde6 	bl	8000468 <Thread::ThrowNullException#4411>

0800689c <Number::FormatNumber#7995>:
        }

        private void FormatNumber( System.Text.StringBuilder sb     ,
                                   int                       digits ,
                                   NumberFormatInfo          info   )
        {
 800689c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068a0:	b083      	sub	sp, #12
 80068a2:	4681      	mov	r9, r0
 80068a4:	461c      	mov	r4, r3
 80068a6:	4690      	mov	r8, r2
 80068a8:	460e      	mov	r6, r1
            String fmt      = this.negative ? negNumberFormats[info.numberNegativePattern] : posNumberFormat;
 80068aa:	f899 0010 	ldrb.w	r0, [r9, #16]
 80068ae:	b180      	cbz	r0, 80068d2 <Number::FormatNumber#7995+0x36>
 80068b0:	2c00      	cmp	r4, #0
 80068b2:	d044      	beq.n	800693e <Number::FormatNumber#7995+0xa2>
 80068b4:	4826      	ldr	r0, [pc, #152]	; (8006950 <Number::FormatNumber#7995+0xb4>)
 80068b6:	4925      	ldr	r1, [pc, #148]	; (800694c <Number::FormatNumber#7995+0xb0>)
 80068b8:	4478      	add	r0, pc
 80068ba:	4408      	add	r0, r1
 80068bc:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 80068c0:	b3e8      	cbz	r0, 800693e <Number::FormatNumber#7995+0xa2>
 80068c2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80068c4:	6882      	ldr	r2, [r0, #8]
 80068c6:	4291      	cmp	r1, r2
 80068c8:	d23b      	bcs.n	8006942 <Number::FormatNumber#7995+0xa6>
 80068ca:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80068ce:	68c5      	ldr	r5, [r0, #12]
 80068d0:	e005      	b.n	80068de <Number::FormatNumber#7995+0x42>
 80068d2:	481d      	ldr	r0, [pc, #116]	; (8006948 <Number::FormatNumber#7995+0xac>)
 80068d4:	491d      	ldr	r1, [pc, #116]	; (800694c <Number::FormatNumber#7995+0xb0>)
 80068d6:	4478      	add	r0, pc
 80068d8:	4408      	add	r0, r1
 80068da:	f8d0 5100 	ldr.w	r5, [r0, #256]	; 0x100
 80068de:	2700      	movs	r7, #0
 80068e0:	e004      	b.n	80068ec <Number::FormatNumber#7995+0x50>
                                     info.numberDecimalSeparator,
                                     info.numberGroupSeparator, info );
                        break;

                    case '-':
                        sb.Append( info.negativeSign );
 80068e2:	69a1      	ldr	r1, [r4, #24]
 80068e4:	4630      	mov	r0, r6
 80068e6:	f7ff fd51 	bl	800638c <StringBuilder::Append#9238>
                                   NumberFormatInfo          info   )
        {
            String fmt      = this.negative ? negNumberFormats[info.numberNegativePattern] : posNumberFormat;
            int    fmtIndex = 0;

            for(; fmtIndex < fmt.Length; fmtIndex++)
 80068ea:	3701      	adds	r7, #1
 80068ec:	b33d      	cbz	r5, 800693e <Number::FormatNumber#7995+0xa2>
 80068ee:	68e8      	ldr	r0, [r5, #12]
 80068f0:	4287      	cmp	r7, r0
 80068f2:	bfa4      	itt	ge
 80068f4:	b003      	addge	sp, #12
 80068f6:	e8bd 83f0 	ldmiage.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            {
                char ch = fmt[fmtIndex];
 80068fa:	4628      	mov	r0, r5
 80068fc:	4639      	mov	r1, r7
 80068fe:	f7fa fd51 	bl	80013a4 <String::get_Chars#4269>
 8006902:	4601      	mov	r1, r0

                switch(ch)
 8006904:	b288      	uxth	r0, r1
 8006906:	282d      	cmp	r0, #45	; 0x2d
 8006908:	d104      	bne.n	8006914 <Number::FormatNumber#7995+0x78>
                                     info.numberDecimalSeparator,
                                     info.numberGroupSeparator, info );
                        break;

                    case '-':
                        sb.Append( info.negativeSign );
 800690a:	2c00      	cmp	r4, #0
 800690c:	bf18      	it	ne
 800690e:	2e00      	cmpne	r6, #0
 8006910:	d1e7      	bne.n	80068e2 <Number::FormatNumber#7995+0x46>
 8006912:	e014      	b.n	800693e <Number::FormatNumber#7995+0xa2>
 8006914:	2823      	cmp	r0, #35	; 0x23
 8006916:	d10c      	bne.n	8006932 <Number::FormatNumber#7995+0x96>
 8006918:	b18c      	cbz	r4, 800693e <Number::FormatNumber#7995+0xa2>
                char ch = fmt[fmtIndex];

                switch(ch)
                {
                    case '#':
                        FormatFixed( sb, digits,
 800691a:	68a3      	ldr	r3, [r4, #8]
 800691c:	e9d4 0107 	ldrd	r0, r1, [r4, #28]
 8006920:	4642      	mov	r2, r8
 8006922:	e9cd 0100 	strd	r0, r1, [sp]
 8006926:	4648      	mov	r0, r9
 8006928:	4631      	mov	r1, r6
 800692a:	f7ff fdfb 	bl	8006524 <Number::FormatFixed#7994>
                                   NumberFormatInfo          info   )
        {
            String fmt      = this.negative ? negNumberFormats[info.numberNegativePattern] : posNumberFormat;
            int    fmtIndex = 0;

            for(; fmtIndex < fmt.Length; fmtIndex++)
 800692e:	3701      	adds	r7, #1
 8006930:	e7dc      	b.n	80068ec <Number::FormatNumber#7995+0x50>
 8006932:	b126      	cbz	r6, 800693e <Number::FormatNumber#7995+0xa2>
                    case '-':
                        sb.Append( info.negativeSign );
                        break;

                    default:
                        sb.Append( ch );
 8006934:	4630      	mov	r0, r6
 8006936:	f000 f9a2 	bl	8006c7e <StringBuilder::Append#9252>
                                   NumberFormatInfo          info   )
        {
            String fmt      = this.negative ? negNumberFormats[info.numberNegativePattern] : posNumberFormat;
            int    fmtIndex = 0;

            for(; fmtIndex < fmt.Length; fmtIndex++)
 800693a:	3701      	adds	r7, #1
 800693c:	e7d6      	b.n	80068ec <Number::FormatNumber#7995+0x50>
 800693e:	f7f9 fd93 	bl	8000468 <Thread::ThrowNullException#4411>

        private void FormatNumber( System.Text.StringBuilder sb     ,
                                   int                       digits ,
                                   NumberFormatInfo          info   )
        {
            String fmt      = this.negative ? negNumberFormats[info.numberNegativePattern] : posNumberFormat;
 8006942:	f7fa fab5 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 8006946:	46c0      	nop			; (mov r8, r8)
 8006948:	17ffa23e 	.word	0x17ffa23e
 800694c:	fffffcf8 	.word	0xfffffcf8
 8006950:	17ffa25c 	.word	0x17ffa25c

08006954 <Number::FormatPercent#7996>:
        }

        private void FormatPercent( System.Text.StringBuilder sb     ,
                                    int                       digits ,
                                    NumberFormatInfo          info   )
        {
 8006954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006958:	b083      	sub	sp, #12
 800695a:	4681      	mov	r9, r0
 800695c:	461c      	mov	r4, r3
 800695e:	4690      	mov	r8, r2
 8006960:	460e      	mov	r6, r1
            String fmt      = this.negative ? negPercentFormats[info.percentNegativePattern] :
 8006962:	f899 0010 	ldrb.w	r0, [r9, #16]
 8006966:	b158      	cbz	r0, 8006980 <Number::FormatPercent#7996+0x2c>
 8006968:	2c00      	cmp	r4, #0
 800696a:	d04d      	beq.n	8006a08 <Number::FormatPercent#7996+0xb4>
 800696c:	482a      	ldr	r0, [pc, #168]	; (8006a18 <Number::FormatPercent#7996+0xc4>)
 800696e:	4929      	ldr	r1, [pc, #164]	; (8006a14 <Number::FormatPercent#7996+0xc0>)
 8006970:	4478      	add	r0, pc
 8006972:	4408      	add	r0, r1
 8006974:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8006978:	2800      	cmp	r0, #0
 800697a:	d045      	beq.n	8006a08 <Number::FormatPercent#7996+0xb4>
 800697c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800697e:	e009      	b.n	8006994 <Number::FormatPercent#7996+0x40>
 8006980:	2c00      	cmp	r4, #0
 8006982:	d041      	beq.n	8006a08 <Number::FormatPercent#7996+0xb4>
 8006984:	4822      	ldr	r0, [pc, #136]	; (8006a10 <Number::FormatPercent#7996+0xbc>)
 8006986:	4923      	ldr	r1, [pc, #140]	; (8006a14 <Number::FormatPercent#7996+0xc0>)
 8006988:	4478      	add	r0, pc
 800698a:	4408      	add	r0, r1
 800698c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
 8006990:	b3d0      	cbz	r0, 8006a08 <Number::FormatPercent#7996+0xb4>
 8006992:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8006994:	6882      	ldr	r2, [r0, #8]
 8006996:	4291      	cmp	r1, r2
 8006998:	d238      	bcs.n	8006a0c <Number::FormatPercent#7996+0xb8>
 800699a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800699e:	2700      	movs	r7, #0
 80069a0:	68c5      	ldr	r5, [r0, #12]
 80069a2:	e002      	b.n	80069aa <Number::FormatPercent#7996+0x56>
                    case '-':
                        sb.Append( info.negativeSign );
                        break;

                    case '%':
                        sb.Append( info.percentSymbol );
 80069a4:	4630      	mov	r0, r6
 80069a6:	f7ff fcf1 	bl	800638c <StringBuilder::Append#9238>
 80069aa:	b36d      	cbz	r5, 8006a08 <Number::FormatPercent#7996+0xb4>
            String fmt      = this.negative ? negPercentFormats[info.percentNegativePattern] :
                                              posPercentFormats[info.percentPositivePattern];
            int    fmtIndex = 0;
            char   ch;

            while((ch = fmt[fmtIndex++]) != 0)
 80069ac:	4628      	mov	r0, r5
 80069ae:	4639      	mov	r1, r7
 80069b0:	f7fa fcf8 	bl	80013a4 <String::get_Chars#4269>
 80069b4:	b281      	uxth	r1, r0
 80069b6:	2900      	cmp	r1, #0
 80069b8:	bf04      	itt	eq
 80069ba:	b003      	addeq	sp, #12
 80069bc:	e8bd 83f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069c0:	3701      	adds	r7, #1
            {
                switch(ch)
 80069c2:	2923      	cmp	r1, #35	; 0x23
 80069c4:	d007      	beq.n	80069d6 <Number::FormatPercent#7996+0x82>
 80069c6:	2925      	cmp	r1, #37	; 0x25
 80069c8:	d111      	bne.n	80069ee <Number::FormatPercent#7996+0x9a>
                    case '-':
                        sb.Append( info.negativeSign );
                        break;

                    case '%':
                        sb.Append( info.percentSymbol );
 80069ca:	2c00      	cmp	r4, #0
 80069cc:	bf18      	it	ne
 80069ce:	2e00      	cmpne	r6, #0
 80069d0:	d01a      	beq.n	8006a08 <Number::FormatPercent#7996+0xb4>
 80069d2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80069d4:	e7e6      	b.n	80069a4 <Number::FormatPercent#7996+0x50>
 80069d6:	b1bc      	cbz	r4, 8006a08 <Number::FormatPercent#7996+0xb4>
            while((ch = fmt[fmtIndex++]) != 0)
            {
                switch(ch)
                {
                    case '#':
                        FormatFixed( sb, digits,
 80069d8:	6923      	ldr	r3, [r4, #16]
 80069da:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
 80069de:	4642      	mov	r2, r8
 80069e0:	e9cd 0100 	strd	r0, r1, [sp]
 80069e4:	4648      	mov	r0, r9
 80069e6:	4631      	mov	r1, r6
 80069e8:	f7ff fd9c 	bl	8006524 <Number::FormatFixed#7994>
 80069ec:	e7dd      	b.n	80069aa <Number::FormatPercent#7996+0x56>
 80069ee:	292d      	cmp	r1, #45	; 0x2d
 80069f0:	d105      	bne.n	80069fe <Number::FormatPercent#7996+0xaa>
                                     info.percentDecimalSeparator,
                                     info.percentGroupSeparator, info );
                        break;

                    case '-':
                        sb.Append( info.negativeSign );
 80069f2:	2c00      	cmp	r4, #0
 80069f4:	bf18      	it	ne
 80069f6:	2e00      	cmpne	r6, #0
 80069f8:	d006      	beq.n	8006a08 <Number::FormatPercent#7996+0xb4>
 80069fa:	69a1      	ldr	r1, [r4, #24]
 80069fc:	e7d2      	b.n	80069a4 <Number::FormatPercent#7996+0x50>
 80069fe:	b11e      	cbz	r6, 8006a08 <Number::FormatPercent#7996+0xb4>
                    case '%':
                        sb.Append( info.percentSymbol );
                        break;

                    default:
                        sb.Append( ch );
 8006a00:	4630      	mov	r0, r6
 8006a02:	f000 f93c 	bl	8006c7e <StringBuilder::Append#9252>
 8006a06:	e7d0      	b.n	80069aa <Number::FormatPercent#7996+0x56>

        private void FormatPercent( System.Text.StringBuilder sb     ,
                                    int                       digits ,
                                    NumberFormatInfo          info   )
        {
            String fmt      = this.negative ? negPercentFormats[info.percentNegativePattern] :
 8006a08:	f7f9 fd2e 	bl	8000468 <Thread::ThrowNullException#4411>
 8006a0c:	f7fa fa50 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 8006a10:	17ffa18c 	.word	0x17ffa18c
 8006a14:	fffffcf8 	.word	0xfffffcf8
 8006a18:	17ffa1a4 	.word	0x17ffa1a4

08006a1c <Number::FindSection#7976>:

            return sb.ToString();
        }

        private static int FindSection( String format, int section )
        {
 8006a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a20:	4688      	mov	r8, r1
 8006a22:	4605      	mov	r5, r0
            if(section == 0)
 8006a24:	f1b8 0f00 	cmp.w	r8, #0
 8006a28:	d045      	beq.n	8006ab6 <Number::FindSection#7976+0x9a>
 8006a2a:	2400      	movs	r4, #0
                        {
                            src++;
                        }
                        break;
                    case '\\':
                        if(Get( format, src ) != 0)
 8006a2c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8006a30:	e006      	b.n	8006a40 <Number::FindSection#7976+0x24>
 8006a32:	4628      	mov	r0, r5
 8006a34:	4621      	mov	r1, r4
 8006a36:	f7fe fec1 	bl	80057bc <Number::Get#7955>
 8006a3a:	4230      	tst	r0, r6
 8006a3c:	bf18      	it	ne
 8006a3e:	3401      	addne	r4, #1
            }

            int src = 0;
            while(true)
            {
                char ch = Get( format, src );
 8006a40:	4628      	mov	r0, r5
 8006a42:	4621      	mov	r1, r4
 8006a44:	f7fe feba 	bl	80057bc <Number::Get#7955>
 8006a48:	4607      	mov	r7, r0
                src++;
 8006a4a:	3401      	adds	r4, #1
                switch(ch)
 8006a4c:	b2b8      	uxth	r0, r7
 8006a4e:	2823      	cmp	r0, #35	; 0x23
 8006a50:	d309      	bcc.n	8006a66 <Number::FindSection#7976+0x4a>
 8006a52:	2827      	cmp	r0, #39	; 0x27
 8006a54:	d00d      	beq.n	8006a72 <Number::FindSection#7976+0x56>
 8006a56:	285c      	cmp	r0, #92	; 0x5c
 8006a58:	d0eb      	beq.n	8006a32 <Number::FindSection#7976+0x16>
 8006a5a:	283b      	cmp	r0, #59	; 0x3b
                        {
                            src++;
                        }
                        break;
                    case ';':
                        section--;
 8006a5c:	bf08      	it	eq
 8006a5e:	f1b8 0801 	subseq.w	r8, r8, #1
 8006a62:	d1ed      	bne.n	8006a40 <Number::FindSection#7976+0x24>
 8006a64:	e014      	b.n	8006a90 <Number::FindSection#7976+0x74>
            int src = 0;
            while(true)
            {
                char ch = Get( format, src );
                src++;
                switch(ch)
 8006a66:	4237      	tst	r7, r6
 8006a68:	d025      	beq.n	8006ab6 <Number::FindSection#7976+0x9a>
 8006a6a:	2822      	cmp	r0, #34	; 0x22
 8006a6c:	d1e8      	bne.n	8006a40 <Number::FindSection#7976+0x24>
 8006a6e:	e000      	b.n	8006a72 <Number::FindSection#7976+0x56>
                {
                    case '\'':
                    case '"':
                        while(Get( format, src ) != '\0' && Get( format, src ) != ch)
                        {
                            src++;
 8006a70:	3401      	adds	r4, #1
                src++;
                switch(ch)
                {
                    case '\'':
                    case '"':
                        while(Get( format, src ) != '\0' && Get( format, src ) != ch)
 8006a72:	4628      	mov	r0, r5
 8006a74:	4621      	mov	r1, r4
 8006a76:	f7fe fea1 	bl	80057bc <Number::Get#7955>
 8006a7a:	4230      	tst	r0, r6
 8006a7c:	d0e0      	beq.n	8006a40 <Number::FindSection#7976+0x24>
 8006a7e:	4628      	mov	r0, r5
 8006a80:	4621      	mov	r1, r4
 8006a82:	f7fe fe9b 	bl	80057bc <Number::Get#7955>
 8006a86:	b280      	uxth	r0, r0
 8006a88:	b239      	sxth	r1, r7
 8006a8a:	4288      	cmp	r0, r1
 8006a8c:	d1f0      	bne.n	8006a70 <Number::FindSection#7976+0x54>
 8006a8e:	e7d7      	b.n	8006a40 <Number::FindSection#7976+0x24>
                        section--;
                        if(section != 0)
                        {
                            break;
                        }
                        if(Get( format, src ) != 0 && Get( format, src ) != ';')
 8006a90:	4628      	mov	r0, r5
 8006a92:	4621      	mov	r1, r4
 8006a94:	f7fe fe92 	bl	80057bc <Number::Get#7955>
 8006a98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006a9c:	4208      	tst	r0, r1
 8006a9e:	d00a      	beq.n	8006ab6 <Number::FindSection#7976+0x9a>
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	f7fe fe8a 	bl	80057bc <Number::Get#7955>
 8006aa8:	b280      	uxth	r0, r0
 8006aaa:	283b      	cmp	r0, #59	; 0x3b
 8006aac:	bf08      	it	eq
 8006aae:	2400      	moveq	r4, #0
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006abc <ToStringFormatState::Reset#11593>:
            internal int    src;

            //--/

            internal void Reset()
            {
 8006abc:	f04f 31ff 	mov.w	r1, #4294967295
 8006ac0:	61c1      	str	r1, [r0, #28]
 8006ac2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ac6:	6081      	str	r1, [r0, #8]
 8006ac8:	2100      	movs	r1, #0
 8006aca:	60c1      	str	r1, [r0, #12]
 8006acc:	7601      	strb	r1, [r0, #24]
 8006ace:	e9c0 1108 	strd	r1, r1, [r0, #32]
 8006ad2:	6281      	str	r1, [r0, #40]	; 0x28
                scientific   = false;
                percent      = 0;
                permille     = 0;
                thousandSeps = 0;

                src          = sectionOffset;
 8006ad4:	6841      	ldr	r1, [r0, #4]
 8006ad6:	6381      	str	r1, [r0, #56]	; 0x38
 8006ad8:	4770      	bx	lr

08006ada <ToStringFormatState::Get#11597>:
                return ch;
            }

            internal char Get()
            {
                if(src < format.Length)
 8006ada:	b580      	push	{r7, lr}
 8006adc:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006ade:	b179      	cbz	r1, 8006b00 <ToStringFormatState::Get#11597+0x26>
 8006ae0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006ae2:	68c9      	ldr	r1, [r1, #12]
 8006ae4:	428a      	cmp	r2, r1
 8006ae6:	bfa4      	itt	ge
 8006ae8:	2000      	movge	r0, #0
 8006aea:	bd80      	popge	{r7, pc}
                {
                    return format[src++];
 8006aec:	e9d0 210d 	ldrd	r2, r1, [r0, #52]	; 0x34
 8006af0:	1c4b      	adds	r3, r1, #1
 8006af2:	2a00      	cmp	r2, #0
 8006af4:	6383      	str	r3, [r0, #56]	; 0x38
 8006af6:	d003      	beq.n	8006b00 <ToStringFormatState::Get#11597+0x26>
 8006af8:	4610      	mov	r0, r2
 8006afa:	f7fa fc53 	bl	80013a4 <String::get_Chars#4269>
 8006afe:	bd80      	pop	{r7, pc}
                return ch;
            }

            internal char Get()
            {
                if(src < format.Length)
 8006b00:	f7f9 fcb2 	bl	8000468 <Thread::ThrowNullException#4411>

08006b04 <ToStringFormatState::DecodeFormat#11595>:

                src          = sectionOffset;
            }

            internal char DecodeFormat( char ch )
            {
 8006b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b08:	b081      	sub	sp, #4
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b10:	2000      	movs	r0, #0
                digitCount  = 0;
                thousandPos = -1;
                scaleAdjust = 0;

                while(ch != '\0' && ch != ';')
 8006b12:	f64f 76ff 	movw	r6, #65535	; 0xffff
                            break;

                        case 'E':
                            {
                                char ch2 = PeekAt( 0 );
                                char ch3 = PeekAt( 1 );
 8006b16:	f04f 0801 	mov.w	r8, #1
 8006b1a:	f242 0730 	movw	r7, #8240	; 0x2030
                        case '#':
                            digitCount++;
                            break;

                        case '0':
                            if(firstDigit == 0x7FFFFFFF)
 8006b1e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006b22:	6322      	str	r2, [r4, #48]	; 0x30
 8006b24:	e9c4 0004 	strd	r0, r0, [r4, #16]
            {
                digitCount  = 0;
                thousandPos = -1;
                scaleAdjust = 0;

                while(ch != '\0' && ch != ';')
 8006b28:	4231      	tst	r1, r6
 8006b2a:	bf1c      	itt	ne
 8006b2c:	b28d      	uxthne	r5, r1
 8006b2e:	2d3b      	cmpne	r5, #59	; 0x3b
 8006b30:	f000 808b 	beq.w	8006c4a <ToStringFormatState::DecodeFormat#11595+0x146>
                {
                    switch(ch)
 8006b34:	2d31      	cmp	r5, #49	; 0x31
 8006b36:	d30e      	bcc.n	8006b56 <ToStringFormatState::DecodeFormat#11595+0x52>
 8006b38:	2d45      	cmp	r5, #69	; 0x45
 8006b3a:	d037      	beq.n	8006bac <ToStringFormatState::DecodeFormat#11595+0xa8>
 8006b3c:	2d5c      	cmp	r5, #92	; 0x5c
 8006b3e:	d150      	bne.n	8006be2 <ToStringFormatState::DecodeFormat#11595+0xde>
 8006b40:	e9d4 010d 	ldrd	r0, r1, [r4, #52]	; 0x34
 8006b44:	2200      	movs	r2, #0
                                src++;
                            }
                            break;

                        case '\\':
                            if(PeekAt( 0 ) != 0)
 8006b46:	f000 f8c6 	bl	8006cd6 <ToStringFormatState::PeekAt#11599>
 8006b4a:	4230      	tst	r0, r6
                            {
                                src++;
 8006b4c:	bf1e      	ittt	ne
 8006b4e:	6ba0      	ldrne	r0, [r4, #56]	; 0x38
 8006b50:	3001      	addne	r0, #1
 8006b52:	63a0      	strne	r0, [r4, #56]	; 0x38
 8006b54:	e013      	b.n	8006b7e <ToStringFormatState::DecodeFormat#11595+0x7a>
                thousandPos = -1;
                scaleAdjust = 0;

                while(ch != '\0' && ch != ';')
                {
                    switch(ch)
 8006b56:	f1a5 0022 	sub.w	r0, r5, #34	; 0x22
 8006b5a:	2805      	cmp	r0, #5
 8006b5c:	d90a      	bls.n	8006b74 <ToStringFormatState::DecodeFormat#11595+0x70>
 8006b5e:	f1b5 002c 	subs.w	r0, r5, #44	; 0x2c
 8006b62:	d047      	beq.n	8006bf4 <ToStringFormatState::DecodeFormat#11595+0xf0>
 8006b64:	2802      	cmp	r0, #2
 8006b66:	d157      	bne.n	8006c18 <ToStringFormatState::DecodeFormat#11595+0x114>
                            digitCount++;
                            lastDigit = digitCount;
                            break;

                        case '.':
                            if(decimalPos < 0)
 8006b68:	69e0      	ldr	r0, [r4, #28]
 8006b6a:	2800      	cmp	r0, #0
                            {
                                decimalPos = digitCount;
 8006b6c:	bfbc      	itt	lt
 8006b6e:	6920      	ldrlt	r0, [r4, #16]
 8006b70:	61e0      	strlt	r0, [r4, #28]
 8006b72:	e004      	b.n	8006b7e <ToStringFormatState::DecodeFormat#11595+0x7a>
 8006b74:	e8df f000 	tbb	[pc, r0]
 8006b78:	5c03080f 	.word	0x5c03080f
 8006b7c:	0f03      	.short	0x0f03
                                }
                            }
                            break;
                    }

                    ch = Get();
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f7ff ffab 	bl	8006ada <ToStringFormatState::Get#11597>
 8006b84:	4601      	mov	r1, r0
 8006b86:	e7cf      	b.n	8006b28 <ToStringFormatState::DecodeFormat#11595+0x24>
                while(ch != '\0' && ch != ';')
                {
                    switch(ch)
                    {
                        case '#':
                            digitCount++;
 8006b88:	6920      	ldr	r0, [r4, #16]
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	6120      	str	r0, [r4, #16]
 8006b8e:	e7f6      	b.n	8006b7e <ToStringFormatState::DecodeFormat#11595+0x7a>
                                   ch2 == ch  )
                                {
                                    break;
                                }

                                src++;
 8006b90:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006b92:	3001      	adds	r0, #1
 8006b94:	63a0      	str	r0, [r4, #56]	; 0x38
 8006b96:	e9d4 010d 	ldrd	r0, r1, [r4, #52]	; 0x34
 8006b9a:	2200      	movs	r2, #0

                        case '\'':
                        case '"':
                            while(true)
                            {
                                char ch2 = PeekAt( 0 );
 8006b9c:	f000 f89b 	bl	8006cd6 <ToStringFormatState::PeekAt#11599>

                                if(ch2 == 0  ||
 8006ba0:	4230      	tst	r0, r6
 8006ba2:	bf1c      	itt	ne
 8006ba4:	b280      	uxthne	r0, r0
 8006ba6:	42a8      	cmpne	r0, r5
 8006ba8:	d1f2      	bne.n	8006b90 <ToStringFormatState::DecodeFormat#11595+0x8c>
 8006baa:	e7e8      	b.n	8006b7e <ToStringFormatState::DecodeFormat#11595+0x7a>
 8006bac:	e9d4 010d 	ldrd	r0, r1, [r4, #52]	; 0x34
 8006bb0:	2200      	movs	r2, #0
                            }
                            break;

                        case 'E':
                            {
                                char ch2 = PeekAt( 0 );
 8006bb2:	f000 f890 	bl	8006cd6 <ToStringFormatState::PeekAt#11599>
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	e9d4 010d 	ldrd	r0, r1, [r4, #52]	; 0x34
                                char ch3 = PeekAt( 1 );
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f000 f88a 	bl	8006cd6 <ToStringFormatState::PeekAt#11599>

                                if(                                 ch2 == '0'  ||
 8006bc2:	b2a9      	uxth	r1, r5
 8006bc4:	292b      	cmp	r1, #43	; 0x2b
 8006bc6:	d003      	beq.n	8006bd0 <ToStringFormatState::DecodeFormat#11595+0xcc>
 8006bc8:	2930      	cmp	r1, #48	; 0x30
 8006bca:	d004      	beq.n	8006bd6 <ToStringFormatState::DecodeFormat#11595+0xd2>
 8006bcc:	292d      	cmp	r1, #45	; 0x2d
 8006bce:	d1d6      	bne.n	8006b7e <ToStringFormatState::DecodeFormat#11595+0x7a>
 8006bd0:	b280      	uxth	r0, r0
 8006bd2:	2830      	cmp	r0, #48	; 0x30
 8006bd4:	d1d3      	bne.n	8006b7e <ToStringFormatState::DecodeFormat#11595+0x7a>
                                   ((ch2 == '+' || ch2 == '-'  ) && ch3 == '0')  )
                                {
                                    MoveToEnd();
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f000 fe42 	bl	8007860 <ToStringFormatState::MoveToEnd#11603>
 8006bdc:	f884 8018 	strb.w	r8, [r4, #24]
 8006be0:	e7cd      	b.n	8006b7e <ToStringFormatState::DecodeFormat#11595+0x7a>
 8006be2:	42bd      	cmp	r5, r7
 8006be4:	d1cb      	bne.n	8006b7e <ToStringFormatState::DecodeFormat#11595+0x7a>
                            percent++;
                            scaleAdjust += 2;
                            break;

                        case '\u2030':
                            permille++;
 8006be6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006be8:	3001      	adds	r0, #1
 8006bea:	6260      	str	r0, [r4, #36]	; 0x24
                            scaleAdjust += 3;
 8006bec:	6960      	ldr	r0, [r4, #20]
 8006bee:	3003      	adds	r0, #3
 8006bf0:	6160      	str	r0, [r4, #20]
 8006bf2:	e7c4      	b.n	8006b7e <ToStringFormatState::DecodeFormat#11595+0x7a>
                                decimalPos = digitCount;
                            }
                            break;

                        case ',':
                            if(digitCount > 0 && decimalPos < 0)
 8006bf4:	6920      	ldr	r0, [r4, #16]
 8006bf6:	2801      	cmp	r0, #1
 8006bf8:	dbc1      	blt.n	8006b7e <ToStringFormatState::DecodeFormat#11595+0x7a>
 8006bfa:	69e0      	ldr	r0, [r4, #28]
 8006bfc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c00:	dcbd      	bgt.n	8006b7e <ToStringFormatState::DecodeFormat#11595+0x7a>
                            {
                                if(thousandPos >= 0)
 8006c02:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006c04:	2800      	cmp	r0, #0
 8006c06:	db1c      	blt.n	8006c42 <ToStringFormatState::DecodeFormat#11595+0x13e>
                                {
                                    if(thousandPos == digitCount)
 8006c08:	6920      	ldr	r0, [r4, #16]
 8006c0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006c0c:	4281      	cmp	r1, r0
 8006c0e:	d116      	bne.n	8006c3e <ToStringFormatState::DecodeFormat#11595+0x13a>
                                    {
                                        thousandCount++;
 8006c10:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006c12:	3001      	adds	r0, #1
 8006c14:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006c16:	e7b2      	b.n	8006b7e <ToStringFormatState::DecodeFormat#11595+0x7a>
 8006c18:	2804      	cmp	r0, #4
 8006c1a:	d1b0      	bne.n	8006b7e <ToStringFormatState::DecodeFormat#11595+0x7a>
                        case '#':
                            digitCount++;
                            break;

                        case '0':
                            if(firstDigit == 0x7FFFFFFF)
 8006c1c:	68a0      	ldr	r0, [r4, #8]
 8006c1e:	4548      	cmp	r0, r9
                            {
                                firstDigit = digitCount;
 8006c20:	bf04      	itt	eq
 8006c22:	6920      	ldreq	r0, [r4, #16]
 8006c24:	60a0      	streq	r0, [r4, #8]
                            }
                            digitCount++;
 8006c26:	6920      	ldr	r0, [r4, #16]
 8006c28:	3001      	adds	r0, #1
 8006c2a:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8006c2e:	e7a6      	b.n	8006b7e <ToStringFormatState::DecodeFormat#11595+0x7a>
                                thousandCount = 1;
                            }
                            break;

                        case '%':
                            percent++;
 8006c30:	6a20      	ldr	r0, [r4, #32]
 8006c32:	3001      	adds	r0, #1
 8006c34:	6220      	str	r0, [r4, #32]
                            scaleAdjust += 2;
 8006c36:	6960      	ldr	r0, [r4, #20]
 8006c38:	3002      	adds	r0, #2
 8006c3a:	6160      	str	r0, [r4, #20]
 8006c3c:	e79f      	b.n	8006b7e <ToStringFormatState::DecodeFormat#11595+0x7a>
 8006c3e:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
                                    }

                                    thousandSeps = 1;
                                }

                                thousandPos   = digitCount;
 8006c42:	6920      	ldr	r0, [r4, #16]
 8006c44:	e9c4 800b 	strd	r8, r0, [r4, #44]	; 0x2c
 8006c48:	e799      	b.n	8006b7e <ToStringFormatState::DecodeFormat#11595+0x7a>
                    }

                    ch = Get();
                }

                if(decimalPos < 0)
 8006c4a:	69e0      	ldr	r0, [r4, #28]
 8006c4c:	2800      	cmp	r0, #0
                {
                    decimalPos = digitCount;
 8006c4e:	bfbc      	itt	lt
 8006c50:	6920      	ldrlt	r0, [r4, #16]
 8006c52:	61e0      	strlt	r0, [r4, #28]
                }

                if(thousandPos >= 0)
 8006c54:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006c56:	2800      	cmp	r0, #0
 8006c58:	db0e      	blt.n	8006c78 <ToStringFormatState::DecodeFormat#11595+0x174>
                {
                    if(thousandPos == decimalPos)
 8006c5a:	69e0      	ldr	r0, [r4, #28]
 8006c5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006c5e:	4281      	cmp	r1, r0
 8006c60:	d108      	bne.n	8006c74 <ToStringFormatState::DecodeFormat#11595+0x170>
                    {
                        scaleAdjust -= thousandCount * 3;
 8006c62:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006c64:	6960      	ldr	r0, [r4, #20]
 8006c66:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006c6a:	1a40      	subs	r0, r0, r1
 8006c6c:	6160      	str	r0, [r4, #20]
 8006c6e:	b001      	add	sp, #4
 8006c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c74:	2001      	movs	r0, #1
 8006c76:	62a0      	str	r0, [r4, #40]	; 0x28
 8006c78:	b001      	add	sp, #4
 8006c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006c7e <StringBuilder::Append#9252>:
            return Append( value.ToString( CultureInfo.CurrentCulture ) );
        }

        // Appends a character at the end of this string builder. The capacity is adjusted as needed.
        public StringBuilder Append( char value )
        {
 8006c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	4604      	mov	r4, r0
 8006c86:	2000      	movs	r0, #0
 8006c88:	4688      	mov	r8, r1
 8006c8a:	a901      	add	r1, sp, #4
 8006c8c:	9001      	str	r0, [sp, #4]
            Thread th;
            String currentString = GetThreadSafeString( out th );
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f000 fa50 	bl	8007134 <StringBuilder::GetThreadSafeString#9224>
 8006c94:	4606      	mov	r6, r0
 8006c96:	b1e6      	cbz	r6, 8006cd2 <StringBuilder::Append#9252+0x54>
 8006c98:	68f7      	ldr	r7, [r6, #12]

            int currentLength = currentString.Length;
            if(!NeedsAllocation( currentString, currentLength + 1 ))
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	1c7d      	adds	r5, r7, #1
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	f000 fac8 	bl	8007234 <StringBuilder::NeedsAllocation#9240>
 8006ca4:	f010 0fff 	tst.w	r0, #255	; 0xff
 8006ca8:	d006      	beq.n	8006cb8 <StringBuilder::Append#9252+0x3a>
 8006caa:	68e0      	ldr	r0, [r4, #12]
                currentString.AppendInPlace( value, currentLength );
                ReplaceString( th, currentString );
                return this;
            }

            String newString = GetNewString( currentString, currentLength + 1 );
 8006cac:	4631      	mov	r1, r6
 8006cae:	462a      	mov	r2, r5
 8006cb0:	f000 face 	bl	8007250 <StringBuilder::GetNewString#9241>
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	b166      	cbz	r6, 8006cd2 <StringBuilder::Append#9252+0x54>
            String currentString = GetThreadSafeString( out th );

            int currentLength = currentString.Length;
            if(!NeedsAllocation( currentString, currentLength + 1 ))
            {
                currentString.AppendInPlace( value, currentLength );
 8006cb8:	4630      	mov	r0, r6
 8006cba:	4641      	mov	r1, r8
 8006cbc:	463a      	mov	r2, r7
 8006cbe:	f7fb fa3d 	bl	800213c <String::AppendInPlace#2964>
                ReplaceString( th, currentString );
 8006cc2:	9901      	ldr	r1, [sp, #4]
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	4632      	mov	r2, r6
 8006cc8:	f000 fabe 	bl	8007248 <StringBuilder::ReplaceString#9242>
 8006ccc:	b002      	add	sp, #8
 8006cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        public StringBuilder Append( char value )
        {
            Thread th;
            String currentString = GetThreadSafeString( out th );

            int currentLength = currentString.Length;
 8006cd2:	f7f9 fbc9 	bl	8000468 <Thread::ThrowNullException#4411>

08006cd6 <ToStringFormatState::PeekAt#11599>:
                return '\0';
            }

            internal char PeekAt( int offset )
            {
                if(src + offset < format.Length)
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b148      	cbz	r0, 8006cee <ToStringFormatState::PeekAt#11599+0x18>
 8006cda:	4411      	add	r1, r2
 8006cdc:	68c2      	ldr	r2, [r0, #12]
 8006cde:	4291      	cmp	r1, r2
 8006ce0:	bfa4      	itt	ge
 8006ce2:	2000      	movge	r0, #0
 8006ce4:	bd80      	popge	{r7, pc}
 8006ce6:	b110      	cbz	r0, 8006cee <ToStringFormatState::PeekAt#11599+0x18>
                {
                    return format[src+offset];
 8006ce8:	f7fa fb5c 	bl	80013a4 <String::get_Chars#4269>
 8006cec:	bd80      	pop	{r7, pc}
                return '\0';
            }

            internal char PeekAt( int offset )
            {
                if(src + offset < format.Length)
 8006cee:	f7f9 fbbb 	bl	8000468 <Thread::ThrowNullException#4411>

08006cf2 <ToStringFormatState::Advance#11601>:
                return '\0';
            }

            internal void Advance()
            {
                src++;
 8006cf2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006cf4:	3101      	adds	r1, #1
 8006cf6:	6381      	str	r1, [r0, #56]	; 0x38
 8006cf8:	4770      	bx	lr
 8006cfa:	46c0      	nop			; (mov r8, r8)

08006cfc <Number::FormatExponent#7990>:
                                     int                       value      ,
                                     char                      expChar    ,
                                     String                    posSignStr ,
                                     String                    negSignStr ,
                                     int                       minDigits  )
        {
 8006cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d00:	b081      	sub	sp, #4
 8006d02:	460e      	mov	r6, r1
 8006d04:	491f      	ldr	r1, [pc, #124]	; (8006d84 <Number::FormatExponent#7990+0x88>)
 8006d06:	4617      	mov	r7, r2
 8006d08:	4604      	mov	r4, r0
            char[] digits = new char[11];
 8006d0a:	481f      	ldr	r0, [pc, #124]	; (8006d88 <Number::FormatExponent#7990+0x8c>)
 8006d0c:	4a1f      	ldr	r2, [pc, #124]	; (8006d8c <Number::FormatExponent#7990+0x90>)
 8006d0e:	4699      	mov	r9, r3
 8006d10:	4479      	add	r1, pc
 8006d12:	4408      	add	r0, r1
 8006d14:	4411      	add	r1, r2
 8006d16:	220b      	movs	r2, #11
 8006d18:	f7fa fe7c 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 8006d1c:	4605      	mov	r5, r0

            sb.Append( expChar );
 8006d1e:	b37c      	cbz	r4, 8006d80 <Number::FormatExponent#7990+0x84>
 8006d20:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8006d24:	4620      	mov	r0, r4
 8006d26:	4639      	mov	r1, r7
 8006d28:	f7ff ffa9 	bl	8006c7e <StringBuilder::Append#9252>

            if(value < 0)
 8006d2c:	2e00      	cmp	r6, #0
 8006d2e:	db07      	blt.n	8006d40 <Number::FormatExponent#7990+0x44>
                sb.Append( negSignStr );
                value = -value;
            }
            else
            {
                if(posSignStr != null)
 8006d30:	f1b9 0f00 	cmp.w	r9, #0
 8006d34:	d009      	beq.n	8006d4a <Number::FormatExponent#7990+0x4e>
                {
                    sb.Append( posSignStr );
 8006d36:	4620      	mov	r0, r4
 8006d38:	4649      	mov	r1, r9
 8006d3a:	f7ff fb27 	bl	800638c <StringBuilder::Append#9238>
 8006d3e:	e004      	b.n	8006d4a <Number::FormatExponent#7990+0x4e>
 8006d40:	9908      	ldr	r1, [sp, #32]

            sb.Append( expChar );

            if(value < 0)
            {
                sb.Append( negSignStr );
 8006d42:	4620      	mov	r0, r4
 8006d44:	f7ff fb22 	bl	800638c <StringBuilder::Append#9238>
                value = -value;
 8006d48:	4276      	negs	r6, r6
                    sb.Append( posSignStr );
                }
            }

            // REVIEW: (int) was implicit in C++ code
            int p = Int32ToDecChars( digits, 10, checked( (uint)value ), minDigits );
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	210a      	movs	r1, #10
 8006d4e:	4632      	mov	r2, r6
 8006d50:	4643      	mov	r3, r8
 8006d52:	f7fe fcc7 	bl	80056e4 <Number::Int32ToDecChars#7987>

            int i = 10 - p;
 8006d56:	f1c0 0609 	rsb	r6, r0, #9
 8006d5a:	e008      	b.n	8006d6e <Number::FormatExponent#7990+0x72>
            while(--i >= 0)
            {
                sb.Append( digits[p++] );
 8006d5c:	1c47      	adds	r7, r0, #1
 8006d5e:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8006d62:	8981      	ldrh	r1, [r0, #12]
 8006d64:	4620      	mov	r0, r4
 8006d66:	f7ff ff8a 	bl	8006c7e <StringBuilder::Append#9252>
 8006d6a:	3e01      	subs	r6, #1
 8006d6c:	4638      	mov	r0, r7

            // REVIEW: (int) was implicit in C++ code
            int p = Int32ToDecChars( digits, 10, checked( (uint)value ), minDigits );

            int i = 10 - p;
            while(--i >= 0)
 8006d6e:	2e00      	cmp	r6, #0
 8006d70:	bfbc      	itt	lt
 8006d72:	b001      	addlt	sp, #4
 8006d74:	e8bd 83f0 	ldmialt.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            {
                sb.Append( digits[p++] );
 8006d78:	280b      	cmp	r0, #11
 8006d7a:	d3ef      	bcc.n	8006d5c <Number::FormatExponent#7990+0x60>
 8006d7c:	f7fa f898 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
                                     char                      expChar    ,
                                     String                    posSignStr ,
                                     String                    negSignStr ,
                                     int                       minDigits  )
        {
            char[] digits = new char[11];
 8006d80:	f7f9 fb72 	bl	8000468 <Thread::ThrowNullException#4411>
 8006d84:	17ff9e04 	.word	0x17ff9e04
 8006d88:	fffffe0c 	.word	0xfffffe0c
 8006d8c:	e80196e8 	.word	0xe80196e8

08006d90 <Number::Int32ToHexChars#7979>:
            return new string( buffer, start, 100 - start );
        }

        private static int Int32ToHexChars( char[] buffer, int offset, uint value,
                                           char hexBase, int digits )
        {
 8006d90:	b570      	push	{r4, r5, r6, lr}
 8006d92:	f04f 0c00 	mov.w	ip, #0
 8006d96:	e009      	b.n	8006dac <Number::Int32ToHexChars#7979+0x1c>
            while(digits > 0 || value != 0)
            {
                digits--;
                uint digit = value & 0xf;
                offset--;
                buffer[offset] = (char)(digit + (digit < 10 ? '0' : hexBase));
 8006d98:	eb0e 0604 	add.w	r6, lr, r4
 8006d9c:	eb00 054c 	add.w	r5, r0, ip, lsl #1
                value >>= 4;
 8006da0:	f1ac 0c01 	sub.w	ip, ip, #1
 8006da4:	0909      	lsrs	r1, r1, #4
            while(digits > 0 || value != 0)
            {
                digits--;
                uint digit = value & 0xf;
                offset--;
                buffer[offset] = (char)(digit + (digit < 10 ? '0' : hexBase));
 8006da6:	b2b6      	uxth	r6, r6
 8006da8:	f8a5 60d2 	strh.w	r6, [r5, #210]	; 0xd2
        }

        private static int Int32ToHexChars( char[] buffer, int offset, uint value,
                                           char hexBase, int digits )
        {
            while(digits > 0 || value != 0)
 8006dac:	eb03 040c 	add.w	r4, r3, ip
 8006db0:	2c00      	cmp	r4, #0
 8006db2:	dc04      	bgt.n	8006dbe <Number::Int32ToHexChars#7979+0x2e>
 8006db4:	2900      	cmp	r1, #0
 8006db6:	bf04      	itt	eq
 8006db8:	f10c 0064 	addeq.w	r0, ip, #100	; 0x64
 8006dbc:	bd70      	popeq	{r4, r5, r6, pc}
            {
                digits--;
                uint digit = value & 0xf;
 8006dbe:	f001 0e0f 	and.w	lr, r1, #15
                offset--;
                buffer[offset] = (char)(digit + (digit < 10 ? '0' : hexBase));
 8006dc2:	4614      	mov	r4, r2
 8006dc4:	f1be 0f0a 	cmp.w	lr, #10
 8006dc8:	bf38      	it	cc
 8006dca:	2430      	movcc	r4, #48	; 0x30
 8006dcc:	b130      	cbz	r0, 8006ddc <Number::Int32ToHexChars#7979+0x4c>
 8006dce:	6886      	ldr	r6, [r0, #8]
 8006dd0:	f10c 0563 	add.w	r5, ip, #99	; 0x63
 8006dd4:	42b5      	cmp	r5, r6
 8006dd6:	d3df      	bcc.n	8006d98 <Number::Int32ToHexChars#7979+0x8>
 8006dd8:	f7fa f86a 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 8006ddc:	f7f9 fb44 	bl	8000468 <Thread::ThrowNullException#4411>

08006de0 <Number::wcslen#7993>:
            FormatExponent( sb, e, expChar, info.positiveSign, info.negativeSign, 3 );
        }

        // REVIEW: call the real wcslen?
        private static int wcslen( char[] c, int i )
        {
 8006de0:	b580      	push	{r7, lr}
 8006de2:	4601      	mov	r1, r0
 8006de4:	2000      	movs	r0, #0
 8006de6:	e006      	b.n	8006df6 <Number::wcslen#7993+0x16>
            int j;
            for(j = i; j < c.Length; ++j)
            {
                if(c[j] == '\0') break;
 8006de8:	eb01 0240 	add.w	r2, r1, r0, lsl #1
 8006dec:	8992      	ldrh	r2, [r2, #12]
 8006dee:	2a00      	cmp	r2, #0
 8006df0:	bf08      	it	eq
 8006df2:	bd80      	popeq	{r7, pc}

        // REVIEW: call the real wcslen?
        private static int wcslen( char[] c, int i )
        {
            int j;
            for(j = i; j < c.Length; ++j)
 8006df4:	3001      	adds	r0, #1
 8006df6:	b141      	cbz	r1, 8006e0a <Number::wcslen#7993+0x2a>
 8006df8:	688a      	ldr	r2, [r1, #8]
 8006dfa:	4290      	cmp	r0, r2
 8006dfc:	da04      	bge.n	8006e08 <Number::wcslen#7993+0x28>
            {
                if(c[j] == '\0') break;
 8006dfe:	688a      	ldr	r2, [r1, #8]
 8006e00:	4290      	cmp	r0, r2
 8006e02:	d3f1      	bcc.n	8006de8 <Number::wcslen#7993+0x8>
 8006e04:	f7fa f854 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 8006e08:	bd80      	pop	{r7, pc}

        // REVIEW: call the real wcslen?
        private static int wcslen( char[] c, int i )
        {
            int j;
            for(j = i; j < c.Length; ++j)
 8006e0a:	f7f9 fb2d 	bl	8000468 <Thread::ThrowNullException#4411>

08006e0e <StringBuilder::Append#9263>:
            return Append( value.ToString() );
        }

        // Appends all of the characters in value to the current instance.
        public StringBuilder Append( char[] value )
        {
 8006e0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e12:	b083      	sub	sp, #12
 8006e14:	460d      	mov	r5, r1
 8006e16:	4681      	mov	r9, r0
 8006e18:	2000      	movs	r0, #0
            if(null == value)
 8006e1a:	2d00      	cmp	r5, #0
 8006e1c:	9002      	str	r0, [sp, #8]
 8006e1e:	bf04      	itt	eq
 8006e20:	b003      	addeq	sp, #12
 8006e22:	e8bd 83f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e26:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8006e2a:	a902      	add	r1, sp, #8
            }

            int valueLength = value.Length;

            Thread th;
            String currentString = GetThreadSafeString( out th );
 8006e2c:	4648      	mov	r0, r9
 8006e2e:	f000 f981 	bl	8007134 <StringBuilder::GetThreadSafeString#9224>
 8006e32:	4607      	mov	r7, r0
 8006e34:	b307      	cbz	r7, 8006e78 <StringBuilder::Append#9263+0x6a>
 8006e36:	68a8      	ldr	r0, [r5, #8]
 8006e38:	68fc      	ldr	r4, [r7, #12]

            int currentLength = currentString.Length;
            int requiredLength = currentLength + value.Length;
 8006e3a:	1826      	adds	r6, r4, r0
            if(NeedsAllocation( currentString, requiredLength ))
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	4631      	mov	r1, r6
 8006e40:	f000 f9f8 	bl	8007234 <StringBuilder::NeedsAllocation#9240>
 8006e44:	f010 0fff 	tst.w	r0, #255	; 0xff
 8006e48:	d007      	beq.n	8006e5a <StringBuilder::Append#9263+0x4c>
 8006e4a:	f8d9 000c 	ldr.w	r0, [r9, #12]
            {
                String newString = GetNewString( currentString, requiredLength );
 8006e4e:	4639      	mov	r1, r7
 8006e50:	4632      	mov	r2, r6
 8006e52:	f000 f9fd 	bl	8007250 <StringBuilder::GetNewString#9241>
 8006e56:	4607      	mov	r7, r0
 8006e58:	b177      	cbz	r7, 8006e78 <StringBuilder::Append#9263+0x6a>
                newString.AppendInPlace( value, 0, valueLength, currentLength );
                ReplaceString( th, newString );
            }
            else
            {
                currentString.AppendInPlace( value, 0, valueLength, currentLength );
 8006e5a:	4638      	mov	r0, r7
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	2200      	movs	r2, #0
 8006e60:	4643      	mov	r3, r8
 8006e62:	9400      	str	r4, [sp, #0]
 8006e64:	f7fb f9b8 	bl	80021d8 <String::AppendInPlace#2970>
                ReplaceString( th, currentString );
 8006e68:	9902      	ldr	r1, [sp, #8]
 8006e6a:	4648      	mov	r0, r9
 8006e6c:	463a      	mov	r2, r7
 8006e6e:	f000 f9eb 	bl	8007248 <StringBuilder::ReplaceString#9242>
 8006e72:	b003      	add	sp, #12
 8006e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if(null == value)
            {
                return this;
            }

            int valueLength = value.Length;
 8006e78:	f7f9 faf6 	bl	8000468 <Thread::ThrowNullException#4411>

08006e7c <ThrowHelper::ThrowArgumentOutOfRangeException#8093>:
            throw new ArgumentOutOfRangeException();
#endif
        }

        internal static void ThrowArgumentOutOfRangeException( ExceptionArgument argument, ExceptionResource resource )
        {
 8006e7c:	b510      	push	{r4, lr}
 8006e7e:	4807      	ldr	r0, [pc, #28]	; (8006e9c <ThrowHelper::ThrowArgumentOutOfRangeException#8093+0x20>)
#if EXCEPTION_STRINGS
            throw new ArgumentOutOfRangeException( GetArgumentName( argument ), Environment.GetResourceString( GetResourceName( resource ) ) );
#else
            throw new ArgumentOutOfRangeException();
 8006e80:	4907      	ldr	r1, [pc, #28]	; (8006ea0 <ThrowHelper::ThrowArgumentOutOfRangeException#8093+0x24>)
 8006e82:	4478      	add	r0, pc
 8006e84:	180c      	adds	r4, r1, r0
 8006e86:	4907      	ldr	r1, [pc, #28]	; (8006ea4 <ThrowHelper::ThrowArgumentOutOfRangeException#8093+0x28>)
 8006e88:	4401      	add	r1, r0
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f7f9 fd02 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8006e90:	4601      	mov	r1, r0
 8006e92:	2000      	movs	r0, #0
 8006e94:	6088      	str	r0, [r1, #8]
 8006e96:	4620      	mov	r0, r4
 8006e98:	f7f9 fd12 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8006e9c:	17ff9c92 	.word	0x17ff9c92
 8006ea0:	fffffe0c 	.word	0xfffffe0c
 8006ea4:	e8019568 	.word	0xe8019568

08006ea8 <Type::Equals#8264>:

            return cls;
        }

        public override bool Equals( Object o )
        {
 8006ea8:	b570      	push	{r4, r5, r6, lr}
 8006eaa:	4604      	mov	r4, r0
 8006eac:	480b      	ldr	r0, [pc, #44]	; (8006edc <Type::Equals#8264+0x34>)
            if(!(o is Type))
 8006eae:	4e0c      	ldr	r6, [pc, #48]	; (8006ee0 <Type::Equals#8264+0x38>)
 8006eb0:	460d      	mov	r5, r1
 8006eb2:	4478      	add	r0, pc
 8006eb4:	1831      	adds	r1, r6, r0
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	f7f9 fed0 	bl	8000c5c <TypeSystemManager::CastToSealedTypeNoThrow#5593>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	bf04      	itt	eq
 8006ec0:	2000      	moveq	r0, #0
 8006ec2:	bd70      	popeq	{r4, r5, r6, pc}
 8006ec4:	4807      	ldr	r0, [pc, #28]	; (8006ee4 <Type::Equals#8264+0x3c>)
 8006ec6:	4478      	add	r0, pc
            {
                return false;
            }

            return Equals( (Type)o );
 8006ec8:	1831      	adds	r1, r6, r0
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f7f9 ffd2 	bl	8000e74 <TypeSystemManager::CastToSealedType#5592>
 8006ed0:	4601      	mov	r1, r0
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f000 f832 	bl	8006f3c <Type::Equals#8265>
 8006ed8:	bd70      	pop	{r4, r5, r6, pc}
 8006eda:	46c0      	nop			; (mov r8, r8)
 8006edc:	17ff9c62 	.word	0x17ff9c62
 8006ee0:	e8019d78 	.word	0xe8019d78
 8006ee4:	17ff9c4e 	.word	0x17ff9c4e

08006ee8 <Type::GetHashCode#8266>:
            //return (this.UnderlyingSystemType == o.UnderlyingSystemType);
            return ( object )this == ( object )o;
        }

        public override int GetHashCode()
        {
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	4604      	mov	r4, r0
            Type SystemType = UnderlyingSystemType;
            if(SystemType != this)
 8006eec:	4621      	mov	r1, r4
 8006eee:	f000 f844 	bl	8006f7a <Type::op_Inequality#8268>
 8006ef2:	f010 0fff 	tst.w	r0, #255	; 0xff
 8006ef6:	d003      	beq.n	8006f00 <Type::GetHashCode#8266+0x18>
            {
                return SystemType.GetHashCode();
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f7ff fff5 	bl	8006ee8 <Type::GetHashCode#8266>
 8006efe:	bd10      	pop	{r4, pc}
 8006f00:	4620      	mov	r0, r4
 8006f02:	f000 f801 	bl	8006f08 <MemberInfo::get_MetadataToken#9547>
 8006f06:	bd10      	pop	{r4, pc}

08006f08 <MemberInfo::get_MetadataToken#9547>:
        #endregion

        public virtual int MetadataToken
        {
            get
            {
 8006f08:	b510      	push	{r4, lr}
 8006f0a:	4807      	ldr	r0, [pc, #28]	; (8006f28 <MemberInfo::get_MetadataToken#9547+0x20>)
                throw new InvalidOperationException();
 8006f0c:	4907      	ldr	r1, [pc, #28]	; (8006f2c <MemberInfo::get_MetadataToken#9547+0x24>)
 8006f0e:	4478      	add	r0, pc
 8006f10:	180c      	adds	r4, r1, r0
 8006f12:	4907      	ldr	r1, [pc, #28]	; (8006f30 <MemberInfo::get_MetadataToken#9547+0x28>)
 8006f14:	4401      	add	r1, r0
 8006f16:	4620      	mov	r0, r4
 8006f18:	f7f9 fcbc 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8006f1c:	4601      	mov	r1, r0
 8006f1e:	2000      	movs	r0, #0
 8006f20:	6088      	str	r0, [r1, #8]
 8006f22:	4620      	mov	r0, r4
 8006f24:	f7f9 fccc 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8006f28:	17ff9c06 	.word	0x17ff9c06
 8006f2c:	fffffe0c 	.word	0xfffffe0c
 8006f30:	e8019e68 	.word	0xe8019e68

08006f34 <MemberInfo::get_MetadataTokenInternal#9548>:

        internal virtual int MetadataTokenInternal
        {
            get
            {
                return MetadataToken;
 8006f34:	b580      	push	{r7, lr}
 8006f36:	f7ff ffe7 	bl	8006f08 <MemberInfo::get_MetadataToken#9547>
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <Type::Equals#8265>:
                return false;
            }

            //Miguel: switched to pointer comparison to avoid circular ref
            //return (this.UnderlyingSystemType == o.UnderlyingSystemType);
            return ( object )this == ( object )o;
 8006f3c:	b510      	push	{r4, lr}
 8006f3e:	4288      	cmp	r0, r1
 8006f40:	f04f 0400 	mov.w	r4, #0
            return Equals( (Type)o );
        }

        public bool Equals( Type o )
        {
            if(o == null)
 8006f44:	4608      	mov	r0, r1
 8006f46:	f04f 0100 	mov.w	r1, #0
                return false;
            }

            //Miguel: switched to pointer comparison to avoid circular ref
            //return (this.UnderlyingSystemType == o.UnderlyingSystemType);
            return ( object )this == ( object )o;
 8006f4a:	bf08      	it	eq
 8006f4c:	2401      	moveq	r4, #1
            return Equals( (Type)o );
        }

        public bool Equals( Type o )
        {
            if(o == null)
 8006f4e:	f000 f806 	bl	8006f5e <Type::op_Equality#8267>
 8006f52:	f010 0fff 	tst.w	r0, #255	; 0xff
 8006f56:	bf18      	it	ne
 8006f58:	2400      	movne	r4, #0
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	bd10      	pop	{r4, pc}

08006f5e <Type::op_Equality#8267>:
        }

        public static bool operator ==( Type left,
                                        Type right )
        {
            if ((object)left == null)
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b130      	cbz	r0, 8006f70 <Type::op_Equality#8267+0x12>
            {
                return (object)right == null;
            }

            if ((object)right == null)
 8006f62:	2900      	cmp	r1, #0
 8006f64:	bf04      	itt	eq
 8006f66:	2000      	moveq	r0, #0
 8006f68:	bd80      	popeq	{r7, pc}
            {
                return false;
            }

            return left.Equals( right );
 8006f6a:	f7ff ffe7 	bl	8006f3c <Type::Equals#8265>
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	2000      	movs	r0, #0
 8006f72:	2900      	cmp	r1, #0
 8006f74:	bf08      	it	eq
 8006f76:	2001      	moveq	r0, #1
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <Type::op_Inequality#8268>:
        }

        public static bool operator !=( Type left,
                                        Type right )
        {
            return !(left == right);
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	f7ff ffef 	bl	8006f5e <Type::op_Equality#8267>
 8006f80:	2100      	movs	r1, #0
 8006f82:	f010 0fff 	tst.w	r0, #255	; 0xff
 8006f86:	bf08      	it	eq
 8006f88:	2101      	moveq	r1, #1
 8006f8a:	4608      	mov	r0, r1
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <Monitor::Enter#4301>:
        //

        [NoInline]
        public static void Enter( Object obj )
        {
            SyncBlockTable.GetLock( obj ).Acquire();
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	f7fd f800 	bl	8003f94 <SyncBlockTable::GetLock#5132>
 8006f94:	b110      	cbz	r0, 8006f9c <Monitor::Enter#4301+0xe>
 8006f96:	f7fe f8db 	bl	8005150 <WaitableObject::Acquire#5630>
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	f7f9 fa64 	bl	8000468 <Thread::ThrowNullException#4411>

08006fa0 <Monitor::Enter#8439>:
////    [ResourceExposure( ResourceScope.None )]
////    [MethodImpl( MethodImplOptions.InternalCall )]
////    internal static extern void ReliableEnter( Object obj, ref bool tookLock );

        public static void Enter( Object obj, ref bool lockTaken )
        {
 8006fa0:	b5b0      	push	{r4, r5, r7, lr}
 8006fa2:	460c      	mov	r4, r1
            if(obj == null)
 8006fa4:	b130      	cbz	r0, 8006fb4 <Monitor::Enter#8439+0x14>
            {
                throw new ArgumentNullException();
            }

            //  The input must be false.
            if (lockTaken == true)
 8006fa6:	7821      	ldrb	r1, [r4, #0]
 8006fa8:	b999      	cbnz	r1, 8006fd2 <Monitor::Enter#8439+0x32>
            }
            
            //The output is true if the lock is acquired; otherwise, the output is 
            // false. The output is set even if an exception occurs during the attempt 
            // to acquire the lock. 
            Enter(obj);
 8006faa:	f7ff fff0 	bl	8006f8e <Monitor::Enter#4301>
 8006fae:	2001      	movs	r0, #1
 8006fb0:	7020      	strb	r0, [r4, #0]
 8006fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8006fb4:	4812      	ldr	r0, [pc, #72]	; (8007000 <Monitor::Enter#8439+0x60>)

        public static void Enter( Object obj, ref bool lockTaken )
        {
            if(obj == null)
            {
                throw new ArgumentNullException();
 8006fb6:	4910      	ldr	r1, [pc, #64]	; (8006ff8 <Monitor::Enter#8439+0x58>)
 8006fb8:	4478      	add	r0, pc
 8006fba:	180c      	adds	r4, r1, r0
 8006fbc:	4911      	ldr	r1, [pc, #68]	; (8007004 <Monitor::Enter#8439+0x64>)
 8006fbe:	4401      	add	r1, r0
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	f7f9 fc67 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8006fc6:	4601      	mov	r1, r0
 8006fc8:	2000      	movs	r0, #0
 8006fca:	6088      	str	r0, [r1, #8]
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f7f9 fc77 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8006fd2:	4808      	ldr	r0, [pc, #32]	; (8006ff4 <Monitor::Enter#8439+0x54>)

            //  The input must be false.
            if (lockTaken == true)
            {
                lockTaken = false;
                throw new ArgumentException();
 8006fd4:	4908      	ldr	r1, [pc, #32]	; (8006ff8 <Monitor::Enter#8439+0x58>)
 8006fd6:	2500      	movs	r5, #0
 8006fd8:	7025      	strb	r5, [r4, #0]
 8006fda:	4478      	add	r0, pc
 8006fdc:	180c      	adds	r4, r1, r0
 8006fde:	4907      	ldr	r1, [pc, #28]	; (8006ffc <Monitor::Enter#8439+0x5c>)
 8006fe0:	4401      	add	r1, r0
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f7f9 fc56 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8006fe8:	4601      	mov	r1, r0
 8006fea:	4620      	mov	r0, r4
 8006fec:	608d      	str	r5, [r1, #8]
 8006fee:	f7f9 fc67 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	17ff9b3a 	.word	0x17ff9b3a
 8006ff8:	fffffe0c 	.word	0xfffffe0c
 8006ffc:	e80199e8 	.word	0xe80199e8
 8007000:	17ff9b5c 	.word	0x17ff9b5c
 8007004:	e8019418 	.word	0xe8019418

08007008 <Monitor::Exit#4302>:
        }

        [NoInline]
        public static void Exit( Object obj )
        {
            SyncBlockTable.GetLock( obj ).Release();
 8007008:	b580      	push	{r7, lr}
 800700a:	f7fc ffc3 	bl	8003f94 <SyncBlockTable::GetLock#5132>
 800700e:	b110      	cbz	r0, 8007016 <Monitor::Exit#4302+0xe>
 8007010:	f7fe f852 	bl	80050b8 <CriticalSection::Release#5623>
 8007014:	bd80      	pop	{r7, pc}
 8007016:	f7f9 fa27 	bl	8000468 <Thread::ThrowNullException#4411>

0800701a <Monitor::TryEnterTimeout#4303>:
        }

        [NoInline]
        private static bool TryEnterTimeout( Object obj                 ,
                                             int    millisecondsTimeout )
        {
 800701a:	b5b0      	push	{r4, r5, r7, lr}
 800701c:	460d      	mov	r5, r1
            return SyncBlockTable.GetLock( obj ).Acquire( (SchedulerTime)millisecondsTimeout );
 800701e:	f7fc ffb9 	bl	8003f94 <SyncBlockTable::GetLock#5132>
 8007022:	4604      	mov	r4, r0
 8007024:	4628      	mov	r0, r5
 8007026:	f7fd fc47 	bl	80048b8 <SchedulerTime::op_Explicit#5460>
 800702a:	4602      	mov	r2, r0
 800702c:	b124      	cbz	r4, 8007038 <Monitor::TryEnterTimeout#4303+0x1e>
 800702e:	4620      	mov	r0, r4
 8007030:	460b      	mov	r3, r1
 8007032:	f7fd ff9b 	bl	8004f6c <CriticalSection::Acquire#5622>
 8007036:	bdb0      	pop	{r4, r5, r7, pc}
 8007038:	f7f9 fa16 	bl	8000468 <Thread::ThrowNullException#4411>

0800703c <WaitHandle::WaitOne#4316>:
        //--//

        public bool WaitOne( SchedulerTime timeout     ,
                             bool          exitContext )
        {
            return m_handle.Acquire( timeout );
 800703c:	b580      	push	{r7, lr}
 800703e:	2800      	cmp	r0, #0
 8007040:	d005      	beq.n	800704e <WaitHandle::WaitOne#4316+0x12>
 8007042:	d004      	beq.n	800704e <WaitHandle::WaitOne#4316+0x12>
 8007044:	6841      	ldr	r1, [r0, #4]
 8007046:	69c9      	ldr	r1, [r1, #28]
 8007048:	6989      	ldr	r1, [r1, #24]
 800704a:	4788      	blx	r1
 800704c:	bd80      	pop	{r7, pc}
 800704e:	f7f9 fa0b 	bl	8000468 <Thread::ThrowNullException#4411>

08007052 <StringBuilder::.ctor#9221>:
        // String.NullString) then the new string builder will also be null 
        // (i.e., it will also represent String.NullString).
        // The maximum number of characters this string may contain is set by capacity.
        // 
        public StringBuilder( String value, int capacity )
            : this( value, 0, ((value != null) ? value.Length : 0), capacity )
 8007052:	b580      	push	{r7, lr}
 8007054:	4613      	mov	r3, r2
 8007056:	b119      	cbz	r1, 8007060 <StringBuilder::.ctor#9221+0xe>
 8007058:	68ca      	ldr	r2, [r1, #12]
 800705a:	f000 f805 	bl	8007068 <StringBuilder::.ctor#9222>
 800705e:	bd80      	pop	{r7, pc}
 8007060:	2200      	movs	r2, #0
 8007062:	f000 f801 	bl	8007068 <StringBuilder::.ctor#9222>
 8007066:	bd80      	pop	{r7, pc}

08007068 <StringBuilder::.ctor#9222>:
        //
        //
        //  CLASS VARIABLES
        //
        //
        internal Thread m_currentThread = Thread.CurrentThread;
 8007068:	b570      	push	{r4, r5, r6, lr}
 800706a:	4d2a      	ldr	r5, [pc, #168]	; (8007114 <StringBuilder::.ctor#9222+0xac>)
 800706c:	4604      	mov	r4, r0
 800706e:	482a      	ldr	r0, [pc, #168]	; (8007118 <StringBuilder::.ctor#9222+0xb0>)
 8007070:	2600      	movs	r6, #0
        // capacity.  The maximum number of characters is set by capacity.
        // 

        public StringBuilder( String value, int startIndex, int length, int capacity )
        {
            if(capacity < 0)
 8007072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007076:	447d      	add	r5, pc
 8007078:	4405      	add	r5, r0
 800707a:	f8d5 5108 	ldr.w	r5, [r5, #264]	; 0x108
 800707e:	e9c4 5602 	strd	r5, r6, [r4, #8]
 8007082:	6126      	str	r6, [r4, #16]
 8007084:	dd23      	ble.n	80070ce <StringBuilder::.ctor#9222+0x66>
                                                      String.Format( CultureInfo.CurrentCulture, Environment.GetResourceString( "ArgumentOutOfRange_MustBePositive" ), "capacity" ) );
#else
                throw new ArgumentOutOfRangeException();
#endif
            }
            if(length < 0)
 8007086:	f1b2 3fff 	cmp.w	r2, #4294967295
 800708a:	dd2e      	ble.n	80070ea <StringBuilder::.ctor#9222+0x82>
 800708c:	4e23      	ldr	r6, [pc, #140]	; (800711c <StringBuilder::.ctor#9222+0xb4>)
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

            if(value == null)
 800708e:	2900      	cmp	r1, #0
 8007090:	447e      	add	r6, pc
            {
                value = String.Empty;
 8007092:	4430      	add	r0, r6
 8007094:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

            if(value == null)
 8007098:	bf18      	it	ne
 800709a:	4608      	movne	r0, r1
            {
                value = String.Empty;
            }

            if(startIndex > value.Length - length)
 800709c:	b340      	cbz	r0, 80070f0 <StringBuilder::.ctor#9222+0x88>
 800709e:	68c1      	ldr	r1, [r0, #12]
 80070a0:	1a89      	subs	r1, r1, r2
 80070a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80070a6:	dd25      	ble.n	80070f4 <StringBuilder::.ctor#9222+0x8c>
 80070a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
#endif
            }

            m_MaxCapacity = Int32.MaxValue;

            if(capacity == 0)
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	60e1      	str	r1, [r4, #12]
 80070b0:	bf08      	it	eq
 80070b2:	2310      	moveq	r3, #16
            {
                capacity = DefaultCapacity;
            }

            while(capacity < length)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	da04      	bge.n	80070c2 <StringBuilder::.ctor#9222+0x5a>
            {
                capacity *= 2;
 80070b8:	005b      	lsls	r3, r3, #1
                // If we overflow, we should just use length as capacity. 
                // There is no reason we should throw an exception in this case if the system is able 
                // to allocate the string.
                if(capacity < 0)
 80070ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070be:	dcf9      	bgt.n	80070b4 <StringBuilder::.ctor#9222+0x4c>
 80070c0:	4613      	mov	r3, r2
                    capacity = length;
                    break;
                }
            }

            m_StringValue = String.GetStringForStringBuilder( value, startIndex, length, capacity );
 80070c2:	4611      	mov	r1, r2
 80070c4:	461a      	mov	r2, r3
 80070c6:	f7fb f8ba 	bl	800223e <String::GetStringForStringBuilder#2973>
 80070ca:	6120      	str	r0, [r4, #16]
 80070cc:	bd70      	pop	{r4, r5, r6, pc}
 80070ce:	4818      	ldr	r0, [pc, #96]	; (8007130 <StringBuilder::.ctor#9222+0xc8>)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "capacity",
                                                      String.Format( CultureInfo.CurrentCulture, Environment.GetResourceString( "ArgumentOutOfRange_MustBePositive" ), "capacity" ) );
#else
                throw new ArgumentOutOfRangeException();
 80070d0:	4914      	ldr	r1, [pc, #80]	; (8007124 <StringBuilder::.ctor#9222+0xbc>)
 80070d2:	4478      	add	r0, pc
 80070d4:	180c      	adds	r4, r1, r0
 80070d6:	4914      	ldr	r1, [pc, #80]	; (8007128 <StringBuilder::.ctor#9222+0xc0>)
 80070d8:	4401      	add	r1, r0
 80070da:	4620      	mov	r0, r4
 80070dc:	f7f9 fbda 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80070e0:	4601      	mov	r1, r0
 80070e2:	4620      	mov	r0, r4
 80070e4:	608e      	str	r6, [r1, #8]
 80070e6:	f7f9 fbeb 	bl	80008c0 <TypeSystemManager::Throw#5596>
 80070ea:	4810      	ldr	r0, [pc, #64]	; (800712c <StringBuilder::.ctor#9222+0xc4>)
 80070ec:	4478      	add	r0, pc
 80070ee:	e003      	b.n	80070f8 <StringBuilder::.ctor#9222+0x90>
            if(value == null)
            {
                value = String.Empty;
            }

            if(startIndex > value.Length - length)
 80070f0:	f7f9 f9ba 	bl	8000468 <Thread::ThrowNullException#4411>
 80070f4:	480a      	ldr	r0, [pc, #40]	; (8007120 <StringBuilder::.ctor#9222+0xb8>)
 80070f6:	4478      	add	r0, pc
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "length",
                                                      String.Format( CultureInfo.CurrentCulture, Environment.GetResourceString( "ArgumentOutOfRange_MustBeNonNegNum" ), "length" ) );
#else
                throw new ArgumentOutOfRangeException();
 80070f8:	490a      	ldr	r1, [pc, #40]	; (8007124 <StringBuilder::.ctor#9222+0xbc>)
 80070fa:	180c      	adds	r4, r1, r0
 80070fc:	490a      	ldr	r1, [pc, #40]	; (8007128 <StringBuilder::.ctor#9222+0xc0>)
 80070fe:	4401      	add	r1, r0
 8007100:	4620      	mov	r0, r4
 8007102:	f7f9 fbc7 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8007106:	4601      	mov	r1, r0
 8007108:	2000      	movs	r0, #0
 800710a:	6088      	str	r0, [r1, #8]
 800710c:	4620      	mov	r0, r4
 800710e:	f7f9 fbd7 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8007112:	46c0      	nop			; (mov r8, r8)
 8007114:	17ff9a9e 	.word	0x17ff9a9e
 8007118:	fffffcf8 	.word	0xfffffcf8
 800711c:	17ff9a84 	.word	0x17ff9a84
 8007120:	17ff9a1e 	.word	0x17ff9a1e
 8007124:	fffffe0c 	.word	0xfffffe0c
 8007128:	e8019568 	.word	0xe8019568
 800712c:	17ff9a28 	.word	0x17ff9a28
 8007130:	17ff9a42 	.word	0x17ff9a42

08007134 <StringBuilder::GetThreadSafeString#9224>:
////        BCLDebug.Assert( Capacity >= 0 && Capacity <= m_MaxCapacity, "Invalid StringBuilder" );
////        BCLDebug.Assert( m_StringValue != null && Capacity >= m_StringValue.Length, "Invalid StringBuilder" );
////    }

        private String GetThreadSafeString( out Thread th )
        {
 8007134:	b580      	push	{r7, lr}
 8007136:	4602      	mov	r2, r0
 8007138:	4809      	ldr	r0, [pc, #36]	; (8007160 <StringBuilder::GetThreadSafeString#9224+0x2c>)
            // Following two reads (m_StringValue, m_currentThread) needs to happen in order.
            // This is guaranteed by making the fields volatile.     
            // See ReplaceString method for details.

            String temp = m_StringValue;
 800713a:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <StringBuilder::GetThreadSafeString#9224+0x30>)
 800713c:	4478      	add	r0, pc
 800713e:	4418      	add	r0, r3
 8007140:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8007144:	6910      	ldr	r0, [r2, #16]
 8007146:	600b      	str	r3, [r1, #0]
            th = Thread.CurrentThread;
            if(m_currentThread == th)
 8007148:	6891      	ldr	r1, [r2, #8]
 800714a:	4299      	cmp	r1, r3
 800714c:	bf08      	it	eq
 800714e:	bd80      	popeq	{r7, pc}
                return temp;
            return String.GetStringForStringBuilder( temp, temp.Capacity );
 8007150:	b120      	cbz	r0, 800715c <StringBuilder::GetThreadSafeString#9224+0x28>
 8007152:	6881      	ldr	r1, [r0, #8]
 8007154:	3901      	subs	r1, #1
 8007156:	f7fb f869 	bl	800222c <String::GetStringForStringBuilder#2972>
 800715a:	bd80      	pop	{r7, pc}
 800715c:	f7f9 f984 	bl	8000468 <Thread::ThrowNullException#4411>
 8007160:	17ff99d8 	.word	0x17ff99d8
 8007164:	fffffcf8 	.word	0xfffffcf8

08007168 <StringBuilder::Append#9236>:
            }
        }

        // Appends a character at the end of this string builder. The capacity is adjusted as needed.
        public StringBuilder Append( char value, int repeatCount )
        {
 8007168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800716c:	b082      	sub	sp, #8
 800716e:	460d      	mov	r5, r1
 8007170:	4680      	mov	r8, r0
 8007172:	2000      	movs	r0, #0
            if(repeatCount == 0)
 8007174:	2d00      	cmp	r5, #0
 8007176:	9001      	str	r0, [sp, #4]
 8007178:	d02d      	beq.n	80071d6 <StringBuilder::Append#9236+0x6e>
            {
                return this;
            }
            if(repeatCount < 0)
 800717a:	db31      	blt.n	80071e0 <StringBuilder::Append#9236+0x78>
 800717c:	a901      	add	r1, sp, #4
#endif
            }


            Thread th;
            String currentString = GetThreadSafeString( out th );
 800717e:	4640      	mov	r0, r8
 8007180:	f7ff ffd8 	bl	8007134 <StringBuilder::GetThreadSafeString#9224>
 8007184:	4606      	mov	r6, r0
 8007186:	b34e      	cbz	r6, 80071dc <StringBuilder::Append#9236+0x74>
 8007188:	68f7      	ldr	r7, [r6, #12]

            int currentLength = currentString.Length;
            int requiredLength = currentLength + repeatCount;
 800718a:	197c      	adds	r4, r7, r5

            if(requiredLength < 0)
 800718c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007190:	dd35      	ble.n	80071fe <StringBuilder::Append#9236+0x96>
                throw new OutOfMemoryException();

            if(!NeedsAllocation( currentString, requiredLength ))
 8007192:	4630      	mov	r0, r6
 8007194:	4621      	mov	r1, r4
 8007196:	f000 f84d 	bl	8007234 <StringBuilder::NeedsAllocation#9240>
 800719a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800719e:	d010      	beq.n	80071c2 <StringBuilder::Append#9236+0x5a>
 80071a0:	f8d8 000c 	ldr.w	r0, [r8, #12]
                currentString.AppendInPlace( value, repeatCount, currentLength );
                ReplaceString( th, currentString );
                return this;
            }

            String newString = GetNewString( currentString, requiredLength );
 80071a4:	4631      	mov	r1, r6
 80071a6:	4622      	mov	r2, r4
 80071a8:	f000 f852 	bl	8007250 <StringBuilder::GetNewString#9241>
 80071ac:	4604      	mov	r4, r0
 80071ae:	b1ac      	cbz	r4, 80071dc <StringBuilder::Append#9236+0x74>
            newString.AppendInPlace( value, repeatCount, currentLength );
 80071b0:	4620      	mov	r0, r4
 80071b2:	4629      	mov	r1, r5
 80071b4:	463a      	mov	r2, r7
 80071b6:	f7fa ffd5 	bl	8002164 <String::AppendInPlace#2965>
            ReplaceString( th, newString );
 80071ba:	9901      	ldr	r1, [sp, #4]
 80071bc:	4640      	mov	r0, r8
 80071be:	4622      	mov	r2, r4
 80071c0:	e007      	b.n	80071d2 <StringBuilder::Append#9236+0x6a>
            if(requiredLength < 0)
                throw new OutOfMemoryException();

            if(!NeedsAllocation( currentString, requiredLength ))
            {
                currentString.AppendInPlace( value, repeatCount, currentLength );
 80071c2:	4630      	mov	r0, r6
 80071c4:	4629      	mov	r1, r5
 80071c6:	463a      	mov	r2, r7
 80071c8:	f7fa ffcc 	bl	8002164 <String::AppendInPlace#2965>
                ReplaceString( th, currentString );
 80071cc:	9901      	ldr	r1, [sp, #4]
 80071ce:	4640      	mov	r0, r8
 80071d0:	4632      	mov	r2, r6
                return this;
            }

            String newString = GetNewString( currentString, requiredLength );
            newString.AppendInPlace( value, repeatCount, currentLength );
            ReplaceString( th, newString );
 80071d2:	f000 f839 	bl	8007248 <StringBuilder::ReplaceString#9242>
 80071d6:	b002      	add	sp, #8
 80071d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}


            Thread th;
            String currentString = GetThreadSafeString( out th );

            int currentLength = currentString.Length;
 80071dc:	f7f9 f944 	bl	8000468 <Thread::ThrowNullException#4411>
 80071e0:	4812      	ldr	r0, [pc, #72]	; (800722c <StringBuilder::Append#9236+0xc4>)
            if(repeatCount < 0)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "repeatCount", Environment.GetResourceString( "ArgumentOutOfRange_NegativeCount" ) );
#else
                throw new ArgumentOutOfRangeException();
 80071e2:	4910      	ldr	r1, [pc, #64]	; (8007224 <StringBuilder::Append#9236+0xbc>)
 80071e4:	4478      	add	r0, pc
 80071e6:	180c      	adds	r4, r1, r0
 80071e8:	4911      	ldr	r1, [pc, #68]	; (8007230 <StringBuilder::Append#9236+0xc8>)
 80071ea:	4401      	add	r1, r0
 80071ec:	4620      	mov	r0, r4
 80071ee:	f7f9 fb51 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80071f2:	4601      	mov	r1, r0
 80071f4:	2000      	movs	r0, #0
 80071f6:	6088      	str	r0, [r1, #8]
 80071f8:	4620      	mov	r0, r4
 80071fa:	f7f9 fb61 	bl	80008c0 <TypeSystemManager::Throw#5596>
 80071fe:	4808      	ldr	r0, [pc, #32]	; (8007220 <StringBuilder::Append#9236+0xb8>)

            int currentLength = currentString.Length;
            int requiredLength = currentLength + repeatCount;

            if(requiredLength < 0)
                throw new OutOfMemoryException();
 8007200:	4908      	ldr	r1, [pc, #32]	; (8007224 <StringBuilder::Append#9236+0xbc>)
 8007202:	4478      	add	r0, pc
 8007204:	180c      	adds	r4, r1, r0
 8007206:	4908      	ldr	r1, [pc, #32]	; (8007228 <StringBuilder::Append#9236+0xc0>)
 8007208:	4401      	add	r1, r0
 800720a:	4620      	mov	r0, r4
 800720c:	f7f9 fb42 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8007210:	4605      	mov	r5, r0
 8007212:	f7fd fbf5 	bl	8004a00 <Exception::GetMessageFromNativeResources#7756>
 8007216:	60a8      	str	r0, [r5, #8]
 8007218:	4620      	mov	r0, r4
 800721a:	4629      	mov	r1, r5
 800721c:	f7f9 fb50 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8007220:	17ff9912 	.word	0x17ff9912
 8007224:	fffffe0c 	.word	0xfffffe0c
 8007228:	e8019ad8 	.word	0xe8019ad8
 800722c:	17ff9930 	.word	0x17ff9930
 8007230:	e8019568 	.word	0xe8019568

08007234 <StringBuilder::NeedsAllocation#9240>:
#endif // WIN64 // STUBS_AS_IL

        private bool NeedsAllocation( String currentString, int requiredLength )
        {
            //<= accounts for the terminating 0 which we require on strings.
            return (currentString.ArrayLength <= requiredLength);
 8007234:	b580      	push	{r7, lr}
 8007236:	b128      	cbz	r0, 8007244 <StringBuilder::NeedsAllocation#9240+0x10>
 8007238:	6882      	ldr	r2, [r0, #8]
 800723a:	2000      	movs	r0, #0
 800723c:	428a      	cmp	r2, r1
 800723e:	bfd8      	it	le
 8007240:	2001      	movle	r0, #1
 8007242:	bd80      	pop	{r7, pc}
 8007244:	f7f9 f910 	bl	8000468 <Thread::ThrowNullException#4411>

08007248 <StringBuilder::ReplaceString#9242>:
 8007248:	6081      	str	r1, [r0, #8]
 800724a:	6102      	str	r2, [r0, #16]
 800724c:	4770      	bx	lr
 800724e:	46c0      	nop			; (mov r8, r8)

08007250 <StringBuilder::GetNewString#9241>:
        private String GetNewString( String currentString, int requiredLength )
        {
            int newCapacity;
            int maxCapacity = m_MaxCapacity;

            if(requiredLength < 0)
 8007250:	b5b0      	push	{r4, r5, r7, lr}
 8007252:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007256:	dd14      	ble.n	8007282 <StringBuilder::GetNewString#9241+0x32>
            {
                throw new OutOfMemoryException();
            }

            if(requiredLength > maxCapacity)
 8007258:	4282      	cmp	r2, r0
 800725a:	dc23      	bgt.n	80072a4 <StringBuilder::GetNewString#9241+0x54>
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

            newCapacity = (currentString.Capacity) * 2; // To force a predicatable growth of 160,320 etc. for testing purposes
 800725c:	b329      	cbz	r1, 80072aa <StringBuilder::GetNewString#9241+0x5a>
 800725e:	688b      	ldr	r3, [r1, #8]
 8007260:	f06f 0501 	mvn.w	r5, #1
 8007264:	eb05 0343 	add.w	r3, r5, r3, lsl #1

            if(newCapacity < requiredLength)
 8007268:	4293      	cmp	r3, r2
 800726a:	bfb8      	it	lt
 800726c:	4613      	movlt	r3, r2
            {
                newCapacity = requiredLength;
            }

            if(newCapacity > maxCapacity)
 800726e:	4283      	cmp	r3, r0
 8007270:	bfc8      	it	gt
 8007272:	4603      	movgt	r3, r0
            {
                newCapacity = maxCapacity;
            }

            if(newCapacity <= 0)
 8007274:	2b01      	cmp	r3, #1
 8007276:	db1a      	blt.n	80072ae <StringBuilder::GetNewString#9241+0x5e>
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

            return String.GetStringForStringBuilder( currentString, newCapacity );
 8007278:	4608      	mov	r0, r1
 800727a:	4619      	mov	r1, r3
 800727c:	f7fa ffd6 	bl	800222c <String::GetStringForStringBuilder#2972>
 8007280:	bdb0      	pop	{r4, r5, r7, pc}
 8007282:	4816      	ldr	r0, [pc, #88]	; (80072dc <StringBuilder::GetNewString#9241+0x8c>)
            int newCapacity;
            int maxCapacity = m_MaxCapacity;

            if(requiredLength < 0)
            {
                throw new OutOfMemoryException();
 8007284:	4912      	ldr	r1, [pc, #72]	; (80072d0 <StringBuilder::GetNewString#9241+0x80>)
 8007286:	4478      	add	r0, pc
 8007288:	180c      	adds	r4, r1, r0
 800728a:	4915      	ldr	r1, [pc, #84]	; (80072e0 <StringBuilder::GetNewString#9241+0x90>)
 800728c:	4401      	add	r1, r0
 800728e:	4620      	mov	r0, r4
 8007290:	f7f9 fb00 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8007294:	4605      	mov	r5, r0
 8007296:	f7fd fbb3 	bl	8004a00 <Exception::GetMessageFromNativeResources#7756>
 800729a:	60a8      	str	r0, [r5, #8]
 800729c:	4620      	mov	r0, r4
 800729e:	4629      	mov	r1, r5
 80072a0:	f7f9 fb0e 	bl	80008c0 <TypeSystemManager::Throw#5596>
 80072a4:	480c      	ldr	r0, [pc, #48]	; (80072d8 <StringBuilder::GetNewString#9241+0x88>)
 80072a6:	4478      	add	r0, pc
 80072a8:	e003      	b.n	80072b2 <StringBuilder::GetNewString#9241+0x62>
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

            newCapacity = (currentString.Capacity) * 2; // To force a predicatable growth of 160,320 etc. for testing purposes
 80072aa:	f7f9 f8dd 	bl	8000468 <Thread::ThrowNullException#4411>
 80072ae:	4807      	ldr	r0, [pc, #28]	; (80072cc <StringBuilder::GetNewString#9241+0x7c>)
 80072b0:	4478      	add	r0, pc
            if(requiredLength > maxCapacity)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "requiredLength", Environment.GetResourceString( "ArgumentOutOfRange_SmallCapacity" ) );
#else
                throw new ArgumentOutOfRangeException();
 80072b2:	4907      	ldr	r1, [pc, #28]	; (80072d0 <StringBuilder::GetNewString#9241+0x80>)
 80072b4:	180c      	adds	r4, r1, r0
 80072b6:	4907      	ldr	r1, [pc, #28]	; (80072d4 <StringBuilder::GetNewString#9241+0x84>)
 80072b8:	4401      	add	r1, r0
 80072ba:	4620      	mov	r0, r4
 80072bc:	f7f9 faea 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80072c0:	4601      	mov	r1, r0
 80072c2:	2000      	movs	r0, #0
 80072c4:	6088      	str	r0, [r1, #8]
 80072c6:	4620      	mov	r0, r4
 80072c8:	f7f9 fafa 	bl	80008c0 <TypeSystemManager::Throw#5596>
 80072cc:	17ff9864 	.word	0x17ff9864
 80072d0:	fffffe0c 	.word	0xfffffe0c
 80072d4:	e8019568 	.word	0xe8019568
 80072d8:	17ff986e 	.word	0x17ff986e
 80072dc:	17ff988e 	.word	0x17ff988e
 80072e0:	e8019ad8 	.word	0xe8019ad8

080072e4 <StringBuilder::Append#9237>:
            return this;
        }

        // Appends an array of characters at the end of this string builder. The capacity is adjusted as needed. 
        public StringBuilder Append( char[] value, int startIndex, int charCount )
        {
 80072e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	460f      	mov	r7, r1
 80072ec:	4680      	mov	r8, r0
 80072ee:	2000      	movs	r0, #0
 80072f0:	461d      	mov	r5, r3
 80072f2:	4691      	mov	r9, r2
 80072f4:	9001      	str	r0, [sp, #4]
 80072f6:	b397      	cbz	r7, 800735e <StringBuilder::Append#9237+0x7a>
 80072f8:	b3a5      	cbz	r5, 8007364 <StringBuilder::Append#9237+0x80>
            if(charCount == 0)
            {
                return this;
            }

            if(startIndex < 0)
 80072fa:	f1b9 3fff 	cmp.w	r9, #4294967295
 80072fe:	dd36      	ble.n	800736e <StringBuilder::Append#9237+0x8a>
                throw new ArgumentOutOfRangeException( "startIndex", Environment.GetResourceString( "ArgumentOutOfRange_GenericPositive" ) );
#else
                throw new ArgumentOutOfRangeException();
#endif
            }
            if(charCount < 0)
 8007300:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007304:	dd36      	ble.n	8007374 <StringBuilder::Append#9237+0x90>
 8007306:	68b8      	ldr	r0, [r7, #8]
                throw new ArgumentOutOfRangeException( "count", Environment.GetResourceString( "ArgumentOutOfRange_GenericPositive" ) );
#else
                throw new ArgumentOutOfRangeException();
#endif
            }
            if(charCount > value.Length - startIndex)
 8007308:	eba0 0009 	sub.w	r0, r0, r9
 800730c:	4285      	cmp	r5, r0
 800730e:	dc34      	bgt.n	800737a <StringBuilder::Append#9237+0x96>
 8007310:	a901      	add	r1, sp, #4
                throw new ArgumentOutOfRangeException();
#endif
            }

            Thread th;
            String currentString = GetThreadSafeString( out th );
 8007312:	4640      	mov	r0, r8
 8007314:	f7ff ff0e 	bl	8007134 <StringBuilder::GetThreadSafeString#9224>
 8007318:	4604      	mov	r4, r0
 800731a:	b334      	cbz	r4, 800736a <StringBuilder::Append#9237+0x86>
 800731c:	f8d4 a00c 	ldr.w	sl, [r4, #12]

            int currentLength = currentString.Length;
            requiredLength = currentLength + charCount;
            if(NeedsAllocation( currentString, requiredLength ))
 8007320:	4620      	mov	r0, r4

            Thread th;
            String currentString = GetThreadSafeString( out th );

            int currentLength = currentString.Length;
            requiredLength = currentLength + charCount;
 8007322:	eb0a 0605 	add.w	r6, sl, r5
            if(NeedsAllocation( currentString, requiredLength ))
 8007326:	4631      	mov	r1, r6
 8007328:	f7ff ff84 	bl	8007234 <StringBuilder::NeedsAllocation#9240>
 800732c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8007330:	d007      	beq.n	8007342 <StringBuilder::Append#9237+0x5e>
 8007332:	f8d8 000c 	ldr.w	r0, [r8, #12]
            {
                String newString = GetNewString( currentString, requiredLength );
 8007336:	4621      	mov	r1, r4
 8007338:	4632      	mov	r2, r6
 800733a:	f7ff ff89 	bl	8007250 <StringBuilder::GetNewString#9241>
 800733e:	4604      	mov	r4, r0
 8007340:	b19c      	cbz	r4, 800736a <StringBuilder::Append#9237+0x86>
                newString.AppendInPlace( value, startIndex, charCount, currentLength );
                ReplaceString( th, newString );
            }
            else
            {
                currentString.AppendInPlace( value, startIndex, charCount, currentLength );
 8007342:	4620      	mov	r0, r4
 8007344:	4639      	mov	r1, r7
 8007346:	464a      	mov	r2, r9
 8007348:	462b      	mov	r3, r5
 800734a:	f8cd a000 	str.w	sl, [sp]
 800734e:	f7fa ff43 	bl	80021d8 <String::AppendInPlace#2970>
                ReplaceString( th, currentString );
 8007352:	9901      	ldr	r1, [sp, #4]
 8007354:	4640      	mov	r0, r8
 8007356:	4622      	mov	r2, r4
 8007358:	f7ff ff76 	bl	8007248 <StringBuilder::ReplaceString#9242>
 800735c:	e002      	b.n	8007364 <StringBuilder::Append#9237+0x80>
        {
            int requiredLength;

            if(value == null)
            {
                if(startIndex == 0 && charCount == 0)
 800735e:	ea59 0005 	orrs.w	r0, r9, r5
 8007362:	d110      	bne.n	8007386 <StringBuilder::Append#9237+0xa2>
 8007364:	b002      	add	sp, #8
 8007366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                throw new ArgumentOutOfRangeException( "count", Environment.GetResourceString( "ArgumentOutOfRange_GenericPositive" ) );
#else
                throw new ArgumentOutOfRangeException();
#endif
            }
            if(charCount > value.Length - startIndex)
 800736a:	f7f9 f87d 	bl	8000468 <Thread::ThrowNullException#4411>
 800736e:	4811      	ldr	r0, [pc, #68]	; (80073b4 <StringBuilder::Append#9237+0xd0>)
 8007370:	4478      	add	r0, pc
 8007372:	e004      	b.n	800737e <StringBuilder::Append#9237+0x9a>
 8007374:	480e      	ldr	r0, [pc, #56]	; (80073b0 <StringBuilder::Append#9237+0xcc>)
 8007376:	4478      	add	r0, pc
 8007378:	e001      	b.n	800737e <StringBuilder::Append#9237+0x9a>
 800737a:	480a      	ldr	r0, [pc, #40]	; (80073a4 <StringBuilder::Append#9237+0xc0>)
 800737c:	4478      	add	r0, pc
            if(startIndex < 0)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "startIndex", Environment.GetResourceString( "ArgumentOutOfRange_GenericPositive" ) );
#else
                throw new ArgumentOutOfRangeException();
 800737e:	490a      	ldr	r1, [pc, #40]	; (80073a8 <StringBuilder::Append#9237+0xc4>)
 8007380:	180c      	adds	r4, r1, r0
 8007382:	490a      	ldr	r1, [pc, #40]	; (80073ac <StringBuilder::Append#9237+0xc8>)
 8007384:	e004      	b.n	8007390 <StringBuilder::Append#9237+0xac>
 8007386:	480c      	ldr	r0, [pc, #48]	; (80073b8 <StringBuilder::Append#9237+0xd4>)
                    return this;
                }
#if EXCEPTION_STRINGS
                throw new ArgumentNullException( "value" );
#else
                throw new ArgumentNullException();
 8007388:	4907      	ldr	r1, [pc, #28]	; (80073a8 <StringBuilder::Append#9237+0xc4>)
 800738a:	4478      	add	r0, pc
 800738c:	180c      	adds	r4, r1, r0
 800738e:	490b      	ldr	r1, [pc, #44]	; (80073bc <StringBuilder::Append#9237+0xd8>)
            if(startIndex < 0)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "startIndex", Environment.GetResourceString( "ArgumentOutOfRange_GenericPositive" ) );
#else
                throw new ArgumentOutOfRangeException();
 8007390:	4401      	add	r1, r0
 8007392:	4620      	mov	r0, r4
 8007394:	f7f9 fa7e 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8007398:	4601      	mov	r1, r0
 800739a:	2000      	movs	r0, #0
 800739c:	6088      	str	r0, [r1, #8]
 800739e:	4620      	mov	r0, r4
 80073a0:	f7f9 fa8e 	bl	80008c0 <TypeSystemManager::Throw#5596>
 80073a4:	17ff9798 	.word	0x17ff9798
 80073a8:	fffffe0c 	.word	0xfffffe0c
 80073ac:	e8019568 	.word	0xe8019568
 80073b0:	17ff979e 	.word	0x17ff979e
 80073b4:	17ff97a4 	.word	0x17ff97a4
 80073b8:	17ff978a 	.word	0x17ff978a
 80073bc:	e8019418 	.word	0xe8019418

080073c0 <StringBuilder::Append#9260>:

        // Appends an uint to this string builder. 
        // The capacity is adjusted as needed. 
        [CLSCompliant( false )]
        public StringBuilder Append( uint value )
        {
 80073c0:	b510      	push	{r4, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	9101      	str	r1, [sp, #4]
 80073c6:	490c      	ldr	r1, [pc, #48]	; (80073f8 <StringBuilder::Append#9260+0x38>)
 80073c8:	4604      	mov	r4, r0
            return Append( value.ToString( CultureInfo.CurrentCulture ) );
 80073ca:	480c      	ldr	r0, [pc, #48]	; (80073fc <StringBuilder::Append#9260+0x3c>)
 80073cc:	4479      	add	r1, pc
 80073ce:	4401      	add	r1, r0
 80073d0:	f8d1 1108 	ldr.w	r1, [r1, #264]	; 0x108
 80073d4:	b169      	cbz	r1, 80073f2 <StringBuilder::Append#9260+0x32>
 80073d6:	490a      	ldr	r1, [pc, #40]	; (8007400 <StringBuilder::Append#9260+0x40>)
 80073d8:	4479      	add	r1, pc
 80073da:	4408      	add	r0, r1
 80073dc:	f8d0 10f4 	ldr.w	r1, [r0, #244]	; 0xf4
 80073e0:	a801      	add	r0, sp, #4
 80073e2:	f7fa ffc0 	bl	8002366 <UInt32::ToString#3092>
 80073e6:	4601      	mov	r1, r0
 80073e8:	4620      	mov	r0, r4
 80073ea:	f7fe ffcf 	bl	800638c <StringBuilder::Append#9238>
 80073ee:	b002      	add	sp, #8
 80073f0:	bd10      	pop	{r4, pc}
 80073f2:	f7f9 f839 	bl	8000468 <Thread::ThrowNullException#4411>
 80073f6:	46c0      	nop			; (mov r8, r8)
 80073f8:	17ff9748 	.word	0x17ff9748
 80073fc:	fffffcf8 	.word	0xfffffcf8
 8007400:	17ff973c 	.word	0x17ff973c

08007404 <StringBuilder::FormatError#9285>:
        {
            return AppendFormat( null, format, args );
        }

        private static void FormatError()
        {
 8007404:	b510      	push	{r4, lr}
 8007406:	4807      	ldr	r0, [pc, #28]	; (8007424 <StringBuilder::FormatError#9285+0x20>)
#if EXCEPTION_STRINGS
            throw new FormatException( Environment.GetResourceString( "Format_InvalidString" ) );
#else
            throw new FormatException();
 8007408:	4907      	ldr	r1, [pc, #28]	; (8007428 <StringBuilder::FormatError#9285+0x24>)
 800740a:	4478      	add	r0, pc
 800740c:	180c      	adds	r4, r1, r0
 800740e:	4907      	ldr	r1, [pc, #28]	; (800742c <StringBuilder::FormatError#9285+0x28>)
 8007410:	4401      	add	r1, r0
 8007412:	4620      	mov	r0, r4
 8007414:	f7f9 fa3e 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8007418:	4601      	mov	r1, r0
 800741a:	2000      	movs	r0, #0
 800741c:	6088      	str	r0, [r1, #8]
 800741e:	4620      	mov	r0, r4
 8007420:	f7f9 fa4e 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8007424:	17ff970a 	.word	0x17ff970a
 8007428:	fffffe0c 	.word	0xfffffe0c
 800742c:	e8019ce8 	.word	0xe8019ce8

08007430 <MemberInfo::Equals#9539>:
        }
        #endregion

        #region MemberInfo Overrides
        public override bool Equals( object obj )
        {
 8007430:	b5b0      	push	{r4, r5, r7, lr}
 8007432:	460c      	mov	r4, r1
 8007434:	4605      	mov	r5, r0
 8007436:	b1bc      	cbz	r4, 8007468 <MemberInfo::Equals#9539+0x38>
 8007438:	480d      	ldr	r0, [pc, #52]	; (8007470 <MemberInfo::Equals#9539+0x40>)
            if (obj == null)
            {
                return false;
            }
            if ((obj is MemberInfo) == false)
 800743a:	490e      	ldr	r1, [pc, #56]	; (8007474 <MemberInfo::Equals#9539+0x44>)
 800743c:	4478      	add	r0, pc
 800743e:	4401      	add	r1, r0
 8007440:	4620      	mov	r0, r4
 8007442:	f7f9 fdf0 	bl	8001026 <TypeSystemManager::CastToTypeNoThrow#5591>
 8007446:	b178      	cbz	r0, 8007468 <MemberInfo::Equals#9539+0x38>
            {
                return false;
            }
            return this.GetHashCode() == obj.GetHashCode();
 8007448:	4628      	mov	r0, r5
 800744a:	f7ff fd4d 	bl	8006ee8 <Type::GetHashCode#8266>
 800744e:	4605      	mov	r5, r0
 8007450:	b164      	cbz	r4, 800746c <MemberInfo::Equals#9539+0x3c>
 8007452:	6860      	ldr	r0, [r4, #4]
 8007454:	69c0      	ldr	r0, [r0, #28]
 8007456:	6941      	ldr	r1, [r0, #20]
 8007458:	4620      	mov	r0, r4
 800745a:	4788      	blx	r1
 800745c:	4601      	mov	r1, r0
 800745e:	2000      	movs	r0, #0
 8007460:	428d      	cmp	r5, r1
 8007462:	bf08      	it	eq
 8007464:	2001      	moveq	r0, #1
 8007466:	bdb0      	pop	{r4, r5, r7, pc}
 8007468:	2000      	movs	r0, #0
 800746a:	bdb0      	pop	{r4, r5, r7, pc}
 800746c:	f7f8 fffc 	bl	8000468 <Thread::ThrowNullException#4411>
 8007470:	17ff96d8 	.word	0x17ff96d8
 8007474:	e8019e38 	.word	0xe8019e38

08007478 <MemberInfo::GetHashCode#9540>:

        internal virtual int MetadataTokenInternal
        {
            get
            {
                return MetadataToken;
 8007478:	b580      	push	{r7, lr}
 800747a:	f7ff fd45 	bl	8006f08 <MemberInfo::get_MetadataToken#9547>
 800747e:	bd80      	pop	{r7, pc}

08007480 <CultureInfo::GetFormat#10312>:
////        return m_name;
////    }


        public virtual Object GetFormat( Type formatType )
        {
 8007480:	b510      	push	{r4, lr}
 8007482:	4604      	mov	r4, r0
 8007484:	4808      	ldr	r0, [pc, #32]	; (80074a8 <CultureInfo::GetFormat#10312+0x28>)
            if(formatType == typeof( NumberFormatInfo ))
 8007486:	4a09      	ldr	r2, [pc, #36]	; (80074ac <CultureInfo::GetFormat#10312+0x2c>)
 8007488:	4478      	add	r0, pc
 800748a:	4402      	add	r2, r0
 800748c:	4608      	mov	r0, r1
 800748e:	4611      	mov	r1, r2
 8007490:	f7ff fd65 	bl	8006f5e <Type::op_Equality#8267>
 8007494:	f010 0fff 	tst.w	r0, #255	; 0xff
 8007498:	bf04      	itt	eq
 800749a:	2000      	moveq	r0, #0
 800749c:	bd10      	popeq	{r4, pc}
            {
                return NumberFormat;
 800749e:	4620      	mov	r0, r4
 80074a0:	f000 f806 	bl	80074b0 <CultureInfo::get_NumberFormat#10313>
 80074a4:	bd10      	pop	{r4, pc}
 80074a6:	46c0      	nop			; (mov r8, r8)
 80074a8:	17ff968c 	.word	0x17ff968c
 80074ac:	e8014e8c 	.word	0xe8014e8c

080074b0 <CultureInfo::get_NumberFormat#10313>:
////    }
    
        public virtual NumberFormatInfo NumberFormat
        {
            get
            {
 80074b0:	b570      	push	{r4, r5, r6, lr}
 80074b2:	4604      	mov	r4, r0
////            CultureInfo.CheckNeutral( this );
                if(numInfo == null)
 80074b4:	6920      	ldr	r0, [r4, #16]
 80074b6:	2800      	cmp	r0, #0
    
                    temp.isReadOnly = m_isReadOnly;
    
                    numInfo = temp;
                }
                return (numInfo);
 80074b8:	bf1e      	ittt	ne
 80074ba:	6925      	ldrne	r5, [r4, #16]
 80074bc:	4628      	movne	r0, r5
 80074be:	bd70      	popne	{r4, r5, r6, pc}
 80074c0:	4909      	ldr	r1, [pc, #36]	; (80074e8 <CultureInfo::get_NumberFormat#10313+0x38>)
            get
            {
////            CultureInfo.CheckNeutral( this );
                if(numInfo == null)
                {
                    NumberFormatInfo temp = new NumberFormatInfo( this.m_cultureTableRecord );
 80074c2:	480a      	ldr	r0, [pc, #40]	; (80074ec <CultureInfo::get_NumberFormat#10313+0x3c>)
 80074c4:	4a0a      	ldr	r2, [pc, #40]	; (80074f0 <CultureInfo::get_NumberFormat#10313+0x40>)
 80074c6:	69a6      	ldr	r6, [r4, #24]
 80074c8:	4479      	add	r1, pc
 80074ca:	4408      	add	r0, r1
 80074cc:	4411      	add	r1, r2
 80074ce:	f7f9 f9e1 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80074d2:	4631      	mov	r1, r6
 80074d4:	4605      	mov	r5, r0
 80074d6:	f000 f827 	bl	8007528 <NumberFormatInfo::.ctor#10445>
    
                    temp.isReadOnly = m_isReadOnly;
 80074da:	7a20      	ldrb	r0, [r4, #8]
 80074dc:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
 80074e0:	4628      	mov	r0, r5
 80074e2:	6125      	str	r5, [r4, #16]
 80074e4:	bd70      	pop	{r4, r5, r6, pc}
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	17ff964c 	.word	0x17ff964c
 80074ec:	fffffe0c 	.word	0xfffffe0c
 80074f0:	e8019ec8 	.word	0xe8019ec8

080074f4 <CultureInfo::.ctor#10306>:
 80074f4:	2100      	movs	r1, #0
 80074f6:	7201      	strb	r1, [r0, #8]
 80074f8:	e9c0 1103 	strd	r1, r1, [r0, #12]
 80074fc:	6141      	str	r1, [r0, #20]
 80074fe:	4770      	bx	lr

08007500 <NumberFormatInfo::GetFormat#10458>:
////        }
////    }


        public Object GetFormat( Type formatType )
        {
 8007500:	b510      	push	{r4, lr}
 8007502:	4604      	mov	r4, r0
 8007504:	4806      	ldr	r0, [pc, #24]	; (8007520 <NumberFormatInfo::GetFormat#10458+0x20>)
            return formatType == typeof( NumberFormatInfo ) ? this : null;
 8007506:	4a07      	ldr	r2, [pc, #28]	; (8007524 <NumberFormatInfo::GetFormat#10458+0x24>)
 8007508:	4478      	add	r0, pc
 800750a:	4402      	add	r2, r0
 800750c:	4608      	mov	r0, r1
 800750e:	4611      	mov	r1, r2
 8007510:	f7ff fd25 	bl	8006f5e <Type::op_Equality#8267>
 8007514:	b2c0      	uxtb	r0, r0
 8007516:	2800      	cmp	r0, #0
 8007518:	bf08      	it	eq
 800751a:	4604      	moveq	r4, r0
 800751c:	4620      	mov	r0, r4
 800751e:	bd10      	pop	{r4, pc}
 8007520:	17ff960c 	.word	0x17ff960c
 8007524:	e8014e8c 	.word	0xe8014e8c

08007528 <NumberFormatInfo::.ctor#10445>:
        // READTHIS READTHIS READTHIS
        // This class has an exact mapping onto a native structure defined in COMNumber.cpp
        // DO NOT UPDATE THIS WITHOUT UPDATING THAT STRUCTURE. IF YOU ADD BOOL, ADD THEM AT THE END.
        // ALSO MAKE SURE TO UPDATE mscorlib.h in the VM directory to check field offsets.
        // READTHIS READTHIS READTHIS
        internal int[] numberGroupSizes = new int[] { 3 };
 8007528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800752c:	b081      	sub	sp, #4
 800752e:	4f3f      	ldr	r7, [pc, #252]	; (800762c <NumberFormatInfo::.ctor#10445+0x104>)
 8007530:	4604      	mov	r4, r0
 8007532:	483f      	ldr	r0, [pc, #252]	; (8007630 <NumberFormatInfo::.ctor#10445+0x108>)
 8007534:	2201      	movs	r2, #1
 8007536:	f04f 0801 	mov.w	r8, #1
 800753a:	447f      	add	r7, pc
 800753c:	19c5      	adds	r5, r0, r7
 800753e:	483d      	ldr	r0, [pc, #244]	; (8007634 <NumberFormatInfo::.ctor#10445+0x10c>)
 8007540:	19c6      	adds	r6, r0, r7
 8007542:	4628      	mov	r0, r5
 8007544:	4631      	mov	r1, r6
 8007546:	f7fa fa65 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 800754a:	f04f 0903 	mov.w	r9, #3
        internal int[] currencyGroupSizes = new int[] { 3 };
 800754e:	4631      	mov	r1, r6
        // READTHIS READTHIS READTHIS
        // This class has an exact mapping onto a native structure defined in COMNumber.cpp
        // DO NOT UPDATE THIS WITHOUT UPDATING THAT STRUCTURE. IF YOU ADD BOOL, ADD THEM AT THE END.
        // ALSO MAKE SURE TO UPDATE mscorlib.h in the VM directory to check field offsets.
        // READTHIS READTHIS READTHIS
        internal int[] numberGroupSizes = new int[] { 3 };
 8007550:	2201      	movs	r2, #1
 8007552:	f8c0 900c 	str.w	r9, [r0, #12]
 8007556:	60a0      	str	r0, [r4, #8]
        internal int[] currencyGroupSizes = new int[] { 3 };
 8007558:	4628      	mov	r0, r5
 800755a:	f7fa fa5b 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 800755e:	f8c0 900c 	str.w	r9, [r0, #12]
 8007562:	60e0      	str	r0, [r4, #12]
        internal int[] percentGroupSizes = new int[] { 3 };
 8007564:	4628      	mov	r0, r5
 8007566:	4631      	mov	r1, r6
        // READTHIS READTHIS READTHIS
        // This class has an exact mapping onto a native structure defined in COMNumber.cpp
        // DO NOT UPDATE THIS WITHOUT UPDATING THAT STRUCTURE. IF YOU ADD BOOL, ADD THEM AT THE END.
        // ALSO MAKE SURE TO UPDATE mscorlib.h in the VM directory to check field offsets.
        // READTHIS READTHIS READTHIS
        internal int[] numberGroupSizes = new int[] { 3 };
 8007568:	2201      	movs	r2, #1
        internal int[] currencyGroupSizes = new int[] { 3 };
        internal int[] percentGroupSizes = new int[] { 3 };
 800756a:	f7fa fa53 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 800756e:	f8c0 900c 	str.w	r9, [r0, #12]
 8007572:	6120      	str	r0, [r4, #16]
 8007574:	4830      	ldr	r0, [pc, #192]	; (8007638 <NumberFormatInfo::.ctor#10445+0x110>)
 8007576:	4933      	ldr	r1, [pc, #204]	; (8007644 <NumberFormatInfo::.ctor#10445+0x11c>)
 8007578:	4a33      	ldr	r2, [pc, #204]	; (8007648 <NumberFormatInfo::.ctor#10445+0x120>)
 800757a:	2600      	movs	r6, #0
 800757c:	4438      	add	r0, r7
 800757e:	4439      	add	r1, r7
 8007580:	443a      	add	r2, r7
 8007582:	6160      	str	r0, [r4, #20]
 8007584:	482d      	ldr	r0, [pc, #180]	; (800763c <NumberFormatInfo::.ctor#10445+0x114>)
 8007586:	4438      	add	r0, r7
 8007588:	61a0      	str	r0, [r4, #24]
 800758a:	482d      	ldr	r0, [pc, #180]	; (8007640 <NumberFormatInfo::.ctor#10445+0x118>)
 800758c:	4438      	add	r0, r7
 800758e:	61e0      	str	r0, [r4, #28]
 8007590:	e9c4 1108 	strd	r1, r1, [r4, #32]
 8007594:	62a0      	str	r0, [r4, #40]	; 0x28
 8007596:	62e2      	str	r2, [r4, #44]	; 0x2c
 8007598:	4a2c      	ldr	r2, [pc, #176]	; (800764c <NumberFormatInfo::.ctor#10445+0x124>)
 800759a:	6326      	str	r6, [r4, #48]	; 0x30
 800759c:	443a      	add	r2, r7
 800759e:	6362      	str	r2, [r4, #52]	; 0x34
 80075a0:	4a2b      	ldr	r2, [pc, #172]	; (8007650 <NumberFormatInfo::.ctor#10445+0x128>)
 80075a2:	443a      	add	r2, r7
 80075a4:	63a2      	str	r2, [r4, #56]	; 0x38
 80075a6:	4a2b      	ldr	r2, [pc, #172]	; (8007654 <NumberFormatInfo::.ctor#10445+0x12c>)
 80075a8:	443a      	add	r2, r7
 80075aa:	e9c4 200f 	strd	r2, r0, [r4, #60]	; 0x3c
 80075ae:	482a      	ldr	r0, [pc, #168]	; (8007658 <NumberFormatInfo::.ctor#10445+0x130>)
 80075b0:	6461      	str	r1, [r4, #68]	; 0x44
        internal String percentGroupSeparator = ",";
        internal String percentSymbol = "%";
        internal String perMilleSymbol = "\u2030";

        [OptionalField( VersionAdded = 2 )]
        internal String[] nativeDigits = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" };
 80075b2:	220a      	movs	r2, #10
 80075b4:	4438      	add	r0, r7
 80075b6:	64a0      	str	r0, [r4, #72]	; 0x48
 80075b8:	4828      	ldr	r0, [pc, #160]	; (800765c <NumberFormatInfo::.ctor#10445+0x134>)
 80075ba:	4438      	add	r0, r7
 80075bc:	64e0      	str	r0, [r4, #76]	; 0x4c
 80075be:	4828      	ldr	r0, [pc, #160]	; (8007660 <NumberFormatInfo::.ctor#10445+0x138>)
 80075c0:	19c1      	adds	r1, r0, r7
 80075c2:	4628      	mov	r0, r5
 80075c4:	f7fa fa26 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 80075c8:	4926      	ldr	r1, [pc, #152]	; (8007664 <NumberFormatInfo::.ctor#10445+0x13c>)
 80075ca:	4439      	add	r1, r7
 80075cc:	60c1      	str	r1, [r0, #12]
 80075ce:	4926      	ldr	r1, [pc, #152]	; (8007668 <NumberFormatInfo::.ctor#10445+0x140>)
 80075d0:	4439      	add	r1, r7
 80075d2:	6101      	str	r1, [r0, #16]
 80075d4:	4925      	ldr	r1, [pc, #148]	; (800766c <NumberFormatInfo::.ctor#10445+0x144>)
 80075d6:	4439      	add	r1, r7
 80075d8:	6141      	str	r1, [r0, #20]
 80075da:	4925      	ldr	r1, [pc, #148]	; (8007670 <NumberFormatInfo::.ctor#10445+0x148>)
 80075dc:	4439      	add	r1, r7
 80075de:	6181      	str	r1, [r0, #24]
 80075e0:	4924      	ldr	r1, [pc, #144]	; (8007674 <NumberFormatInfo::.ctor#10445+0x14c>)
 80075e2:	4439      	add	r1, r7
 80075e4:	61c1      	str	r1, [r0, #28]
 80075e6:	4924      	ldr	r1, [pc, #144]	; (8007678 <NumberFormatInfo::.ctor#10445+0x150>)
 80075e8:	4439      	add	r1, r7
 80075ea:	6201      	str	r1, [r0, #32]
 80075ec:	4923      	ldr	r1, [pc, #140]	; (800767c <NumberFormatInfo::.ctor#10445+0x154>)
 80075ee:	4439      	add	r1, r7
 80075f0:	6241      	str	r1, [r0, #36]	; 0x24
 80075f2:	4923      	ldr	r1, [pc, #140]	; (8007680 <NumberFormatInfo::.ctor#10445+0x158>)
 80075f4:	4439      	add	r1, r7
 80075f6:	6281      	str	r1, [r0, #40]	; 0x28
 80075f8:	4922      	ldr	r1, [pc, #136]	; (8007684 <NumberFormatInfo::.ctor#10445+0x15c>)
 80075fa:	4439      	add	r1, r7
 80075fc:	62c1      	str	r1, [r0, #44]	; 0x2c
 80075fe:	4922      	ldr	r1, [pc, #136]	; (8007688 <NumberFormatInfo::.ctor#10445+0x160>)
 8007600:	4439      	add	r1, r7
 8007602:	6301      	str	r1, [r0, #48]	; 0x30
 8007604:	e9c4 0614 	strd	r0, r6, [r4, #80]	; 0x50
 8007608:	2002      	movs	r0, #2
 800760a:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
 800760e:	e9c4 6618 	strd	r6, r6, [r4, #96]	; 0x60
 8007612:	e9c4 861a 	strd	r8, r6, [r4, #104]	; 0x68
 8007616:	e9c4 601c 	strd	r6, r0, [r4, #112]	; 0x70
 800761a:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
 800761e:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
 8007622:	f884 607d 	strb.w	r6, [r4, #125]	; 0x7d
 8007626:	b001      	add	sp, #4
 8007628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800762c:	17ff95da 	.word	0x17ff95da
 8007630:	fffffe0c 	.word	0xfffffe0c
 8007634:	e8019d18 	.word	0xe8019d18
 8007638:	e8011a68 	.word	0xe8011a68
 800763c:	e8011a88 	.word	0xe8011a88
 8007640:	e8011aa8 	.word	0xe8011aa8
 8007644:	e8011ac8 	.word	0xe8011ac8
 8007648:	e8011ae8 	.word	0xe8011ae8
 800764c:	e8011b08 	.word	0xe8011b08
 8007650:	e8011b28 	.word	0xe8011b28
 8007654:	e8011b48 	.word	0xe8011b48
 8007658:	e8011b78 	.word	0xe8011b78
 800765c:	e8011b98 	.word	0xe8011b98
 8007660:	e8019d48 	.word	0xe8019d48
 8007664:	e8011bb8 	.word	0xe8011bb8
 8007668:	e8011bd8 	.word	0xe8011bd8
 800766c:	e8011bf8 	.word	0xe8011bf8
 8007670:	e8011c18 	.word	0xe8011c18
 8007674:	e8011c38 	.word	0xe8011c38
 8007678:	e8011c58 	.word	0xe8011c58
 800767c:	e8011c78 	.word	0xe8011c78
 8007680:	e8011c98 	.word	0xe8011c98
 8007684:	e8011cb8 	.word	0xe8011cb8
 8007688:	e8011cd8 	.word	0xe8011cd8

0800768c <ArrayList::.ctor#10890>:
        }

        // Constructs a ArrayList. The list is initially empty and has a capacity
        // of zero. Upon adding the first element to the list the capacity is
        // increased to cDefaultCapacity, and then increased in multiples of two as required.
        public ArrayList()
 800768c:	4903      	ldr	r1, [pc, #12]	; (800769c <ArrayList::.ctor#10890+0x10>)
        {
            m_items = emptyArray;
 800768e:	4a04      	ldr	r2, [pc, #16]	; (80076a0 <ArrayList::.ctor#10890+0x14>)
 8007690:	4479      	add	r1, pc
 8007692:	4411      	add	r1, r2
 8007694:	f8d1 10ec 	ldr.w	r1, [r1, #236]	; 0xec
 8007698:	6081      	str	r1, [r0, #8]
 800769a:	4770      	bx	lr
 800769c:	17ff9484 	.word	0x17ff9484
 80076a0:	fffffcf8 	.word	0xfffffcf8

080076a4 <ArrayList::set_Capacity#10894>:
            {
                return m_items.Length;
            }

            set
            {
 80076a4:	b5b0      	push	{r4, r5, r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	4604      	mov	r4, r0
 80076aa:	460a      	mov	r2, r1
                // We don't want to update the version number when we change the capacity.
                // Some existing applications have dependency on this.
                if(value != m_items.Length)
 80076ac:	68a0      	ldr	r0, [r4, #8]
 80076ae:	b350      	cbz	r0, 8007706 <ArrayList::set_Capacity#10894+0x62>
 80076b0:	6880      	ldr	r0, [r0, #8]
 80076b2:	4282      	cmp	r2, r0
 80076b4:	d025      	beq.n	8007702 <ArrayList::set_Capacity#10894+0x5e>
                {
                    if(value < m_size)
 80076b6:	68e0      	ldr	r0, [r4, #12]
 80076b8:	4282      	cmp	r2, r0
 80076ba:	db26      	blt.n	800770a <ArrayList::set_Capacity#10894+0x66>
#else
                        throw new ArgumentOutOfRangeException();
#endif
                    }

                    if(value > 0)
 80076bc:	2a01      	cmp	r2, #1
 80076be:	db16      	blt.n	80076ee <ArrayList::set_Capacity#10894+0x4a>
 80076c0:	491c      	ldr	r1, [pc, #112]	; (8007734 <ArrayList::set_Capacity#10894+0x90>)
                    {
                        Object[] newItems = new Object[value];
 80076c2:	481a      	ldr	r0, [pc, #104]	; (800772c <ArrayList::set_Capacity#10894+0x88>)
 80076c4:	4b1a      	ldr	r3, [pc, #104]	; (8007730 <ArrayList::set_Capacity#10894+0x8c>)
 80076c6:	4479      	add	r1, pc
 80076c8:	4408      	add	r0, r1
 80076ca:	4419      	add	r1, r3
 80076cc:	f7fa f9a2 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 80076d0:	4605      	mov	r5, r0
                        if(m_size > 0)
 80076d2:	68e0      	ldr	r0, [r4, #12]
 80076d4:	2800      	cmp	r0, #0
 80076d6:	dd07      	ble.n	80076e8 <ArrayList::set_Capacity#10894+0x44>
                        {
                            Array.Copy( m_items, 0, newItems, 0, m_size );
 80076d8:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80076dc:	462a      	mov	r2, r5
 80076de:	2300      	movs	r3, #0
 80076e0:	9100      	str	r1, [sp, #0]
 80076e2:	2100      	movs	r1, #0
 80076e4:	f7f9 f934 	bl	8000950 <Array::Copy#4077>
 80076e8:	60a5      	str	r5, [r4, #8]
 80076ea:	b002      	add	sp, #8
 80076ec:	bdb0      	pop	{r4, r5, r7, pc}
 80076ee:	490e      	ldr	r1, [pc, #56]	; (8007728 <ArrayList::set_Capacity#10894+0x84>)

                        m_items = newItems;
                    }
                    else
                    {
                        m_items = new Object[cDefaultCapacity];
 80076f0:	480e      	ldr	r0, [pc, #56]	; (800772c <ArrayList::set_Capacity#10894+0x88>)
 80076f2:	4a0f      	ldr	r2, [pc, #60]	; (8007730 <ArrayList::set_Capacity#10894+0x8c>)
 80076f4:	4479      	add	r1, pc
 80076f6:	4408      	add	r0, r1
 80076f8:	4411      	add	r1, r2
 80076fa:	2204      	movs	r2, #4
 80076fc:	f7fa f98a 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 8007700:	60a0      	str	r0, [r4, #8]
 8007702:	b002      	add	sp, #8
 8007704:	bdb0      	pop	{r4, r5, r7, pc}

            set
            {
                // We don't want to update the version number when we change the capacity.
                // Some existing applications have dependency on this.
                if(value != m_items.Length)
 8007706:	f7f8 feaf 	bl	8000468 <Thread::ThrowNullException#4411>
 800770a:	480b      	ldr	r0, [pc, #44]	; (8007738 <ArrayList::set_Capacity#10894+0x94>)
                    if(value < m_size)
                    {
#if EXCEPTION_STRINGS
                        throw new ArgumentOutOfRangeException( "value", Environment.GetResourceString( "ArgumentOutOfRange_SmallCapacity" ) );
#else
                        throw new ArgumentOutOfRangeException();
 800770c:	4907      	ldr	r1, [pc, #28]	; (800772c <ArrayList::set_Capacity#10894+0x88>)
 800770e:	4478      	add	r0, pc
 8007710:	180c      	adds	r4, r1, r0
 8007712:	490a      	ldr	r1, [pc, #40]	; (800773c <ArrayList::set_Capacity#10894+0x98>)
 8007714:	4401      	add	r1, r0
 8007716:	4620      	mov	r0, r4
 8007718:	f7f9 f8bc 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 800771c:	4601      	mov	r1, r0
 800771e:	2000      	movs	r0, #0
 8007720:	6088      	str	r0, [r1, #8]
 8007722:	4620      	mov	r0, r4
 8007724:	f7f9 f8cc 	bl	80008c0 <TypeSystemManager::Throw#5596>
 8007728:	17ff9420 	.word	0x17ff9420
 800772c:	fffffe0c 	.word	0xfffffe0c
 8007730:	e8019598 	.word	0xe8019598
 8007734:	17ff944e 	.word	0x17ff944e
 8007738:	17ff9406 	.word	0x17ff9406
 800773c:	e8019568 	.word	0xe8019568

08007740 <ArrayList::Add#10902>:
        // Adds the given object to the end of this list. The size of the list is
        // increased by one. If required, the capacity of the list is doubled
        // before adding the new element.
        //
        public virtual int Add( Object value )
        {
 8007740:	b5b0      	push	{r4, r5, r7, lr}
 8007742:	4604      	mov	r4, r0
 8007744:	460d      	mov	r5, r1
            if(m_size == m_items.Length)
 8007746:	68a0      	ldr	r0, [r4, #8]
 8007748:	b1e0      	cbz	r0, 8007784 <ArrayList::Add#10902+0x44>
 800774a:	68e1      	ldr	r1, [r4, #12]
 800774c:	6880      	ldr	r0, [r0, #8]
 800774e:	4281      	cmp	r1, r0
 8007750:	d104      	bne.n	800775c <ArrayList::Add#10902+0x1c>
            {
                EnsureCapacity( m_size + 1 );
 8007752:	68e0      	ldr	r0, [r4, #12]
 8007754:	1c41      	adds	r1, r0, #1
 8007756:	4620      	mov	r0, r4
 8007758:	f000 f816 	bl	8007788 <ArrayList::EnsureCapacity#10913>
            }

            m_items[m_size] = value;
 800775c:	68a0      	ldr	r0, [r4, #8]
 800775e:	b188      	cbz	r0, 8007784 <ArrayList::Add#10902+0x44>
 8007760:	68e1      	ldr	r1, [r4, #12]
 8007762:	6882      	ldr	r2, [r0, #8]
 8007764:	4291      	cmp	r1, r2
 8007766:	bf3f      	itttt	cc
 8007768:	eb00 0081 	addcc.w	r0, r0, r1, lsl #2
 800776c:	60c5      	strcc	r5, [r0, #12]
            m_version++;
 800776e:	6920      	ldrcc	r0, [r4, #16]
 8007770:	3001      	addcc	r0, #1
 8007772:	bf3f      	itttt	cc
 8007774:	6120      	strcc	r0, [r4, #16]

            return m_size++;
 8007776:	68e0      	ldrcc	r0, [r4, #12]
 8007778:	1c41      	addcc	r1, r0, #1
 800777a:	60e1      	strcc	r1, [r4, #12]
 800777c:	bf38      	it	cc
 800777e:	bdb0      	popcc	{r4, r5, r7, pc}
            if(m_size == m_items.Length)
            {
                EnsureCapacity( m_size + 1 );
            }

            m_items[m_size] = value;
 8007780:	f7f9 fb96 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
        // increased by one. If required, the capacity of the list is doubled
        // before adding the new element.
        //
        public virtual int Add( Object value )
        {
            if(m_size == m_items.Length)
 8007784:	f7f8 fe70 	bl	8000468 <Thread::ThrowNullException#4411>

08007788 <ArrayList::EnsureCapacity#10913>:
        // value. If the currect capacity of the list is less than min, the
        // capacity is increased to twice the current capacity or to min,
        // whichever is larger.
        private void EnsureCapacity( int min )
        {
            if(m_items.Length < min)
 8007788:	b580      	push	{r7, lr}
 800778a:	6882      	ldr	r2, [r0, #8]
 800778c:	b1a2      	cbz	r2, 80077b8 <ArrayList::EnsureCapacity#10913+0x30>
 800778e:	6892      	ldr	r2, [r2, #8]
 8007790:	428a      	cmp	r2, r1
 8007792:	bfa8      	it	ge
 8007794:	bd80      	popge	{r7, pc}
            {
                int newCapacity = m_items.Length == 0 ? cDefaultCapacity : m_items.Length * 2;
 8007796:	6882      	ldr	r2, [r0, #8]
 8007798:	b172      	cbz	r2, 80077b8 <ArrayList::EnsureCapacity#10913+0x30>
 800779a:	6892      	ldr	r2, [r2, #8]
 800779c:	b122      	cbz	r2, 80077a8 <ArrayList::EnsureCapacity#10913+0x20>
 800779e:	6882      	ldr	r2, [r0, #8]
 80077a0:	b152      	cbz	r2, 80077b8 <ArrayList::EnsureCapacity#10913+0x30>
 80077a2:	6892      	ldr	r2, [r2, #8]
 80077a4:	0052      	lsls	r2, r2, #1
 80077a6:	e000      	b.n	80077aa <ArrayList::EnsureCapacity#10913+0x22>
 80077a8:	2204      	movs	r2, #4

                if(newCapacity < min) newCapacity = min;
 80077aa:	428a      	cmp	r2, r1
 80077ac:	bfb8      	it	lt
 80077ae:	460a      	movlt	r2, r1

                Capacity = newCapacity;
 80077b0:	4611      	mov	r1, r2
 80077b2:	f7ff ff77 	bl	80076a4 <ArrayList::set_Capacity#10894>
 80077b6:	bd80      	pop	{r7, pc}
        // value. If the currect capacity of the list is less than min, the
        // capacity is increased to twice the current capacity or to min,
        // whichever is larger.
        private void EnsureCapacity( int min )
        {
            if(m_items.Length < min)
 80077b8:	f7f8 fe56 	bl	8000468 <Thread::ThrowNullException#4411>

080077bc <ArrayList::IndexOf#10916>:
        // This method uses the Array.IndexOf method to perform the
        // search.
        //
        public virtual int IndexOf( Object value )
        {
            return Array.IndexOf( (Array)m_items, value, 0, m_size );
 80077bc:	b580      	push	{r7, lr}
 80077be:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7f9 fb8a 	bl	8000edc <Array::IndexOf#1813>
 80077c8:	bd80      	pop	{r7, pc}

080077ca <ArrayList::Remove#10924>:

        // Removes the element at the given index. The size of the list is
        // decreased by one.
        //
        public virtual void Remove( Object obj )
        {
 80077ca:	b510      	push	{r4, lr}
 80077cc:	4604      	mov	r4, r0
            int index = IndexOf( obj );
 80077ce:	f7ff fff5 	bl	80077bc <ArrayList::IndexOf#10916>
 80077d2:	4601      	mov	r1, r0

            BCLDebug.Correctness( index >= 0 || !(obj is Int32), "You passed an Int32 to Remove that wasn't in the ArrayList.\r\nDid you mean RemoveAt?  int: " + obj + "  Count: " + Count );
            if(index >= 0)
 80077d4:	2900      	cmp	r1, #0
            {
                RemoveAt( index );
 80077d6:	bfa4      	itt	ge
 80077d8:	4620      	movge	r0, r4
 80077da:	f000 f801 	blge	80077e0 <ArrayList::RemoveAt#10925>
 80077de:	bd10      	pop	{r4, pc}

080077e0 <ArrayList::RemoveAt#10925>:

        // Removes the element at the given index. The size of the list is
        // decreased by one.
        //
        public virtual void RemoveAt( int index )
        {
 80077e0:	b510      	push	{r4, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	460b      	mov	r3, r1
 80077e6:	4604      	mov	r4, r0
            if(index < 0 || index >= m_size)
 80077e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ec:	dd20      	ble.n	8007830 <ArrayList::RemoveAt#10925+0x50>
 80077ee:	68e0      	ldr	r0, [r4, #12]
 80077f0:	4283      	cmp	r3, r0
 80077f2:	da1d      	bge.n	8007830 <ArrayList::RemoveAt#10925+0x50>
#else
                throw new ArgumentOutOfRangeException();
#endif
            }

            m_size--;
 80077f4:	68e0      	ldr	r0, [r4, #12]
            if(index < m_size)
            {
                Array.Copy( m_items, index + 1, m_items, index, m_size - index );
 80077f6:	3801      	subs	r0, #1
 80077f8:	60e0      	str	r0, [r4, #12]
                throw new ArgumentOutOfRangeException();
#endif
            }

            m_size--;
            if(index < m_size)
 80077fa:	4283      	cmp	r3, r0
 80077fc:	da07      	bge.n	800780e <ArrayList::RemoveAt#10925+0x2e>
            {
                Array.Copy( m_items, index + 1, m_items, index, m_size - index );
 80077fe:	1ac1      	subs	r1, r0, r3
 8007800:	68a0      	ldr	r0, [r4, #8]
 8007802:	9100      	str	r1, [sp, #0]
 8007804:	1c59      	adds	r1, r3, #1
 8007806:	4602      	mov	r2, r0
 8007808:	f7f9 f8a2 	bl	8000950 <Array::Copy#4077>
            }

            m_items[m_size] = null;
 800780c:	68e0      	ldr	r0, [r4, #12]
 800780e:	68a1      	ldr	r1, [r4, #8]
 8007810:	b1e9      	cbz	r1, 800784e <ArrayList::RemoveAt#10925+0x6e>
 8007812:	688a      	ldr	r2, [r1, #8]
 8007814:	4290      	cmp	r0, r2
 8007816:	bf3f      	itttt	cc
 8007818:	eb01 0080 	addcc.w	r0, r1, r0, lsl #2
 800781c:	2100      	movcc	r1, #0
 800781e:	60c1      	strcc	r1, [r0, #12]
            m_version++;
 8007820:	6920      	ldrcc	r0, [r4, #16]
 8007822:	bf3f      	itttt	cc
 8007824:	3001      	addcc	r0, #1
 8007826:	6120      	strcc	r0, [r4, #16]
 8007828:	b002      	addcc	sp, #8
 800782a:	bd10      	popcc	{r4, pc}
            if(index < m_size)
            {
                Array.Copy( m_items, index + 1, m_items, index, m_size - index );
            }

            m_items[m_size] = null;
 800782c:	f7f9 fb40 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 8007830:	4808      	ldr	r0, [pc, #32]	; (8007854 <ArrayList::RemoveAt#10925+0x74>)
            if(index < 0 || index >= m_size)
            {
#if EXCEPTION_STRINGS
                throw new ArgumentOutOfRangeException( "index", Environment.GetResourceString( "ArgumentOutOfRange_Index" ) );
#else
                throw new ArgumentOutOfRangeException();
 8007832:	4909      	ldr	r1, [pc, #36]	; (8007858 <ArrayList::RemoveAt#10925+0x78>)
 8007834:	4478      	add	r0, pc
 8007836:	180c      	adds	r4, r1, r0
 8007838:	4908      	ldr	r1, [pc, #32]	; (800785c <ArrayList::RemoveAt#10925+0x7c>)
 800783a:	4401      	add	r1, r0
 800783c:	4620      	mov	r0, r4
 800783e:	f7f9 f829 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8007842:	4601      	mov	r1, r0
 8007844:	2000      	movs	r0, #0
 8007846:	6088      	str	r0, [r1, #8]
 8007848:	4620      	mov	r0, r4
 800784a:	f7f9 f839 	bl	80008c0 <TypeSystemManager::Throw#5596>
            if(index < m_size)
            {
                Array.Copy( m_items, index + 1, m_items, index, m_size - index );
            }

            m_items[m_size] = null;
 800784e:	f7f8 fe0b 	bl	8000468 <Thread::ThrowNullException#4411>
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	17ff92e0 	.word	0x17ff92e0
 8007858:	fffffe0c 	.word	0xfffffe0c
 800785c:	e8019568 	.word	0xe8019568

08007860 <ToStringFormatState::MoveToEnd#11603>:
                src++;
            }

            private void MoveToEnd()
            {
                src = format.Length;
 8007860:	b580      	push	{r7, lr}
 8007862:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007864:	2900      	cmp	r1, #0
 8007866:	bf1e      	ittt	ne
 8007868:	68c9      	ldrne	r1, [r1, #12]
 800786a:	6381      	strne	r1, [r0, #56]	; 0x38
 800786c:	bd80      	popne	{r7, pc}
 800786e:	f7f8 fdfb 	bl	8000468 <Thread::ThrowNullException#4411>
 8007872:	46c0      	nop			; (mov r8, r8)

08007874 <AssertionViolationException::Create#12381>:
        {
        }

        public static AssertionViolationException Create(        string   format ,
                                                          params object[] args   )
        {
 8007874:	b510      	push	{r4, lr}
 8007876:	f7fa f961 	bl	8001b3c <String::Format#2932>
 800787a:	4905      	ldr	r1, [pc, #20]	; (8007890 <AssertionViolationException::Create#12381+0x1c>)
 800787c:	4604      	mov	r4, r0
            return new AssertionViolationException( String.Format( format, args ) );
 800787e:	4805      	ldr	r0, [pc, #20]	; (8007894 <AssertionViolationException::Create#12381+0x20>)
 8007880:	4a05      	ldr	r2, [pc, #20]	; (8007898 <AssertionViolationException::Create#12381+0x24>)
 8007882:	4479      	add	r1, pc
 8007884:	4408      	add	r0, r1
 8007886:	4411      	add	r1, r2
 8007888:	f7f9 f804 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 800788c:	6084      	str	r4, [r0, #8]
 800788e:	bd10      	pop	{r4, pc}
 8007890:	17ff9292 	.word	0x17ff9292
 8007894:	fffffe0c 	.word	0xfffffe0c
 8007898:	e8019ef8 	.word	0xe8019ef8

0800789c <ArrayUtility::AppendToNotNullArray#41493>:
            }
        }

        public static T[] AppendToNotNullArray<T>( T[] array   ,
                                                   T   element )
        {
 800789c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800789e:	b081      	sub	sp, #4
 80078a0:	4606      	mov	r6, r0
 80078a2:	460c      	mov	r4, r1
            int len = array.Length;
 80078a4:	b1ee      	cbz	r6, 80078e2 <ArrayUtility::AppendToNotNullArray#41493+0x46>
 80078a6:	4910      	ldr	r1, [pc, #64]	; (80078e8 <ArrayUtility::AppendToNotNullArray#41493+0x4c>)
            T[] res = new T[len+1];
 80078a8:	4810      	ldr	r0, [pc, #64]	; (80078ec <ArrayUtility::AppendToNotNullArray#41493+0x50>)
 80078aa:	4a11      	ldr	r2, [pc, #68]	; (80078f0 <ArrayUtility::AppendToNotNullArray#41493+0x54>)
 80078ac:	68b5      	ldr	r5, [r6, #8]
 80078ae:	4479      	add	r1, pc
 80078b0:	4408      	add	r0, r1
 80078b2:	4411      	add	r1, r2
 80078b4:	1c6a      	adds	r2, r5, #1
 80078b6:	f7fa f8ad 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 80078ba:	4607      	mov	r7, r0

            if(len > 0)
 80078bc:	2d01      	cmp	r5, #1
 80078be:	db04      	blt.n	80078ca <ArrayUtility::AppendToNotNullArray#41493+0x2e>
            {
                Array.Copy( array, res, len );
 80078c0:	4630      	mov	r0, r6
 80078c2:	4639      	mov	r1, r7
 80078c4:	462a      	mov	r2, r5
 80078c6:	f7f8 ff99 	bl	80007fc <Array::Copy#1752>
            }

            res[len] = element;
 80078ca:	68b8      	ldr	r0, [r7, #8]
 80078cc:	4285      	cmp	r5, r0
 80078ce:	bf3f      	itttt	cc
 80078d0:	eb07 0085 	addcc.w	r0, r7, r5, lsl #2
 80078d4:	60c4      	strcc	r4, [r0, #12]
 80078d6:	4638      	movcc	r0, r7
 80078d8:	b001      	addcc	sp, #4
 80078da:	bf38      	it	cc
 80078dc:	bdf0      	popcc	{r4, r5, r6, r7, pc}
 80078de:	f7f9 fae7 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
        }

        public static T[] AppendToNotNullArray<T>( T[] array   ,
                                                   T   element )
        {
            int len = array.Length;
 80078e2:	f7f8 fdc1 	bl	8000468 <Thread::ThrowNullException#4411>
 80078e6:	46c0      	nop			; (mov r8, r8)
 80078e8:	17ff9266 	.word	0x17ff9266
 80078ec:	fffffe0c 	.word	0xfffffe0c
 80078f0:	e8019f28 	.word	0xe8019f28

080078f4 <ArrayUtility::ArrayEquals#37329>:
            return true;
        }

        public static bool ArrayEquals<T>( T[] s ,
                                           T[] d )
        {
 80078f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f8:	b083      	sub	sp, #12
 80078fa:	4683      	mov	fp, r0
 80078fc:	468a      	mov	sl, r1
            int sLen = s != null ? s.Length : 0;
 80078fe:	f1bb 0f00 	cmp.w	fp, #0
 8007902:	d002      	beq.n	800790a <ArrayUtility::ArrayEquals#37329+0x16>
 8007904:	f8db 1008 	ldr.w	r1, [fp, #8]
 8007908:	e000      	b.n	800790c <ArrayUtility::ArrayEquals#37329+0x18>
 800790a:	2100      	movs	r1, #0
 800790c:	9100      	str	r1, [sp, #0]
            int dLen = d != null ? d.Length : 0;
 800790e:	f1ba 0f00 	cmp.w	sl, #0
 8007912:	d002      	beq.n	800791a <ArrayUtility::ArrayEquals#37329+0x26>
 8007914:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007918:	e000      	b.n	800791c <ArrayUtility::ArrayEquals#37329+0x28>
 800791a:	2100      	movs	r1, #0

            if(sLen == dLen)
 800791c:	9a00      	ldr	r2, [sp, #0]
 800791e:	428a      	cmp	r2, r1
 8007920:	d141      	bne.n	80079a6 <ArrayUtility::ArrayEquals#37329+0xb2>
 8007922:	4a27      	ldr	r2, [pc, #156]	; (80079c0 <ArrayUtility::ArrayEquals#37329+0xcc>)
            {
                for(int i = 0; i < sLen; i++)
                {
                    if(Object.Equals( s[i], d[i] ) == false)
 8007924:	4927      	ldr	r1, [pc, #156]	; (80079c4 <ArrayUtility::ArrayEquals#37329+0xd0>)
            int sLen = s != null ? s.Length : 0;
            int dLen = d != null ? d.Length : 0;

            if(sLen == dLen)
            {
                for(int i = 0; i < sLen; i++)
 8007926:	f10b 050c 	add.w	r5, fp, #12
 800792a:	f10a 090c 	add.w	r9, sl, #12
 800792e:	f04f 36ff 	mov.w	r6, #4294967295
 8007932:	447a      	add	r2, pc
                {
                    if(Object.Equals( s[i], d[i] ) == false)
 8007934:	4411      	add	r1, r2
 8007936:	9102      	str	r1, [sp, #8]
 8007938:	4923      	ldr	r1, [pc, #140]	; (80079c8 <ArrayUtility::ArrayEquals#37329+0xd4>)
 800793a:	4411      	add	r1, r2
 800793c:	9101      	str	r1, [sp, #4]
            int sLen = s != null ? s.Length : 0;
            int dLen = d != null ? d.Length : 0;

            if(sLen == dLen)
            {
                for(int i = 0; i < sLen; i++)
 800793e:	9900      	ldr	r1, [sp, #0]
 8007940:	3601      	adds	r6, #1
 8007942:	428e      	cmp	r6, r1
 8007944:	da33      	bge.n	80079ae <ArrayUtility::ArrayEquals#37329+0xba>
                {
                    if(Object.Equals( s[i], d[i] ) == false)
 8007946:	f1bb 0f00 	cmp.w	fp, #0
 800794a:	d034      	beq.n	80079b6 <ArrayUtility::ArrayEquals#37329+0xc2>
 800794c:	f8db 1008 	ldr.w	r1, [fp, #8]
 8007950:	465f      	mov	r7, fp
 8007952:	428e      	cmp	r6, r1
 8007954:	d231      	bcs.n	80079ba <ArrayUtility::ArrayEquals#37329+0xc6>
 8007956:	46d3      	mov	fp, sl
 8007958:	f8d5 8000 	ldr.w	r8, [r5]
 800795c:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8007960:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 8007964:	f7f8 ff96 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8007968:	4604      	mov	r4, r0
 800796a:	e9c4 8a02 	strd	r8, sl, [r4, #8]
 800796e:	46da      	mov	sl, fp
 8007970:	f1ba 0f00 	cmp.w	sl, #0
 8007974:	d01f      	beq.n	80079b6 <ArrayUtility::ArrayEquals#37329+0xc2>
 8007976:	f8da 0008 	ldr.w	r0, [sl, #8]
 800797a:	46bb      	mov	fp, r7
 800797c:	4286      	cmp	r6, r0
 800797e:	d21c      	bcs.n	80079ba <ArrayUtility::ArrayEquals#37329+0xc6>
 8007980:	f109 0808 	add.w	r8, r9, #8
 8007984:	e9d9 7900 	ldrd	r7, r9, [r9]
 8007988:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 800798c:	3508      	adds	r5, #8
 800798e:	f7f8 ff81 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8007992:	4601      	mov	r1, r0
 8007994:	4620      	mov	r0, r4
 8007996:	e9c1 7902 	strd	r7, r9, [r1, #8]
 800799a:	f7f9 fe79 	bl	8001690 <Object::Equals#2586>
 800799e:	46c1      	mov	r9, r8
 80079a0:	f010 0fff 	tst.w	r0, #255	; 0xff
 80079a4:	d1cb      	bne.n	800793e <ArrayUtility::ArrayEquals#37329+0x4a>
 80079a6:	2000      	movs	r0, #0
 80079a8:	b003      	add	sp, #12
 80079aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ae:	2001      	movs	r0, #1
 80079b0:	b003      	add	sp, #12
 80079b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b6:	f7f8 fd57 	bl	8000468 <Thread::ThrowNullException#4411>
 80079ba:	f7f9 fa79 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 80079be:	46c0      	nop			; (mov r8, r8)
 80079c0:	17ff91e2 	.word	0x17ff91e2
 80079c4:	fffffe0c 	.word	0xfffffe0c
 80079c8:	e8019f58 	.word	0xe8019f58

080079cc <Dimension::Equals#55283>:
 80079cc:	b510      	push	{r4, lr}
 80079ce:	4604      	mov	r4, r0
 80079d0:	480a      	ldr	r0, [pc, #40]	; (80079fc <Dimension::Equals#55283+0x30>)
 80079d2:	4a0b      	ldr	r2, [pc, #44]	; (8007a00 <Dimension::Equals#55283+0x34>)
 80079d4:	4478      	add	r0, pc
 80079d6:	4402      	add	r2, r0
 80079d8:	4608      	mov	r0, r1
 80079da:	4611      	mov	r1, r2
 80079dc:	f7f9 f93e 	bl	8000c5c <TypeSystemManager::CastToSealedTypeNoThrow#5593>
 80079e0:	b150      	cbz	r0, 80079f8 <Dimension::Equals#55283+0x2c>
 80079e2:	6801      	ldr	r1, [r0, #0]
 80079e4:	6822      	ldr	r2, [r4, #0]
 80079e6:	428a      	cmp	r2, r1
 80079e8:	d106      	bne.n	80079f8 <Dimension::Equals#55283+0x2c>
 80079ea:	6841      	ldr	r1, [r0, #4]
 80079ec:	6862      	ldr	r2, [r4, #4]
 80079ee:	2000      	movs	r0, #0
 80079f0:	428a      	cmp	r2, r1
 80079f2:	bf08      	it	eq
 80079f4:	2001      	moveq	r0, #1
 80079f6:	bd10      	pop	{r4, pc}
 80079f8:	2000      	movs	r0, #0
 80079fa:	bd10      	pop	{r4, pc}
 80079fc:	17ff9140 	.word	0x17ff9140
 8007a00:	e801a018 	.word	0xe801a018

08007a04 <BaseRepresentation::EqualsThroughEquivalence#15050>:

        public static bool EqualsThroughEquivalence( BaseRepresentation left  ,
                                                     BaseRepresentation right ,
                                                     EquivalenceSet     set   )
        {
            if(Object.ReferenceEquals( left, right ))
 8007a04:	b580      	push	{r7, lr}
 8007a06:	4288      	cmp	r0, r1
 8007a08:	bf02      	ittt	eq
 8007a0a:	2301      	moveq	r3, #1
 8007a0c:	4618      	moveq	r0, r3
 8007a0e:	bd80      	popeq	{r7, pc}
            {
                return true;
            }

            if(left != null && right != null)
 8007a10:	2800      	cmp	r0, #0
 8007a12:	f04f 0300 	mov.w	r3, #0
 8007a16:	bf18      	it	ne
 8007a18:	2900      	cmpne	r1, #0
 8007a1a:	d005      	beq.n	8007a28 <BaseRepresentation::EqualsThroughEquivalence#15050+0x24>
 8007a1c:	b130      	cbz	r0, 8007a2c <BaseRepresentation::EqualsThroughEquivalence#15050+0x28>
 8007a1e:	6843      	ldr	r3, [r0, #4]
            {
                return left.EqualsThroughEquivalence( right, set );
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	4798      	blx	r3
 8007a26:	4603      	mov	r3, r0
 8007a28:	4618      	mov	r0, r3
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	f7f8 fd1c 	bl	8000468 <Thread::ThrowNullException#4411>

08007a30 <BaseRepresentation::ArrayEqualsThroughEquivalence#37209>:
        public static bool ArrayEqualsThroughEquivalence<T>( T[]            s      ,
                                                             T[]            d      ,
                                                             int            offset ,
                                                             int            count  ,
                                                             EquivalenceSet set    ) where T : BaseRepresentation
        {
 8007a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a34:	4606      	mov	r6, r0
 8007a36:	4690      	mov	r8, r2
 8007a38:	460d      	mov	r5, r1
 8007a3a:	b10e      	cbz	r6, 8007a40 <BaseRepresentation::ArrayEqualsThroughEquivalence#37209+0x10>
 8007a3c:	68b7      	ldr	r7, [r6, #8]
 8007a3e:	e000      	b.n	8007a42 <BaseRepresentation::ArrayEqualsThroughEquivalence#37209+0x12>
 8007a40:	2700      	movs	r7, #0
 8007a42:	b10d      	cbz	r5, 8007a48 <BaseRepresentation::ArrayEqualsThroughEquivalence#37209+0x18>
 8007a44:	68a8      	ldr	r0, [r5, #8]
 8007a46:	e000      	b.n	8007a4a <BaseRepresentation::ArrayEqualsThroughEquivalence#37209+0x1a>
 8007a48:	2000      	movs	r0, #0
            int sLen = s != null ? s.Length : 0;
            int dLen = d != null ? d.Length : 0;

            if(count < 0)
            {
                if(sLen != dLen)
 8007a4a:	4287      	cmp	r7, r0
 8007a4c:	d11e      	bne.n	8007a8c <BaseRepresentation::ArrayEqualsThroughEquivalence#37209+0x5c>
                {
                    return false;
                }
            }

            while(count > 0)
 8007a4e:	f106 090c 	add.w	r9, r6, #12
 8007a52:	f105 0a0c 	add.w	sl, r5, #12
 8007a56:	2400      	movs	r4, #0
 8007a58:	e001      	b.n	8007a5e <BaseRepresentation::ArrayEqualsThroughEquivalence#37209+0x2e>
                {
                    return false;
                }

                offset++;
                count--;
 8007a5a:	3f01      	subs	r7, #1
                if(EqualsThroughEquivalence( s[offset], d[offset], set ) == false)
                {
                    return false;
                }

                offset++;
 8007a5c:	3401      	adds	r4, #1
                {
                    return false;
                }
            }

            while(count > 0)
 8007a5e:	2f01      	cmp	r7, #1
 8007a60:	bfbc      	itt	lt
 8007a62:	2001      	movlt	r0, #1
 8007a64:	e8bd 87f0 	ldmialt.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a68:	b19e      	cbz	r6, 8007a92 <BaseRepresentation::ArrayEqualsThroughEquivalence#37209+0x62>
            {
                if(EqualsThroughEquivalence( s[offset], d[offset], set ) == false)
 8007a6a:	68b0      	ldr	r0, [r6, #8]
 8007a6c:	4284      	cmp	r4, r0
 8007a6e:	d212      	bcs.n	8007a96 <BaseRepresentation::ArrayEqualsThroughEquivalence#37209+0x66>
 8007a70:	b17d      	cbz	r5, 8007a92 <BaseRepresentation::ArrayEqualsThroughEquivalence#37209+0x62>
 8007a72:	68a8      	ldr	r0, [r5, #8]
 8007a74:	4284      	cmp	r4, r0
 8007a76:	d20e      	bcs.n	8007a96 <BaseRepresentation::ArrayEqualsThroughEquivalence#37209+0x66>
 8007a78:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
 8007a7c:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8007a80:	4642      	mov	r2, r8
 8007a82:	f7ff ffbf 	bl	8007a04 <BaseRepresentation::EqualsThroughEquivalence#15050>
 8007a86:	f010 0fff 	tst.w	r0, #255	; 0xff
 8007a8a:	d1e6      	bne.n	8007a5a <BaseRepresentation::ArrayEqualsThroughEquivalence#37209+0x2a>
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a92:	f7f8 fce9 	bl	8000468 <Thread::ThrowNullException#4411>
 8007a96:	f7f9 fa0b 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>

08007a9a <CodeMap::ResolveAddressToCodeMap#15087>:
        [NoInline]
        [DisableBoundsChecks]
        public static CodeMap ResolveAddressToCodeMap( UIntPtr                address ,
                                                       CodeMap.ReverseIndex[] table   )
        {
            if(table != null)
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b1d1      	cbz	r1, 8007ad4 <CodeMap::ResolveAddressToCodeMap#15087+0x3a>
 8007a9e:	688a      	ldr	r2, [r1, #8]
 8007aa0:	f04f 0e00 	mov.w	lr, #0

                while(low <= high)
                {
                    int mid = (high + low) / 2;

                    if(AddressMath.IsLessThan( address, table[mid].Address ))
 8007aa4:	f101 0c0c 	add.w	ip, r1, #12
                                                       CodeMap.ReverseIndex[] table   )
        {
            if(table != null)
            {
                int low  = 0;
                int high = table.Length - 2; // The last item is sentinel, so we don't need to check "mid+1 < length".
 8007aa8:	3a02      	subs	r2, #2
 8007aaa:	e000      	b.n	8007aae <CodeMap::ResolveAddressToCodeMap#15087+0x14>
                {
                    int mid = (high + low) / 2;

                    if(AddressMath.IsLessThan( address, table[mid].Address ))
                    {
                        high = mid - 1;
 8007aac:	1e4a      	subs	r2, r1, #1
            if(table != null)
            {
                int low  = 0;
                int high = table.Length - 2; // The last item is sentinel, so we don't need to check "mid+1 < length".

                while(low <= high)
 8007aae:	4596      	cmp	lr, r2
 8007ab0:	dc10      	bgt.n	8007ad4 <CodeMap::ResolveAddressToCodeMap#15087+0x3a>
                {
                    int mid = (high + low) / 2;
 8007ab2:	eb02 010e 	add.w	r1, r2, lr
 8007ab6:	1049      	asrs	r1, r1, #1

                    if(AddressMath.IsLessThan( address, table[mid].Address ))
 8007ab8:	f85c 3031 	ldr.w	r3, [ip, r1, lsl #3]
 8007abc:	4298      	cmp	r0, r3
 8007abe:	d3f5      	bcc.n	8007aac <CodeMap::ResolveAddressToCodeMap#15087+0x12>
                    {
                        high = mid - 1;
                    }
                    else if(AddressMath.IsGreaterThanOrEqual( address, table[mid+1].Address ))
 8007ac0:	f101 0e01 	add.w	lr, r1, #1
 8007ac4:	f85c 303e 	ldr.w	r3, [ip, lr, lsl #3]
 8007ac8:	4298      	cmp	r0, r3
 8007aca:	d2f0      	bcs.n	8007aae <CodeMap::ResolveAddressToCodeMap#15087+0x14>

                while(low <= high)
                {
                    int mid = (high + low) / 2;

                    if(AddressMath.IsLessThan( address, table[mid].Address ))
 8007acc:	eb0c 00c1 	add.w	r0, ip, r1, lsl #3
                    {
                        low = mid + 1;
                    }
                    else
                    {
                        return table[mid].Code;
 8007ad0:	6840      	ldr	r0, [r0, #4]
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <Range::Match#16491>:
                return AddressMath.IsInRange( address, this.Start, this.End );
            }

            public CodePointer Match( UIntPtr address   ,
                                      VTable  exception )
            {
 8007ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ada:	b081      	sub	sp, #4
 8007adc:	4605      	mov	r5, r0
 8007ade:	4614      	mov	r4, r2
 8007ae0:	460a      	mov	r2, r1
 8007ae2:	e9d5 0100 	ldrd	r0, r1, [r5]
                if(Contains( address ))
 8007ae6:	f000 fc31 	bl	800834c <Range::Contains#16489>
 8007aea:	f010 0fff 	tst.w	r0, #255	; 0xff
 8007aee:	d021      	beq.n	8007b34 <Range::Match#16491+0x5c>
                {
                    Handler[] handlers = this.Handlers;
 8007af0:	68ae      	ldr	r6, [r5, #8]
 8007af2:	2700      	movs	r7, #0

                    for(int i = 0; i < handlers.Length; i++)
 8007af4:	f106 050c 	add.w	r5, r6, #12
 8007af8:	e001      	b.n	8007afe <Range::Match#16491+0x26>
 8007afa:	3508      	adds	r5, #8
 8007afc:	3701      	adds	r7, #1
 8007afe:	b1e6      	cbz	r6, 8007b3a <Range::Match#16491+0x62>
 8007b00:	68b0      	ldr	r0, [r6, #8]
 8007b02:	4287      	cmp	r7, r0
 8007b04:	da16      	bge.n	8007b34 <Range::Match#16491+0x5c>
                    {
                        VTable filter = handlers[i].Filter;
 8007b06:	68b0      	ldr	r0, [r6, #8]
 8007b08:	4287      	cmp	r7, r0
 8007b0a:	d211      	bcs.n	8007b30 <Range::Match#16491+0x58>
 8007b0c:	6828      	ldr	r0, [r5, #0]
 8007b0e:	b148      	cbz	r0, 8007b24 <Range::Match#16491+0x4c>
 8007b10:	42a0      	cmp	r0, r4
 8007b12:	d003      	beq.n	8007b1c <Range::Match#16491+0x44>
 8007b14:	4621      	mov	r1, r4
 8007b16:	f7fb fdaf 	bl	8003678 <VTable::CanBeAssignedFrom_Slow#4054>
 8007b1a:	e000      	b.n	8007b1e <Range::Match#16491+0x46>
 8007b1c:	2001      	movs	r0, #1

                        if(filter == null || filter.CanBeAssignedFrom( exception ))
 8007b1e:	f010 0fff 	tst.w	r0, #255	; 0xff
 8007b22:	d0ea      	beq.n	8007afa <Range::Match#16491+0x22>
                        {
                            return handlers[i].HandlerCode;
 8007b24:	68b0      	ldr	r0, [r6, #8]
 8007b26:	4287      	cmp	r7, r0
 8007b28:	bf3e      	ittt	cc
 8007b2a:	6868      	ldrcc	r0, [r5, #4]
 8007b2c:	b001      	addcc	sp, #4
 8007b2e:	bdf0      	popcc	{r4, r5, r6, r7, pc}
                {
                    Handler[] handlers = this.Handlers;

                    for(int i = 0; i < handlers.Length; i++)
                    {
                        VTable filter = handlers[i].Filter;
 8007b30:	f7f9 f9be 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 8007b34:	2000      	movs	r0, #0
 8007b36:	b001      	add	sp, #4
 8007b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
            {
                if(Contains( address ))
                {
                    Handler[] handlers = this.Handlers;

                    for(int i = 0; i < handlers.Length; i++)
 8007b3a:	f7f8 fc95 	bl	8000468 <Thread::ThrowNullException#4411>
 8007b3e:	46c0      	nop			; (mov r8, r8)

08007b40 <AbstractReferenceTypeRepresentation::ToString#15902>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 8007b40:	b570      	push	{r4, r5, r6, lr}
 8007b42:	4e13      	ldr	r6, [pc, #76]	; (8007b90 <AbstractReferenceTypeRepresentation::ToString#15902+0x50>)
 8007b44:	4605      	mov	r5, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "AbstractReferenceTypeRepresentation(" );
 8007b46:	4813      	ldr	r0, [pc, #76]	; (8007b94 <AbstractReferenceTypeRepresentation::ToString#15902+0x54>)
 8007b48:	4913      	ldr	r1, [pc, #76]	; (8007b98 <AbstractReferenceTypeRepresentation::ToString#15902+0x58>)
 8007b4a:	447e      	add	r6, pc
 8007b4c:	4430      	add	r0, r6
 8007b4e:	4431      	add	r1, r6
 8007b50:	f7f8 fea0 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8007b54:	4604      	mov	r4, r0
 8007b56:	4811      	ldr	r0, [pc, #68]	; (8007b9c <AbstractReferenceTypeRepresentation::ToString#15902+0x5c>)
 8007b58:	2210      	movs	r2, #16
 8007b5a:	1981      	adds	r1, r0, r6
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f7ff fa78 	bl	8007052 <StringBuilder::.ctor#9221>
 8007b62:	b195      	cbz	r5, 8007b8a <AbstractReferenceTypeRepresentation::ToString#15902+0x4a>
 8007b64:	6868      	ldr	r0, [r5, #4]

            PrettyToString( sb, true, false );
 8007b66:	4621      	mov	r1, r4
 8007b68:	2201      	movs	r2, #1
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	69c0      	ldr	r0, [r0, #28]
 8007b6e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8007b70:	4628      	mov	r0, r5
 8007b72:	47b0      	blx	r6
 8007b74:	480a      	ldr	r0, [pc, #40]	; (8007ba0 <AbstractReferenceTypeRepresentation::ToString#15902+0x60>)

            sb.Append( ")" );
 8007b76:	490b      	ldr	r1, [pc, #44]	; (8007ba4 <AbstractReferenceTypeRepresentation::ToString#15902+0x64>)
 8007b78:	4478      	add	r0, pc
 8007b7a:	4401      	add	r1, r0
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	f7fe fc05 	bl	800638c <StringBuilder::Append#9238>

            return sb.ToString();
 8007b82:	4620      	mov	r0, r4
 8007b84:	f7fa f816 	bl	8001bb4 <StringBuilder::ToString#9230>
 8007b88:	bd70      	pop	{r4, r5, r6, pc}
        // Debug Methods
        //

        public override String ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "AbstractReferenceTypeRepresentation(" );
 8007b8a:	f7f8 fc6d 	bl	8000468 <Thread::ThrowNullException#4411>
 8007b8e:	46c0      	nop			; (mov r8, r8)
 8007b90:	17ff8fca 	.word	0x17ff8fca
 8007b94:	fffffe0c 	.word	0xfffffe0c
 8007b98:	e8019718 	.word	0xe8019718
 8007b9c:	e8011d78 	.word	0xe8011d78
 8007ba0:	17ff8f9c 	.word	0x17ff8f9c
 8007ba4:	e8011d38 	.word	0xe8011d38

08007ba8 <TypeRepresentation::get_IsOpenType#16184>:

        public virtual bool IsOpenType
        {
            get
            {
                if(m_genericContext != null)
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	6a01      	ldr	r1, [r0, #32]
 8007bac:	2900      	cmp	r1, #0
 8007bae:	bf04      	itt	eq
 8007bb0:	2000      	moveq	r0, #0
 8007bb2:	bd80      	popeq	{r7, pc}
                {
                    return m_genericContext.IsOpenType;
 8007bb4:	6a00      	ldr	r0, [r0, #32]
 8007bb6:	b110      	cbz	r0, 8007bbe <TypeRepresentation::get_IsOpenType#16184+0x16>
 8007bb8:	f000 fab4 	bl	8008124 <GenericContext::get_IsOpenType#16743>
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	f7f8 fc53 	bl	8000468 <Thread::ThrowNullException#4411>

08007bc2 <TypeRepresentation::get_IsDelayedType#16185>:

        public virtual bool IsDelayedType
        {
            get
            {
                if(m_genericContext != null)
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	6a01      	ldr	r1, [r0, #32]
 8007bc6:	2900      	cmp	r1, #0
 8007bc8:	bf04      	itt	eq
 8007bca:	2000      	moveq	r0, #0
 8007bcc:	bd80      	popeq	{r7, pc}
                {
                    return m_genericContext.IsDelayedType;
 8007bce:	6a00      	ldr	r0, [r0, #32]
 8007bd0:	b118      	cbz	r0, 8007bda <TypeRepresentation::get_IsDelayedType#16185+0x18>
 8007bd2:	6880      	ldr	r0, [r0, #8]
 8007bd4:	f000 fad0 	bl	8008178 <GenericContext::get_IsDelayedType#16744>
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	f7f8 fc45 	bl	8000468 <Thread::ThrowNullException#4411>
 8007bde:	46c0      	nop			; (mov r8, r8)

08007be0 <BoxedValueTypeRepresentation::EqualsThroughEquivalence#15917>:
        // MetaDataEquality Methods
        //

        public override bool EqualsThroughEquivalence( object         obj ,
                                                       EquivalenceSet set )
        {
 8007be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007be2:	b081      	sub	sp, #4
 8007be4:	4605      	mov	r5, r0
 8007be6:	480f      	ldr	r0, [pc, #60]	; (8007c24 <BoxedValueTypeRepresentation::EqualsThroughEquivalence#15917+0x44>)
            if(obj is BoxedValueTypeRepresentation)
 8007be8:	4f0f      	ldr	r7, [pc, #60]	; (8007c28 <BoxedValueTypeRepresentation::EqualsThroughEquivalence#15917+0x48>)
 8007bea:	460e      	mov	r6, r1
 8007bec:	4614      	mov	r4, r2
 8007bee:	4478      	add	r0, pc
 8007bf0:	1839      	adds	r1, r7, r0
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f7f9 f832 	bl	8000c5c <TypeSystemManager::CastToSealedTypeNoThrow#5593>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	bf02      	ittt	eq
 8007bfc:	2000      	moveq	r0, #0
 8007bfe:	b001      	addeq	sp, #4
 8007c00:	bdf0      	popeq	{r4, r5, r6, r7, pc}
 8007c02:	480a      	ldr	r0, [pc, #40]	; (8007c2c <BoxedValueTypeRepresentation::EqualsThroughEquivalence#15917+0x4c>)
 8007c04:	4478      	add	r0, pc
            {
                BoxedValueTypeRepresentation other = (BoxedValueTypeRepresentation)obj;
 8007c06:	1839      	adds	r1, r7, r0
 8007c08:	4630      	mov	r0, r6
 8007c0a:	f7f9 f933 	bl	8000e74 <TypeSystemManager::CastToSealedType#5592>

                return EqualsThroughEquivalence( m_valueType, other.m_valueType, set );
 8007c0e:	b138      	cbz	r0, 8007c20 <BoxedValueTypeRepresentation::EqualsThroughEquivalence#15917+0x40>
 8007c10:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8007c12:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007c14:	4610      	mov	r0, r2
 8007c16:	4622      	mov	r2, r4
 8007c18:	f7ff fef4 	bl	8007a04 <BaseRepresentation::EqualsThroughEquivalence#15050>
 8007c1c:	b001      	add	sp, #4
 8007c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c20:	f7f8 fc22 	bl	8000468 <Thread::ThrowNullException#4411>
 8007c24:	17ff8f26 	.word	0x17ff8f26
 8007c28:	e8019f88 	.word	0xe8019f88
 8007c2c:	17ff8f10 	.word	0x17ff8f10

08007c30 <BoxedValueTypeRepresentation::ToString#15930>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	4e0f      	ldr	r6, [pc, #60]	; (8007c70 <BoxedValueTypeRepresentation::ToString#15930+0x40>)
 8007c34:	4604      	mov	r4, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "BoxedValueTypeRepresentation(" );
 8007c36:	480f      	ldr	r0, [pc, #60]	; (8007c74 <BoxedValueTypeRepresentation::ToString#15930+0x44>)
 8007c38:	490f      	ldr	r1, [pc, #60]	; (8007c78 <BoxedValueTypeRepresentation::ToString#15930+0x48>)
 8007c3a:	447e      	add	r6, pc
 8007c3c:	4430      	add	r0, r6
 8007c3e:	4431      	add	r1, r6
 8007c40:	f7f8 fe28 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8007c44:	4605      	mov	r5, r0
 8007c46:	480d      	ldr	r0, [pc, #52]	; (8007c7c <BoxedValueTypeRepresentation::ToString#15930+0x4c>)
 8007c48:	2210      	movs	r2, #16
 8007c4a:	1981      	adds	r1, r0, r6
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	f7ff fa00 	bl	8007052 <StringBuilder::.ctor#9221>

            PrettyToString( sb, true, false );
 8007c52:	4620      	mov	r0, r4
 8007c54:	4629      	mov	r1, r5
 8007c56:	2201      	movs	r2, #1
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f000 f841 	bl	8007ce0 <BoxedValueTypeRepresentation::PrettyToString#15931>

            sb.Append( ")" );
 8007c5e:	4808      	ldr	r0, [pc, #32]	; (8007c80 <BoxedValueTypeRepresentation::ToString#15930+0x50>)
 8007c60:	1981      	adds	r1, r0, r6
 8007c62:	4628      	mov	r0, r5
 8007c64:	f7fe fb92 	bl	800638c <StringBuilder::Append#9238>

            return sb.ToString();
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f7f9 ffa3 	bl	8001bb4 <StringBuilder::ToString#9230>
 8007c6e:	bd70      	pop	{r4, r5, r6, pc}
 8007c70:	17ff8eda 	.word	0x17ff8eda
 8007c74:	fffffe0c 	.word	0xfffffe0c
 8007c78:	e8019718 	.word	0xe8019718
 8007c7c:	e8011dd8 	.word	0xe8011dd8
 8007c80:	e8011d38 	.word	0xe8011d38

08007c84 <BoxedValueTypeRepresentation::Equals#15918>:
            return false;
        }

        public override bool Equals( object obj )
        {
            return this.EqualsThroughEquivalence( obj, null );
 8007c84:	b580      	push	{r7, lr}
 8007c86:	2200      	movs	r2, #0
 8007c88:	f7ff ffaa 	bl	8007be0 <BoxedValueTypeRepresentation::EqualsThroughEquivalence#15917>
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <BoxedValueTypeRepresentation::GetHashCode#15919>:
        }

        public override int GetHashCode()
        {
            return m_valueType.GetHashCode();
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007c92:	2800      	cmp	r0, #0
 8007c94:	d005      	beq.n	8007ca2 <BoxedValueTypeRepresentation::GetHashCode#15919+0x14>
 8007c96:	d004      	beq.n	8007ca2 <BoxedValueTypeRepresentation::GetHashCode#15919+0x14>
 8007c98:	6841      	ldr	r1, [r0, #4]
 8007c9a:	69c9      	ldr	r1, [r1, #28]
 8007c9c:	6949      	ldr	r1, [r1, #20]
 8007c9e:	4788      	blx	r1
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	f7f8 fbe1 	bl	8000468 <Thread::ThrowNullException#4411>

08007ca6 <BoxedValueTypeRepresentation::get_ContainedType#15924>:

        public override TypeRepresentation ContainedType
        {
            get
            {
                return m_valueType;
 8007ca6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007ca8:	4770      	bx	lr

08007caa <BoxedValueTypeRepresentation::get_UnderlyingType#15925>:

        public override TypeRepresentation UnderlyingType
        {
            get
            {
                return m_valueType;
 8007caa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007cac:	4770      	bx	lr

08007cae <BoxedValueTypeRepresentation::get_IsOpenType#15926>:

        public override bool IsOpenType
        {
            get
            {
                return m_valueType.IsOpenType;
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d005      	beq.n	8007cc2 <BoxedValueTypeRepresentation::get_IsOpenType#15926+0x14>
 8007cb6:	d004      	beq.n	8007cc2 <BoxedValueTypeRepresentation::get_IsOpenType#15926+0x14>
 8007cb8:	6841      	ldr	r1, [r0, #4]
 8007cba:	69c9      	ldr	r1, [r1, #28]
 8007cbc:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8007cbe:	4788      	blx	r1
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	f7f8 fbd1 	bl	8000468 <Thread::ThrowNullException#4411>

08007cc6 <BoxedValueTypeRepresentation::get_IsDelayedType#15927>:

        public override bool IsDelayedType
        {
            get
            {
                return m_valueType.IsDelayedType;
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d005      	beq.n	8007cda <BoxedValueTypeRepresentation::get_IsDelayedType#15927+0x14>
 8007cce:	d004      	beq.n	8007cda <BoxedValueTypeRepresentation::get_IsDelayedType#15927+0x14>
 8007cd0:	6841      	ldr	r1, [r0, #4]
 8007cd2:	69c9      	ldr	r1, [r1, #28]
 8007cd4:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8007cd6:	4788      	blx	r1
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	f7f8 fbc5 	bl	8000468 <Thread::ThrowNullException#4411>
 8007cde:	46c0      	nop			; (mov r8, r8)

08007ce0 <BoxedValueTypeRepresentation::PrettyToString#15931>:
        }

        internal override void PrettyToString( System.Text.StringBuilder sb                 ,
                                               bool                      fPrefix            ,
                                               bool                      fWithAbbreviations )
        {
 8007ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ce2:	b081      	sub	sp, #4
 8007ce4:	460e      	mov	r6, r1
 8007ce6:	461c      	mov	r4, r3
 8007ce8:	4615      	mov	r5, r2
 8007cea:	4607      	mov	r7, r0
 8007cec:	b19e      	cbz	r6, 8007d16 <BoxedValueTypeRepresentation::PrettyToString#15931+0x36>
 8007cee:	480b      	ldr	r0, [pc, #44]	; (8007d1c <BoxedValueTypeRepresentation::PrettyToString#15931+0x3c>)
            sb.Append( "boxed " );
 8007cf0:	490b      	ldr	r1, [pc, #44]	; (8007d20 <BoxedValueTypeRepresentation::PrettyToString#15931+0x40>)
 8007cf2:	4478      	add	r0, pc
 8007cf4:	4401      	add	r1, r0
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f7fe fb48 	bl	800638c <StringBuilder::Append#9238>

            m_valueType.PrettyToString( sb, fPrefix, fWithAbbreviations );
 8007cfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d009      	beq.n	8007d16 <BoxedValueTypeRepresentation::PrettyToString#15931+0x36>
 8007d02:	d008      	beq.n	8007d16 <BoxedValueTypeRepresentation::PrettyToString#15931+0x36>
 8007d04:	6841      	ldr	r1, [r0, #4]
 8007d06:	462a      	mov	r2, r5
 8007d08:	4623      	mov	r3, r4
 8007d0a:	69c9      	ldr	r1, [r1, #28]
 8007d0c:	6acf      	ldr	r7, [r1, #44]	; 0x2c
 8007d0e:	4631      	mov	r1, r6
 8007d10:	47b8      	blx	r7
 8007d12:	b001      	add	sp, #4
 8007d14:	bdf0      	pop	{r4, r5, r6, r7, pc}

        internal override void PrettyToString( System.Text.StringBuilder sb                 ,
                                               bool                      fPrefix            ,
                                               bool                      fWithAbbreviations )
        {
            sb.Append( "boxed " );
 8007d16:	f7f8 fba7 	bl	8000468 <Thread::ThrowNullException#4411>
 8007d1a:	46c0      	nop			; (mov r8, r8)
 8007d1c:	17ff8e22 	.word	0x17ff8e22
 8007d20:	e8011e28 	.word	0xe8011e28

08007d24 <ConcreteReferenceTypeRepresentation::ToString#15934>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 8007d24:	b570      	push	{r4, r5, r6, lr}
 8007d26:	4e0f      	ldr	r6, [pc, #60]	; (8007d64 <ConcreteReferenceTypeRepresentation::ToString#15934+0x40>)
 8007d28:	4604      	mov	r4, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "ConcreteReferenceTypeRepresentation(" );
 8007d2a:	480f      	ldr	r0, [pc, #60]	; (8007d68 <ConcreteReferenceTypeRepresentation::ToString#15934+0x44>)
 8007d2c:	490f      	ldr	r1, [pc, #60]	; (8007d6c <ConcreteReferenceTypeRepresentation::ToString#15934+0x48>)
 8007d2e:	447e      	add	r6, pc
 8007d30:	4430      	add	r0, r6
 8007d32:	4431      	add	r1, r6
 8007d34:	f7f8 fdae 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8007d38:	4605      	mov	r5, r0
 8007d3a:	480d      	ldr	r0, [pc, #52]	; (8007d70 <ConcreteReferenceTypeRepresentation::ToString#15934+0x4c>)
 8007d3c:	2210      	movs	r2, #16
 8007d3e:	1981      	adds	r1, r0, r6
 8007d40:	4628      	mov	r0, r5
 8007d42:	f7ff f986 	bl	8007052 <StringBuilder::.ctor#9221>

            PrettyToString( sb, true, false );
 8007d46:	4620      	mov	r0, r4
 8007d48:	4629      	mov	r1, r5
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f7fb fd4f 	bl	80037f0 <TypeRepresentation::PrettyToString#16200>

            sb.Append( ")" );
 8007d52:	4808      	ldr	r0, [pc, #32]	; (8007d74 <ConcreteReferenceTypeRepresentation::ToString#15934+0x50>)
 8007d54:	1981      	adds	r1, r0, r6
 8007d56:	4628      	mov	r0, r5
 8007d58:	f7fe fb18 	bl	800638c <StringBuilder::Append#9238>

            return sb.ToString();
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	f7f9 ff29 	bl	8001bb4 <StringBuilder::ToString#9230>
 8007d62:	bd70      	pop	{r4, r5, r6, pc}
 8007d64:	17ff8de6 	.word	0x17ff8de6
 8007d68:	fffffe0c 	.word	0xfffffe0c
 8007d6c:	e8019718 	.word	0xe8019718
 8007d70:	e8011e48 	.word	0xe8011e48
 8007d74:	e8011d38 	.word	0xe8011d38

08007d78 <EnumerationTypeRepresentation::get_UnderlyingType#15984>:

        public override TypeRepresentation UnderlyingType
        {
            get
            {
                return m_underlyingType;
 8007d78:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007d7a:	4770      	bx	lr

08007d7c <EnumerationTypeRepresentation::ToString#15988>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	4e0f      	ldr	r6, [pc, #60]	; (8007dbc <EnumerationTypeRepresentation::ToString#15988+0x40>)
 8007d80:	4604      	mov	r4, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "EnumerationTypeRepresentation(" );
 8007d82:	480f      	ldr	r0, [pc, #60]	; (8007dc0 <EnumerationTypeRepresentation::ToString#15988+0x44>)
 8007d84:	490f      	ldr	r1, [pc, #60]	; (8007dc4 <EnumerationTypeRepresentation::ToString#15988+0x48>)
 8007d86:	447e      	add	r6, pc
 8007d88:	4430      	add	r0, r6
 8007d8a:	4431      	add	r1, r6
 8007d8c:	f7f8 fd82 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8007d90:	4605      	mov	r5, r0
 8007d92:	480d      	ldr	r0, [pc, #52]	; (8007dc8 <EnumerationTypeRepresentation::ToString#15988+0x4c>)
 8007d94:	2210      	movs	r2, #16
 8007d96:	1981      	adds	r1, r0, r6
 8007d98:	4628      	mov	r0, r5
 8007d9a:	f7ff f95a 	bl	8007052 <StringBuilder::.ctor#9221>

            PrettyToString( sb, true, false );
 8007d9e:	4620      	mov	r0, r4
 8007da0:	4629      	mov	r1, r5
 8007da2:	2201      	movs	r2, #1
 8007da4:	2300      	movs	r3, #0
 8007da6:	f7fb fd23 	bl	80037f0 <TypeRepresentation::PrettyToString#16200>

            sb.Append( ")" );
 8007daa:	4808      	ldr	r0, [pc, #32]	; (8007dcc <EnumerationTypeRepresentation::ToString#15988+0x50>)
 8007dac:	1981      	adds	r1, r0, r6
 8007dae:	4628      	mov	r0, r5
 8007db0:	f7fe faec 	bl	800638c <StringBuilder::Append#9238>

            return sb.ToString();
 8007db4:	4628      	mov	r0, r5
 8007db6:	f7f9 fefd 	bl	8001bb4 <StringBuilder::ToString#9230>
 8007dba:	bd70      	pop	{r4, r5, r6, pc}
 8007dbc:	17ff8d8e 	.word	0x17ff8d8e
 8007dc0:	fffffe0c 	.word	0xfffffe0c
 8007dc4:	e8019718 	.word	0xe8019718
 8007dc8:	e8011ea8 	.word	0xe8011ea8
 8007dcc:	e8011d38 	.word	0xe8011d38

08007dd0 <InterfaceTypeRepresentation::ToString#15994>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 8007dd0:	b570      	push	{r4, r5, r6, lr}
 8007dd2:	4e0f      	ldr	r6, [pc, #60]	; (8007e10 <InterfaceTypeRepresentation::ToString#15994+0x40>)
 8007dd4:	4604      	mov	r4, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "InterfaceTypeRepresentation(" );
 8007dd6:	480f      	ldr	r0, [pc, #60]	; (8007e14 <InterfaceTypeRepresentation::ToString#15994+0x44>)
 8007dd8:	490f      	ldr	r1, [pc, #60]	; (8007e18 <InterfaceTypeRepresentation::ToString#15994+0x48>)
 8007dda:	447e      	add	r6, pc
 8007ddc:	4430      	add	r0, r6
 8007dde:	4431      	add	r1, r6
 8007de0:	f7f8 fd58 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8007de4:	4605      	mov	r5, r0
 8007de6:	480d      	ldr	r0, [pc, #52]	; (8007e1c <InterfaceTypeRepresentation::ToString#15994+0x4c>)
 8007de8:	2210      	movs	r2, #16
 8007dea:	1981      	adds	r1, r0, r6
 8007dec:	4628      	mov	r0, r5
 8007dee:	f7ff f930 	bl	8007052 <StringBuilder::.ctor#9221>

            PrettyToString( sb, true, false );
 8007df2:	4620      	mov	r0, r4
 8007df4:	4629      	mov	r1, r5
 8007df6:	2201      	movs	r2, #1
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f7fb fcf9 	bl	80037f0 <TypeRepresentation::PrettyToString#16200>

            sb.Append( ")" );
 8007dfe:	4808      	ldr	r0, [pc, #32]	; (8007e20 <InterfaceTypeRepresentation::ToString#15994+0x50>)
 8007e00:	1981      	adds	r1, r0, r6
 8007e02:	4628      	mov	r0, r5
 8007e04:	f7fe fac2 	bl	800638c <StringBuilder::Append#9238>

            return sb.ToString();
 8007e08:	4628      	mov	r0, r5
 8007e0a:	f7f9 fed3 	bl	8001bb4 <StringBuilder::ToString#9230>
 8007e0e:	bd70      	pop	{r4, r5, r6, pc}
 8007e10:	17ff8d3a 	.word	0x17ff8d3a
 8007e14:	fffffe0c 	.word	0xfffffe0c
 8007e18:	e8019718 	.word	0xe8019718
 8007e1c:	e8011ef8 	.word	0xe8011ef8
 8007e20:	e8011d38 	.word	0xe8011d38

08007e24 <ManagedPointerTypeRepresentation::ToString#15999>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 8007e24:	b570      	push	{r4, r5, r6, lr}
 8007e26:	4e0f      	ldr	r6, [pc, #60]	; (8007e64 <ManagedPointerTypeRepresentation::ToString#15999+0x40>)
 8007e28:	4604      	mov	r4, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "ManagedPointerTypeRepresentation(" );
 8007e2a:	480f      	ldr	r0, [pc, #60]	; (8007e68 <ManagedPointerTypeRepresentation::ToString#15999+0x44>)
 8007e2c:	490f      	ldr	r1, [pc, #60]	; (8007e6c <ManagedPointerTypeRepresentation::ToString#15999+0x48>)
 8007e2e:	447e      	add	r6, pc
 8007e30:	4430      	add	r0, r6
 8007e32:	4431      	add	r1, r6
 8007e34:	f7f8 fd2e 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8007e38:	4605      	mov	r5, r0
 8007e3a:	480d      	ldr	r0, [pc, #52]	; (8007e70 <ManagedPointerTypeRepresentation::ToString#15999+0x4c>)
 8007e3c:	2210      	movs	r2, #16
 8007e3e:	1981      	adds	r1, r0, r6
 8007e40:	4628      	mov	r0, r5
 8007e42:	f7ff f906 	bl	8007052 <StringBuilder::.ctor#9221>

            PrettyToString( sb, true, false );
 8007e46:	4620      	mov	r0, r4
 8007e48:	4629      	mov	r1, r5
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	f000 f813 	bl	8007e78 <ManagedPointerTypeRepresentation::PrettyToString#16000>

            sb.Append( ")" );
 8007e52:	4808      	ldr	r0, [pc, #32]	; (8007e74 <ManagedPointerTypeRepresentation::ToString#15999+0x50>)
 8007e54:	1981      	adds	r1, r0, r6
 8007e56:	4628      	mov	r0, r5
 8007e58:	f7fe fa98 	bl	800638c <StringBuilder::Append#9238>

            return sb.ToString();
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	f7f9 fea9 	bl	8001bb4 <StringBuilder::ToString#9230>
 8007e62:	bd70      	pop	{r4, r5, r6, pc}
 8007e64:	17ff8ce6 	.word	0x17ff8ce6
 8007e68:	fffffe0c 	.word	0xfffffe0c
 8007e6c:	e8019718 	.word	0xe8019718
 8007e70:	e8011f48 	.word	0xe8011f48
 8007e74:	e8011d38 	.word	0xe8011d38

08007e78 <ManagedPointerTypeRepresentation::PrettyToString#16000>:
        }

        internal override void PrettyToString( System.Text.StringBuilder sb                 ,
                                               bool                      fPrefix            ,
                                               bool                      fWithAbbreviations )
        {
 8007e78:	b510      	push	{r4, lr}
 8007e7a:	460c      	mov	r4, r1
            base.PrettyToString( sb, fPrefix, fWithAbbreviations );
 8007e7c:	f000 f810 	bl	8007ea0 <PointerTypeRepresentation::PrettyToString#16036>

            sb.Append( "&" );
 8007e80:	b13c      	cbz	r4, 8007e92 <ManagedPointerTypeRepresentation::PrettyToString#16000+0x1a>
 8007e82:	4805      	ldr	r0, [pc, #20]	; (8007e98 <ManagedPointerTypeRepresentation::PrettyToString#16000+0x20>)
 8007e84:	4905      	ldr	r1, [pc, #20]	; (8007e9c <ManagedPointerTypeRepresentation::PrettyToString#16000+0x24>)
 8007e86:	4478      	add	r0, pc
 8007e88:	4401      	add	r1, r0
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f7fe fa7e 	bl	800638c <StringBuilder::Append#9238>
 8007e90:	bd10      	pop	{r4, pc}
 8007e92:	f7f8 fae9 	bl	8000468 <Thread::ThrowNullException#4411>
 8007e96:	46c0      	nop			; (mov r8, r8)
 8007e98:	17ff8c8e 	.word	0x17ff8c8e
 8007e9c:	e8011fa8 	.word	0xe8011fa8

08007ea0 <PointerTypeRepresentation::PrettyToString#16036>:

        internal override void PrettyToString( System.Text.StringBuilder sb                 ,
                                               bool                      fPrefix            ,
                                               bool                      fWithAbbreviations )
        {
            m_pointerType.PrettyToString( sb, fPrefix, fWithAbbreviations );
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d008      	beq.n	8007eba <PointerTypeRepresentation::PrettyToString#16036+0x1a>
 8007ea8:	d007      	beq.n	8007eba <PointerTypeRepresentation::PrettyToString#16036+0x1a>
 8007eaa:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8007eae:	f8dc c01c 	ldr.w	ip, [ip, #28]
 8007eb2:	f8dc c02c 	ldr.w	ip, [ip, #44]	; 0x2c
 8007eb6:	47e0      	blx	ip
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	f7f8 fad5 	bl	8000468 <Thread::ThrowNullException#4411>
 8007ebe:	46c0      	nop			; (mov r8, r8)

08007ec0 <PointerTypeRepresentation::EqualsThroughEquivalence#16020>:
        // MetaDataEquality Methods
        //

        public override bool EqualsThroughEquivalence( object         obj ,
                                                       EquivalenceSet set )
        {
 8007ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ec2:	b081      	sub	sp, #4
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	4818      	ldr	r0, [pc, #96]	; (8007f28 <PointerTypeRepresentation::EqualsThroughEquivalence#16020+0x68>)
            if(obj is PointerTypeRepresentation)
 8007ec8:	4f18      	ldr	r7, [pc, #96]	; (8007f2c <PointerTypeRepresentation::EqualsThroughEquivalence#16020+0x6c>)
 8007eca:	460e      	mov	r6, r1
 8007ecc:	4615      	mov	r5, r2
 8007ece:	4478      	add	r0, pc
 8007ed0:	1839      	adds	r1, r7, r0
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f7f9 f8a7 	bl	8001026 <TypeSystemManager::CastToTypeNoThrow#5591>
 8007ed8:	b300      	cbz	r0, 8007f1c <PointerTypeRepresentation::EqualsThroughEquivalence#16020+0x5c>
 8007eda:	4815      	ldr	r0, [pc, #84]	; (8007f30 <PointerTypeRepresentation::EqualsThroughEquivalence#16020+0x70>)
 8007edc:	4478      	add	r0, pc
            {
                PointerTypeRepresentation other = (PointerTypeRepresentation)obj;
 8007ede:	1839      	adds	r1, r7, r0
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f7fb fd7d 	bl	80039e0 <TypeSystemManager::CastToType#5590>
 8007ee6:	4606      	mov	r6, r0

                if(EqualsThroughEquivalence( m_pointerType, other.m_pointerType, set ))
 8007ee8:	b1de      	cbz	r6, 8007f22 <PointerTypeRepresentation::EqualsThroughEquivalence#16020+0x62>
 8007eea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007eec:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8007eee:	462a      	mov	r2, r5
 8007ef0:	f7ff fd88 	bl	8007a04 <BaseRepresentation::EqualsThroughEquivalence#15050>
 8007ef4:	f010 0fff 	tst.w	r0, #255	; 0xff
 8007ef8:	d010      	beq.n	8007f1c <PointerTypeRepresentation::EqualsThroughEquivalence#16020+0x5c>
                {
                    if(this.GetType() == other.GetType())
 8007efa:	4620      	mov	r0, r4
 8007efc:	f7f9 fbb2 	bl	8001664 <Object::GetType#4192>
 8007f00:	4604      	mov	r4, r0
 8007f02:	4630      	mov	r0, r6
 8007f04:	f7f9 fbae 	bl	8001664 <Object::GetType#4192>
 8007f08:	4601      	mov	r1, r0
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f7ff f827 	bl	8006f5e <Type::op_Equality#8267>
 8007f10:	b2c0      	uxtb	r0, r0
 8007f12:	2800      	cmp	r0, #0
 8007f14:	bf18      	it	ne
 8007f16:	2001      	movne	r0, #1
 8007f18:	b001      	add	sp, #4
 8007f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	b001      	add	sp, #4
 8007f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
        {
            if(obj is PointerTypeRepresentation)
            {
                PointerTypeRepresentation other = (PointerTypeRepresentation)obj;

                if(EqualsThroughEquivalence( m_pointerType, other.m_pointerType, set ))
 8007f22:	f7f8 faa1 	bl	8000468 <Thread::ThrowNullException#4411>
 8007f26:	46c0      	nop			; (mov r8, r8)
 8007f28:	17ff8c46 	.word	0x17ff8c46
 8007f2c:	e8019fb8 	.word	0xe8019fb8
 8007f30:	17ff8c38 	.word	0x17ff8c38

08007f34 <PointerTypeRepresentation::Equals#16021>:

            return false;
        }

        public override bool Equals( object obj )
        {
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b128      	cbz	r0, 8007f44 <PointerTypeRepresentation::Equals#16021+0x10>
 8007f38:	6842      	ldr	r2, [r0, #4]
            return this.EqualsThroughEquivalence( obj, null );
 8007f3a:	69d2      	ldr	r2, [r2, #28]
 8007f3c:	6993      	ldr	r3, [r2, #24]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	4798      	blx	r3
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	f7f8 fa90 	bl	8000468 <Thread::ThrowNullException#4411>

08007f48 <PointerTypeRepresentation::GetHashCode#16022>:
        }

        public override int GetHashCode()
        {
            return m_pointerType.GetHashCode();
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d005      	beq.n	8007f5c <PointerTypeRepresentation::GetHashCode#16022+0x14>
 8007f50:	d004      	beq.n	8007f5c <PointerTypeRepresentation::GetHashCode#16022+0x14>
 8007f52:	6841      	ldr	r1, [r0, #4]
 8007f54:	69c9      	ldr	r1, [r1, #28]
 8007f56:	6949      	ldr	r1, [r1, #20]
 8007f58:	4788      	blx	r1
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	f7f8 fa84 	bl	8000468 <Thread::ThrowNullException#4411>

08007f60 <PointerTypeRepresentation::get_ContainedType#16028>:

        public override TypeRepresentation ContainedType
        {
            get
            {
                return m_pointerType;
 8007f60:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007f62:	4770      	bx	lr

08007f64 <PointerTypeRepresentation::get_UnderlyingType#16029>:

        public override TypeRepresentation UnderlyingType
        {
            get
            {
                return m_pointerType;
 8007f64:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007f66:	4770      	bx	lr

08007f68 <PointerTypeRepresentation::get_IsOpenType#16030>:

        public override bool IsOpenType
        {
            get
            {
                return m_pointerType.IsOpenType;
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d005      	beq.n	8007f7c <PointerTypeRepresentation::get_IsOpenType#16030+0x14>
 8007f70:	d004      	beq.n	8007f7c <PointerTypeRepresentation::get_IsOpenType#16030+0x14>
 8007f72:	6841      	ldr	r1, [r0, #4]
 8007f74:	69c9      	ldr	r1, [r1, #28]
 8007f76:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8007f78:	4788      	blx	r1
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	f7f8 fa74 	bl	8000468 <Thread::ThrowNullException#4411>

08007f80 <PointerTypeRepresentation::get_IsDelayedType#16031>:

        public override bool IsDelayedType
        {
            get
            {
                return m_pointerType.IsDelayedType;
 8007f80:	b580      	push	{r7, lr}
 8007f82:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d005      	beq.n	8007f94 <PointerTypeRepresentation::get_IsDelayedType#16031+0x14>
 8007f88:	d004      	beq.n	8007f94 <PointerTypeRepresentation::get_IsDelayedType#16031+0x14>
 8007f8a:	6841      	ldr	r1, [r0, #4]
 8007f8c:	69c9      	ldr	r1, [r1, #28]
 8007f8e:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8007f90:	4788      	blx	r1
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	f7f8 fa68 	bl	8000468 <Thread::ThrowNullException#4411>

08007f98 <ScalarTypeRepresentation::ToString#16056>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 8007f98:	b570      	push	{r4, r5, r6, lr}
 8007f9a:	4e13      	ldr	r6, [pc, #76]	; (8007fe8 <ScalarTypeRepresentation::ToString#16056+0x50>)
 8007f9c:	4605      	mov	r5, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "ScalarTypeRepresentation(" );
 8007f9e:	4813      	ldr	r0, [pc, #76]	; (8007fec <ScalarTypeRepresentation::ToString#16056+0x54>)
 8007fa0:	4913      	ldr	r1, [pc, #76]	; (8007ff0 <ScalarTypeRepresentation::ToString#16056+0x58>)
 8007fa2:	447e      	add	r6, pc
 8007fa4:	4430      	add	r0, r6
 8007fa6:	4431      	add	r1, r6
 8007fa8:	f7f8 fc74 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8007fac:	4604      	mov	r4, r0
 8007fae:	4811      	ldr	r0, [pc, #68]	; (8007ff4 <ScalarTypeRepresentation::ToString#16056+0x5c>)
 8007fb0:	2210      	movs	r2, #16
 8007fb2:	1981      	adds	r1, r0, r6
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f7ff f84c 	bl	8007052 <StringBuilder::.ctor#9221>
 8007fba:	b195      	cbz	r5, 8007fe2 <ScalarTypeRepresentation::ToString#16056+0x4a>
 8007fbc:	6868      	ldr	r0, [r5, #4]

            PrettyToString( sb, true, false );
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	69c0      	ldr	r0, [r0, #28]
 8007fc6:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8007fc8:	4628      	mov	r0, r5
 8007fca:	47b0      	blx	r6
 8007fcc:	480a      	ldr	r0, [pc, #40]	; (8007ff8 <ScalarTypeRepresentation::ToString#16056+0x60>)

            sb.Append( ")" );
 8007fce:	490b      	ldr	r1, [pc, #44]	; (8007ffc <ScalarTypeRepresentation::ToString#16056+0x64>)
 8007fd0:	4478      	add	r0, pc
 8007fd2:	4401      	add	r1, r0
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f7fe f9d9 	bl	800638c <StringBuilder::Append#9238>

            return sb.ToString();
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f7f9 fdea 	bl	8001bb4 <StringBuilder::ToString#9230>
 8007fe0:	bd70      	pop	{r4, r5, r6, pc}
        // Debug Methods
        //

        public override String ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "ScalarTypeRepresentation(" );
 8007fe2:	f7f8 fa41 	bl	8000468 <Thread::ThrowNullException#4411>
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	17ff8b72 	.word	0x17ff8b72
 8007fec:	fffffe0c 	.word	0xfffffe0c
 8007ff0:	e8019718 	.word	0xe8019718
 8007ff4:	e8012088 	.word	0xe8012088
 8007ff8:	17ff8b44 	.word	0x17ff8b44
 8007ffc:	e8011d38 	.word	0xe8011d38

08008000 <TypeRepresentation::EqualsThroughEquivalence#16084>:
        // MetaDataEquality Methods
        //

        public override bool EqualsThroughEquivalence( object         obj ,
                                                       EquivalenceSet set )
        {
 8008000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008002:	b081      	sub	sp, #4
 8008004:	4604      	mov	r4, r0
 8008006:	482f      	ldr	r0, [pc, #188]	; (80080c4 <TypeRepresentation::EqualsThroughEquivalence#16084+0xc4>)
            if(obj is TypeRepresentation)
 8008008:	4f2f      	ldr	r7, [pc, #188]	; (80080c8 <TypeRepresentation::EqualsThroughEquivalence#16084+0xc8>)
 800800a:	460e      	mov	r6, r1
 800800c:	4615      	mov	r5, r2
 800800e:	4478      	add	r0, pc
 8008010:	1839      	adds	r1, r7, r0
 8008012:	4630      	mov	r0, r6
 8008014:	f7f9 f807 	bl	8001026 <TypeSystemManager::CastToTypeNoThrow#5591>
 8008018:	2800      	cmp	r0, #0
 800801a:	d04d      	beq.n	80080b8 <TypeRepresentation::EqualsThroughEquivalence#16084+0xb8>
 800801c:	482b      	ldr	r0, [pc, #172]	; (80080cc <TypeRepresentation::EqualsThroughEquivalence#16084+0xcc>)
 800801e:	4478      	add	r0, pc
            {
                TypeRepresentation other = (TypeRepresentation)obj;
 8008020:	1839      	adds	r1, r7, r0
 8008022:	4630      	mov	r0, r6
 8008024:	f7fb fcdc 	bl	80039e0 <TypeSystemManager::CastToType#5590>
 8008028:	4606      	mov	r6, r0

                if(                               m_builtinType          == other.m_builtinType            &&
 800802a:	2e00      	cmp	r6, #0
 800802c:	d047      	beq.n	80080be <TypeRepresentation::EqualsThroughEquivalence#16084+0xbe>
 800802e:	7a20      	ldrb	r0, [r4, #8]
 8008030:	7a31      	ldrb	r1, [r6, #8]
 8008032:	4288      	cmp	r0, r1
 8008034:	d140      	bne.n	80080b8 <TypeRepresentation::EqualsThroughEquivalence#16084+0xb8>
 8008036:	68f0      	ldr	r0, [r6, #12]
 8008038:	68e1      	ldr	r1, [r4, #12]
 800803a:	4281      	cmp	r1, r0
 800803c:	d13c      	bne.n	80080b8 <TypeRepresentation::EqualsThroughEquivalence#16084+0xb8>
 800803e:	6930      	ldr	r0, [r6, #16]
 8008040:	6921      	ldr	r1, [r4, #16]
 8008042:	4281      	cmp	r1, r0
 8008044:	d138      	bne.n	80080b8 <TypeRepresentation::EqualsThroughEquivalence#16084+0xb8>
 8008046:	6971      	ldr	r1, [r6, #20]
 8008048:	6960      	ldr	r0, [r4, #20]
 800804a:	f7f9 fc88 	bl	800195e <String::Equals#2847>
 800804e:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008052:	d031      	beq.n	80080b8 <TypeRepresentation::EqualsThroughEquivalence#16084+0xb8>
 8008054:	69b1      	ldr	r1, [r6, #24]
 8008056:	69a0      	ldr	r0, [r4, #24]
 8008058:	f7f9 fc81 	bl	800195e <String::Equals#2847>
 800805c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008060:	d02a      	beq.n	80080b8 <TypeRepresentation::EqualsThroughEquivalence#16084+0xb8>
 8008062:	69f1      	ldr	r1, [r6, #28]
 8008064:	69e0      	ldr	r0, [r4, #28]
 8008066:	462a      	mov	r2, r5
 8008068:	f7ff fccc 	bl	8007a04 <BaseRepresentation::EqualsThroughEquivalence#15050>
 800806c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008070:	d022      	beq.n	80080b8 <TypeRepresentation::EqualsThroughEquivalence#16084+0xb8>
 8008072:	6a20      	ldr	r0, [r4, #32]
 8008074:	f000 f846 	bl	8008104 <TypeRepresentation::get_GenericParameters#16169>
 8008078:	4607      	mov	r7, r0
 800807a:	6a30      	ldr	r0, [r6, #32]
 800807c:	f000 f842 	bl	8008104 <TypeRepresentation::get_GenericParameters#16169>
 8008080:	4601      	mov	r1, r0
 8008082:	4638      	mov	r0, r7
 8008084:	462a      	mov	r2, r5
 8008086:	f7ff fcd3 	bl	8007a30 <BaseRepresentation::ArrayEqualsThroughEquivalence#37209>
 800808a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800808e:	d013      	beq.n	80080b8 <TypeRepresentation::EqualsThroughEquivalence#16084+0xb8>
                                                  m_name                 == other.m_name                   &&
                                                  m_namespace            == other.m_namespace              &&
                        EqualsThroughEquivalence( m_enclosingClass       ,  other.m_enclosingClass , set ) &&
                   ArrayEqualsThroughEquivalence( this.GenericParameters ,  other.GenericParameters, set )  )
                {
                    CHECKS.ASSERT( this.GetType() == other.GetType(), "Found two inconsistent TypeRepresentations" );
 8008090:	4620      	mov	r0, r4
 8008092:	f7f9 fae7 	bl	8001664 <Object::GetType#4192>
 8008096:	4604      	mov	r4, r0
 8008098:	4630      	mov	r0, r6
 800809a:	f7f9 fae3 	bl	8001664 <Object::GetType#4192>
 800809e:	4601      	mov	r1, r0
 80080a0:	4620      	mov	r0, r4
 80080a2:	f7fe ff5c 	bl	8006f5e <Type::op_Equality#8267>
 80080a6:	490a      	ldr	r1, [pc, #40]	; (80080d0 <TypeRepresentation::EqualsThroughEquivalence#16084+0xd0>)
 80080a8:	4a0a      	ldr	r2, [pc, #40]	; (80080d4 <TypeRepresentation::EqualsThroughEquivalence#16084+0xd4>)
 80080aa:	4479      	add	r1, pc
 80080ac:	4411      	add	r1, r2
 80080ae:	f7fb fb81 	bl	80037b4 <CHECKS::ASSERT#12594>
 80080b2:	2001      	movs	r0, #1
 80080b4:	b001      	add	sp, #4
 80080b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080b8:	2000      	movs	r0, #0
 80080ba:	b001      	add	sp, #4
 80080bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        {
            if(obj is TypeRepresentation)
            {
                TypeRepresentation other = (TypeRepresentation)obj;

                if(                               m_builtinType          == other.m_builtinType            &&
 80080be:	f7f8 f9d3 	bl	8000468 <Thread::ThrowNullException#4411>
 80080c2:	46c0      	nop			; (mov r8, r8)
 80080c4:	17ff8b06 	.word	0x17ff8b06
 80080c8:	e8019fe8 	.word	0xe8019fe8
 80080cc:	17ff8af6 	.word	0x17ff8af6
 80080d0:	17ff8a6a 	.word	0x17ff8a6a
 80080d4:	e8012158 	.word	0xe8012158

080080d8 <TypeRepresentation::Equals#16085>:

            return false;
        }

        public override bool Equals( object obj )
        {
 80080d8:	b580      	push	{r7, lr}
 80080da:	b128      	cbz	r0, 80080e8 <TypeRepresentation::Equals#16085+0x10>
 80080dc:	6842      	ldr	r2, [r0, #4]
            return this.EqualsThroughEquivalence( obj, null );
 80080de:	69d2      	ldr	r2, [r2, #28]
 80080e0:	6993      	ldr	r3, [r2, #24]
 80080e2:	2200      	movs	r2, #0
 80080e4:	4798      	blx	r3
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	f7f8 f9be 	bl	8000468 <Thread::ThrowNullException#4411>

080080ec <TypeRepresentation::GetHashCode#16086>:
        }

        public override int GetHashCode()
        {
 80080ec:	b510      	push	{r4, lr}
 80080ee:	4601      	mov	r1, r0
            return (int)m_builtinType ^
 80080f0:	6948      	ldr	r0, [r1, #20]
 80080f2:	b120      	cbz	r0, 80080fe <TypeRepresentation::GetHashCode#16086+0x12>
 80080f4:	7a0c      	ldrb	r4, [r1, #8]
 80080f6:	f7f9 fc02 	bl	80018fe <String::GetHashCode#2856>
 80080fa:	4060      	eors	r0, r4
 80080fc:	bd10      	pop	{r4, pc}
 80080fe:	f7f8 f9b3 	bl	8000468 <Thread::ThrowNullException#4411>
 8008102:	46c0      	nop			; (mov r8, r8)

08008104 <TypeRepresentation::get_GenericParameters#16169>:

        public TypeRepresentation[] GenericParameters
        {
            get
            {
                if(m_genericContext != null)
 8008104:	2800      	cmp	r0, #0

            public TypeRepresentation[] Parameters
            {
                get
                {
                    return m_parameters;
 8008106:	bf1c      	itt	ne
 8008108:	6880      	ldrne	r0, [r0, #8]
 800810a:	4770      	bxne	lr
 800810c:	4803      	ldr	r0, [pc, #12]	; (800811c <TypeRepresentation::get_GenericParameters#16169+0x18>)
                if(m_genericContext != null)
                {
                    return m_genericContext.Parameters;
                }

                return TypeRepresentation.SharedEmptyArray;
 800810e:	4904      	ldr	r1, [pc, #16]	; (8008120 <TypeRepresentation::get_GenericParameters#16169+0x1c>)
 8008110:	4478      	add	r0, pc
 8008112:	4408      	add	r0, r1
 8008114:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 8008118:	4770      	bx	lr
 800811a:	46c0      	nop			; (mov r8, r8)
 800811c:	17ff8a04 	.word	0x17ff8a04
 8008120:	fffffcf8 	.word	0xfffffcf8

08008124 <GenericContext::get_IsOpenType#16743>:

            public bool IsOpenType
            {
                get
                {
                    if(m_parametersDefinition != null)
 8008124:	b5b0      	push	{r4, r5, r7, lr}
 8008126:	68c1      	ldr	r1, [r0, #12]
 8008128:	2900      	cmp	r1, #0
 800812a:	bf04      	itt	eq
 800812c:	2000      	moveq	r0, #0
 800812e:	bdb0      	popeq	{r4, r5, r7, pc}
                    {
                        if(m_parameters.Length == 0)
 8008130:	6881      	ldr	r1, [r0, #8]
 8008132:	b1e9      	cbz	r1, 8008170 <GenericContext::get_IsOpenType#16743+0x4c>
 8008134:	6889      	ldr	r1, [r1, #8]
 8008136:	b1c9      	cbz	r1, 800816c <GenericContext::get_IsOpenType#16743+0x48>
                        {
                            return true;
                        }

                        foreach(TypeRepresentation td in m_parameters)
 8008138:	6884      	ldr	r4, [r0, #8]
 800813a:	2500      	movs	r5, #0
 800813c:	e000      	b.n	8008140 <GenericContext::get_IsOpenType#16743+0x1c>
                        {
                            if(td.IsOpenType)
                            {
                                return true;
                            }
                        }
 800813e:	3501      	adds	r5, #1
 8008140:	b1b4      	cbz	r4, 8008170 <GenericContext::get_IsOpenType#16743+0x4c>
 8008142:	68a0      	ldr	r0, [r4, #8]
                        if(m_parameters.Length == 0)
                        {
                            return true;
                        }

                        foreach(TypeRepresentation td in m_parameters)
 8008144:	4285      	cmp	r5, r0
 8008146:	bfa4      	itt	ge
 8008148:	2000      	movge	r0, #0
 800814a:	bdb0      	popge	{r4, r5, r7, pc}
 800814c:	68a0      	ldr	r0, [r4, #8]
 800814e:	4285      	cmp	r5, r0
 8008150:	d210      	bcs.n	8008174 <GenericContext::get_IsOpenType#16743+0x50>
 8008152:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8008156:	68c0      	ldr	r0, [r0, #12]
 8008158:	2800      	cmp	r0, #0
 800815a:	d009      	beq.n	8008170 <GenericContext::get_IsOpenType#16743+0x4c>
 800815c:	d008      	beq.n	8008170 <GenericContext::get_IsOpenType#16743+0x4c>
 800815e:	6841      	ldr	r1, [r0, #4]
                        {
                            if(td.IsOpenType)
 8008160:	69c9      	ldr	r1, [r1, #28]
 8008162:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8008164:	4788      	blx	r1
 8008166:	f010 0fff 	tst.w	r0, #255	; 0xff
 800816a:	d0e8      	beq.n	800813e <GenericContext::get_IsOpenType#16743+0x1a>
 800816c:	2001      	movs	r0, #1
 800816e:	bdb0      	pop	{r4, r5, r7, pc}
            {
                get
                {
                    if(m_parametersDefinition != null)
                    {
                        if(m_parameters.Length == 0)
 8008170:	f7f8 f97a 	bl	8000468 <Thread::ThrowNullException#4411>
                        {
                            return true;
                        }

                        foreach(TypeRepresentation td in m_parameters)
 8008174:	f7f8 fe9c 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>

08008178 <GenericContext::get_IsDelayedType#16744>:
            }

            public bool IsDelayedType
            {
                get
                {
 8008178:	b5b0      	push	{r4, r5, r7, lr}
 800817a:	4605      	mov	r5, r0
 800817c:	b1f5      	cbz	r5, 80081bc <GenericContext::get_IsDelayedType#16744+0x44>
 800817e:	68a8      	ldr	r0, [r5, #8]
 8008180:	2400      	movs	r4, #0
 8008182:	b908      	cbnz	r0, 8008188 <GenericContext::get_IsDelayedType#16744+0x10>
 8008184:	e018      	b.n	80081b8 <GenericContext::get_IsDelayedType#16744+0x40>
                    {
                        if(td.IsDelayedType)
                        {
                            return true;
                        }
                    }
 8008186:	3401      	adds	r4, #1
 8008188:	b1c5      	cbz	r5, 80081bc <GenericContext::get_IsDelayedType#16744+0x44>
 800818a:	68a8      	ldr	r0, [r5, #8]
                    if(m_parameters.Length == 0)
                    {
                        return false;
                    }

                    foreach(TypeRepresentation td in m_parameters)
 800818c:	4284      	cmp	r4, r0
 800818e:	da12      	bge.n	80081b6 <GenericContext::get_IsDelayedType#16744+0x3e>
 8008190:	68a8      	ldr	r0, [r5, #8]
 8008192:	4284      	cmp	r4, r0
 8008194:	d214      	bcs.n	80081c0 <GenericContext::get_IsDelayedType#16744+0x48>
 8008196:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 800819a:	68c0      	ldr	r0, [r0, #12]
 800819c:	2800      	cmp	r0, #0
 800819e:	d00d      	beq.n	80081bc <GenericContext::get_IsDelayedType#16744+0x44>
 80081a0:	d00c      	beq.n	80081bc <GenericContext::get_IsDelayedType#16744+0x44>
 80081a2:	6841      	ldr	r1, [r0, #4]
                    {
                        if(td.IsDelayedType)
 80081a4:	69c9      	ldr	r1, [r1, #28]
 80081a6:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80081a8:	4788      	blx	r1
 80081aa:	f010 0fff 	tst.w	r0, #255	; 0xff
 80081ae:	d0ea      	beq.n	8008186 <GenericContext::get_IsDelayedType#16744+0xe>
 80081b0:	2401      	movs	r4, #1
 80081b2:	4620      	mov	r0, r4
 80081b4:	bdb0      	pop	{r4, r5, r7, pc}
 80081b6:	2400      	movs	r4, #0
 80081b8:	4620      	mov	r0, r4
 80081ba:	bdb0      	pop	{r4, r5, r7, pc}

            public bool IsDelayedType
            {
                get
                {
                    if(m_parameters.Length == 0)
 80081bc:	f7f8 f954 	bl	8000468 <Thread::ThrowNullException#4411>
                    {
                        return false;
                    }

                    foreach(TypeRepresentation td in m_parameters)
 80081c0:	f7f8 fe76 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>

080081c4 <TypeRepresentation::GetAbbreviation#16199>:
        // Debug Methods
        //

        private string GetAbbreviation()
        {
            switch(m_builtinType)
 80081c4:	b2c0      	uxtb	r0, r0
 80081c6:	1e41      	subs	r1, r0, #1
 80081c8:	291b      	cmp	r1, #27
 80081ca:	d817      	bhi.n	80081fc <TypeRepresentation::GetAbbreviation#16199+0x38>
 80081cc:	4827      	ldr	r0, [pc, #156]	; (800826c <TypeRepresentation::GetAbbreviation#16199+0xa8>)
 80081ce:	4a28      	ldr	r2, [pc, #160]	; (8008270 <TypeRepresentation::GetAbbreviation#16199+0xac>)
 80081d0:	4478      	add	r0, pc
 80081d2:	4410      	add	r0, r2
 80081d4:	e8df f001 	tbb	[pc, r1]
 80081d8:	18140e48 	.word	0x18140e48
 80081dc:	2824201c 	.word	0x2824201c
 80081e0:	3834302c 	.word	0x3834302c
 80081e4:	1212403c 	.word	0x1212403c
 80081e8:	12121212 	.word	0x12121212
 80081ec:	12121212 	.word	0x12121212
 80081f0:	44121212 	.word	0x44121212
 80081f4:	4839      	ldr	r0, [pc, #228]	; (80082dc <TypeRepresentation::GetAbbreviation#16199+0x118>)
 80081f6:	493a      	ldr	r1, [pc, #232]	; (80082e0 <TypeRepresentation::GetAbbreviation#16199+0x11c>)
 80081f8:	4478      	add	r0, pc
 80081fa:	e034      	b.n	8008266 <TypeRepresentation::GetAbbreviation#16199+0xa2>
 80081fc:	2000      	movs	r0, #0
 80081fe:	4770      	bx	lr
 8008200:	4834      	ldr	r0, [pc, #208]	; (80082d4 <TypeRepresentation::GetAbbreviation#16199+0x110>)
 8008202:	4935      	ldr	r1, [pc, #212]	; (80082d8 <TypeRepresentation::GetAbbreviation#16199+0x114>)
 8008204:	4478      	add	r0, pc
 8008206:	e02e      	b.n	8008266 <TypeRepresentation::GetAbbreviation#16199+0xa2>
 8008208:	4830      	ldr	r0, [pc, #192]	; (80082cc <TypeRepresentation::GetAbbreviation#16199+0x108>)
 800820a:	4931      	ldr	r1, [pc, #196]	; (80082d0 <TypeRepresentation::GetAbbreviation#16199+0x10c>)
 800820c:	4478      	add	r0, pc
 800820e:	e02a      	b.n	8008266 <TypeRepresentation::GetAbbreviation#16199+0xa2>
 8008210:	482c      	ldr	r0, [pc, #176]	; (80082c4 <TypeRepresentation::GetAbbreviation#16199+0x100>)
 8008212:	492d      	ldr	r1, [pc, #180]	; (80082c8 <TypeRepresentation::GetAbbreviation#16199+0x104>)
 8008214:	4478      	add	r0, pc
 8008216:	e026      	b.n	8008266 <TypeRepresentation::GetAbbreviation#16199+0xa2>
 8008218:	4828      	ldr	r0, [pc, #160]	; (80082bc <TypeRepresentation::GetAbbreviation#16199+0xf8>)
 800821a:	4929      	ldr	r1, [pc, #164]	; (80082c0 <TypeRepresentation::GetAbbreviation#16199+0xfc>)
 800821c:	4478      	add	r0, pc
 800821e:	e022      	b.n	8008266 <TypeRepresentation::GetAbbreviation#16199+0xa2>
 8008220:	4824      	ldr	r0, [pc, #144]	; (80082b4 <TypeRepresentation::GetAbbreviation#16199+0xf0>)
 8008222:	4925      	ldr	r1, [pc, #148]	; (80082b8 <TypeRepresentation::GetAbbreviation#16199+0xf4>)
 8008224:	4478      	add	r0, pc
 8008226:	e01e      	b.n	8008266 <TypeRepresentation::GetAbbreviation#16199+0xa2>
 8008228:	4820      	ldr	r0, [pc, #128]	; (80082ac <TypeRepresentation::GetAbbreviation#16199+0xe8>)
 800822a:	4921      	ldr	r1, [pc, #132]	; (80082b0 <TypeRepresentation::GetAbbreviation#16199+0xec>)
 800822c:	4478      	add	r0, pc
 800822e:	e01a      	b.n	8008266 <TypeRepresentation::GetAbbreviation#16199+0xa2>
 8008230:	481c      	ldr	r0, [pc, #112]	; (80082a4 <TypeRepresentation::GetAbbreviation#16199+0xe0>)
 8008232:	491d      	ldr	r1, [pc, #116]	; (80082a8 <TypeRepresentation::GetAbbreviation#16199+0xe4>)
 8008234:	4478      	add	r0, pc
 8008236:	e016      	b.n	8008266 <TypeRepresentation::GetAbbreviation#16199+0xa2>
 8008238:	4818      	ldr	r0, [pc, #96]	; (800829c <TypeRepresentation::GetAbbreviation#16199+0xd8>)
 800823a:	4919      	ldr	r1, [pc, #100]	; (80082a0 <TypeRepresentation::GetAbbreviation#16199+0xdc>)
 800823c:	4478      	add	r0, pc
 800823e:	e012      	b.n	8008266 <TypeRepresentation::GetAbbreviation#16199+0xa2>
 8008240:	4814      	ldr	r0, [pc, #80]	; (8008294 <TypeRepresentation::GetAbbreviation#16199+0xd0>)
 8008242:	4915      	ldr	r1, [pc, #84]	; (8008298 <TypeRepresentation::GetAbbreviation#16199+0xd4>)
 8008244:	4478      	add	r0, pc
 8008246:	e00e      	b.n	8008266 <TypeRepresentation::GetAbbreviation#16199+0xa2>
 8008248:	4810      	ldr	r0, [pc, #64]	; (800828c <TypeRepresentation::GetAbbreviation#16199+0xc8>)
 800824a:	4911      	ldr	r1, [pc, #68]	; (8008290 <TypeRepresentation::GetAbbreviation#16199+0xcc>)
 800824c:	4478      	add	r0, pc
 800824e:	e00a      	b.n	8008266 <TypeRepresentation::GetAbbreviation#16199+0xa2>
 8008250:	480c      	ldr	r0, [pc, #48]	; (8008284 <TypeRepresentation::GetAbbreviation#16199+0xc0>)
 8008252:	490d      	ldr	r1, [pc, #52]	; (8008288 <TypeRepresentation::GetAbbreviation#16199+0xc4>)
 8008254:	4478      	add	r0, pc
 8008256:	e006      	b.n	8008266 <TypeRepresentation::GetAbbreviation#16199+0xa2>
 8008258:	4808      	ldr	r0, [pc, #32]	; (800827c <TypeRepresentation::GetAbbreviation#16199+0xb8>)
 800825a:	4909      	ldr	r1, [pc, #36]	; (8008280 <TypeRepresentation::GetAbbreviation#16199+0xbc>)
 800825c:	4478      	add	r0, pc
 800825e:	e002      	b.n	8008266 <TypeRepresentation::GetAbbreviation#16199+0xa2>
 8008260:	4804      	ldr	r0, [pc, #16]	; (8008274 <TypeRepresentation::GetAbbreviation#16199+0xb0>)
 8008262:	4905      	ldr	r1, [pc, #20]	; (8008278 <TypeRepresentation::GetAbbreviation#16199+0xb4>)
 8008264:	4478      	add	r0, pc
 8008266:	4408      	add	r0, r1
 8008268:	4770      	bx	lr
 800826a:	46c0      	nop			; (mov r8, r8)
 800826c:	17ff8944 	.word	0x17ff8944
 8008270:	e8012388 	.word	0xe8012388
 8008274:	17ff88b0 	.word	0x17ff88b0
 8008278:	e80121c8 	.word	0xe80121c8
 800827c:	17ff88b8 	.word	0x17ff88b8
 8008280:	e80121e8 	.word	0xe80121e8
 8008284:	17ff88c0 	.word	0x17ff88c0
 8008288:	e8012208 	.word	0xe8012208
 800828c:	17ff88c8 	.word	0x17ff88c8
 8008290:	e8012228 	.word	0xe8012228
 8008294:	17ff88d0 	.word	0x17ff88d0
 8008298:	e8012248 	.word	0xe8012248
 800829c:	17ff88d8 	.word	0x17ff88d8
 80082a0:	e8012268 	.word	0xe8012268
 80082a4:	17ff88e0 	.word	0x17ff88e0
 80082a8:	e8012288 	.word	0xe8012288
 80082ac:	17ff88e8 	.word	0x17ff88e8
 80082b0:	e80122a8 	.word	0xe80122a8
 80082b4:	17ff88f0 	.word	0x17ff88f0
 80082b8:	e80122c8 	.word	0xe80122c8
 80082bc:	17ff88f8 	.word	0x17ff88f8
 80082c0:	e80122e8 	.word	0xe80122e8
 80082c4:	17ff8900 	.word	0x17ff8900
 80082c8:	e8012308 	.word	0xe8012308
 80082cc:	17ff8908 	.word	0x17ff8908
 80082d0:	e8012328 	.word	0xe8012328
 80082d4:	17ff8910 	.word	0x17ff8910
 80082d8:	e8012348 	.word	0xe8012348
 80082dc:	17ff891c 	.word	0x17ff891c
 80082e0:	e8012368 	.word	0xe8012368

080082e4 <ValueTypeRepresentation::ToString#16216>:
        //
        // Debug Methods
        //

        public override String ToString()
        {
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	4e13      	ldr	r6, [pc, #76]	; (8008334 <ValueTypeRepresentation::ToString#16216+0x50>)
 80082e8:	4605      	mov	r5, r0
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "ValueTypeRepresentation(" );
 80082ea:	4813      	ldr	r0, [pc, #76]	; (8008338 <ValueTypeRepresentation::ToString#16216+0x54>)
 80082ec:	4913      	ldr	r1, [pc, #76]	; (800833c <ValueTypeRepresentation::ToString#16216+0x58>)
 80082ee:	447e      	add	r6, pc
 80082f0:	4430      	add	r0, r6
 80082f2:	4431      	add	r1, r6
 80082f4:	f7f8 face 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80082f8:	4604      	mov	r4, r0
 80082fa:	4811      	ldr	r0, [pc, #68]	; (8008340 <ValueTypeRepresentation::ToString#16216+0x5c>)
 80082fc:	2210      	movs	r2, #16
 80082fe:	1981      	adds	r1, r0, r6
 8008300:	4620      	mov	r0, r4
 8008302:	f7fe fea6 	bl	8007052 <StringBuilder::.ctor#9221>
 8008306:	b195      	cbz	r5, 800832e <ValueTypeRepresentation::ToString#16216+0x4a>
 8008308:	6868      	ldr	r0, [r5, #4]

            PrettyToString( sb, true, false );
 800830a:	4621      	mov	r1, r4
 800830c:	2201      	movs	r2, #1
 800830e:	2300      	movs	r3, #0
 8008310:	69c0      	ldr	r0, [r0, #28]
 8008312:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8008314:	4628      	mov	r0, r5
 8008316:	47b0      	blx	r6
 8008318:	480a      	ldr	r0, [pc, #40]	; (8008344 <ValueTypeRepresentation::ToString#16216+0x60>)

            sb.Append( ")" );
 800831a:	490b      	ldr	r1, [pc, #44]	; (8008348 <ValueTypeRepresentation::ToString#16216+0x64>)
 800831c:	4478      	add	r0, pc
 800831e:	4401      	add	r1, r0
 8008320:	4620      	mov	r0, r4
 8008322:	f7fe f833 	bl	800638c <StringBuilder::Append#9238>

            return sb.ToString();
 8008326:	4620      	mov	r0, r4
 8008328:	f7f9 fc44 	bl	8001bb4 <StringBuilder::ToString#9230>
 800832c:	bd70      	pop	{r4, r5, r6, pc}
        // Debug Methods
        //

        public override String ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder( "ValueTypeRepresentation(" );
 800832e:	f7f8 f89b 	bl	8000468 <Thread::ThrowNullException#4411>
 8008332:	46c0      	nop			; (mov r8, r8)
 8008334:	17ff8826 	.word	0x17ff8826
 8008338:	fffffe0c 	.word	0xfffffe0c
 800833c:	e8019718 	.word	0xe8019718
 8008340:	e80123c8 	.word	0xe80123c8
 8008344:	17ff87f8 	.word	0x17ff87f8
 8008348:	e8011d38 	.word	0xe8011d38

0800834c <Range::Contains#16489>:

                return false;
            }

            public bool Contains( UIntPtr address )
            {
 800834c:	2300      	movs	r3, #0
 800834e:	428a      	cmp	r2, r1
 8008350:	bf38      	it	cc
 8008352:	2301      	movcc	r3, #1
                return AddressMath.IsInRange( address, this.Start, this.End );
 8008354:	4290      	cmp	r0, r2
 8008356:	bf88      	it	hi
 8008358:	2300      	movhi	r3, #0
 800835a:	4618      	mov	r0, r3
 800835c:	4770      	bx	lr
 800835e:	46c0      	nop			; (mov r8, r8)

08008360 <Device::ProcessBugCheck#18572>:
        {
            RT.BugCheck.Raise( RT.BugCheck.StopCode.FailedBootstrap );
        }        

        public override void ProcessBugCheck( RT.BugCheck.StopCode code )
        {
 8008360:	b580      	push	{r7, lr}
 8008362:	4804      	ldr	r0, [pc, #16]	; (8008374 <Device::ProcessBugCheck#18572+0x14>)
 8008364:	4a04      	ldr	r2, [pc, #16]	; (8008378 <Device::ProcessBugCheck#18572+0x18>)
 8008366:	4478      	add	r0, pc
 8008368:	4410      	add	r0, r2
 800836a:	6741      	str	r1, [r0, #116]	; 0x74
            m_bugCheckCode = code;

            RT.TargetPlatform.ARMv7.ProcessorARMv7M.Breakpoint( (uint)code ); 
 800836c:	4608      	mov	r0, r1
 800836e:	f001 fa4d 	bl	800980c <Breakpoint>
 8008372:	bd80      	pop	{r7, pc}
 8008374:	17ff87ae 	.word	0x17ff87ae
 8008378:	fffffcf8 	.word	0xfffffcf8

0800837c <Memory::InitializeMemory#18580>:
 800837c:	4770      	bx	lr

0800837e <Peripherals::Activate#18862>:
            CMSIS.NVIC.SetPriority( ProcessorARMv7M.IRQn_Type.PendSV_IRQn , ProcessorARMv7M.c_Priority__PendSV ); 
        }
        
        public override void Activate()
        {
            CMSIS.Drivers.InterruptController.Instance.Initialize();
 800837e:	b580      	push	{r7, lr}
 8008380:	f000 fafc 	bl	800897c <InterruptController::Initialize#18975>
            CMSIS.Drivers.ContextSwitchTimer.Instance.Initialize();
 8008384:	f000 fb42 	bl	8008a0c <ContextSwitchTimer::Initialize#18997>
 8008388:	bd80      	pop	{r7, pc}
 800838a:	46c0      	nop			; (mov r8, r8)

0800838c <SystemTimer::Initialize#18659>:
        private unsafe LLOS.HAL.TimerContext*  m_timerEvent;
        //--//
        //private static Timer            s_guard;

        public void Initialize()
        {
 800838c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800838e:	b081      	sub	sp, #4
 8008390:	4f1a      	ldr	r7, [pc, #104]	; (80083fc <SystemTimer::Initialize#18659+0x70>)
            m_timers      = new RT.KernelList<Timer>();
 8008392:	481b      	ldr	r0, [pc, #108]	; (8008400 <SystemTimer::Initialize#18659+0x74>)
 8008394:	447f      	add	r7, pc
 8008396:	19c5      	adds	r5, r0, r7
 8008398:	481a      	ldr	r0, [pc, #104]	; (8008404 <SystemTimer::Initialize#18659+0x78>)
 800839a:	19c1      	adds	r1, r0, r7
 800839c:	4628      	mov	r0, r5
 800839e:	f7f8 fa79 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80083a2:	4606      	mov	r6, r0
 80083a4:	f000 f940 	bl	8008628 <KernelList`1::.ctor#25691>
 80083a8:	4817      	ldr	r0, [pc, #92]	; (8008408 <SystemTimer::Initialize#18659+0x7c>)
 80083aa:	19c4      	adds	r4, r0, r7
 80083ac:	2000      	movs	r0, #0
 80083ae:	e9c4 6002 	strd	r6, r0, [r4, #8]
 80083b2:	6120      	str	r0, [r4, #16]
            m_accumulator = 0;
            

            // This call sets up the timer handler to call SystemTimer_Handler/ProcessTimeout
            LLOS.HAL.Timer.LLOS_SYSTEM_TIMER_Enable( HandleSystemTimer );
 80083b4:	4815      	ldr	r0, [pc, #84]	; (800840c <SystemTimer::Initialize#18659+0x80>)
 80083b6:	19c1      	adds	r1, r0, r7
 80083b8:	4628      	mov	r0, r5
 80083ba:	f7f8 fa6b 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80083be:	4605      	mov	r5, r0
 80083c0:	4813      	ldr	r0, [pc, #76]	; (8008410 <SystemTimer::Initialize#18659+0x84>)
 80083c2:	2100      	movs	r1, #0
 80083c4:	19c2      	adds	r2, r0, r7
 80083c6:	4628      	mov	r0, r5
 80083c8:	f7f8 ffe0 	bl	800138c <Delegate::.ctor#5246>
 80083cc:	4628      	mov	r0, r5
 80083ce:	f000 f95b 	bl	8008688 <Timer::LLOS_SYSTEM_TIMER_Enable#19272>
        public uint Counter
        {
            [RT.Inline]
            get
            {
                return (uint)LLOS.HAL.Timer.LLOS_SYSTEM_TIMER_GetTicks();
 80083d2:	f001 fb9b 	bl	8009b0c <LLOS_SYSTEM_TIMER_GetTicks>
 80083d6:	6160      	str	r0, [r4, #20]
            // Bug: https://msmcu.visualstudio.com/DefaultCollection/LLILUM/_workitems#id=287&fullScreen=false
            unsafe
            {
                fixed (LLOS.HAL.TimerContext** timer_ptr = &m_timerEvent)
                {
                    LLOS.HAL.Timer.LLOS_SYSTEM_TIMER_AllocateTimer( UIntPtr.Zero, timer_ptr );
 80083d8:	480e      	ldr	r0, [pc, #56]	; (8008414 <SystemTimer::Initialize#18659+0x88>)
 80083da:	f104 0118 	add.w	r1, r4, #24
 80083de:	4438      	add	r0, r7
 80083e0:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 80083e4:	f001 fb9e 	bl	8009b24 <LLOS_SYSTEM_TIMER_AllocateTimer>
 80083e8:	201c      	movs	r0, #28
 80083ea:	2107      	movs	r1, #7
 80083ec:	f001 fb44 	bl	8009a78 <CMSIS_STUB_NVIC_SetPriority>
            //
            //s_guard = CreateTimer( (timer, currentTime) => { timer.RelativeTimeout = QuarterCycle;  }  );
            //s_guard.RelativeTimeout = QuarterCycle; 

            // no need to Refresh because guard causes a refresh already
            Refresh();
 80083f0:	4620      	mov	r0, r4
 80083f2:	f000 f95d 	bl	80086b0 <SystemTimer::Refresh#18666>
 80083f6:	b001      	add	sp, #4
 80083f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083fa:	46c0      	nop			; (mov r8, r8)
 80083fc:	17ff8780 	.word	0x17ff8780
 8008400:	fffffe0c 	.word	0xfffffe0c
 8008404:	e801a078 	.word	0xe801a078
 8008408:	fffffec8 	.word	0xfffffec8
 800840c:	e801a0a8 	.word	0xe801a0a8
 8008410:	e8007b59 	.word	0xe8007b59
 8008414:	fffffcf8 	.word	0xfffffcf8

08008418 <LlilumErrors::ThrowOnError#19043>:
            return ( result & 0x80000000UL ) != 0;
        }

        public static void ThrowOnError(uint result, bool ignoreNotSupportedOrImplemented)
        {
            if( Failed( result ) )
 8008418:	b5b0      	push	{r4, r5, r7, lr}
 800841a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800841e:	bf08      	it	eq
 8008420:	bdb0      	popeq	{r4, r5, r7, pc}
            {
                switch( result )
 8008422:	f1b0 4f77 	cmp.w	r0, #4143972352	; 0xf7000000
 8008426:	d90b      	bls.n	8008440 <LlilumErrors::ThrowOnError#19043+0x28>
 8008428:	f1b0 4f7d 	cmp.w	r0, #4244635648	; 0xfd000000
 800842c:	d914      	bls.n	8008458 <LlilumErrors::ThrowOnError#19043+0x40>
 800842e:	f1b0 4f7e 	cmp.w	r0, #4261412864	; 0xfe000000
 8008432:	d147      	bne.n	80084c4 <LlilumErrors::ThrowOnError#19043+0xac>
 8008434:	4839      	ldr	r0, [pc, #228]	; (800851c <LlilumErrors::ThrowOnError#19043+0x104>)
                        }
                        break;
                    case E_INVALID_PARAMETER:
                        throw new ArgumentException( );
                    case E_TIMEOUT:
                        throw new TimeoutException( );
 8008436:	492c      	ldr	r1, [pc, #176]	; (80084e8 <LlilumErrors::ThrowOnError#19043+0xd0>)
 8008438:	4478      	add	r0, pc
 800843a:	180c      	adds	r4, r1, r0
 800843c:	4938      	ldr	r1, [pc, #224]	; (8008520 <LlilumErrors::ThrowOnError#19043+0x108>)
 800843e:	e046      	b.n	80084ce <LlilumErrors::ThrowOnError#19043+0xb6>

        public static void ThrowOnError(uint result, bool ignoreNotSupportedOrImplemented)
        {
            if( Failed( result ) )
            {
                switch( result )
 8008440:	f1b0 4f4f 	cmp.w	r0, #3472883712	; 0xcf000000
 8008444:	d91c      	bls.n	8008480 <LlilumErrors::ThrowOnError#19043+0x68>
 8008446:	f1b0 4f56 	cmp.w	r0, #3590324224	; 0xd6000000
 800844a:	d122      	bne.n	8008492 <LlilumErrors::ThrowOnError#19043+0x7a>
 800844c:	482b      	ldr	r0, [pc, #172]	; (80084fc <LlilumErrors::ThrowOnError#19043+0xe4>)
                        {
                            throw new NotImplementedException( );
                        }
                        break;
                    case E_INVALID_OPERATION:
                        throw new InvalidOperationException( );
 800844e:	4926      	ldr	r1, [pc, #152]	; (80084e8 <LlilumErrors::ThrowOnError#19043+0xd0>)
 8008450:	4478      	add	r0, pc
 8008452:	180c      	adds	r4, r1, r0
 8008454:	492a      	ldr	r1, [pc, #168]	; (8008500 <LlilumErrors::ThrowOnError#19043+0xe8>)
 8008456:	e03a      	b.n	80084ce <LlilumErrors::ThrowOnError#19043+0xb6>

        public static void ThrowOnError(uint result, bool ignoreNotSupportedOrImplemented)
        {
            if( Failed( result ) )
            {
                switch( result )
 8008458:	f1b0 4f7a 	cmp.w	r0, #4194304000	; 0xfa000000
 800845c:	d129      	bne.n	80084b2 <LlilumErrors::ThrowOnError#19043+0x9a>
 800845e:	482b      	ldr	r0, [pc, #172]	; (800850c <LlilumErrors::ThrowOnError#19043+0xf4>)
                        }
                        break;
                    case E_INVALID_OPERATION:
                        throw new InvalidOperationException( );
                    case E_OUT_OF_MEMORY:
                        throw new OutOfMemoryException( );
 8008460:	4921      	ldr	r1, [pc, #132]	; (80084e8 <LlilumErrors::ThrowOnError#19043+0xd0>)
 8008462:	4478      	add	r0, pc
 8008464:	180c      	adds	r4, r1, r0
 8008466:	492a      	ldr	r1, [pc, #168]	; (8008510 <LlilumErrors::ThrowOnError#19043+0xf8>)
 8008468:	4401      	add	r1, r0
 800846a:	4620      	mov	r0, r4
 800846c:	f7f8 fa12 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8008470:	4605      	mov	r5, r0
 8008472:	f7fc fac5 	bl	8004a00 <Exception::GetMessageFromNativeResources#7756>
 8008476:	60a8      	str	r0, [r5, #8]
 8008478:	4620      	mov	r0, r4
 800847a:	4629      	mov	r1, r5
 800847c:	f7f8 fa20 	bl	80008c0 <TypeSystemManager::Throw#5596>

        public static void ThrowOnError(uint result, bool ignoreNotSupportedOrImplemented)
        {
            if( Failed( result ) )
            {
                switch( result )
 8008480:	f1b0 4f4a 	cmp.w	r0, #3388997632	; 0xca000000
 8008484:	d11e      	bne.n	80084c4 <LlilumErrors::ThrowOnError#19043+0xac>
 8008486:	4817      	ldr	r0, [pc, #92]	; (80084e4 <LlilumErrors::ThrowOnError#19043+0xcc>)
                {
                    case E_NOTIMPL:
                        if(!ignoreNotSupportedOrImplemented)
                        {
                            throw new NotImplementedException( );
 8008488:	4917      	ldr	r1, [pc, #92]	; (80084e8 <LlilumErrors::ThrowOnError#19043+0xd0>)
 800848a:	4478      	add	r0, pc
 800848c:	180c      	adds	r4, r1, r0
 800848e:	4917      	ldr	r1, [pc, #92]	; (80084ec <LlilumErrors::ThrowOnError#19043+0xd4>)
 8008490:	e01d      	b.n	80084ce <LlilumErrors::ThrowOnError#19043+0xb6>
 8008492:	f1b0 4f77 	cmp.w	r0, #4143972352	; 0xf7000000
 8008496:	d115      	bne.n	80084c4 <LlilumErrors::ThrowOnError#19043+0xac>
 8008498:	4d15      	ldr	r5, [pc, #84]	; (80084f0 <LlilumErrors::ThrowOnError#19043+0xd8>)
                    case E_OUT_OF_MEMORY:
                        throw new OutOfMemoryException( );
                    case E_NOT_SUPPORTED:
                        if(!ignoreNotSupportedOrImplemented)
                        {
                            throw new NotSupportedException( );
 800849a:	4813      	ldr	r0, [pc, #76]	; (80084e8 <LlilumErrors::ThrowOnError#19043+0xd0>)
 800849c:	447d      	add	r5, pc
 800849e:	1944      	adds	r4, r0, r5
 80084a0:	4814      	ldr	r0, [pc, #80]	; (80084f4 <LlilumErrors::ThrowOnError#19043+0xdc>)
 80084a2:	1941      	adds	r1, r0, r5
 80084a4:	4620      	mov	r0, r4
 80084a6:	f7f8 f9f5 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80084aa:	4601      	mov	r1, r0
 80084ac:	4812      	ldr	r0, [pc, #72]	; (80084f8 <LlilumErrors::ThrowOnError#19043+0xe0>)
 80084ae:	4428      	add	r0, r5
 80084b0:	e013      	b.n	80084da <LlilumErrors::ThrowOnError#19043+0xc2>
 80084b2:	f1b0 4f7d 	cmp.w	r0, #4244635648	; 0xfd000000
 80084b6:	d105      	bne.n	80084c4 <LlilumErrors::ThrowOnError#19043+0xac>
 80084b8:	4812      	ldr	r0, [pc, #72]	; (8008504 <LlilumErrors::ThrowOnError#19043+0xec>)
                        }
                        break;
                    case E_INVALID_PARAMETER:
                        throw new ArgumentException( );
 80084ba:	490b      	ldr	r1, [pc, #44]	; (80084e8 <LlilumErrors::ThrowOnError#19043+0xd0>)
 80084bc:	4478      	add	r0, pc
 80084be:	180c      	adds	r4, r1, r0
 80084c0:	4911      	ldr	r1, [pc, #68]	; (8008508 <LlilumErrors::ThrowOnError#19043+0xf0>)
 80084c2:	e004      	b.n	80084ce <LlilumErrors::ThrowOnError#19043+0xb6>
 80084c4:	4813      	ldr	r0, [pc, #76]	; (8008514 <LlilumErrors::ThrowOnError#19043+0xfc>)
                    case E_TIMEOUT:
                        throw new TimeoutException( );
                    case E_IO:
                    case E_FAIL:
                    default:
                        throw new Exception( );
 80084c6:	4908      	ldr	r1, [pc, #32]	; (80084e8 <LlilumErrors::ThrowOnError#19043+0xd0>)
 80084c8:	4478      	add	r0, pc
 80084ca:	180c      	adds	r4, r1, r0
 80084cc:	4912      	ldr	r1, [pc, #72]	; (8008518 <LlilumErrors::ThrowOnError#19043+0x100>)
                        }
                        break;
                    case E_INVALID_PARAMETER:
                        throw new ArgumentException( );
                    case E_TIMEOUT:
                        throw new TimeoutException( );
 80084ce:	4401      	add	r1, r0
 80084d0:	4620      	mov	r0, r4
 80084d2:	f7f8 f9df 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80084d6:	4601      	mov	r1, r0
 80084d8:	2000      	movs	r0, #0
 80084da:	6088      	str	r0, [r1, #8]
 80084dc:	4620      	mov	r0, r4
 80084de:	f7f8 f9ef 	bl	80008c0 <TypeSystemManager::Throw#5596>
 80084e2:	46c0      	nop			; (mov r8, r8)
 80084e4:	17ff868a 	.word	0x17ff868a
 80084e8:	fffffe0c 	.word	0xfffffe0c
 80084ec:	e80194a8 	.word	0xe80194a8
 80084f0:	17ff8678 	.word	0x17ff8678
 80084f4:	e8019478 	.word	0xe8019478
 80084f8:	e8010f78 	.word	0xe8010f78
 80084fc:	17ff86c4 	.word	0x17ff86c4
 8008500:	e8019e68 	.word	0xe8019e68
 8008504:	17ff8658 	.word	0x17ff8658
 8008508:	e80199e8 	.word	0xe80199e8
 800850c:	17ff86b2 	.word	0x17ff86b2
 8008510:	e8019ad8 	.word	0xe8019ad8
 8008514:	17ff864c 	.word	0x17ff864c
 8008518:	e8019b38 	.word	0xe8019b38
 800851c:	17ff86dc 	.word	0x17ff86dc
 8008520:	e801a1c8 	.word	0xe801a1c8

08008524 <ThreadManager::Activate#18959>:
        //
        // Extensibility 
        //
        
        public override void Activate()
        {
 8008524:	b510      	push	{r4, lr}
 8008526:	4604      	mov	r4, r0
            //
            // Activate the quantum timer, when the Idle Thread will run will enable exceptions, 
            // thus letting the context switching to start 
            //
            RT.BugCheck.AssertInterruptsOff( );
 8008528:	f7fa fa8a 	bl	8002a40 <BugCheck::AssertInterruptsOff#5289>
 800852c:	4803      	ldr	r0, [pc, #12]	; (800853c <ThreadManager::Activate#18959+0x18>)
 800852e:	4904      	ldr	r1, [pc, #16]	; (8008540 <ThreadManager::Activate#18959+0x1c>)
 8008530:	4478      	add	r0, pc
 8008532:	4408      	add	r0, r1
 8008534:	63e0      	str	r0, [r4, #60]	; 0x3c

            m_ContextSwitchTimer = Drivers.ContextSwitchTimer.Instance;
            m_ContextSwitchTimer.Reset();
 8008536:	f000 faaf 	bl	8008a98 <ContextSwitchTimer::Reset#19000>
 800853a:	bd10      	pop	{r4, pc}
 800853c:	17ff85e4 	.word	0x17ff85e4
 8008540:	ffffff18 	.word	0xffffff18

08008544 <Callback::Invoke#18841>:
 8008544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008548:	b081      	sub	sp, #4
 800854a:	6907      	ldr	r7, [r0, #16]
 800854c:	4698      	mov	r8, r3
 800854e:	4691      	mov	r9, r2
 8008550:	468a      	mov	sl, r1
 8008552:	b1b7      	cbz	r7, 8008582 <Callback::Invoke#18841+0x3e>
 8008554:	68bd      	ldr	r5, [r7, #8]
 8008556:	f107 0b0c 	add.w	fp, r7, #12
 800855a:	2600      	movs	r6, #0
 800855c:	e006      	b.n	800856c <Callback::Invoke#18841+0x28>
 800855e:	e9d1 0402 	ldrd	r0, r4, [r1, #8]
 8008562:	4651      	mov	r1, sl
 8008564:	464a      	mov	r2, r9
 8008566:	4643      	mov	r3, r8
 8008568:	47a0      	blx	r4
 800856a:	3601      	adds	r6, #1
 800856c:	42ae      	cmp	r6, r5
 800856e:	da0f      	bge.n	8008590 <Callback::Invoke#18841+0x4c>
 8008570:	68b8      	ldr	r0, [r7, #8]
 8008572:	4286      	cmp	r6, r0
 8008574:	d20f      	bcs.n	8008596 <Callback::Invoke#18841+0x52>
 8008576:	f85b 1026 	ldr.w	r1, [fp, r6, lsl #2]
 800857a:	2900      	cmp	r1, #0
 800857c:	d1ef      	bne.n	800855e <Callback::Invoke#18841+0x1a>
 800857e:	f7f7 ff73 	bl	8000468 <Thread::ThrowNullException#4411>
 8008582:	e9d0 1702 	ldrd	r1, r7, [r0, #8]
 8008586:	464a      	mov	r2, r9
 8008588:	4643      	mov	r3, r8
 800858a:	4608      	mov	r0, r1
 800858c:	4651      	mov	r1, sl
 800858e:	47b8      	blx	r7
 8008590:	b001      	add	sp, #4
 8008592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008596:	f7f8 fc8b 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>

0800859a <ThreadManager::WaitExpired#18647>:
        }

        //--//

        private void WaitExpired( Drivers.SystemTimer.Timer sysTickTimer, ulong currentTime )
        {
 800859a:	b510      	push	{r4, lr}
 800859c:	4604      	mov	r4, r0
            WaitExpired( RT.SchedulerTime.FromUnits( currentTime ) );
 800859e:	4610      	mov	r0, r2
 80085a0:	4619      	mov	r1, r3
 80085a2:	f7fc f99f 	bl	80048e4 <SchedulerTime::FromUnits#5490>
 80085a6:	4602      	mov	r2, r0
 80085a8:	4620      	mov	r0, r4
 80085aa:	460b      	mov	r3, r1
 80085ac:	f7fa fed3 	bl	8003356 <ThreadManager::WaitExpired#3545>
 80085b0:	bd10      	pop	{r4, pc}
 80085b2:	46c0      	nop			; (mov r8, r8)

080085b4 <SystemTimer::CreateTimer#18660>:
        /// Create a new Timer and return to the user
        /// </summary>
        /// <param name="callback">Handler to run on timer expiration</param>
        /// <returns>New Timer instance</returns>
        public Timer CreateTimer(Callback callback)
        {
 80085b4:	b5b0      	push	{r4, r5, r7, lr}
 80085b6:	4907      	ldr	r1, [pc, #28]	; (80085d4 <SystemTimer::CreateTimer#18660+0x20>)
 80085b8:	4604      	mov	r4, r0
            return new Timer(this, callback);
 80085ba:	4807      	ldr	r0, [pc, #28]	; (80085d8 <SystemTimer::CreateTimer#18660+0x24>)
 80085bc:	4a07      	ldr	r2, [pc, #28]	; (80085dc <SystemTimer::CreateTimer#18660+0x28>)
 80085be:	4479      	add	r1, pc
 80085c0:	4408      	add	r0, r1
 80085c2:	4411      	add	r1, r2
 80085c4:	f7f8 f966 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80085c8:	4621      	mov	r1, r4
 80085ca:	4605      	mov	r5, r0
 80085cc:	f000 f89e 	bl	800870c <Timer::.ctor#18849>
 80085d0:	4628      	mov	r0, r5
 80085d2:	bdb0      	pop	{r4, r5, r7, pc}
 80085d4:	17ff8556 	.word	0x17ff8556
 80085d8:	fffffe0c 	.word	0xfffffe0c
 80085dc:	e801a0d8 	.word	0xe801a0d8

080085e0 <InterruptController::Activate#18976>:
            m_interruptThread = new System.Threading.Thread(DispatchInterrupts);
            m_interruptThread.Priority = System.Threading.ThreadPriority.Highest;
        }

        public void Activate()
        {
 80085e0:	b580      	push	{r7, lr}
 80085e2:	4805      	ldr	r0, [pc, #20]	; (80085f8 <InterruptController::Activate#18976+0x18>)
            m_interruptThread.Start();
 80085e4:	4905      	ldr	r1, [pc, #20]	; (80085fc <InterruptController::Activate#18976+0x1c>)
 80085e6:	4478      	add	r0, pc
 80085e8:	4408      	add	r0, r1
 80085ea:	68c0      	ldr	r0, [r0, #12]
 80085ec:	b110      	cbz	r0, 80085f4 <InterruptController::Activate#18976+0x14>
 80085ee:	f7f9 ffab 	bl	8002548 <Thread::Start#4384>
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	f7f7 ff38 	bl	8000468 <Thread::ThrowNullException#4411>
 80085f8:	17ff852e 	.word	0x17ff852e
 80085fc:	fffffef8 	.word	0xfffffef8

08008600 <Timer::set_Timeout#18854>:
                get
                {
                    return m_timeout;
                }
                set
                {
 8008600:	b580      	push	{r7, lr}
 8008602:	4601      	mov	r1, r0
 8008604:	e9c1 2305 	strd	r2, r3, [r1, #20]
                    m_timeout = value;
                    m_owner.Register(this);
 8008608:	6908      	ldr	r0, [r1, #16]
 800860a:	b110      	cbz	r0, 8008612 <Timer::set_Timeout#18854+0x12>
 800860c:	f000 f92e 	bl	800886c <SystemTimer::Register#18668>
 8008610:	bd80      	pop	{r7, pc}
 8008612:	f7f7 ff29 	bl	8000468 <Thread::ThrowNullException#4411>

08008616 <Timer::Cancel#18850>:
            //
            // Helper Methods
            //

            public void Cancel()
            {
 8008616:	b580      	push	{r7, lr}
 8008618:	4601      	mov	r1, r0
                m_owner.Deregister(this);
 800861a:	6908      	ldr	r0, [r1, #16]
 800861c:	b110      	cbz	r0, 8008624 <Timer::Cancel#18850+0xe>
 800861e:	f000 f972 	bl	8008906 <SystemTimer::Deregister#18669>
 8008622:	bd80      	pop	{r7, pc}
 8008624:	f7f7 ff20 	bl	8000468 <Thread::ThrowNullException#4411>

08008628 <KernelList`1::.ctor#25691>:

        //
        // Constructor Methods
        //

        public KernelList()
 8008628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800862a:	b081      	sub	sp, #4
 800862c:	4604      	mov	r4, r0
 800862e:	480d      	ldr	r0, [pc, #52]	; (8008664 <KernelList`1::.ctor#25691+0x3c>)
        {
            m_head = new KernelNode< T >( default(T) );
 8008630:	490d      	ldr	r1, [pc, #52]	; (8008668 <KernelList`1::.ctor#25691+0x40>)
 8008632:	4478      	add	r0, pc
 8008634:	180d      	adds	r5, r1, r0
 8008636:	490d      	ldr	r1, [pc, #52]	; (800866c <KernelList`1::.ctor#25691+0x44>)
 8008638:	180e      	adds	r6, r1, r0
 800863a:	4628      	mov	r0, r5
 800863c:	4631      	mov	r1, r6
 800863e:	f7f8 f929 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8008642:	2700      	movs	r7, #0
            m_tail = new KernelNode< T >( default(T) );
 8008644:	4631      	mov	r1, r6
 8008646:	6107      	str	r7, [r0, #16]
 8008648:	60a0      	str	r0, [r4, #8]
 800864a:	4628      	mov	r0, r5
 800864c:	f7f8 f922 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8008650:	6107      	str	r7, [r0, #16]
 8008652:	60e0      	str	r0, [r4, #12]

            m_head.Next     = m_tail;
 8008654:	68a1      	ldr	r1, [r4, #8]
 8008656:	6088      	str	r0, [r1, #8]
            m_tail.Previous = m_head;
 8008658:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800865c:	60c8      	str	r0, [r1, #12]
 800865e:	b001      	add	sp, #4
 8008660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008662:	46c0      	nop			; (mov r8, r8)
 8008664:	17ff84e2 	.word	0x17ff84e2
 8008668:	fffffe0c 	.word	0xfffffe0c
 800866c:	e801a108 	.word	0xe801a108

08008670 <SystemTimer::HandleSystemTimer#18671>:
                current           - m_lastAccumulatorUpdate          :
                c_MaxCounterValue - m_lastAccumulatorUpdate + current;
        }

        private static void HandleSystemTimer(UIntPtr context, ulong ticks)
        {
 8008670:	b510      	push	{r4, lr}
 8008672:	2001      	movs	r0, #1
 8008674:	f001 f81c 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8008678:	4604      	mov	r4, r0
            using(RT.SmartHandles.InterruptState.Disable())
            {
                Instance.ProcessTimeout( ticks );
 800867a:	f000 f869 	bl	8008750 <SystemTimer::ProcessTimeout#18665>
            }
 800867e:	4620      	mov	r0, r4
 8008680:	f001 f816 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8008684:	bd10      	pop	{r4, pc}
 8008686:	46c0      	nop			; (mov r8, r8)

08008688 <Timer::LLOS_SYSTEM_TIMER_Enable#19272>:
    {
        public static unsafe uint LLOS_SYSTEM_TIMER_Enable( TimerCallback callback )
        {
            UIntPtr callbackPtr = UIntPtr.Zero;

            if(callback != null)
 8008688:	b580      	push	{r7, lr}
 800868a:	b118      	cbz	r0, 8008694 <Timer::LLOS_SYSTEM_TIMER_Enable#19272+0xc>
 800868c:	68c0      	ldr	r0, [r0, #12]
                DelegateImpl dlg = (DelegateImpl)(object)callback;

                callbackPtr = new UIntPtr( dlg.InnerGetCodePointer( ).Target.ToPointer( ) );
            }

            return LLOS_SYSTEM_TIMER_Enable( callbackPtr );
 800868e:	f001 fa2b 	bl	8009ae8 <LLOS_SYSTEM_TIMER_Enable>
 8008692:	bd80      	pop	{r7, pc}
 8008694:	4804      	ldr	r0, [pc, #16]	; (80086a8 <Timer::LLOS_SYSTEM_TIMER_Enable#19272+0x20>)

    public static class Timer
    {
        public static unsafe uint LLOS_SYSTEM_TIMER_Enable( TimerCallback callback )
        {
            UIntPtr callbackPtr = UIntPtr.Zero;
 8008696:	4905      	ldr	r1, [pc, #20]	; (80086ac <Timer::LLOS_SYSTEM_TIMER_Enable#19272+0x24>)
 8008698:	4478      	add	r0, pc
 800869a:	4408      	add	r0, r1
 800869c:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
                DelegateImpl dlg = (DelegateImpl)(object)callback;

                callbackPtr = new UIntPtr( dlg.InnerGetCodePointer( ).Target.ToPointer( ) );
            }

            return LLOS_SYSTEM_TIMER_Enable( callbackPtr );
 80086a0:	f001 fa22 	bl	8009ae8 <LLOS_SYSTEM_TIMER_Enable>
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	46c0      	nop			; (mov r8, r8)
 80086a8:	17ff847c 	.word	0x17ff847c
 80086ac:	fffffcf8 	.word	0xfffffcf8

080086b0 <SystemTimer::Refresh#18666>:
        
        /// <summary>
        /// Reload the next expiring timer, if there is one. Otherwise, reload QuarterCycle
        /// </summary>
        private void Refresh()
        {
 80086b0:	b570      	push	{r4, r5, r6, lr}
 80086b2:	4606      	mov	r6, r0
            ulong absTimeout;

            Timer target = m_timers.FirstTarget();
 80086b4:	68b0      	ldr	r0, [r6, #8]
 80086b6:	b338      	cbz	r0, 8008708 <SystemTimer::Refresh#18666+0x58>
 80086b8:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
 80086bc:	6890      	ldr	r0, [r2, #8]
 80086be:	f000 f8b4 	bl	800882a <KernelList`1::FirstTarget#25694>
 80086c2:	4605      	mov	r5, r0
                
            ulong now = this.CurrentTime;
 80086c4:	4630      	mov	r0, r6
 80086c6:	f7fc f91b 	bl	8004900 <SystemTimer::get_CurrentTime#18661>
 80086ca:	b115      	cbz	r5, 80086d2 <SystemTimer::Refresh#18666+0x22>
            /// </summary>
            public ulong Timeout
            {
                get
                {
                    return m_timeout;
 80086cc:	e9d5 2305 	ldrd	r2, r3, [r5, #20]
 80086d0:	e004      	b.n	80086dc <SystemTimer::Refresh#18666+0x2c>
            {
                absTimeout = target.Timeout;
            }
            else
            {
                absTimeout = c_QuarterCycle + now;
 80086d2:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80086d6:	1812      	adds	r2, r2, r0
 80086d8:	f141 0300 	adc.w	r3, r1, #0
            // 
            // Timeout in the past? Trigger the match immediately by loading 1 
            // Timeout too far in the future? Generate match for 
            // a fraction of largest counter value, so we have time to handle wraparounds 
            // 
            Reload((now > absTimeout) ? 1 : (absTimeout - now));
 80086dc:	4290      	cmp	r0, r2
 80086de:	f04f 0400 	mov.w	r4, #0
 80086e2:	f04f 0500 	mov.w	r5, #0
 80086e6:	bf88      	it	hi
 80086e8:	2401      	movhi	r4, #1
 80086ea:	4299      	cmp	r1, r3
 80086ec:	bf88      	it	hi
 80086ee:	2501      	movhi	r5, #1
 80086f0:	bf08      	it	eq
 80086f2:	4625      	moveq	r5, r4
 80086f4:	1a12      	subs	r2, r2, r0
 80086f6:	4630      	mov	r0, r6
 80086f8:	418b      	sbcs	r3, r1
 80086fa:	2d00      	cmp	r5, #0
 80086fc:	bf1c      	itt	ne
 80086fe:	2201      	movne	r2, #1
 8008700:	2300      	movne	r3, #0
 8008702:	f000 f89d 	bl	8008840 <SystemTimer::Reload#18667>
 8008706:	bd70      	pop	{r4, r5, r6, pc}
        /// </summary>
        private void Refresh()
        {
            ulong absTimeout;

            Timer target = m_timers.FirstTarget();
 8008708:	f7f7 feae 	bl	8000468 <Thread::ThrowNullException#4411>

0800870c <Timer::.ctor#18849>:

            //
            // Constructor Methods
            //

            internal Timer(SystemTimer owner, Callback callback)
 800870c:	b5b0      	push	{r4, r5, r7, lr}
 800870e:	460c      	mov	r4, r1
 8008710:	4907      	ldr	r1, [pc, #28]	; (8008730 <Timer::.ctor#18849+0x24>)
 8008712:	4605      	mov	r5, r0
 8008714:	4807      	ldr	r0, [pc, #28]	; (8008734 <Timer::.ctor#18849+0x28>)
            {
                m_owner = owner;
                m_node = new RT.KernelNode<Timer>(this);
 8008716:	4a09      	ldr	r2, [pc, #36]	; (800873c <Timer::.ctor#18849+0x30>)
 8008718:	4479      	add	r1, pc
 800871a:	4408      	add	r0, r1
 800871c:	6128      	str	r0, [r5, #16]
 800871e:	4806      	ldr	r0, [pc, #24]	; (8008738 <Timer::.ctor#18849+0x2c>)
 8008720:	4408      	add	r0, r1
 8008722:	4411      	add	r1, r2
 8008724:	f7f8 f8b6 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8008728:	6105      	str	r5, [r0, #16]
 800872a:	e9c5 4002 	strd	r4, r0, [r5, #8]
 800872e:	bdb0      	pop	{r4, r5, r7, pc}
 8008730:	17ff83fc 	.word	0x17ff83fc
 8008734:	fffffec8 	.word	0xfffffec8
 8008738:	fffffe0c 	.word	0xfffffe0c
 800873c:	e801a108 	.word	0xe801a108

08008740 <SystemTimer::TimeSinceAccumulatorUpdate#18670>:
        private uint TimeSinceAccumulatorUpdate( uint current )
        {
            // If the current timer value is greater than last accumulator update,
            // the counter is still going up. Otherwise, the timer hit its max value
            // and started counting from 0
            return (current >= m_lastAccumulatorUpdate) ?
 8008740:	1a0a      	subs	r2, r1, r0
 8008742:	ea6f 0000 	mvn.w	r0, r0
 8008746:	bf38      	it	cc
 8008748:	1842      	addcc	r2, r0, r1
 800874a:	4610      	mov	r0, r2
 800874c:	4770      	bx	lr
 800874e:	46c0      	nop			; (mov r8, r8)

08008750 <SystemTimer::ProcessTimeout#18665>:
        /// <summary>
        /// Handle the timer expiration interrupt
        /// </summary>
        /// <param name="ticks">Time when the timer was fired</param>
        private void ProcessTimeout(ulong ticks)
        {
 8008750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008754:	4824      	ldr	r0, [pc, #144]	; (80087e8 <SystemTimer::ProcessTimeout#18665+0x98>)
            uint counter = this.Counter;

            //
            // BUGBUG: this logic does not cover the case of multiple wraparounds
            //
            m_accumulator           += TimeSinceAccumulatorUpdate(counter);
 8008756:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80087ec <SystemTimer::ProcessTimeout#18665+0x9c>
 800875a:	4478      	add	r0, pc
 800875c:	eb08 0700 	add.w	r7, r8, r0
        public uint Counter
        {
            [RT.Inline]
            get
            {
                return (uint)LLOS.HAL.Timer.LLOS_SYSTEM_TIMER_GetTicks();
 8008760:	f001 f9d4 	bl	8009b0c <LLOS_SYSTEM_TIMER_GetTicks>
 8008764:	4604      	mov	r4, r0
            uint counter = this.Counter;

            //
            // BUGBUG: this logic does not cover the case of multiple wraparounds
            //
            m_accumulator           += TimeSinceAccumulatorUpdate(counter);
 8008766:	e9d7 5603 	ldrd	r5, r6, [r7, #12]
 800876a:	6978      	ldr	r0, [r7, #20]
 800876c:	4621      	mov	r1, r4
 800876e:	f7ff ffe7 	bl	8008740 <SystemTimer::TimeSinceAccumulatorUpdate#18670>
 8008772:	1940      	adds	r0, r0, r5
 8008774:	f107 020c 	add.w	r2, r7, #12
 8008778:	f146 0100 	adc.w	r1, r6, #0
 800877c:	e882 0013 	stmia.w	r2, {r0, r1, r4}
            m_lastAccumulatorUpdate =  counter;

            // we just updated this above, so it will be precise
            ulong now = m_accumulator;
 8008780:	e9d7 4503 	ldrd	r4, r5, [r7, #12]
 8008784:	e003      	b.n	800878e <SystemTimer::ProcessTimeout#18665+0x3e>
                // The current timeout is for the current node (Timer). Remove from List
                // so we do not try to Reload its time.
                node.RemoveFromList();

                // Invoke the handler for the expired timer
                node.Target.Invoke(now);
 8008786:	4622      	mov	r2, r4
 8008788:	462b      	mov	r3, r5
 800878a:	f000 f845 	bl	8008818 <Timer::Invoke#18851>
            // we just updated this above, so it will be precise
            ulong now = m_accumulator;

            while (true)
            {
                RT.KernelNode<Timer> node = m_timers.StartOfForwardWalk;
 800878e:	68b8      	ldr	r0, [r7, #8]
 8008790:	b308      	cbz	r0, 80087d6 <SystemTimer::ProcessTimeout#18665+0x86>
 8008792:	6880      	ldr	r0, [r0, #8]
 8008794:	6880      	ldr	r0, [r0, #8]
 8008796:	f000 f82d 	bl	80087f4 <KernelList`1::get_StartOfForwardWalk#25698>
 800879a:	4606      	mov	r6, r0
 800879c:	b1de      	cbz	r6, 80087d6 <SystemTimer::ProcessTimeout#18665+0x86>
 800879e:	68b0      	ldr	r0, [r6, #8]
 80087a0:	2800      	cmp	r0, #0
 80087a2:	bf18      	it	ne
 80087a4:	2001      	movne	r0, #1
 80087a6:	b1c0      	cbz	r0, 80087da <SystemTimer::ProcessTimeout#18665+0x8a>
 80087a8:	6930      	ldr	r0, [r6, #16]
 80087aa:	b1a0      	cbz	r0, 80087d6 <SystemTimer::ProcessTimeout#18665+0x86>
            /// </summary>
            public ulong Timeout
            {
                get
                {
                    return m_timeout;
 80087ac:	6981      	ldr	r1, [r0, #24]
 80087ae:	6940      	ldr	r0, [r0, #20]
                    break;
                }

                ulong timeout = node.Target.Timeout;

                if (timeout > now)
 80087b0:	42a0      	cmp	r0, r4
 80087b2:	f04f 0000 	mov.w	r0, #0
 80087b6:	bf88      	it	hi
 80087b8:	2001      	movhi	r0, #1
 80087ba:	42a9      	cmp	r1, r5
 80087bc:	f04f 0100 	mov.w	r1, #0
 80087c0:	bf88      	it	hi
 80087c2:	2101      	movhi	r1, #1
 80087c4:	bf08      	it	eq
 80087c6:	4601      	moveq	r1, r0
 80087c8:	b939      	cbnz	r1, 80087da <SystemTimer::ProcessTimeout#18665+0x8a>
                    break;
                }

                // The current timeout is for the current node (Timer). Remove from List
                // so we do not try to Reload its time.
                node.RemoveFromList();
 80087ca:	4630      	mov	r0, r6
 80087cc:	f000 f813 	bl	80087f6 <KernelNode`1::RemoveFromList#25706>
 80087d0:	6930      	ldr	r0, [r6, #16]

                // Invoke the handler for the expired timer
                node.Target.Invoke(now);
 80087d2:	2800      	cmp	r0, #0
 80087d4:	d1d7      	bne.n	8008786 <SystemTimer::ProcessTimeout#18665+0x36>
            // we just updated this above, so it will be precise
            ulong now = m_accumulator;

            while (true)
            {
                RT.KernelNode<Timer> node = m_timers.StartOfForwardWalk;
 80087d6:	f7f7 fe47 	bl	8000468 <Thread::ThrowNullException#4411>
 80087da:	4805      	ldr	r0, [pc, #20]	; (80087f0 <SystemTimer::ProcessTimeout#18665+0xa0>)
 80087dc:	4478      	add	r0, pc

                // Invoke the handler for the expired timer
                node.Target.Invoke(now);
            }

            Refresh();
 80087de:	4440      	add	r0, r8
 80087e0:	f7ff ff66 	bl	80086b0 <SystemTimer::Refresh#18666>
 80087e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e8:	17ff83ba 	.word	0x17ff83ba
 80087ec:	fffffec8 	.word	0xfffffec8
 80087f0:	17ff8338 	.word	0x17ff8338

080087f4 <KernelList`1::get_StartOfForwardWalk#25698>:
 80087f4:	4770      	bx	lr

080087f6 <KernelNode`1::RemoveFromList#25706>:
            this.ConnectToNext( place );
        }

        public void RemoveFromList()
        {
            if(m_next != null)
 80087f6:	b580      	push	{r7, lr}
 80087f8:	6881      	ldr	r1, [r0, #8]
 80087fa:	b139      	cbz	r1, 800880c <KernelNode`1::RemoveFromList#25706+0x16>
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 80087fc:	6881      	ldr	r1, [r0, #8]
            KernelNode< T > prev = m_previous;

            next.m_previous = prev;
 80087fe:	2900      	cmp	r1, #0

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
            KernelNode< T > prev = m_previous;
 8008800:	bf1e      	ittt	ne
 8008802:	68c2      	ldrne	r2, [r0, #12]
 8008804:	60ca      	strne	r2, [r1, #12]

            next.m_previous = prev;
            prev.m_next     = next;
 8008806:	2a00      	cmpne	r2, #0
 8008808:	d004      	beq.n	8008814 <KernelNode`1::RemoveFromList#25706+0x1e>
 800880a:	6091      	str	r1, [r2, #8]
 800880c:	2100      	movs	r1, #0
 800880e:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8008812:	bd80      	pop	{r7, pc}
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
            KernelNode< T > prev = m_previous;

            next.m_previous = prev;
 8008814:	f7f7 fe28 	bl	8000468 <Thread::ThrowNullException#4411>

08008818 <Timer::Invoke#18851>:
            /// <summary>
            /// Call to the Timer handler
            /// </summary>
            /// <param name="currentTime">Time in ticks</param>
            internal void Invoke(ulong currentTime)
            {
 8008818:	b580      	push	{r7, lr}
 800881a:	4601      	mov	r1, r0
                m_callback(this, currentTime);
 800881c:	6888      	ldr	r0, [r1, #8]
 800881e:	b110      	cbz	r0, 8008826 <Timer::Invoke#18851+0xe>
 8008820:	f7ff fe90 	bl	8008544 <Callback::Invoke#18841>
 8008824:	bd80      	pop	{r7, pc}
 8008826:	f7f7 fe1f 	bl	8000468 <Thread::ThrowNullException#4411>

0800882a <KernelList`1::FirstTarget#25694>:

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;

            if(node != m_tail)
 800882a:	b580      	push	{r7, lr}
 800882c:	4288      	cmp	r0, r1
 800882e:	bf04      	itt	eq
 8008830:	2000      	moveq	r0, #0
 8008832:	bd80      	popeq	{r7, pc}
            {
                return node.Target;
 8008834:	2800      	cmp	r0, #0
 8008836:	bf1c      	itt	ne
 8008838:	6900      	ldrne	r0, [r0, #16]
 800883a:	bd80      	popne	{r7, pc}
            return null;
        }

        public T FirstTarget()
        {
            KernelNode< T > node = m_head.Next;
 800883c:	f7f7 fe14 	bl	8000468 <Thread::ThrowNullException#4411>

08008840 <SystemTimer::Reload#18667>:
        /// <summary>
        /// Place the timer closest to expiration on the mbed queue
        /// </summary>
        /// <param name="remainder"></param>
        private void Reload(ulong remainder)
        {
 8008840:	b580      	push	{r7, lr}
 8008842:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008846:	f04f 0100 	mov.w	r1, #0
 800884a:	f04f 0c00 	mov.w	ip, #0
 800884e:	bf38      	it	cc
 8008850:	2101      	movcc	r1, #1
 8008852:	2b00      	cmp	r3, #0
 8008854:	f04f 0300 	mov.w	r3, #0
 8008858:	bf18      	it	ne
 800885a:	4661      	movne	r1, ip
 800885c:	2900      	cmp	r1, #0
 800885e:	bf08      	it	eq
 8008860:	f06f 4240 	mvneq.w	r2, #3221225472	; 0xc0000000
            // This is guaranteed to fit in a uint
            uint trimmed = (uint)Math.Min(remainder, c_QuarterCycle);

            unsafe
            {
                LLOS.HAL.Timer.LLOS_SYSTEM_TIMER_ScheduleTimer( m_timerEvent, trimmed );
 8008864:	6980      	ldr	r0, [r0, #24]
 8008866:	f001 f96f 	bl	8009b48 <LLOS_SYSTEM_TIMER_ScheduleTimer>
 800886a:	bd80      	pop	{r7, pc}

0800886c <SystemTimer::Register#18668>:
        /// <summary>
        /// Add the timer to the queue in the chronologically appropriate position
        /// </summary>
        /// <param name="timer">Timer to add</param>
        private void Register(Timer timer)
        {
 800886c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800886e:	b081      	sub	sp, #4
 8008870:	460e      	mov	r6, r1
 8008872:	4604      	mov	r4, r0
            RT.KernelNode<Timer> node = timer.Node;
 8008874:	2e00      	cmp	r6, #0

            internal RT.KernelNode<Timer> Node
            {
                get
                {
                    return m_node;
 8008876:	bf1c      	itt	ne
 8008878:	68f5      	ldrne	r5, [r6, #12]
        /// <param name="timer">Timer to add</param>
        private void Register(Timer timer)
        {
            RT.KernelNode<Timer> node = timer.Node;

            node.RemoveFromList();
 800887a:	2d00      	cmpne	r5, #0
 800887c:	d02a      	beq.n	80088d4 <SystemTimer::Register#18668+0x68>
 800887e:	4628      	mov	r0, r5
 8008880:	f7ff ffb9 	bl	80087f6 <KernelNode`1::RemoveFromList#25706>

            ulong timeout = timer.Timeout;

            RT.KernelNode<Timer> node2 = m_timers.StartOfForwardWalk;
 8008884:	68a0      	ldr	r0, [r4, #8]
 8008886:	b328      	cbz	r0, 80088d4 <SystemTimer::Register#18668+0x68>
            /// </summary>
            public ulong Timeout
            {
                get
                {
                    return m_timeout;
 8008888:	69b7      	ldr	r7, [r6, #24]
 800888a:	6976      	ldr	r6, [r6, #20]
 800888c:	6880      	ldr	r0, [r0, #8]
 800888e:	6880      	ldr	r0, [r0, #8]

            node.RemoveFromList();

            ulong timeout = timer.Timeout;

            RT.KernelNode<Timer> node2 = m_timers.StartOfForwardWalk;
 8008890:	f7ff ffb0 	bl	80087f4 <KernelList`1::get_StartOfForwardWalk#25698>
 8008894:	4601      	mov	r1, r0
 8008896:	e000      	b.n	800889a <SystemTimer::Register#18668+0x2e>
 8008898:	6889      	ldr	r1, [r1, #8]
 800889a:	b1d9      	cbz	r1, 80088d4 <SystemTimer::Register#18668+0x68>
 800889c:	6888      	ldr	r0, [r1, #8]
 800889e:	b188      	cbz	r0, 80088c4 <SystemTimer::Register#18668+0x58>
 80088a0:	6908      	ldr	r0, [r1, #16]
 80088a2:	b1b8      	cbz	r0, 80088d4 <SystemTimer::Register#18668+0x68>
            /// </summary>
            public ulong Timeout
            {
                get
                {
                    return m_timeout;
 80088a4:	6982      	ldr	r2, [r0, #24]
 80088a6:	6940      	ldr	r0, [r0, #20]

            RT.KernelNode<Timer> node2 = m_timers.StartOfForwardWalk;

            while (node2.IsValidForForwardMove)
            {
                if (node2.Target.Timeout > timeout)
 80088a8:	42b0      	cmp	r0, r6
 80088aa:	f04f 0000 	mov.w	r0, #0
 80088ae:	bf88      	it	hi
 80088b0:	2001      	movhi	r0, #1
 80088b2:	42ba      	cmp	r2, r7
 80088b4:	f04f 0200 	mov.w	r2, #0
 80088b8:	bf88      	it	hi
 80088ba:	2201      	movhi	r2, #1
 80088bc:	bf08      	it	eq
 80088be:	4602      	moveq	r2, r0
 80088c0:	2a00      	cmp	r2, #0
 80088c2:	d0e9      	beq.n	8008898 <SystemTimer::Register#18668+0x2c>
                }

                node2 = node2.Next;
            }

            node.InsertBefore(node2);
 80088c4:	4628      	mov	r0, r5
 80088c6:	f000 f807 	bl	80088d8 <KernelNode`1::InsertBefore#25705>

            Refresh();
 80088ca:	4620      	mov	r0, r4
 80088cc:	f7ff fef0 	bl	80086b0 <SystemTimer::Refresh#18666>
 80088d0:	b001      	add	sp, #4
 80088d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        /// Add the timer to the queue in the chronologically appropriate position
        /// </summary>
        /// <param name="timer">Timer to add</param>
        private void Register(Timer timer)
        {
            RT.KernelNode<Timer> node = timer.Node;
 80088d4:	f7f7 fdc8 	bl	8000468 <Thread::ThrowNullException#4411>

080088d8 <KernelNode`1::InsertBefore#25705>:
        // Helper Methods
        //

        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
 80088d8:	b580      	push	{r7, lr}
 80088da:	6882      	ldr	r2, [r0, #8]
 80088dc:	b13a      	cbz	r2, 80088ee <KernelNode`1::InsertBefore#25705+0x16>
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 80088de:	6882      	ldr	r2, [r0, #8]
            KernelNode< T > prev = m_previous;

            next.m_previous = prev;
 80088e0:	2a00      	cmp	r2, #0

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
            KernelNode< T > prev = m_previous;
 80088e2:	bf1e      	ittt	ne
 80088e4:	68c3      	ldrne	r3, [r0, #12]
 80088e6:	60d3      	strne	r3, [r2, #12]

            next.m_previous = prev;
            prev.m_next     = next;
 80088e8:	2b00      	cmpne	r3, #0
 80088ea:	d00a      	beq.n	8008902 <KernelNode`1::InsertBefore#25705+0x2a>
 80088ec:	609a      	str	r2, [r3, #8]
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }

            KernelNode< T > prev = place.m_previous;
 80088ee:	2900      	cmp	r1, #0
 80088f0:	bf1c      	itt	ne
 80088f2:	68ca      	ldrne	r2, [r1, #12]

            prev.ConnectToNext( this  );
 80088f4:	2a00      	cmpne	r2, #0
 80088f6:	d004      	beq.n	8008902 <KernelNode`1::InsertBefore#25705+0x2a>
 80088f8:	6090      	str	r0, [r2, #8]
 80088fa:	e9c0 1202 	strd	r1, r2, [r0, #8]
 80088fe:	60c8      	str	r0, [r1, #12]
 8008900:	bd80      	pop	{r7, pc}
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }

            KernelNode< T > prev = place.m_previous;
 8008902:	f7f7 fdb1 	bl	8000468 <Thread::ThrowNullException#4411>

08008906 <SystemTimer::Deregister#18669>:
        /// <summary>
        /// Remove the timer from the queue
        /// </summary>
        /// <param name="timer">Timer to be removed</param>
        private void Deregister(Timer timer)
        {
 8008906:	b510      	push	{r4, lr}
            var node = timer.Node;
 8008908:	2900      	cmp	r1, #0
 800890a:	4604      	mov	r4, r0

            internal RT.KernelNode<Timer> Node
            {
                get
                {
                    return m_node;
 800890c:	bf1c      	itt	ne
 800890e:	68c8      	ldrne	r0, [r1, #12]
        /// <param name="timer">Timer to be removed</param>
        private void Deregister(Timer timer)
        {
            var node = timer.Node;

            if (node.IsLinked)
 8008910:	2800      	cmpne	r0, #0
 8008912:	d009      	beq.n	8008928 <SystemTimer::Deregister#18669+0x22>
 8008914:	6881      	ldr	r1, [r0, #8]
 8008916:	2900      	cmp	r1, #0
 8008918:	bf08      	it	eq
 800891a:	bd10      	popeq	{r4, pc}
            {
                node.RemoveFromList();
 800891c:	f7ff ff6b 	bl	80087f6 <KernelNode`1::RemoveFromList#25706>

                Refresh();
 8008920:	4620      	mov	r0, r4
 8008922:	f7ff fec5 	bl	80086b0 <SystemTimer::Refresh#18666>
 8008926:	bd10      	pop	{r4, pc}
        /// Remove the timer from the queue
        /// </summary>
        /// <param name="timer">Timer to be removed</param>
        private void Deregister(Timer timer)
        {
            var node = timer.Node;
 8008928:	f7f7 fd9e 	bl	8000468 <Thread::ThrowNullException#4411>

0800892c <Peripherals::Initialize#18861>:
        // Helper Methods
        //

        public override void Initialize()
        {
            RT.BugCheck.AssertInterruptsOff();
 800892c:	b580      	push	{r7, lr}
 800892e:	f7fa f887 	bl	8002a40 <BugCheck::AssertInterruptsOff#5289>
 8008932:	f06f 000c 	mvn.w	r0, #12
 8008936:	2100      	movs	r1, #0
 8008938:	f001 f89e 	bl	8009a78 <CMSIS_STUB_NVIC_SetPriority>
 800893c:	f06f 000b 	mvn.w	r0, #11
 8008940:	2100      	movs	r1, #0
 8008942:	f001 f899 	bl	8009a78 <CMSIS_STUB_NVIC_SetPriority>
 8008946:	f06f 000a 	mvn.w	r0, #10
 800894a:	2100      	movs	r1, #0
 800894c:	f001 f894 	bl	8009a78 <CMSIS_STUB_NVIC_SetPriority>
 8008950:	f06f 0009 	mvn.w	r0, #9
 8008954:	2100      	movs	r1, #0
 8008956:	f001 f88f 	bl	8009a78 <CMSIS_STUB_NVIC_SetPriority>
 800895a:	f06f 0004 	mvn.w	r0, #4
 800895e:	2105      	movs	r1, #5
 8008960:	f001 f88a 	bl	8009a78 <CMSIS_STUB_NVIC_SetPriority>
 8008964:	f04f 30ff 	mov.w	r0, #4294967295
 8008968:	2107      	movs	r1, #7
 800896a:	f001 f885 	bl	8009a78 <CMSIS_STUB_NVIC_SetPriority>
 800896e:	f06f 0001 	mvn.w	r0, #1
 8008972:	210e      	movs	r1, #14
 8008974:	f001 f880 	bl	8009a78 <CMSIS_STUB_NVIC_SetPriority>
 8008978:	bd80      	pop	{r7, pc}
 800897a:	46c0      	nop			; (mov r8, r8)

0800897c <InterruptController::Initialize#18975>:
        //
        // Helper Methods
        //

        public void Initialize()
        {
 800897c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800897e:	b081      	sub	sp, #4
 8008980:	4f1a      	ldr	r7, [pc, #104]	; (80089ec <InterruptController::Initialize#18975+0x70>)
            m_handlers = new RT.KernelList< Handler >();
 8008982:	481b      	ldr	r0, [pc, #108]	; (80089f0 <InterruptController::Initialize#18975+0x74>)
 8008984:	447f      	add	r7, pc
 8008986:	19c4      	adds	r4, r0, r7
 8008988:	481a      	ldr	r0, [pc, #104]	; (80089f4 <InterruptController::Initialize#18975+0x78>)
 800898a:	19c1      	adds	r1, r0, r7
 800898c:	4620      	mov	r0, r4
 800898e:	f7f7 ff81 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8008992:	4606      	mov	r6, r0
 8008994:	f000 f8c4 	bl	8008b20 <KernelList`1::.ctor#25723>
 8008998:	4817      	ldr	r0, [pc, #92]	; (80089f8 <InterruptController::Initialize#18975+0x7c>)
 800899a:	19c5      	adds	r5, r0, r7
            m_interrupts = new RT.KernelCircularBuffer<InterruptData>(32);
 800899c:	4817      	ldr	r0, [pc, #92]	; (80089fc <InterruptController::Initialize#18975+0x80>)
 800899e:	60ae      	str	r6, [r5, #8]
 80089a0:	19c1      	adds	r1, r0, r7
 80089a2:	4620      	mov	r0, r4
 80089a4:	f7f7 ff76 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80089a8:	4606      	mov	r6, r0
 80089aa:	f000 f8dd 	bl	8008b68 <KernelCircularBuffer`1::.ctor#25742>
            m_interruptThread = new System.Threading.Thread(DispatchInterrupts);
 80089ae:	4814      	ldr	r0, [pc, #80]	; (8008a00 <InterruptController::Initialize#18975+0x84>)
 80089b0:	612e      	str	r6, [r5, #16]
 80089b2:	19c1      	adds	r1, r0, r7
 80089b4:	4620      	mov	r0, r4
 80089b6:	f7f7 ff6d 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80089ba:	4606      	mov	r6, r0
 80089bc:	4811      	ldr	r0, [pc, #68]	; (8008a04 <InterruptController::Initialize#18975+0x88>)
 80089be:	4629      	mov	r1, r5
 80089c0:	19c2      	adds	r2, r0, r7
 80089c2:	4630      	mov	r0, r6
 80089c4:	f7f8 fce2 	bl	800138c <Delegate::.ctor#5246>
 80089c8:	480f      	ldr	r0, [pc, #60]	; (8008a08 <InterruptController::Initialize#18975+0x8c>)
 80089ca:	19c1      	adds	r1, r0, r7
 80089cc:	4620      	mov	r0, r4
 80089ce:	f7f7 ff61 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80089d2:	4631      	mov	r1, r6
 80089d4:	4604      	mov	r4, r0
 80089d6:	f7f9 fd0f 	bl	80023f8 <Thread::.ctor#4380>
            m_interruptThread.Priority = System.Threading.ThreadPriority.Highest;
 80089da:	2c00      	cmp	r4, #0
 80089dc:	60ec      	str	r4, [r5, #12]
 80089de:	bf1f      	itttt	ne
 80089e0:	2004      	movne	r0, #4
 80089e2:	6120      	strne	r0, [r4, #16]
 80089e4:	b001      	addne	sp, #4
 80089e6:	bdf0      	popne	{r4, r5, r6, r7, pc}
        // Helper Methods
        //

        public void Initialize()
        {
            m_handlers = new RT.KernelList< Handler >();
 80089e8:	f7f7 fd3e 	bl	8000468 <Thread::ThrowNullException#4411>
 80089ec:	17ff8190 	.word	0x17ff8190
 80089f0:	fffffe0c 	.word	0xfffffe0c
 80089f4:	e801a138 	.word	0xe801a138
 80089f8:	fffffef8 	.word	0xfffffef8
 80089fc:	e801a168 	.word	0xe801a168
 8008a00:	e80198f8 	.word	0xe80198f8
 8008a04:	e80080b9 	.word	0xe80080b9
 8008a08:	e8019958 	.word	0xe8019958

08008a0c <ContextSwitchTimer::Initialize#18997>:
        }
        
        //--//

        public void Initialize()
        {
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	4808      	ldr	r0, [pc, #32]	; (8008a30 <ContextSwitchTimer::Initialize#18997+0x24>)
 8008a10:	4908      	ldr	r1, [pc, #32]	; (8008a34 <ContextSwitchTimer::Initialize#18997+0x28>)
 8008a12:	4478      	add	r0, pc
 8008a14:	180c      	adds	r4, r1, r0
 8008a16:	4908      	ldr	r1, [pc, #32]	; (8008a38 <ContextSwitchTimer::Initialize#18997+0x2c>)
 8008a18:	4408      	add	r0, r1
 8008a1a:	60a0      	str	r0, [r4, #8]
            m_sysTick = CMSIS.SysTick.Instance;

            //--//

            // Reset HW, stop all SysTick interrupts 
            Cancel();
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f000 f862 	bl	8008ae6 <ContextSwitchTimer::Cancel#18999>
 8008a22:	f248 4080 	movw	r0, #33920	; 0x8480
 8008a26:	f2c0 001e 	movt	r0, #30
 8008a2a:	60e0      	str	r0, [r4, #12]
 8008a2c:	bd10      	pop	{r4, pc}
 8008a2e:	46c0      	nop			; (mov r8, r8)
 8008a30:	17ff8102 	.word	0x17ff8102
 8008a34:	ffffff18 	.word	0xffffff18
 8008a38:	ffffff34 	.word	0xffffff34

08008a3c <Peripherals::CauseInterrupt#18865>:
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008a42:	f7f7 fecb 	bl	80007dc <ProcessorARMv7M::RaiseSystemHandler#3605>
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <Peripherals::WaitForInterrupt#18867>:
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	f000 fe6b 	bl	8009724 <CMSIS_STUB_POWER_WaitForEvent>
 8008a4e:	e7fc      	b.n	8008a4a <Peripherals::WaitForInterrupt#18867+0x2>

08008a50 <InterruptController::ProcessInterrupt#18983>:
 8008a50:	4770      	bx	lr

08008a52 <Storage::InitializeStorage#18877>:
 8008a52:	4770      	bx	lr

08008a54 <SysTick::get_TenMillisecondsCalibrationValue#18942>:

        public uint TenMillisecondsCalibrationValue
        {
            get
            {
                return CMSIS_STUB_SysTick_GetCALIB( ) & SYST_CALIB__TENMS___MASK;
 8008a54:	b580      	push	{r7, lr}
 8008a56:	f001 f8c5 	bl	8009be4 <CMSIS_STUB_SysTick_GetCALIB>
 8008a5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <SysTick::get_HasRef#18943>:

        public bool HasRef
        {
            get
            {
                return ((CMSIS_STUB_SysTick_GetCALIB() & SYST_CALIB__NOREF__MASK) == SYST_CALIB__NOREF__HASREF);
 8008a60:	b580      	push	{r7, lr}
 8008a62:	f001 f8bf 	bl	8009be4 <CMSIS_STUB_SysTick_GetCALIB>
 8008a66:	2100      	movs	r1, #0
 8008a68:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8008a6c:	bf08      	it	eq
 8008a6e:	2101      	moveq	r1, #1
 8008a70:	4608      	mov	r0, r1
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <SysTick::get_IsPrecise#18944>:

        public bool IsPrecise
        {
            get
            {
                return  (CMSIS_STUB_SysTick_GetCALIB() & SYST_CALIB__SKEW__MASK) == SYST_CALIB__SKEW__PRECISE;
 8008a74:	b580      	push	{r7, lr}
 8008a76:	f001 f8b5 	bl	8009be4 <CMSIS_STUB_SysTick_GetCALIB>
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a80:	bf08      	it	eq
 8008a82:	2101      	moveq	r1, #1
 8008a84:	4608      	mov	r0, r1
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <ThreadManager::InitializeBeforeStaticConstructors#18957>:
        // Helper Methods
        //

        public override void InitializeBeforeStaticConstructors()
        {
            base.InitializeBeforeStaticConstructors();
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	f7fa fa51 	bl	8002f30 <ThreadManager::InitializeBeforeStaticConstructors#3519>
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <ThreadManager::InitializeAfterStaticConstructors#18958>:
 8008a90:	b580      	push	{r7, lr}
 8008a92:	f7fa fa85 	bl	8002fa0 <ThreadManager::InitializeAfterStaticConstructors#3520>
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <ContextSwitchTimer::Reset#19000>:
            m_sysTick.Enabled = false;
            m_enabled = false;
        }

        public void Reset( )
        {
 8008a98:	b510      	push	{r4, lr}
 8008a9a:	4604      	mov	r4, r0
            if(m_enabled)
 8008a9c:	7c20      	ldrb	r0, [r4, #16]
 8008a9e:	b128      	cbz	r0, 8008aac <ContextSwitchTimer::Reset#19000+0x14>
            {
                // If the timer is already enabled, then only the counter needs to be
                // reset.
                m_sysTick.ResetAndClear();
 8008aa0:	68a0      	ldr	r0, [r4, #8]
 8008aa2:	b1d8      	cbz	r0, 8008adc <ContextSwitchTimer::Reset#19000+0x44>
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	f001 f893 	bl	8009bd0 <CMSIS_STUB_SysTick_SetVAL>
 8008aaa:	bd10      	pop	{r4, pc}
        private void SetMatchAndStart( uint match )
        {
            // 
            // Restarting causes the match value to be picked up
            // 
            m_sysTick.Match   = match;
 8008aac:	68a0      	ldr	r0, [r4, #8]
 8008aae:	b1a8      	cbz	r0, 8008adc <ContextSwitchTimer::Reset#19000+0x44>
                // reset.
                m_sysTick.ResetAndClear();
            }
            else
            {
                SetMatchAndStart( m_reload20ms );
 8008ab0:	68e0      	ldr	r0, [r4, #12]
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008ab8:	bf38      	it	cc
 8008aba:	2101      	movcc	r1, #1
 8008abc:	b181      	cbz	r1, 8008ae0 <ContextSwitchTimer::Reset#19000+0x48>
 8008abe:	f001 f87d 	bl	8009bbc <CMSIS_STUB_SysTick_SetLOAD>
        {
            // 
            // Restarting causes the match value to be picked up
            // 
            m_sysTick.Match   = match;
            m_sysTick.Counter = 0;
 8008ac2:	68a0      	ldr	r0, [r4, #8]
 8008ac4:	b150      	cbz	r0, 8008adc <ContextSwitchTimer::Reset#19000+0x44>
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	f001 f882 	bl	8009bd0 <CMSIS_STUB_SysTick_SetVAL>
            m_sysTick.Enabled = true; 
 8008acc:	68a0      	ldr	r0, [r4, #8]
 8008ace:	b128      	cbz	r0, 8008adc <ContextSwitchTimer::Reset#19000+0x44>
 8008ad0:	2007      	movs	r0, #7
 8008ad2:	f001 f86d 	bl	8009bb0 <CMSIS_STUB_SysTick_SetCTRL>
 8008ad6:	2001      	movs	r0, #1
 8008ad8:	7420      	strb	r0, [r4, #16]
 8008ada:	bd10      	pop	{r4, pc}
        private void SetMatchAndStart( uint match )
        {
            // 
            // Restarting causes the match value to be picked up
            // 
            m_sysTick.Match   = match;
 8008adc:	f7f7 fcc4 	bl	8000468 <Thread::ThrowNullException#4411>
 8008ae0:	2009      	movs	r0, #9
 8008ae2:	f7f7 fbe3 	bl	80002ac <BugCheck::Raise#5282>

08008ae6 <ContextSwitchTimer::Cancel#18999>:
        {
            SetMatchAndStart( GetTicksForQuantumValue( timeout_ms ) );
        }

        public void Cancel( )
        {
 8008ae6:	b510      	push	{r4, lr}
 8008ae8:	4604      	mov	r4, r0
            m_sysTick.Enabled = false;
 8008aea:	68a0      	ldr	r0, [r4, #8]
 8008aec:	b140      	cbz	r0, 8008b00 <ContextSwitchTimer::Cancel#18999+0x1a>
 8008aee:	f001 f859 	bl	8009ba4 <CMSIS_STUB_SysTick_GetCTRL>
 8008af2:	f020 0001 	bic.w	r0, r0, #1
 8008af6:	f001 f85b 	bl	8009bb0 <CMSIS_STUB_SysTick_SetCTRL>
 8008afa:	2000      	movs	r0, #0
 8008afc:	7420      	strb	r0, [r4, #16]
 8008afe:	bd10      	pop	{r4, pc}
 8008b00:	f7f7 fcb2 	bl	8000468 <Thread::ThrowNullException#4411>

08008b04 <ThreadManager::TimeQuantumExpired#18963>:
 8008b04:	b510      	push	{r4, lr}
 8008b06:	4604      	mov	r4, r0
 8008b08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008b0a:	f7f7 fe29 	bl	8000760 <ThreadManager::InsertInPriorityOrder#3551>
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f7f7 fe4a 	bl	80007a8 <ThreadManager::SelectNextThreadToRun#3536>
 8008b14:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008b18:	f7f7 fe60 	bl	80007dc <ProcessorARMv7M::RaiseSystemHandler#3605>
 8008b1c:	bd10      	pop	{r4, pc}
 8008b1e:	46c0      	nop			; (mov r8, r8)

08008b20 <KernelList`1::.ctor#25723>:

        //
        // Constructor Methods
        //

        public KernelList()
 8008b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b22:	b081      	sub	sp, #4
 8008b24:	4604      	mov	r4, r0
 8008b26:	480d      	ldr	r0, [pc, #52]	; (8008b5c <KernelList`1::.ctor#25723+0x3c>)
        {
            m_head = new KernelNode< T >( default(T) );
 8008b28:	490d      	ldr	r1, [pc, #52]	; (8008b60 <KernelList`1::.ctor#25723+0x40>)
 8008b2a:	4478      	add	r0, pc
 8008b2c:	180d      	adds	r5, r1, r0
 8008b2e:	490d      	ldr	r1, [pc, #52]	; (8008b64 <KernelList`1::.ctor#25723+0x44>)
 8008b30:	180e      	adds	r6, r1, r0
 8008b32:	4628      	mov	r0, r5
 8008b34:	4631      	mov	r1, r6
 8008b36:	f7f7 fead 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8008b3a:	2700      	movs	r7, #0
            m_tail = new KernelNode< T >( default(T) );
 8008b3c:	4631      	mov	r1, r6
 8008b3e:	6107      	str	r7, [r0, #16]
 8008b40:	60a0      	str	r0, [r4, #8]
 8008b42:	4628      	mov	r0, r5
 8008b44:	f7f7 fea6 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8008b48:	6107      	str	r7, [r0, #16]
 8008b4a:	60e0      	str	r0, [r4, #12]

            m_head.Next     = m_tail;
 8008b4c:	68a1      	ldr	r1, [r4, #8]
 8008b4e:	6088      	str	r0, [r1, #8]
            m_tail.Previous = m_head;
 8008b50:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8008b54:	60c8      	str	r0, [r1, #12]
 8008b56:	b001      	add	sp, #4
 8008b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b5a:	46c0      	nop			; (mov r8, r8)
 8008b5c:	17ff7fea 	.word	0x17ff7fea
 8008b60:	fffffe0c 	.word	0xfffffe0c
 8008b64:	e801a3a8 	.word	0xe801a3a8

08008b68 <KernelCircularBuffer`1::.ctor#25742>:

        //
        // Constructor Methods
        //

        public KernelCircularBuffer( int size )
 8008b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b6a:	b081      	sub	sp, #4
 8008b6c:	4e14      	ldr	r6, [pc, #80]	; (8008bc0 <KernelCircularBuffer`1::.ctor#25742+0x58>)
 8008b6e:	4604      	mov	r4, r0
 8008b70:	2020      	movs	r0, #32
 8008b72:	2220      	movs	r2, #32
 8008b74:	60a0      	str	r0, [r4, #8]
        {
            m_size        = size;
            m_array       = new T[size];
 8008b76:	4813      	ldr	r0, [pc, #76]	; (8008bc4 <KernelCircularBuffer`1::.ctor#25742+0x5c>)
 8008b78:	447e      	add	r6, pc
 8008b7a:	1985      	adds	r5, r0, r6
 8008b7c:	4812      	ldr	r0, [pc, #72]	; (8008bc8 <KernelCircularBuffer`1::.ctor#25742+0x60>)
 8008b7e:	1981      	adds	r1, r0, r6
 8008b80:	4628      	mov	r0, r5
 8008b82:	f7f8 ff47 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 8008b86:	60e0      	str	r0, [r4, #12]
            m_writerEvent = new ManualResetEvent( true  );
 8008b88:	4810      	ldr	r0, [pc, #64]	; (8008bcc <KernelCircularBuffer`1::.ctor#25742+0x64>)
 8008b8a:	4406      	add	r6, r0
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	4631      	mov	r1, r6
 8008b90:	f7f7 fe80 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8008b94:	2101      	movs	r1, #1
 8008b96:	2201      	movs	r2, #1
 8008b98:	4607      	mov	r7, r0
 8008b9a:	f7fa faa9 	bl	80030f0 <EventWaitHandle::.ctor#4319>
            m_readerEvent = new ManualResetEvent( false );
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	4631      	mov	r1, r6
 8008ba2:	6127      	str	r7, [r4, #16]
 8008ba4:	f7f7 fe76 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8008ba8:	2100      	movs	r1, #0

        public KernelCircularBuffer( int size )
        {
            m_size        = size;
            m_array       = new T[size];
            m_writerEvent = new ManualResetEvent( true  );
 8008baa:	2201      	movs	r2, #1
            m_readerEvent = new ManualResetEvent( false );
 8008bac:	4605      	mov	r5, r0
 8008bae:	2600      	movs	r6, #0
 8008bb0:	f7fa fa9e 	bl	80030f0 <EventWaitHandle::.ctor#4319>
 8008bb4:	e9c4 5605 	strd	r5, r6, [r4, #20]
 8008bb8:	e9c4 6607 	strd	r6, r6, [r4, #28]
 8008bbc:	b001      	add	sp, #4
 8008bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bc0:	17ff7f9c 	.word	0x17ff7f9c
 8008bc4:	fffffe0c 	.word	0xfffffe0c
 8008bc8:	e801a3d8 	.word	0xe801a3d8
 8008bcc:	e801a408 	.word	0xe801a408

08008bd0 <InterruptController::DispatchInterrupts#18989>:

            m_interrupts.EnqueueNonblocking(interruptData);
        }

        private void DispatchInterrupts()
        {
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	e005      	b.n	8008be2 <InterruptController::DispatchInterrupts#18989+0x12>
 8008bd6:	6928      	ldr	r0, [r5, #16]
            {
               InterruptData intr = m_interrupts.DequeueBlocking();

                if (intr.Handler != null)
                {
                    intr.Handler.Invoke( intr );
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4622      	mov	r2, r4
 8008bdc:	462b      	mov	r3, r5
 8008bde:	f000 f80c 	bl	8008bfa <Handler::Invoke#19032>

        private void DispatchInterrupts()
        {
            while (true)
            {
               InterruptData intr = m_interrupts.DequeueBlocking();
 8008be2:	6930      	ldr	r0, [r6, #16]
 8008be4:	b138      	cbz	r0, 8008bf6 <InterruptController::DispatchInterrupts#18989+0x26>
 8008be6:	f000 f813 	bl	8008c10 <KernelCircularBuffer`1::DequeueBlocking#25749>
 8008bea:	4615      	mov	r5, r2
 8008bec:	4603      	mov	r3, r0
 8008bee:	460c      	mov	r4, r1

                if (intr.Handler != null)
 8008bf0:	2d00      	cmp	r5, #0
 8008bf2:	d0f6      	beq.n	8008be2 <InterruptController::DispatchInterrupts#18989+0x12>
 8008bf4:	e7ef      	b.n	8008bd6 <InterruptController::DispatchInterrupts#18989+0x6>

        private void DispatchInterrupts()
        {
            while (true)
            {
               InterruptData intr = m_interrupts.DequeueBlocking();
 8008bf6:	f7f7 fc37 	bl	8000468 <Thread::ThrowNullException#4411>

08008bfa <Handler::Invoke#19032>:
                NVIC.DisableInterrupt( m_index );
            }

            public void Invoke( InterruptData interruptData )
            {
                m_callback( interruptData );
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b110      	cbz	r0, 8008c04 <Handler::Invoke#19032+0xa>
 8008bfe:	f000 f86a 	bl	8008cd6 <Callback::Invoke#19015>
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	f7f7 fc30 	bl	8000468 <Thread::ThrowNullException#4411>

08008c08 <InterruptController::GetNextActiveInterupt#18984>:
 8008c08:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008c0c:	4770      	bx	lr

08008c0e <InterruptController::ClearInterrupt#18985>:
 8008c0e:	4770      	bx	lr

08008c10 <KernelCircularBuffer`1::DequeueBlocking#25749>:
                m_writerEvent.WaitOne();
            }
        }

        public T DequeueBlocking()
        {
 8008c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c12:	b083      	sub	sp, #12
 8008c14:	4604      	mov	r4, r0
 8008c16:	2000      	movs	r0, #0
 8008c18:	9002      	str	r0, [sp, #8]
 8008c1a:	e9cd 0000 	strd	r0, r0, [sp]
            BugCheck.AssertInterruptsOn();
 8008c1e:	f7fa fafb 	bl	8003218 <BugCheck::AssertInterruptsOn#5290>
 8008c22:	466d      	mov	r5, sp
 8008c24:	e006      	b.n	8008c34 <KernelCircularBuffer`1::DequeueBlocking#25749+0x24>
 8008c26:	6841      	ldr	r1, [r0, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	69c9      	ldr	r1, [r1, #28]
 8008c2c:	698b      	ldr	r3, [r1, #24]
 8008c2e:	f04f 31ff 	mov.w	r1, #4294967295
 8008c32:	4798      	blx	r3
 8008c34:	2001      	movs	r0, #1
 8008c36:	f000 fd3b 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8008c3a:	4606      	mov	r6, r0
                bool fReceived;
                T    val;

                using(SmartHandles.InterruptState.Disable())
                {
                    fReceived = DequeueNonblocking( out val );
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	4629      	mov	r1, r5
 8008c40:	f000 fbf5 	bl	800942e <KernelCircularBuffer`1::DequeueNonblocking#25747>
 8008c44:	4607      	mov	r7, r0
                }
 8008c46:	4630      	mov	r0, r6
 8008c48:	f000 fd32 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>

                if(fReceived)
 8008c4c:	f017 0fff 	tst.w	r7, #255	; 0xff
                    return val;
                }

                m_readerEvent.WaitOne();
            }
        }
 8008c50:	bf1c      	itt	ne
 8008c52:	bc07      	popne	{r0, r1, r2}
 8008c54:	bdf0      	popne	{r4, r5, r6, r7, pc}
                if(fReceived)
                {
                    return val;
                }

                m_readerEvent.WaitOne();
 8008c56:	6960      	ldr	r0, [r4, #20]
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d1e4      	bne.n	8008c26 <KernelCircularBuffer`1::DequeueBlocking#25749+0x16>
 8008c5c:	f7f7 fc04 	bl	8000468 <Thread::ThrowNullException#4411>

08008c60 <ContextSwitchTimer::GetTicksForQuantumValue#19001>:
        }

        //--//

        protected virtual uint GetTicksForQuantumValue( uint ms )
        {
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	4605      	mov	r5, r0
 8008c64:	460c      	mov	r4, r1
        }
        
        [RT.Inline]
        private bool HasRef( )
        {
            return m_sysTick.HasRef;
 8008c66:	68a8      	ldr	r0, [r5, #8]
 8008c68:	b380      	cbz	r0, 8008ccc <ContextSwitchTimer::GetTicksForQuantumValue#19001+0x6c>
 8008c6a:	f7ff fef9 	bl	8008a60 <SysTick::get_HasRef#18943>
            //
            // We use SysTick and handle wrap around for values larger than 24 bit precision
            // We will assume the device can be programmed with the calibration value from factory settings
            // TODO: need to add logic to handle the case where we cannot count in the calibration value
            //
            RT.BugCheck.Assert( HasRef() && IsPrecise(), RT.BugCheck.StopCode.FailedBootstrap );
 8008c6e:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008c72:	d005      	beq.n	8008c80 <ContextSwitchTimer::GetTicksForQuantumValue#19001+0x20>
        }
        
        [RT.Inline]
        private bool IsPrecise( )
        {
            return m_sysTick.IsPrecise;
 8008c74:	68a8      	ldr	r0, [r5, #8]
 8008c76:	b348      	cbz	r0, 8008ccc <ContextSwitchTimer::GetTicksForQuantumValue#19001+0x6c>
 8008c78:	f7ff fefc 	bl	8008a74 <SysTick::get_IsPrecise#18944>
        }
 8008c7c:	b240      	sxtb	r0, r0
 8008c7e:	e000      	b.n	8008c82 <ContextSwitchTimer::GetTicksForQuantumValue#19001+0x22>
 8008c80:	2000      	movs	r0, #0
 8008c82:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008c86:	d023      	beq.n	8008cd0 <ContextSwitchTimer::GetTicksForQuantumValue#19001+0x70>
        }

        [RT.Inline]
        private uint GetTimerClockMhz( )
        {
            return (uint)(LLOS.Timer.LLOS_SYSTEM_TIMER_GetTimerFrequency( ) / 1000000); 
 8008c88:	f000 ff46 	bl	8009b18 <LLOS_SYSTEM_TIMER_GetTimerFrequency>
 8008c8c:	f244 2240 	movw	r2, #16960	; 0x4240
 8008c90:	2300      	movs	r3, #0
 8008c92:	f2c0 020f 	movt	r2, #15
 8008c96:	f007 fc3b 	bl	8010510 <__aeabi_uldivmod>
 8008c9a:	4606      	mov	r6, r0
        }

        [RT.Inline]
        private uint GetFactoryCalibrationValue( )
        {
            return m_sysTick.TenMillisecondsCalibrationValue;
 8008c9c:	68a8      	ldr	r0, [r5, #8]
 8008c9e:	b1a8      	cbz	r0, 8008ccc <ContextSwitchTimer::GetTicksForQuantumValue#19001+0x6c>
 8008ca0:	f7ff fed8 	bl	8008a54 <SysTick::get_TenMillisecondsCalibrationValue#18942>
            RT.BugCheck.Assert( HasRef() && IsPrecise(), RT.BugCheck.StopCode.FailedBootstrap );

            //
            // match = ( (timerClockMhz * calibration_x10 / 100) - 1 ) * ms ) / 10
            //
            return ( ( ( ( GetTimerClockMhz( ) * GetFactoryCalibrationValue( ) ) / 100 ) - 1 ) * ms) / 10;
 8008ca4:	f248 511f 	movw	r1, #34079	; 0x851f
 8008ca8:	4370      	muls	r0, r6
 8008caa:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
 8008cae:	fba0 0101 	umull	r0, r1, r0, r1
 8008cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb6:	eb00 1051 	add.w	r0, r0, r1, lsr #5
 8008cba:	f64c 41cd 	movw	r1, #52429	; 0xcccd
 8008cbe:	4360      	muls	r0, r4
 8008cc0:	f6cc 41cc 	movt	r1, #52428	; 0xcccc
 8008cc4:	fba0 0101 	umull	r0, r1, r0, r1
 8008cc8:	08c8      	lsrs	r0, r1, #3
 8008cca:	bd70      	pop	{r4, r5, r6, pc}
        }
        
        [RT.Inline]
        private bool HasRef( )
        {
            return m_sysTick.HasRef;
 8008ccc:	f7f7 fbcc 	bl	8000468 <Thread::ThrowNullException#4411>
 8008cd0:	2010      	movs	r0, #16
 8008cd2:	f7f7 faeb 	bl	80002ac <BugCheck::Raise#5282>

08008cd6 <Callback::Invoke#19015>:
 8008cd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cda:	b081      	sub	sp, #4
 8008cdc:	f8d0 b010 	ldr.w	fp, [r0, #16]
 8008ce0:	4698      	mov	r8, r3
 8008ce2:	4691      	mov	r9, r2
 8008ce4:	468a      	mov	sl, r1
 8008ce6:	f1bb 0f00 	cmp.w	fp, #0
 8008cea:	d018      	beq.n	8008d1e <Callback::Invoke#19015+0x48>
 8008cec:	f8db 5008 	ldr.w	r5, [fp, #8]
 8008cf0:	f10b 040c 	add.w	r4, fp, #12
 8008cf4:	2600      	movs	r6, #0
 8008cf6:	e006      	b.n	8008d06 <Callback::Invoke#19015+0x30>
 8008cf8:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8008cfc:	4651      	mov	r1, sl
 8008cfe:	464a      	mov	r2, r9
 8008d00:	4643      	mov	r3, r8
 8008d02:	47b8      	blx	r7
 8008d04:	3601      	adds	r6, #1
 8008d06:	42ae      	cmp	r6, r5
 8008d08:	da10      	bge.n	8008d2c <Callback::Invoke#19015+0x56>
 8008d0a:	f8db 0008 	ldr.w	r0, [fp, #8]
 8008d0e:	4286      	cmp	r6, r0
 8008d10:	d20f      	bcs.n	8008d32 <Callback::Invoke#19015+0x5c>
 8008d12:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
 8008d16:	2900      	cmp	r1, #0
 8008d18:	d1ee      	bne.n	8008cf8 <Callback::Invoke#19015+0x22>
 8008d1a:	f7f7 fba5 	bl	8000468 <Thread::ThrowNullException#4411>
 8008d1e:	e9d0 1702 	ldrd	r1, r7, [r0, #8]
 8008d22:	464a      	mov	r2, r9
 8008d24:	4643      	mov	r3, r8
 8008d26:	4608      	mov	r0, r1
 8008d28:	4651      	mov	r1, sl
 8008d2a:	47b8      	blx	r7
 8008d2c:	b001      	add	sp, #4
 8008d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d32:	f7f8 f8bd 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
 8008d36:	46c0      	nop			; (mov r8, r8)

08008d38 <InterruptData::Equals#55290>:
 8008d38:	b510      	push	{r4, lr}
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	480c      	ldr	r0, [pc, #48]	; (8008d70 <InterruptData::Equals#55290+0x38>)
 8008d3e:	4a0d      	ldr	r2, [pc, #52]	; (8008d74 <InterruptData::Equals#55290+0x3c>)
 8008d40:	4478      	add	r0, pc
 8008d42:	4402      	add	r2, r0
 8008d44:	4608      	mov	r0, r1
 8008d46:	4611      	mov	r1, r2
 8008d48:	f7f7 ff88 	bl	8000c5c <TypeSystemManager::CastToSealedTypeNoThrow#5593>
 8008d4c:	b170      	cbz	r0, 8008d6c <InterruptData::Equals#55290+0x34>
 8008d4e:	6801      	ldr	r1, [r0, #0]
 8008d50:	6822      	ldr	r2, [r4, #0]
 8008d52:	428a      	cmp	r2, r1
 8008d54:	d10a      	bne.n	8008d6c <InterruptData::Equals#55290+0x34>
 8008d56:	6841      	ldr	r1, [r0, #4]
 8008d58:	6862      	ldr	r2, [r4, #4]
 8008d5a:	428a      	cmp	r2, r1
 8008d5c:	d106      	bne.n	8008d6c <InterruptData::Equals#55290+0x34>
 8008d5e:	6881      	ldr	r1, [r0, #8]
 8008d60:	68a2      	ldr	r2, [r4, #8]
 8008d62:	2000      	movs	r0, #0
 8008d64:	428a      	cmp	r2, r1
 8008d66:	bf08      	it	eq
 8008d68:	2001      	moveq	r0, #1
 8008d6a:	bd10      	pop	{r4, pc}
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	bd10      	pop	{r4, pc}
 8008d70:	17ff7dd4 	.word	0x17ff7dd4
 8008d74:	e801a198 	.word	0xe801a198

08008d78 <LLOS_osMessageCreate>:
        //

        [ExportedMethod]
        public static unsafe UIntPtr LLOS_osMessageCreate(void* mbox, int queue_sz)
        {
            var mailbox = LwipMailbox.Create(queue_sz);
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	4608      	mov	r0, r1
 8008d7c:	f000 f802 	bl	8008d84 <LwipMailbox::Create#19070>
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	46c0      	nop			; (mov r8, r8)

08008d84 <LwipMailbox::Create#19070>:

        private KernelCircularBuffer<UIntPtr> m_buffer;

        public static LwipMailbox Create(int queueSize)
        {
 8008d84:	b570      	push	{r4, r5, r6, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	4e12      	ldr	r6, [pc, #72]	; (8008dd4 <LwipMailbox::Create#19070+0x50>)
 8008d8a:	4605      	mov	r5, r0
            var mailbox = new LwipMailbox(queueSize);
 8008d8c:	4812      	ldr	r0, [pc, #72]	; (8008dd8 <LwipMailbox::Create#19070+0x54>)
 8008d8e:	4913      	ldr	r1, [pc, #76]	; (8008ddc <LwipMailbox::Create#19070+0x58>)
 8008d90:	447e      	add	r6, pc
 8008d92:	4430      	add	r0, r6
 8008d94:	4431      	add	r1, r6
 8008d96:	f7f7 fd7d 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8008d9a:	4629      	mov	r1, r5
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	f000 fa31 	bl	8009204 <LwipMailbox::.ctor#19071>

            lock(s_sync)
 8008da2:	480f      	ldr	r0, [pc, #60]	; (8008de0 <LwipMailbox::Create#19070+0x5c>)
 8008da4:	f10d 0107 	add.w	r1, sp, #7
 8008da8:	4406      	add	r6, r0
 8008daa:	2000      	movs	r0, #0
 8008dac:	6df5      	ldr	r5, [r6, #92]	; 0x5c
 8008dae:	f88d 0007 	strb.w	r0, [sp, #7]
 8008db2:	4628      	mov	r0, r5
 8008db4:	f7fe f8f4 	bl	8006fa0 <Monitor::Enter#8439>
            {
                s_mailboxes.Add(mailbox);
 8008db8:	6db0      	ldr	r0, [r6, #88]	; 0x58
 8008dba:	4621      	mov	r1, r4
 8008dbc:	f7fe fcc0 	bl	8007740 <ArrayList::Add#10902>
            }
 8008dc0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	bf1c      	itt	ne
 8008dc8:	4628      	movne	r0, r5
 8008dca:	f7fe f91d 	blne	8007008 <Monitor::Exit#4302>
 8008dce:	4620      	mov	r0, r4
 8008dd0:	b002      	add	sp, #8
 8008dd2:	bd70      	pop	{r4, r5, r6, pc}
 8008dd4:	17ff7d84 	.word	0x17ff7d84
 8008dd8:	fffffe0c 	.word	0xfffffe0c
 8008ddc:	e801a258 	.word	0xe801a258
 8008de0:	fffffcf8 	.word	0xfffffcf8

08008de4 <LLOS_osMessageGet>:
            return mailbox.ToPointer();
        }

        [ExportedMethod]
        public static unsafe UIntPtr LLOS_osMessageGet(UIntPtr mbox, int msTimeout)
        {
 8008de4:	b510      	push	{r4, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	2200      	movs	r2, #0
            var mailbox = LwipMailbox.ToObject(mbox);
            UIntPtr message;

            if(mailbox.TryGetMessage(msTimeout, out message))
 8008dea:	2800      	cmp	r0, #0
 8008dec:	9201      	str	r2, [sp, #4]
 8008dee:	d010      	beq.n	8008e12 <LLOS_osMessageGet+0x2e>
 8008df0:	6880      	ldr	r0, [r0, #8]
 8008df2:	ac01      	add	r4, sp, #4
 8008df4:	4622      	mov	r2, r4
 8008df6:	f000 f813 	bl	8008e20 <LwipMailbox::TryGetMessage#19072>
 8008dfa:	4907      	ldr	r1, [pc, #28]	; (8008e18 <LLOS_osMessageGet+0x34>)
            {
                return message;
            }
            return UIntPtr.Zero;
 8008dfc:	4a07      	ldr	r2, [pc, #28]	; (8008e1c <LLOS_osMessageGet+0x38>)
        public static unsafe UIntPtr LLOS_osMessageGet(UIntPtr mbox, int msTimeout)
        {
            var mailbox = LwipMailbox.ToObject(mbox);
            UIntPtr message;

            if(mailbox.TryGetMessage(msTimeout, out message))
 8008dfe:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008e02:	4479      	add	r1, pc
            {
                return message;
            }
            return UIntPtr.Zero;
 8008e04:	4411      	add	r1, r2
        public static unsafe UIntPtr LLOS_osMessageGet(UIntPtr mbox, int msTimeout)
        {
            var mailbox = LwipMailbox.ToObject(mbox);
            UIntPtr message;

            if(mailbox.TryGetMessage(msTimeout, out message))
 8008e06:	bf08      	it	eq
 8008e08:	f501 7488 	addeq.w	r4, r1, #272	; 0x110
 8008e0c:	6820      	ldr	r0, [r4, #0]
 8008e0e:	b002      	add	sp, #8
 8008e10:	bd10      	pop	{r4, pc}
 8008e12:	f7f7 fb29 	bl	8000468 <Thread::ThrowNullException#4411>
 8008e16:	46c0      	nop			; (mov r8, r8)
 8008e18:	17ff7d12 	.word	0x17ff7d12
 8008e1c:	fffffcf8 	.word	0xfffffcf8

08008e20 <LwipMailbox::TryGetMessage#19072>:
            m_buffer = new KernelCircularBuffer<UIntPtr>(queueSize);
        }

        public unsafe bool TryGetMessage(int msTimeout, out UIntPtr message)
        {
            if (m_buffer.DequeueBlocking(msTimeout, out message))
 8008e20:	b580      	push	{r7, lr}
 8008e22:	f000 fa3b 	bl	800929c <KernelCircularBuffer`1::DequeueBlocking#25898>
 8008e26:	b2c0      	uxtb	r0, r0
            {
                return true;
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	bf18      	it	ne
 8008e2c:	2001      	movne	r0, #1
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <LLOS_osMessagePut>:

        [ExportedMethod]
        public static unsafe uint LLOS_osMessagePut(UIntPtr mbox, UIntPtr msg, int msTimeout)
        {
            var mailbox = LwipMailbox.ToObject(mbox);
            if (mailbox.TryPutMessage(msg, msTimeout))
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b148      	cbz	r0, 8008e48 <LLOS_osMessagePut+0x18>
 8008e34:	6880      	ldr	r0, [r0, #8]
 8008e36:	f000 f809 	bl	8008e4c <LwipMailbox::TryPutMessage#19073>
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8008e40:	bf08      	it	eq
 8008e42:	2101      	moveq	r1, #1
 8008e44:	4608      	mov	r0, r1
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	f7f7 fb0e 	bl	8000468 <Thread::ThrowNullException#4411>

08008e4c <LwipMailbox::TryPutMessage#19073>:
            }
            return false;
        }

        public unsafe bool TryPutMessage(UIntPtr message, int msTimeout)
        {
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	460b      	mov	r3, r1
            if (m_buffer.EnqueueBlocking(msTimeout, message))
 8008e50:	4611      	mov	r1, r2
 8008e52:	461a      	mov	r2, r3
 8008e54:	f000 fa4b 	bl	80092ee <KernelCircularBuffer`1::EnqueueBlocking#25897>
 8008e58:	b2c0      	uxtb	r0, r0
            {
                return true;
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	bf18      	it	ne
 8008e5e:	2001      	movne	r0, #1
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <LLOS_osMutexCreate>:
        //

        [ExportedMethod]
        public static unsafe UIntPtr LLOS_osMutexCreate()
        {
            var mutex = LwipMutex.Create();
 8008e62:	b580      	push	{r7, lr}
 8008e64:	f000 f802 	bl	8008e6c <LwipMutex::Create#19081>
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	46c0      	nop			; (mov r8, r8)

08008e6c <LwipMutex::Create#19081>:

        private object m_sync;

        public static LwipMutex Create()
        {
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	4d11      	ldr	r5, [pc, #68]	; (8008eb8 <LwipMutex::Create#19081+0x4c>)
            var mutex = new LwipMutex();
 8008e72:	4812      	ldr	r0, [pc, #72]	; (8008ebc <LwipMutex::Create#19081+0x50>)
 8008e74:	4912      	ldr	r1, [pc, #72]	; (8008ec0 <LwipMutex::Create#19081+0x54>)
 8008e76:	447d      	add	r5, pc
 8008e78:	4428      	add	r0, r5
 8008e7a:	4429      	add	r1, r5
 8008e7c:	f7f7 fd0a 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8008e80:	4604      	mov	r4, r0
 8008e82:	f000 fa5d 	bl	8009340 <LwipMutex::.ctor#19082>

            lock(s_sync)
 8008e86:	480f      	ldr	r0, [pc, #60]	; (8008ec4 <LwipMutex::Create#19081+0x58>)
 8008e88:	f10d 0107 	add.w	r1, sp, #7
 8008e8c:	1946      	adds	r6, r0, r5
 8008e8e:	2000      	movs	r0, #0
 8008e90:	6e75      	ldr	r5, [r6, #100]	; 0x64
 8008e92:	f88d 0007 	strb.w	r0, [sp, #7]
 8008e96:	4628      	mov	r0, r5
 8008e98:	f7fe f882 	bl	8006fa0 <Monitor::Enter#8439>
            {
                s_mutexes.Add(mutex);
 8008e9c:	6e30      	ldr	r0, [r6, #96]	; 0x60
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	f7fe fc4e 	bl	8007740 <ArrayList::Add#10902>
            }
 8008ea4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	bf1c      	itt	ne
 8008eac:	4628      	movne	r0, r5
 8008eae:	f7fe f8ab 	blne	8007008 <Monitor::Exit#4302>
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	b002      	add	sp, #8
 8008eb6:	bd70      	pop	{r4, r5, r6, pc}
 8008eb8:	17ff7c9e 	.word	0x17ff7c9e
 8008ebc:	fffffe0c 	.word	0xfffffe0c
 8008ec0:	e801a318 	.word	0xe801a318
 8008ec4:	fffffcf8 	.word	0xfffffcf8

08008ec8 <LLOS_osMutexWait>:
        [ExportedMethod]
        public static unsafe uint LLOS_osMutexWait(UIntPtr mutex, int msTimeout)
        {
            var mutexObj = LwipMutex.ToObject(mutex);

            return mutexObj.Lock(msTimeout);
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b110      	cbz	r0, 8008ed2 <LLOS_osMutexWait+0xa>
 8008ecc:	f000 f803 	bl	8008ed6 <LwipMutex::Lock#19083>
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	f7f7 fac9 	bl	8000468 <Thread::ThrowNullException#4411>

08008ed6 <LwipMutex::Lock#19083>:

        public uint Lock(int msTimeout)
        {
            if (msTimeout < 0)
            {
                Monitor.Enter(m_sync);
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	6880      	ldr	r0, [r0, #8]
            m_sync = new object();
        }

        public uint Lock(int msTimeout)
        {
            if (msTimeout < 0)
 8008eda:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008ede:	dd08      	ble.n	8008ef2 <LwipMutex::Lock#19083+0x1c>
                Monitor.Enter(m_sync);
                return 0;
            }
            else
            {
                if (Monitor.TryEnter(m_sync, msTimeout))
 8008ee0:	f7fe f89b 	bl	800701a <Monitor::TryEnterTimeout#4303>
 8008ee4:	4601      	mov	r1, r0
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	f011 0fff 	tst.w	r1, #255	; 0xff
 8008eec:	bf08      	it	eq
 8008eee:	2001      	moveq	r0, #1
 8008ef0:	bd80      	pop	{r7, pc}

        public uint Lock(int msTimeout)
        {
            if (msTimeout < 0)
            {
                Monitor.Enter(m_sync);
 8008ef2:	f7fe f84c 	bl	8006f8e <Monitor::Enter#4301>
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <LLOS_osMutexRelease>:
        [ExportedMethod]
        public static unsafe uint LLOS_osMutexRelease(UIntPtr mutex)
        {
            var mutexObj = LwipMutex.ToObject(mutex);

            return mutexObj.Unlock();
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b120      	cbz	r0, 8008f08 <LLOS_osMutexRelease+0xe>
 8008efe:	6880      	ldr	r0, [r0, #8]
 8008f00:	f7fe f882 	bl	8007008 <Monitor::Exit#4302>
 8008f04:	2000      	movs	r0, #0
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	f7f7 faae 	bl	8000468 <Thread::ThrowNullException#4411>

08008f0c <LLOS_osMutexFree>:

        [ExportedMethod]
        public static unsafe void LLOS_osMutexFree(UIntPtr mutex)
        {
            var mutexObj = LwipMutex.ToObject(mutex);
            mutexObj.Dispose();
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b110      	cbz	r0, 8008f16 <LLOS_osMutexFree+0xa>
 8008f10:	f000 f804 	bl	8008f1c <LwipMutex::Dispose#19085>
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	f7f7 faa7 	bl	8000468 <Thread::ThrowNullException#4411>
 8008f1a:	46c0      	nop			; (mov r8, r8)

08008f1c <LwipMutex::Dispose#19085>:
            Monitor.Exit(m_sync);
            return 0;
        }

        public void Dispose()
        {
 8008f1c:	b570      	push	{r4, r5, r6, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	4605      	mov	r5, r0
 8008f22:	480d      	ldr	r0, [pc, #52]	; (8008f58 <LwipMutex::Dispose#19085+0x3c>)
            lock (s_sync)
 8008f24:	490d      	ldr	r1, [pc, #52]	; (8008f5c <LwipMutex::Dispose#19085+0x40>)
 8008f26:	4478      	add	r0, pc
 8008f28:	180e      	adds	r6, r1, r0
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	f10d 0107 	add.w	r1, sp, #7
 8008f30:	6e74      	ldr	r4, [r6, #100]	; 0x64
 8008f32:	f88d 0007 	strb.w	r0, [sp, #7]
 8008f36:	4620      	mov	r0, r4
 8008f38:	f7fe f832 	bl	8006fa0 <Monitor::Enter#8439>
            {
                s_mutexes.Remove(this);
 8008f3c:	6e30      	ldr	r0, [r6, #96]	; 0x60
 8008f3e:	4629      	mov	r1, r5
 8008f40:	f7fe fc43 	bl	80077ca <ArrayList::Remove#10924>
            }
 8008f44:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	bf1c      	itt	ne
 8008f4c:	4620      	movne	r0, r4
 8008f4e:	f7fe f85b 	blne	8007008 <Monitor::Exit#4302>
 8008f52:	b002      	add	sp, #8
 8008f54:	bd70      	pop	{r4, r5, r6, pc}
 8008f56:	46c0      	nop			; (mov r8, r8)
 8008f58:	17ff7bee 	.word	0x17ff7bee
 8008f5c:	fffffcf8 	.word	0xfffffcf8

08008f60 <LLOS_osSemaphoreCreate>:
        //

        [ExportedMethod]
        public static UIntPtr LLOS_osSemaphoreCreate(IntPtr semaphore_def, uint count)
        {
            var sem = LwipSemaphore.Create((int)count);
 8008f60:	b580      	push	{r7, lr}
 8008f62:	4608      	mov	r0, r1
 8008f64:	f000 f802 	bl	8008f6c <LwipSemaphore::Create#19095>
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	46c0      	nop			; (mov r8, r8)

08008f6c <LwipSemaphore::Create#19095>:

        //
        // err_t sys_sem_new( sys_sem_t *sem, u8_t count )
        //
        public static LwipSemaphore Create(int count)
        {
 8008f6c:	b570      	push	{r4, r5, r6, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	4e12      	ldr	r6, [pc, #72]	; (8008fbc <LwipSemaphore::Create#19095+0x50>)
 8008f72:	4605      	mov	r5, r0
            var sem = new LwipSemaphore(count);
 8008f74:	4812      	ldr	r0, [pc, #72]	; (8008fc0 <LwipSemaphore::Create#19095+0x54>)
 8008f76:	4913      	ldr	r1, [pc, #76]	; (8008fc4 <LwipSemaphore::Create#19095+0x58>)
 8008f78:	447e      	add	r6, pc
 8008f7a:	4430      	add	r0, r6
 8008f7c:	4431      	add	r1, r6
 8008f7e:	f7f7 fc89 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8008f82:	4629      	mov	r1, r5
 8008f84:	4604      	mov	r4, r0
 8008f86:	f000 f9ed 	bl	8009364 <LwipSemaphore::.ctor#19096>

            lock (s_sync)
 8008f8a:	480f      	ldr	r0, [pc, #60]	; (8008fc8 <LwipSemaphore::Create#19095+0x5c>)
 8008f8c:	f10d 0107 	add.w	r1, sp, #7
 8008f90:	4406      	add	r6, r0
 8008f92:	2000      	movs	r0, #0
 8008f94:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
 8008f96:	f88d 0007 	strb.w	r0, [sp, #7]
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	f7fe f800 	bl	8006fa0 <Monitor::Enter#8439>
            {
                s_semaphores.Add(sem);
 8008fa0:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 8008fa2:	4621      	mov	r1, r4
 8008fa4:	f7fe fbcc 	bl	8007740 <ArrayList::Add#10902>
            }
 8008fa8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8008fac:	2800      	cmp	r0, #0
 8008fae:	bf1c      	itt	ne
 8008fb0:	4628      	movne	r0, r5
 8008fb2:	f7fe f829 	blne	8007008 <Monitor::Exit#4302>
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	b002      	add	sp, #8
 8008fba:	bd70      	pop	{r4, r5, r6, pc}
 8008fbc:	17ff7b9c 	.word	0x17ff7b9c
 8008fc0:	fffffe0c 	.word	0xfffffe0c
 8008fc4:	e801a348 	.word	0xe801a348
 8008fc8:	fffffcf8 	.word	0xfffffcf8

08008fcc <LLOS_osSemaphoreWait>:
        [ExportedMethod]
        public static int LLOS_osSemaphoreWait(UIntPtr semaphore_id, uint millisec)
        {
            var sem = LwipSemaphore.ToObject(semaphore_id);

            return sem.Acquire((int)millisec);
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b110      	cbz	r0, 8008fd6 <LLOS_osSemaphoreWait+0xa>
 8008fd0:	f000 f803 	bl	8008fda <LwipSemaphore::Acquire#19097>
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	f7f7 fa47 	bl	8000468 <Thread::ThrowNullException#4411>

08008fda <LwipSemaphore::Acquire#19097>:

        //
        // u32_t sys_arch_sem_wait( sys_sem_t *sem, u32_t timeout )
        //
        public int Acquire(int timeout)
        {
 8008fda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fde:	b081      	sub	sp, #4
 8008fe0:	460d      	mov	r5, r1
 8008fe2:	4604      	mov	r4, r0
            bool fAcquired = false;

            var start = (uint)LLOS.HAL.Timer.LLOS_SYSTEM_TIMER_GetTicks();
 8008fe4:	f000 fd92 	bl	8009b0c <LLOS_SYSTEM_TIMER_GetTicks>
                    }
                    else
                    {
                        if(timeout >= 0)
                        {
                            timeout -= (int)(((uint)LLOS.HAL.Timer.LLOS_SYSTEM_TIMER_GetTicks() - start)/1000);
 8008fe8:	f644 5ad3 	movw	sl, #19923	; 0x4dd3
        //
        public int Acquire(int timeout)
        {
            bool fAcquired = false;

            var start = (uint)LLOS.HAL.Timer.LLOS_SYSTEM_TIMER_GetTicks();
 8008fec:	4683      	mov	fp, r0
 8008fee:	f04f 0900 	mov.w	r9, #0
 8008ff2:	f10d 0803 	add.w	r8, sp, #3
 8008ff6:	2600      	movs	r6, #0
                    }
                    else
                    {
                        if(timeout >= 0)
                        {
                            timeout -= (int)(((uint)LLOS.HAL.Timer.LLOS_SYSTEM_TIMER_GetTicks() - start)/1000);
 8008ff8:	f2c1 0a62 	movt	sl, #4194	; 0x1062

            var start = (uint)LLOS.HAL.Timer.LLOS_SYSTEM_TIMER_GetTicks();

            do
            {
                while (m_count == 0)
 8008ffc:	68e0      	ldr	r0, [r4, #12]
 8008ffe:	b960      	cbnz	r0, 800901a <LwipSemaphore::Acquire#19097+0x40>
                {
                    if (m_free.WaitOne(timeout, false) == false)
 8009000:	6967      	ldr	r7, [r4, #20]
 8009002:	4628      	mov	r0, r5
 8009004:	f7fb fc58 	bl	80048b8 <SchedulerTime::op_Explicit#5460>
 8009008:	4602      	mov	r2, r0
 800900a:	68b8      	ldr	r0, [r7, #8]
 800900c:	460b      	mov	r3, r1
 800900e:	f7fe f815 	bl	800703c <WaitHandle::WaitOne#4316>
 8009012:	f010 0fff 	tst.w	r0, #255	; 0xff
 8009016:	d1f1      	bne.n	8008ffc <LwipSemaphore::Acquire#19097+0x22>
 8009018:	e030      	b.n	800907c <LwipSemaphore::Acquire#19097+0xa2>
                    {
                        return -1;
                    }
                }

                lock (m_sync)
 800901a:	68a7      	ldr	r7, [r4, #8]
 800901c:	4641      	mov	r1, r8
 800901e:	f88d 9003 	strb.w	r9, [sp, #3]
 8009022:	4638      	mov	r0, r7
 8009024:	f7fd ffbc 	bl	8006fa0 <Monitor::Enter#8439>
                {
                    //
                    // Some other thread may just have stolen this semaphore, and 
                    // and we may have to sleep again
                    //
                    if (m_count > 0)
 8009028:	68e0      	ldr	r0, [r4, #12]
 800902a:	2800      	cmp	r0, #0
 800902c:	dd04      	ble.n	8009038 <LwipSemaphore::Acquire#19097+0x5e>
                    {
                        --m_count;
 800902e:	68e0      	ldr	r0, [r4, #12]
 8009030:	2601      	movs	r6, #1
 8009032:	3801      	subs	r0, #1
 8009034:	60e0      	str	r0, [r4, #12]
 8009036:	e00d      	b.n	8009054 <LwipSemaphore::Acquire#19097+0x7a>

                        fAcquired = true;
                    }
                    else
                    {
                        if(timeout >= 0)
 8009038:	f1b5 3fff 	cmp.w	r5, #4294967295
 800903c:	dd0a      	ble.n	8009054 <LwipSemaphore::Acquire#19097+0x7a>
                        {
                            timeout -= (int)(((uint)LLOS.HAL.Timer.LLOS_SYSTEM_TIMER_GetTicks() - start)/1000);
 800903e:	f000 fd65 	bl	8009b0c <LLOS_SYSTEM_TIMER_GetTicks>
 8009042:	eba0 000b 	sub.w	r0, r0, fp
 8009046:	fba0 010a 	umull	r0, r1, r0, sl
 800904a:	eba5 1591 	sub.w	r5, r5, r1, lsr #6
                            if(timeout < 0)
 800904e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009052:	dd0d      	ble.n	8009070 <LwipSemaphore::Acquire#19097+0x96>
                            {
                                return -1;
                            }
                        }
                    }
                }
 8009054:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8009058:	2800      	cmp	r0, #0
 800905a:	bf1c      	itt	ne
 800905c:	4638      	movne	r0, r7
 800905e:	f7fd ffd3 	blne	8007008 <Monitor::Exit#4302>

            } while (fAcquired == false);
 8009062:	f016 0fff 	tst.w	r6, #255	; 0xff
 8009066:	d0c9      	beq.n	8008ffc <LwipSemaphore::Acquire#19097+0x22>

            return m_count;
 8009068:	68e0      	ldr	r0, [r4, #12]
 800906a:	b001      	add	sp, #4
 800906c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            {
                                return -1;
                            }
                        }
                    }
                }
 8009070:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8009074:	b110      	cbz	r0, 800907c <LwipSemaphore::Acquire#19097+0xa2>
 8009076:	4638      	mov	r0, r7
 8009078:	f7fd ffc6 	bl	8007008 <Monitor::Exit#4302>
 800907c:	f04f 30ff 	mov.w	r0, #4294967295
 8009080:	b001      	add	sp, #4
 8009082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009086 <LLOS_osSemaphoreRelease>:
        [ExportedMethod]
        public static uint LLOS_osSemaphoreRelease(UIntPtr semaphore_id)
        {
            var sem = LwipSemaphore.ToObject(semaphore_id);

            sem.Release();
 8009086:	b580      	push	{r7, lr}
 8009088:	b118      	cbz	r0, 8009092 <LLOS_osSemaphoreRelease+0xc>
 800908a:	f000 f804 	bl	8009096 <LwipSemaphore::Release#19098>
 800908e:	2000      	movs	r0, #0
 8009090:	bd80      	pop	{r7, pc}
 8009092:	f7f7 f9e9 	bl	8000468 <Thread::ThrowNullException#4411>

08009096 <LwipSemaphore::Release#19098>:

        //
        // void sys_sem_signal( sys_sem_t *sem )
        // 
        public void Release()
        {
 8009096:	b5b0      	push	{r4, r5, r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	4605      	mov	r5, r0
 800909c:	2000      	movs	r0, #0
 800909e:	f10d 0107 	add.w	r1, sp, #7
            lock (m_sync)
 80090a2:	68ac      	ldr	r4, [r5, #8]
 80090a4:	f88d 0007 	strb.w	r0, [sp, #7]
 80090a8:	4620      	mov	r0, r4
 80090aa:	f7fd ff79 	bl	8006fa0 <Monitor::Enter#8439>
            {
                ++m_count;
 80090ae:	68e8      	ldr	r0, [r5, #12]
 80090b0:	3001      	adds	r0, #1
 80090b2:	60e8      	str	r0, [r5, #12]

                m_free.Set();
 80090b4:	6968      	ldr	r0, [r5, #20]
 80090b6:	f7f9 fe71 	bl	8002d9c <EventWaitHandle::Set#4321>
            }
 80090ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80090be:	2800      	cmp	r0, #0
 80090c0:	bf1c      	itt	ne
 80090c2:	4620      	movne	r0, r4
 80090c4:	f7fd ffa0 	blne	8007008 <Monitor::Exit#4302>
 80090c8:	b002      	add	sp, #8
 80090ca:	bdb0      	pop	{r4, r5, r7, pc}

080090cc <LLOS_osSemaphoreDelete>:
        [ExportedMethod]
        public static uint LLOS_osSemaphoreDelete(UIntPtr semaphore_id)
        {
            var sem = LwipSemaphore.ToObject(semaphore_id);

            sem.Dispose();
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b118      	cbz	r0, 80090d8 <LLOS_osSemaphoreDelete+0xc>
 80090d0:	f000 f804 	bl	80090dc <LwipSemaphore::Dispose#19099>
 80090d4:	2000      	movs	r0, #0
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	f7f7 f9c6 	bl	8000468 <Thread::ThrowNullException#4411>

080090dc <LwipSemaphore::Dispose#19099>:

        //
        // void sys_sem_free( sys_sem_t *sem )
        //
        public void Dispose()
        {
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	4605      	mov	r5, r0
 80090e2:	480d      	ldr	r0, [pc, #52]	; (8009118 <LwipSemaphore::Dispose#19099+0x3c>)
            lock (s_sync)
 80090e4:	490d      	ldr	r1, [pc, #52]	; (800911c <LwipSemaphore::Dispose#19099+0x40>)
 80090e6:	4478      	add	r0, pc
 80090e8:	180e      	adds	r6, r1, r0
 80090ea:	2000      	movs	r0, #0
 80090ec:	f10d 0107 	add.w	r1, sp, #7
 80090f0:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 80090f2:	f88d 0007 	strb.w	r0, [sp, #7]
 80090f6:	4620      	mov	r0, r4
 80090f8:	f7fd ff52 	bl	8006fa0 <Monitor::Enter#8439>
            {
                s_semaphores.Remove(this);
 80090fc:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 80090fe:	4629      	mov	r1, r5
 8009100:	f7fe fb63 	bl	80077ca <ArrayList::Remove#10924>
            }
 8009104:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8009108:	2800      	cmp	r0, #0
 800910a:	bf1c      	itt	ne
 800910c:	4620      	movne	r0, r4
 800910e:	f7fd ff7b 	blne	8007008 <Monitor::Exit#4302>
 8009112:	b002      	add	sp, #8
 8009114:	bd70      	pop	{r4, r5, r6, pc}
 8009116:	46c0      	nop			; (mov r8, r8)
 8009118:	17ff7a2e 	.word	0x17ff7a2e
 800911c:	fffffcf8 	.word	0xfffffcf8

08009120 <LLOS_osThreadCreate>:
            return 0;
        }

        [ExportedMethod]
        public static UIntPtr LLOS_osThreadCreate(UIntPtr nativeThread)
        {
 8009120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009122:	b081      	sub	sp, #4
 8009124:	4f16      	ldr	r7, [pc, #88]	; (8009180 <LLOS_osThreadCreate+0x60>)
 8009126:	4605      	mov	r5, r0
 8009128:	4816      	ldr	r0, [pc, #88]	; (8009184 <LLOS_osThreadCreate+0x64>)
 800912a:	447f      	add	r7, pc
 800912c:	19c6      	adds	r6, r0, r7
 800912e:	4816      	ldr	r0, [pc, #88]	; (8009188 <LLOS_osThreadCreate+0x68>)
 8009130:	19c1      	adds	r1, r0, r7
 8009132:	4630      	mov	r0, r6
 8009134:	f7f7 fbae 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8009138:	4604      	mov	r4, r0
            // This thread calls into a native method LLOS_lwIPTaskRun with a pointer
            // to the thread, which has the function to run and args
            Thread thread = new Thread(delegate ()
 800913a:	4814      	ldr	r0, [pc, #80]	; (800918c <LLOS_osThreadCreate+0x6c>)
 800913c:	60a5      	str	r5, [r4, #8]
 800913e:	19c1      	adds	r1, r0, r7
 8009140:	4630      	mov	r0, r6
 8009142:	f7f7 fba7 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8009146:	4605      	mov	r5, r0
 8009148:	4811      	ldr	r0, [pc, #68]	; (8009190 <LLOS_osThreadCreate+0x70>)
 800914a:	4621      	mov	r1, r4
 800914c:	19c2      	adds	r2, r0, r7
 800914e:	4628      	mov	r0, r5
 8009150:	f7f8 f91c 	bl	800138c <Delegate::.ctor#5246>
 8009154:	480f      	ldr	r0, [pc, #60]	; (8009194 <LLOS_osThreadCreate+0x74>)
 8009156:	19c1      	adds	r1, r0, r7
 8009158:	4630      	mov	r0, r6
 800915a:	f7f7 fb9b 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 800915e:	4629      	mov	r1, r5
 8009160:	4606      	mov	r6, r0
 8009162:	f7f9 f949 	bl	80023f8 <Thread::.ctor#4380>
            {
                LLOS_lwIPTaskRun(nativeThread);
            });

            threads.Add(thread);
 8009166:	480c      	ldr	r0, [pc, #48]	; (8009198 <LLOS_osThreadCreate+0x78>)
 8009168:	4631      	mov	r1, r6
 800916a:	4438      	add	r0, r7
 800916c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800916e:	f000 f81a 	bl	80091a6 <List`1::Add#25808>
            thread.Start();
 8009172:	4630      	mov	r0, r6
 8009174:	f7f9 f9e8 	bl	8002548 <Thread::Start#4384>

            return nativeThread;
 8009178:	68a0      	ldr	r0, [r4, #8]
 800917a:	b001      	add	sp, #4
 800917c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800917e:	46c0      	nop			; (mov r8, r8)
 8009180:	17ff79ea 	.word	0x17ff79ea
 8009184:	fffffe0c 	.word	0xfffffe0c
 8009188:	e801a1f8 	.word	0xe801a1f8
 800918c:	e80198f8 	.word	0xe80198f8
 8009190:	e8008685 	.word	0xe8008685
 8009194:	e8019958 	.word	0xe8019958
 8009198:	fffffcf8 	.word	0xfffffcf8

0800919c <<>c__DisplayClass12_0::<LLOS_osThreadCreate>b__0#19285>:
        {
            // This thread calls into a native method LLOS_lwIPTaskRun with a pointer
            // to the thread, which has the function to run and args
            Thread thread = new Thread(delegate ()
            {
                LLOS_lwIPTaskRun(nativeThread);
 800919c:	b580      	push	{r7, lr}
 800919e:	6880      	ldr	r0, [r0, #8]
 80091a0:	f002 f94c 	bl	800b43c <LLOS_lwIPTaskRun>
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <List`1::Add#25808>:
        // Adds the given object to the end of this list. The size of the list is
        // increased by one. If required, the capacity of the list is doubled
        // before adding the new element.
        //
        public void Add( T item )
        {
 80091a6:	b5b0      	push	{r4, r5, r7, lr}
 80091a8:	4604      	mov	r4, r0
 80091aa:	460d      	mov	r5, r1
            if(m_size == m_items.Length)
 80091ac:	68a0      	ldr	r0, [r4, #8]
 80091ae:	b1d8      	cbz	r0, 80091e8 <List`1::Add#25808+0x42>
 80091b0:	68e1      	ldr	r1, [r4, #12]
 80091b2:	6880      	ldr	r0, [r0, #8]
 80091b4:	4281      	cmp	r1, r0
 80091b6:	d104      	bne.n	80091c2 <List`1::Add#25808+0x1c>
            {
                EnsureCapacity( m_size + 1 );
 80091b8:	68e0      	ldr	r0, [r4, #12]
 80091ba:	1c41      	adds	r1, r0, #1
 80091bc:	4620      	mov	r0, r4
 80091be:	f000 f9a7 	bl	8009510 <List`1::EnsureCapacity#25828>
            }

            m_items[m_size++] = item;
 80091c2:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80091c6:	1c4a      	adds	r2, r1, #1
 80091c8:	2800      	cmp	r0, #0
 80091ca:	60e2      	str	r2, [r4, #12]
 80091cc:	d00c      	beq.n	80091e8 <List`1::Add#25808+0x42>
 80091ce:	6882      	ldr	r2, [r0, #8]
 80091d0:	4291      	cmp	r1, r2
 80091d2:	bf3f      	itttt	cc
 80091d4:	eb00 0081 	addcc.w	r0, r0, r1, lsl #2
 80091d8:	60c5      	strcc	r5, [r0, #12]
            m_version++;
 80091da:	6920      	ldrcc	r0, [r4, #16]
 80091dc:	3001      	addcc	r0, #1
 80091de:	bf3c      	itt	cc
 80091e0:	6120      	strcc	r0, [r4, #16]
 80091e2:	bdb0      	popcc	{r4, r5, r7, pc}
            if(m_size == m_items.Length)
            {
                EnsureCapacity( m_size + 1 );
            }

            m_items[m_size++] = item;
 80091e4:	f7f7 fe64 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>
        // increased by one. If required, the capacity of the list is doubled
        // before adding the new element.
        //
        public void Add( T item )
        {
            if(m_size == m_items.Length)
 80091e8:	f7f7 f93e 	bl	8000468 <Thread::ThrowNullException#4411>

080091ec <List`1::.ctor#25792>:
        private Object m_syncRoot;

        // Constructs a List. The list is initially empty and has a capacity
        // of zero. Upon adding the first element to the list the capacity is
        // increased to 16, and then increased in multiples of two as required.
        public List()
 80091ec:	4903      	ldr	r1, [pc, #12]	; (80091fc <List`1::.ctor#25792+0x10>)
        {
            m_items = sEmptyArray;
 80091ee:	4a04      	ldr	r2, [pc, #16]	; (8009200 <List`1::.ctor#25792+0x14>)
 80091f0:	4479      	add	r1, pc
 80091f2:	4411      	add	r1, r2
 80091f4:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 80091f8:	6081      	str	r1, [r0, #8]
 80091fa:	4770      	bx	lr
 80091fc:	17ff7924 	.word	0x17ff7924
 8009200:	fffffcf8 	.word	0xfffffcf8

08009204 <LwipMailbox::.ctor#19071>:
                s_mailboxes.Add(mailbox);
            }
            return mailbox;
        }
        
        private LwipMailbox(int queueSize)
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	460c      	mov	r4, r1
 8009208:	4907      	ldr	r1, [pc, #28]	; (8009228 <LwipMailbox::.ctor#19071+0x24>)
 800920a:	4605      	mov	r5, r0
        {
            m_buffer = new KernelCircularBuffer<UIntPtr>(queueSize);
 800920c:	4807      	ldr	r0, [pc, #28]	; (800922c <LwipMailbox::.ctor#19071+0x28>)
 800920e:	4a08      	ldr	r2, [pc, #32]	; (8009230 <LwipMailbox::.ctor#19071+0x2c>)
 8009210:	4479      	add	r1, pc
 8009212:	4408      	add	r0, r1
 8009214:	4411      	add	r1, r2
 8009216:	f7f7 fb3d 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 800921a:	4621      	mov	r1, r4
 800921c:	4606      	mov	r6, r0
 800921e:	f000 f809 	bl	8009234 <KernelCircularBuffer`1::.ctor#25889>
 8009222:	60ae      	str	r6, [r5, #8]
 8009224:	bd70      	pop	{r4, r5, r6, pc}
 8009226:	46c0      	nop			; (mov r8, r8)
 8009228:	17ff7904 	.word	0x17ff7904
 800922c:	fffffe0c 	.word	0xfffffe0c
 8009230:	e801a288 	.word	0xe801a288

08009234 <KernelCircularBuffer`1::.ctor#25889>:

        //
        // Constructor Methods
        //

        public KernelCircularBuffer( int size )
 8009234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009236:	b081      	sub	sp, #4
 8009238:	4e14      	ldr	r6, [pc, #80]	; (800928c <KernelCircularBuffer`1::.ctor#25889+0x58>)
 800923a:	4604      	mov	r4, r0
        {
            m_size        = size;
            m_array       = new T[size];
 800923c:	4814      	ldr	r0, [pc, #80]	; (8009290 <KernelCircularBuffer`1::.ctor#25889+0x5c>)
 800923e:	460a      	mov	r2, r1
 8009240:	60a2      	str	r2, [r4, #8]
 8009242:	447e      	add	r6, pc
 8009244:	1985      	adds	r5, r0, r6
 8009246:	4813      	ldr	r0, [pc, #76]	; (8009294 <KernelCircularBuffer`1::.ctor#25889+0x60>)
 8009248:	1981      	adds	r1, r0, r6
 800924a:	4628      	mov	r0, r5
 800924c:	f7f8 fbe2 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 8009250:	60e0      	str	r0, [r4, #12]
            m_writerEvent = new ManualResetEvent( true  );
 8009252:	4811      	ldr	r0, [pc, #68]	; (8009298 <KernelCircularBuffer`1::.ctor#25889+0x64>)
 8009254:	4406      	add	r6, r0
 8009256:	4628      	mov	r0, r5
 8009258:	4631      	mov	r1, r6
 800925a:	f7f7 fb1b 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 800925e:	2101      	movs	r1, #1
 8009260:	2201      	movs	r2, #1
 8009262:	4607      	mov	r7, r0
 8009264:	f7f9 ff44 	bl	80030f0 <EventWaitHandle::.ctor#4319>
            m_readerEvent = new ManualResetEvent( false );
 8009268:	4628      	mov	r0, r5
 800926a:	4631      	mov	r1, r6
 800926c:	6127      	str	r7, [r4, #16]
 800926e:	f7f7 fb11 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8009272:	2100      	movs	r1, #0

        public KernelCircularBuffer( int size )
        {
            m_size        = size;
            m_array       = new T[size];
            m_writerEvent = new ManualResetEvent( true  );
 8009274:	2201      	movs	r2, #1
            m_readerEvent = new ManualResetEvent( false );
 8009276:	4605      	mov	r5, r0
 8009278:	2600      	movs	r6, #0
 800927a:	f7f9 ff39 	bl	80030f0 <EventWaitHandle::.ctor#4319>
 800927e:	e9c4 5605 	strd	r5, r6, [r4, #20]
 8009282:	e9c4 6607 	strd	r6, r6, [r4, #28]
 8009286:	b001      	add	sp, #4
 8009288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800928a:	46c0      	nop			; (mov r8, r8)
 800928c:	17ff78d2 	.word	0x17ff78d2
 8009290:	fffffe0c 	.word	0xfffffe0c
 8009294:	e801a468 	.word	0xe801a468
 8009298:	e801a408 	.word	0xe801a408

0800929c <KernelCircularBuffer`1::DequeueBlocking#25898>:
            }
        }

        public bool DequeueBlocking(     int timeout ,
                                     out T   val     )
        {
 800929c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092a0:	b081      	sub	sp, #4
 80092a2:	4691      	mov	r9, r2
 80092a4:	4688      	mov	r8, r1
 80092a6:	4606      	mov	r6, r0
            BugCheck.AssertInterruptsOn();
 80092a8:	f7f9 ffb6 	bl	8003218 <BugCheck::AssertInterruptsOn#5290>
 80092ac:	2701      	movs	r7, #1
 80092ae:	2001      	movs	r0, #1
 80092b0:	f000 f9fe 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 80092b4:	4605      	mov	r5, r0
            {
                bool fReceived;

                using(SmartHandles.InterruptState.Disable())
                {
                    fReceived = DequeueNonblocking( out val );
 80092b6:	4630      	mov	r0, r6
 80092b8:	4649      	mov	r1, r9
 80092ba:	f000 f970 	bl	800959e <KernelCircularBuffer`1::DequeueNonblocking#25894>
 80092be:	4604      	mov	r4, r0
                }
 80092c0:	4628      	mov	r0, r5
 80092c2:	f000 f9f5 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>

                if(fReceived)
 80092c6:	f014 0fff 	tst.w	r4, #255	; 0xff
 80092ca:	d10c      	bne.n	80092e6 <KernelCircularBuffer`1::DequeueBlocking#25898+0x4a>
                {
                    return true;
                }

                if(m_readerEvent.WaitOne( timeout, false ) == false)
 80092cc:	6974      	ldr	r4, [r6, #20]
 80092ce:	4640      	mov	r0, r8
 80092d0:	f7fb faf2 	bl	80048b8 <SchedulerTime::op_Explicit#5460>
 80092d4:	4602      	mov	r2, r0
 80092d6:	68a0      	ldr	r0, [r4, #8]
 80092d8:	460b      	mov	r3, r1
 80092da:	f7fd feaf 	bl	800703c <WaitHandle::WaitOne#4316>
 80092de:	f010 0fff 	tst.w	r0, #255	; 0xff
 80092e2:	d1e4      	bne.n	80092ae <KernelCircularBuffer`1::DequeueBlocking#25898+0x12>
 80092e4:	2700      	movs	r7, #0
 80092e6:	4638      	mov	r0, r7
 80092e8:	b001      	add	sp, #4
 80092ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080092ee <KernelCircularBuffer`1::EnqueueBlocking#25897>:

        //--//

        public bool EnqueueBlocking( int timeout ,
                                     T   val     )
        {
 80092ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092f2:	b081      	sub	sp, #4
 80092f4:	4691      	mov	r9, r2
 80092f6:	4688      	mov	r8, r1
 80092f8:	4606      	mov	r6, r0
            BugCheck.AssertInterruptsOn();
 80092fa:	f7f9 ff8d 	bl	8003218 <BugCheck::AssertInterruptsOn#5290>
 80092fe:	2701      	movs	r7, #1
 8009300:	2001      	movs	r0, #1
 8009302:	f000 f9d5 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>
 8009306:	4605      	mov	r5, r0
            {
                bool fSent;

                using(SmartHandles.InterruptState.Disable())
                {
                    fSent = EnqueueNonblocking( val );
 8009308:	4630      	mov	r0, r6
 800930a:	4649      	mov	r1, r9
 800930c:	f000 f91a 	bl	8009544 <KernelCircularBuffer`1::EnqueueNonblocking#25893>
 8009310:	4604      	mov	r4, r0
                }
 8009312:	4628      	mov	r0, r5
 8009314:	f000 f9cc 	bl	80096b0 <CMSIS_STUB_SCB__set_BASEPRI>

                if(fSent)
 8009318:	f014 0fff 	tst.w	r4, #255	; 0xff
 800931c:	d10c      	bne.n	8009338 <KernelCircularBuffer`1::EnqueueBlocking#25897+0x4a>
                {
                    return true;
                }

                if(m_writerEvent.WaitOne( timeout, false ) == false)
 800931e:	6934      	ldr	r4, [r6, #16]
 8009320:	4640      	mov	r0, r8
 8009322:	f7fb fac9 	bl	80048b8 <SchedulerTime::op_Explicit#5460>
 8009326:	4602      	mov	r2, r0
 8009328:	68a0      	ldr	r0, [r4, #8]
 800932a:	460b      	mov	r3, r1
 800932c:	f7fd fe86 	bl	800703c <WaitHandle::WaitOne#4316>
 8009330:	f010 0fff 	tst.w	r0, #255	; 0xff
 8009334:	d1e4      	bne.n	8009300 <KernelCircularBuffer`1::EnqueueBlocking#25897+0x12>
 8009336:	2700      	movs	r7, #0
 8009338:	4638      	mov	r0, r7
 800933a:	b001      	add	sp, #4
 800933c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009340 <LwipMutex::.ctor#19082>:
            }

            return mutex;
        }

        private LwipMutex()
 8009340:	b510      	push	{r4, lr}
 8009342:	4905      	ldr	r1, [pc, #20]	; (8009358 <LwipMutex::.ctor#19082+0x18>)
 8009344:	4604      	mov	r4, r0
        {
            m_sync = new object();
 8009346:	4805      	ldr	r0, [pc, #20]	; (800935c <LwipMutex::.ctor#19082+0x1c>)
 8009348:	4a05      	ldr	r2, [pc, #20]	; (8009360 <LwipMutex::.ctor#19082+0x20>)
 800934a:	4479      	add	r1, pc
 800934c:	4408      	add	r0, r1
 800934e:	4411      	add	r1, r2
 8009350:	f7f7 faa0 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 8009354:	60a0      	str	r0, [r4, #8]
 8009356:	bd10      	pop	{r4, pc}
 8009358:	17ff77ca 	.word	0x17ff77ca
 800935c:	fffffe0c 	.word	0xfffffe0c
 8009360:	e801a2e8 	.word	0xe801a2e8

08009364 <LwipSemaphore::.ctor#19096>:
            }

            return sem;
        }

        private LwipSemaphore(int count)
 8009364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009366:	b081      	sub	sp, #4
 8009368:	4f0d      	ldr	r7, [pc, #52]	; (80093a0 <LwipSemaphore::.ctor#19096+0x3c>)
 800936a:	4605      	mov	r5, r0
        {
            m_sync = new object();
 800936c:	480d      	ldr	r0, [pc, #52]	; (80093a4 <LwipSemaphore::.ctor#19096+0x40>)
 800936e:	460c      	mov	r4, r1
 8009370:	447f      	add	r7, pc
 8009372:	19c6      	adds	r6, r0, r7
 8009374:	480c      	ldr	r0, [pc, #48]	; (80093a8 <LwipSemaphore::.ctor#19096+0x44>)
 8009376:	19c1      	adds	r1, r0, r7
 8009378:	4630      	mov	r0, r6
 800937a:	f7f7 fa8b 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 800937e:	e9c5 0402 	strd	r0, r4, [r5, #8]
            m_count = count;
            m_ceiling = count;
            m_free = new AutoResetEvent(false);
 8009382:	480a      	ldr	r0, [pc, #40]	; (80093ac <LwipSemaphore::.ctor#19096+0x48>)
 8009384:	612c      	str	r4, [r5, #16]
 8009386:	19c1      	adds	r1, r0, r7
 8009388:	4630      	mov	r0, r6
 800938a:	f7f7 fa83 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 800938e:	2100      	movs	r1, #0
 8009390:	2200      	movs	r2, #0
 8009392:	4604      	mov	r4, r0
 8009394:	f7f9 feac 	bl	80030f0 <EventWaitHandle::.ctor#4319>
 8009398:	616c      	str	r4, [r5, #20]
 800939a:	b001      	add	sp, #4
 800939c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800939e:	46c0      	nop			; (mov r8, r8)
 80093a0:	17ff77a4 	.word	0x17ff77a4
 80093a4:	fffffe0c 	.word	0xfffffe0c
 80093a8:	e801a2e8 	.word	0xe801a2e8
 80093ac:	e801a378 	.word	0xe801a378

080093b0 <Board::GetSystemTimerIRQNumber#19398>:
 80093b0:	201c      	movs	r0, #28
 80093b2:	4770      	bx	lr

080093b4 <Device::get_BootstrapStack#19403>:
        //

        public override uint[] BootstrapStack
        {
            get
            {
 80093b4:	4802      	ldr	r0, [pc, #8]	; (80093c0 <Device::get_BootstrapStack#19403+0xc>)
                return s_bootstrapStackSTM32F411;
 80093b6:	4903      	ldr	r1, [pc, #12]	; (80093c4 <Device::get_BootstrapStack#19403+0x10>)
 80093b8:	4478      	add	r0, pc
 80093ba:	4408      	add	r0, r1
 80093bc:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80093be:	4770      	bx	lr
 80093c0:	17ff775c 	.word	0x17ff775c
 80093c4:	fffffcf8 	.word	0xfffffcf8

080093c8 <Processor::InitializeProcessor#19443>:
        //

        [RT.Inline]
        public override void InitializeProcessor()
        {
            base.InitializeProcessor( );
 80093c8:	b580      	push	{r7, lr}
 80093ca:	f7fa fbcf 	bl	8003b6c <Processor::InitializeProcessor#19384>

        //--//

        private unsafe void DisableMPU()
        {
            CUSTOM_STUB_STM32F411_DisableMPU( ); 
 80093ce:	f000 fa19 	bl	8009804 <CUSTOM_STUB_STM32F411_DisableMPU>
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <Processor::AllocateProcessorContext#19444>:
            DisableMPU( ); 
        }
        
        [RT.Inline]
        public override Microsoft.Zelig.Runtime.Processor.Context AllocateProcessorContext()
        {
 80093d4:	b580      	push	{r7, lr}
 80093d6:	4904      	ldr	r1, [pc, #16]	; (80093e8 <Processor::AllocateProcessorContext#19444+0x14>)
            return new Context();
 80093d8:	4804      	ldr	r0, [pc, #16]	; (80093ec <Processor::AllocateProcessorContext#19444+0x18>)
 80093da:	4a05      	ldr	r2, [pc, #20]	; (80093f0 <Processor::AllocateProcessorContext#19444+0x1c>)
 80093dc:	4479      	add	r1, pc
 80093de:	4408      	add	r0, r1
 80093e0:	4411      	add	r1, r2
 80093e2:	f7f7 fa57 	bl	8000894 <DefaultTypeSystemManager::AllocateObject#5602>
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	17ff7738 	.word	0x17ff7738
 80093ec:	fffffe0c 	.word	0xfffffe0c
 80093f0:	e8019838 	.word	0xe8019838

080093f4 <ContextSwitchTimer::GetTicksForQuantumValue#19452>:
    public sealed class ContextSwitchTimer : Chipset.ContextSwitchTimer
    {
        protected override uint GetTicksForQuantumValue( uint ms )
        {
            // STM32F411 uses the Core clock (100Mhz) for SysTick 
            return (uint)( RT.Configuration.CoreClockFrequency / 1000 ) * ms; 
 80093f4:	f248 60a0 	movw	r0, #34464	; 0x86a0
 80093f8:	f2c0 0001 	movt	r0, #1
 80093fc:	4348      	muls	r0, r1
 80093fe:	4770      	bx	lr

08009400 <KernelNode`1::InsertBefore#20239>:
        // Helper Methods
        //

        public void InsertBefore( KernelNode< T > place )
        {
            if(m_next != null)
 8009400:	b580      	push	{r7, lr}
 8009402:	6882      	ldr	r2, [r0, #8]
 8009404:	b13a      	cbz	r2, 8009416 <KernelNode`1::InsertBefore#20239+0x16>
        //--//

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
 8009406:	6882      	ldr	r2, [r0, #8]
            KernelNode< T > prev = m_previous;

            next.m_previous = prev;
 8009408:	2a00      	cmp	r2, #0

        [Inline]
        private void RemoveFromList_NoClear()
        {
            KernelNode< T > next = m_next;
            KernelNode< T > prev = m_previous;
 800940a:	bf1e      	ittt	ne
 800940c:	68c3      	ldrne	r3, [r0, #12]
 800940e:	60d3      	strne	r3, [r2, #12]

            next.m_previous = prev;
            prev.m_next     = next;
 8009410:	2b00      	cmpne	r3, #0
 8009412:	d00a      	beq.n	800942a <KernelNode`1::InsertBefore#20239+0x2a>
 8009414:	609a      	str	r2, [r3, #8]
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }

            KernelNode< T > prev = place.m_previous;
 8009416:	2900      	cmp	r1, #0
 8009418:	bf1c      	itt	ne
 800941a:	68ca      	ldrne	r2, [r1, #12]

            prev.ConnectToNext( this  );
 800941c:	2a00      	cmpne	r2, #0
 800941e:	d004      	beq.n	800942a <KernelNode`1::InsertBefore#20239+0x2a>
 8009420:	6090      	str	r0, [r2, #8]
 8009422:	e9c0 1202 	strd	r1, r2, [r0, #8]
 8009426:	60c8      	str	r0, [r1, #12]
 8009428:	bd80      	pop	{r7, pc}
            if(m_next != null)
            {
                RemoveFromList_NoClear();
            }

            KernelNode< T > prev = place.m_previous;
 800942a:	f7f7 f81d 	bl	8000468 <Thread::ThrowNullException#4411>

0800942e <KernelCircularBuffer`1::DequeueNonblocking#25747>:

            return true;
        }

        public bool DequeueNonblocking( out T val )
        {
 800942e:	b5b0      	push	{r4, r5, r7, lr}
 8009430:	460d      	mov	r5, r1
 8009432:	4604      	mov	r4, r0
            BugCheck.AssertInterruptsOff();
 8009434:	f7f9 fb04 	bl	8002a40 <BugCheck::AssertInterruptsOff#5289>
        public bool IsEmpty
        {
            [Inline]
            get
            {
                return m_count == 0;
 8009438:	69a0      	ldr	r0, [r4, #24]

        public bool DequeueNonblocking( out T val )
        {
            BugCheck.AssertInterruptsOff();

            if(this.IsEmpty)
 800943a:	2800      	cmp	r0, #0
 800943c:	bf04      	itt	eq
 800943e:	2000      	moveq	r0, #0
 8009440:	bdb0      	popeq	{r4, r5, r7, pc}
        public bool IsFull
        {
            [Inline]
            get
            {
                return m_count == m_size;
 8009442:	68a0      	ldr	r0, [r4, #8]
 8009444:	69a1      	ldr	r1, [r4, #24]
                val = default(T);

                return false;
            }

            if(this.IsFull)
 8009446:	4281      	cmp	r1, r0
            {
                m_writerEvent.Set();
 8009448:	bf04      	itt	eq
 800944a:	6920      	ldreq	r0, [r4, #16]
 800944c:	f7f9 fca6 	bleq	8002d9c <EventWaitHandle::Set#4321>
            }

            int pos = m_readerPos;

            val = m_array[pos];
 8009450:	68e1      	ldr	r1, [r4, #12]
            if(this.IsFull)
            {
                m_writerEvent.Set();
            }

            int pos = m_readerPos;
 8009452:	6a20      	ldr	r0, [r4, #32]

            val = m_array[pos];
 8009454:	688a      	ldr	r2, [r1, #8]
 8009456:	4290      	cmp	r0, r2
 8009458:	d21a      	bcs.n	8009490 <KernelCircularBuffer`1::DequeueNonblocking#25747+0x62>
 800945a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
        //--//

        [Inline]
        private int NextPosition( int val )
        {
            val = val + 1;
 800945e:	3001      	adds	r0, #1
                m_writerEvent.Set();
            }

            int pos = m_readerPos;

            val = m_array[pos];
 8009460:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009464:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 8009468:	6949      	ldr	r1, [r1, #20]
 800946a:	e9c5 2300 	strd	r2, r3, [r5]
 800946e:	60a9      	str	r1, [r5, #8]
        [Inline]
        private int NextPosition( int val )
        {
            val = val + 1;

            if(val == m_size)
 8009470:	68a1      	ldr	r1, [r4, #8]
            {
                return 0;
 8009472:	4288      	cmp	r0, r1
 8009474:	bf08      	it	eq
 8009476:	2000      	moveq	r0, #0
 8009478:	6220      	str	r0, [r4, #32]
            int pos = m_readerPos;

            val = m_array[pos];

            m_readerPos = NextPosition( pos );
            m_count--;
 800947a:	69a0      	ldr	r0, [r4, #24]
 800947c:	3801      	subs	r0, #1
 800947e:	61a0      	str	r0, [r4, #24]
 8009480:	bf1c      	itt	ne
 8009482:	2001      	movne	r0, #1
 8009484:	bdb0      	popne	{r4, r5, r7, pc}

            if(this.IsEmpty)
            {
                m_readerEvent.Reset();
 8009486:	6960      	ldr	r0, [r4, #20]
 8009488:	2100      	movs	r1, #0
 800948a:	7301      	strb	r1, [r0, #12]
 800948c:	2001      	movs	r0, #1
 800948e:	bdb0      	pop	{r4, r5, r7, pc}
                m_writerEvent.Set();
            }

            int pos = m_readerPos;

            val = m_array[pos];
 8009490:	f7f7 fd0e 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>

08009494 <List`1::set_Capacity#25796>:
            {
                return m_items.Length;
            }

            set
            {
 8009494:	b5b0      	push	{r4, r5, r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	4604      	mov	r4, r0
 800949a:	460d      	mov	r5, r1
                if(value != m_items.Length)
 800949c:	68a0      	ldr	r0, [r4, #8]
 800949e:	b350      	cbz	r0, 80094f6 <List`1::set_Capacity#25796+0x62>
 80094a0:	6880      	ldr	r0, [r0, #8]
 80094a2:	4285      	cmp	r5, r0
 80094a4:	d025      	beq.n	80094f2 <List`1::set_Capacity#25796+0x5e>
                {
                    if(value < m_size)
 80094a6:	68e0      	ldr	r0, [r4, #12]
 80094a8:	4285      	cmp	r5, r0
                    {
                        ThrowHelper.ThrowArgumentOutOfRangeException( ExceptionArgument.value, ExceptionResource.ArgumentOutOfRange_SmallCapacity );
 80094aa:	bfb8      	it	lt
 80094ac:	f7fd fce6 	bllt	8006e7c <ThrowHelper::ThrowArgumentOutOfRangeException#8093>
                    }

                    if(value > 0)
 80094b0:	2d01      	cmp	r5, #1
 80094b2:	db17      	blt.n	80094e4 <List`1::set_Capacity#25796+0x50>
 80094b4:	4913      	ldr	r1, [pc, #76]	; (8009504 <List`1::set_Capacity#25796+0x70>)
                    {
                        T[] newItems = new T[value];
 80094b6:	4814      	ldr	r0, [pc, #80]	; (8009508 <List`1::set_Capacity#25796+0x74>)
 80094b8:	4a14      	ldr	r2, [pc, #80]	; (800950c <List`1::set_Capacity#25796+0x78>)
 80094ba:	4479      	add	r1, pc
 80094bc:	4408      	add	r0, r1
 80094be:	4411      	add	r1, r2
 80094c0:	462a      	mov	r2, r5
 80094c2:	f7f8 faa7 	bl	8001a14 <DefaultTypeSystemManager::AllocateArray#5605>
 80094c6:	4605      	mov	r5, r0
                        if(m_size > 0)
 80094c8:	68e0      	ldr	r0, [r4, #12]
 80094ca:	2800      	cmp	r0, #0
 80094cc:	dd07      	ble.n	80094de <List`1::set_Capacity#25796+0x4a>
                        {
                            Array.Copy( m_items, 0, newItems, 0, m_size );
 80094ce:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80094d2:	462a      	mov	r2, r5
 80094d4:	2300      	movs	r3, #0
 80094d6:	9100      	str	r1, [sp, #0]
 80094d8:	2100      	movs	r1, #0
 80094da:	f7f7 fa39 	bl	8000950 <Array::Copy#4077>
 80094de:	60a5      	str	r5, [r4, #8]
 80094e0:	b002      	add	sp, #8
 80094e2:	bdb0      	pop	{r4, r5, r7, pc}
 80094e4:	4805      	ldr	r0, [pc, #20]	; (80094fc <List`1::set_Capacity#25796+0x68>)
                        }
                        m_items = newItems;
                    }
                    else
                    {
                        m_items = sEmptyArray;
 80094e6:	4906      	ldr	r1, [pc, #24]	; (8009500 <List`1::set_Capacity#25796+0x6c>)
 80094e8:	4478      	add	r0, pc
 80094ea:	4408      	add	r0, r1
 80094ec:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 80094f0:	60a0      	str	r0, [r4, #8]
 80094f2:	b002      	add	sp, #8
 80094f4:	bdb0      	pop	{r4, r5, r7, pc}
                return m_items.Length;
            }

            set
            {
                if(value != m_items.Length)
 80094f6:	f7f6 ffb7 	bl	8000468 <Thread::ThrowNullException#4411>
 80094fa:	46c0      	nop			; (mov r8, r8)
 80094fc:	17ff762c 	.word	0x17ff762c
 8009500:	fffffcf8 	.word	0xfffffcf8
 8009504:	17ff765a 	.word	0x17ff765a
 8009508:	fffffe0c 	.word	0xfffffe0c
 800950c:	e801a438 	.word	0xe801a438

08009510 <List`1::EnsureCapacity#25828>:
        // value. If the currect capacity of the list is less than min, the
        // capacity is increased to twice the current capacity or to min,
        // whichever is larger.
        private void EnsureCapacity( int min )
        {
            if(m_items.Length < min)
 8009510:	b580      	push	{r7, lr}
 8009512:	6882      	ldr	r2, [r0, #8]
 8009514:	b1a2      	cbz	r2, 8009540 <List`1::EnsureCapacity#25828+0x30>
 8009516:	6892      	ldr	r2, [r2, #8]
 8009518:	428a      	cmp	r2, r1
 800951a:	bfa8      	it	ge
 800951c:	bd80      	popge	{r7, pc}
            {
                int newCapacity = m_items.Length == 0 ? cDefaultCapacity : m_items.Length * 2;
 800951e:	6882      	ldr	r2, [r0, #8]
 8009520:	b172      	cbz	r2, 8009540 <List`1::EnsureCapacity#25828+0x30>
 8009522:	6892      	ldr	r2, [r2, #8]
 8009524:	b122      	cbz	r2, 8009530 <List`1::EnsureCapacity#25828+0x20>
 8009526:	6882      	ldr	r2, [r0, #8]
 8009528:	b152      	cbz	r2, 8009540 <List`1::EnsureCapacity#25828+0x30>
 800952a:	6892      	ldr	r2, [r2, #8]
 800952c:	0052      	lsls	r2, r2, #1
 800952e:	e000      	b.n	8009532 <List`1::EnsureCapacity#25828+0x22>
 8009530:	2204      	movs	r2, #4

                if(newCapacity < min) newCapacity = min;
 8009532:	428a      	cmp	r2, r1
 8009534:	bfb8      	it	lt
 8009536:	460a      	movlt	r2, r1

                Capacity = newCapacity;
 8009538:	4611      	mov	r1, r2
 800953a:	f7ff ffab 	bl	8009494 <List`1::set_Capacity#25796>
 800953e:	bd80      	pop	{r7, pc}
        // value. If the currect capacity of the list is less than min, the
        // capacity is increased to twice the current capacity or to min,
        // whichever is larger.
        private void EnsureCapacity( int min )
        {
            if(m_items.Length < min)
 8009540:	f7f6 ff92 	bl	8000468 <Thread::ThrowNullException#4411>

08009544 <KernelCircularBuffer`1::EnqueueNonblocking#25893>:
        }

        //--//

        public bool EnqueueNonblocking( T val )
        {
 8009544:	b5b0      	push	{r4, r5, r7, lr}
 8009546:	460d      	mov	r5, r1
 8009548:	4604      	mov	r4, r0
            BugCheck.AssertInterruptsOff();
 800954a:	f7f9 fa79 	bl	8002a40 <BugCheck::AssertInterruptsOff#5289>
        public bool IsFull
        {
            [Inline]
            get
            {
                return m_count == m_size;
 800954e:	68a0      	ldr	r0, [r4, #8]
 8009550:	69a1      	ldr	r1, [r4, #24]

        public bool EnqueueNonblocking( T val )
        {
            BugCheck.AssertInterruptsOff();

            if(this.IsFull)
 8009552:	4281      	cmp	r1, r0
 8009554:	bf04      	itt	eq
 8009556:	2000      	moveq	r0, #0
 8009558:	bdb0      	popeq	{r4, r5, r7, pc}
        public bool IsEmpty
        {
            [Inline]
            get
            {
                return m_count == 0;
 800955a:	69a0      	ldr	r0, [r4, #24]
 800955c:	b910      	cbnz	r0, 8009564 <KernelCircularBuffer`1::EnqueueNonblocking#25893+0x20>
                return false;
            }

            if(this.IsEmpty)
            {
                m_readerEvent.Set();
 800955e:	6960      	ldr	r0, [r4, #20]
 8009560:	f7f9 fc1c 	bl	8002d9c <EventWaitHandle::Set#4321>
            }

            int pos = m_writerPos;

            m_array[pos] = val;
 8009564:	68e1      	ldr	r1, [r4, #12]
            if(this.IsEmpty)
            {
                m_readerEvent.Set();
            }

            int pos = m_writerPos;
 8009566:	69e0      	ldr	r0, [r4, #28]

            m_array[pos] = val;
 8009568:	688a      	ldr	r2, [r1, #8]
 800956a:	4290      	cmp	r0, r2
 800956c:	d215      	bcs.n	800959a <KernelCircularBuffer`1::EnqueueNonblocking#25893+0x56>
 800956e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
        //--//

        [Inline]
        private int NextPosition( int val )
        {
            val = val + 1;
 8009572:	3001      	adds	r0, #1
 8009574:	60cd      	str	r5, [r1, #12]

            if(val == m_size)
 8009576:	68a1      	ldr	r1, [r4, #8]
            {
                return 0;
 8009578:	4288      	cmp	r0, r1
 800957a:	bf08      	it	eq
 800957c:	2000      	moveq	r0, #0
 800957e:	61e0      	str	r0, [r4, #28]
            int pos = m_writerPos;

            m_array[pos] = val;

            m_writerPos = NextPosition( pos );
            m_count++;
 8009580:	69a0      	ldr	r0, [r4, #24]
 8009582:	3001      	adds	r0, #1
 8009584:	61a0      	str	r0, [r4, #24]
        public bool IsFull
        {
            [Inline]
            get
            {
                return m_count == m_size;
 8009586:	68a1      	ldr	r1, [r4, #8]
            m_array[pos] = val;

            m_writerPos = NextPosition( pos );
            m_count++;

            if(this.IsFull)
 8009588:	4288      	cmp	r0, r1
 800958a:	bf1c      	itt	ne
 800958c:	2001      	movne	r0, #1
 800958e:	bdb0      	popne	{r4, r5, r7, pc}
            {
                m_writerEvent.Reset();
 8009590:	6920      	ldr	r0, [r4, #16]
 8009592:	2100      	movs	r1, #0
 8009594:	7301      	strb	r1, [r0, #12]
 8009596:	2001      	movs	r0, #1
 8009598:	bdb0      	pop	{r4, r5, r7, pc}
                m_readerEvent.Set();
            }

            int pos = m_writerPos;

            m_array[pos] = val;
 800959a:	f7f7 fc89 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>

0800959e <KernelCircularBuffer`1::DequeueNonblocking#25894>:

            return true;
        }

        public bool DequeueNonblocking( out T val )
        {
 800959e:	b5b0      	push	{r4, r5, r7, lr}
 80095a0:	460d      	mov	r5, r1
 80095a2:	4604      	mov	r4, r0
            BugCheck.AssertInterruptsOff();
 80095a4:	f7f9 fa4c 	bl	8002a40 <BugCheck::AssertInterruptsOff#5289>
        public bool IsEmpty
        {
            [Inline]
            get
            {
                return m_count == 0;
 80095a8:	69a0      	ldr	r0, [r4, #24]

        public bool DequeueNonblocking( out T val )
        {
            BugCheck.AssertInterruptsOff();

            if(this.IsEmpty)
 80095aa:	2800      	cmp	r0, #0
 80095ac:	bf04      	itt	eq
 80095ae:	2000      	moveq	r0, #0
 80095b0:	bdb0      	popeq	{r4, r5, r7, pc}
        public bool IsFull
        {
            [Inline]
            get
            {
                return m_count == m_size;
 80095b2:	68a0      	ldr	r0, [r4, #8]
 80095b4:	69a1      	ldr	r1, [r4, #24]
                val = default(T);

                return false;
            }

            if(this.IsFull)
 80095b6:	4281      	cmp	r1, r0
            {
                m_writerEvent.Set();
 80095b8:	bf04      	itt	eq
 80095ba:	6920      	ldreq	r0, [r4, #16]
 80095bc:	f7f9 fbee 	bleq	8002d9c <EventWaitHandle::Set#4321>
            }

            int pos = m_readerPos;

            val = m_array[pos];
 80095c0:	68e1      	ldr	r1, [r4, #12]
            if(this.IsFull)
            {
                m_writerEvent.Set();
            }

            int pos = m_readerPos;
 80095c2:	6a20      	ldr	r0, [r4, #32]

            val = m_array[pos];
 80095c4:	688a      	ldr	r2, [r1, #8]
 80095c6:	4290      	cmp	r0, r2
 80095c8:	d214      	bcs.n	80095f4 <KernelCircularBuffer`1::DequeueNonblocking#25894+0x56>
 80095ca:	eb01 0180 	add.w	r1, r1, r0, lsl #2
        //--//

        [Inline]
        private int NextPosition( int val )
        {
            val = val + 1;
 80095ce:	3001      	adds	r0, #1
                m_writerEvent.Set();
            }

            int pos = m_readerPos;

            val = m_array[pos];
 80095d0:	68c9      	ldr	r1, [r1, #12]
 80095d2:	6029      	str	r1, [r5, #0]
        [Inline]
        private int NextPosition( int val )
        {
            val = val + 1;

            if(val == m_size)
 80095d4:	68a1      	ldr	r1, [r4, #8]
            {
                return 0;
 80095d6:	4288      	cmp	r0, r1
 80095d8:	bf08      	it	eq
 80095da:	2000      	moveq	r0, #0
 80095dc:	6220      	str	r0, [r4, #32]
            int pos = m_readerPos;

            val = m_array[pos];

            m_readerPos = NextPosition( pos );
            m_count--;
 80095de:	69a0      	ldr	r0, [r4, #24]
 80095e0:	3801      	subs	r0, #1
 80095e2:	61a0      	str	r0, [r4, #24]
 80095e4:	bf1c      	itt	ne
 80095e6:	2001      	movne	r0, #1
 80095e8:	bdb0      	popne	{r4, r5, r7, pc}

            if(this.IsEmpty)
            {
                m_readerEvent.Reset();
 80095ea:	6960      	ldr	r0, [r4, #20]
 80095ec:	2100      	movs	r1, #0
 80095ee:	7301      	strb	r1, [r0, #12]
 80095f0:	2001      	movs	r0, #1
 80095f2:	bdb0      	pop	{r4, r5, r7, pc}
                m_writerEvent.Set();
            }

            int pos = m_readerPos;

            val = m_array[pos];
 80095f4:	f7f7 fc5c 	bl	8000eb0 <Thread::ThrowIndexOutOfRangeException#4412>

080095f8 <_Z41__static_initialization_and_destruction_0ii>:
    HRESULT LLOS_ADC_GetPrecisionBits(LLOS_Context channel, uint32_t* precisionInBits)
    {
        return LLOS_E_NOTIMPL;
    }
#endif
}
 80095f8:	2801      	cmp	r0, #1
 80095fa:	d10e      	bne.n	800961a <_Z41__static_initialization_and_destruction_0ii+0x22>
 80095fc:	b508      	push	{r3, lr}
 80095fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009602:	4299      	cmp	r1, r3
 8009604:	d108      	bne.n	8009618 <_Z41__static_initialization_and_destruction_0ii+0x20>
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
 8009606:	4805      	ldr	r0, [pc, #20]	; (800961c <_Z41__static_initialization_and_destruction_0ii+0x24>)
 8009608:	2300      	movs	r3, #0
 800960a:	7003      	strb	r3, [r0, #0]
 800960c:	6043      	str	r3, [r0, #4]
 800960e:	6083      	str	r3, [r0, #8]
 8009610:	60c3      	str	r3, [r0, #12]
        gpio_init_out(&gpio, pin);
 8009612:	2105      	movs	r1, #5
 8009614:	f001 fdfc 	bl	800b210 <gpio_init_out>
 8009618:	bd08      	pop	{r3, pc}
 800961a:	4770      	bx	lr
 800961c:	20000b40 	.word	0x20000b40

08009620 <fake_main>:
DigitalOut myled((PinName)0x5);


extern "C"
{
    uint fake_main() {
 8009620:	b508      	push	{r3, lr}
    __IO uint32_t *reg_set_clr;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
 8009622:	4b13      	ldr	r3, [pc, #76]	; (8009670 <fake_main+0x50>)
 8009624:	f993 3000 	ldrsb.w	r3, [r3]
 8009628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800962c:	d104      	bne.n	8009638 <fake_main+0x18>
 800962e:	4811      	ldr	r0, [pc, #68]	; (8009674 <fake_main+0x54>)
 8009630:	4911      	ldr	r1, [pc, #68]	; (8009678 <fake_main+0x58>)
 8009632:	2234      	movs	r2, #52	; 0x34
 8009634:	f001 fdce 	bl	800b1d4 <mbed_assert_internal>
    if (value) {
        *obj->reg_set_clr = obj->mask;
 8009638:	4c0d      	ldr	r4, [pc, #52]	; (8009670 <fake_main+0x50>)
 800963a:	68e3      	ldr	r3, [r4, #12]
 800963c:	6862      	ldr	r2, [r4, #4]
 800963e:	601a      	str	r2, [r3, #0]
        while (1) {
            myled = 1; // LED is ON
            wait(1.0); // 200 ms
 8009640:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009644:	f001 fee6 	bl	800b414 <wait>
    __IO uint32_t *reg_set_clr;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
 8009648:	f994 3000 	ldrsb.w	r3, [r4]
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009650:	d104      	bne.n	800965c <fake_main+0x3c>
 8009652:	4808      	ldr	r0, [pc, #32]	; (8009674 <fake_main+0x54>)
 8009654:	4908      	ldr	r1, [pc, #32]	; (8009678 <fake_main+0x58>)
 8009656:	2234      	movs	r2, #52	; 0x34
 8009658:	f001 fdbc 	bl	800b1d4 <mbed_assert_internal>
    if (value) {
        *obj->reg_set_clr = obj->mask;
    } else {
        *obj->reg_set_clr = obj->mask << 16;
 800965c:	4b04      	ldr	r3, [pc, #16]	; (8009670 <fake_main+0x50>)
 800965e:	68da      	ldr	r2, [r3, #12]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	041b      	lsls	r3, r3, #16
 8009664:	6013      	str	r3, [r2, #0]
            myled = 0; // LED is OFF
            wait(1.0); // 1 sec
 8009666:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800966a:	f001 fed3 	bl	800b414 <wait>
DigitalOut myled((PinName)0x5);


extern "C"
{
    uint fake_main() {
 800966e:	e7d8      	b.n	8009622 <fake_main+0x2>
 8009670:	20000b40 	.word	0x20000b40
 8009674:	0801c204 	.word	0x0801c204
 8009678:	0801c21c 	.word	0x0801c21c

0800967c <_GLOBAL__sub_I_myled>:
    HRESULT LLOS_ADC_GetPrecisionBits(LLOS_Context channel, uint32_t* precisionInBits)
    {
        return LLOS_E_NOTIMPL;
    }
#endif
}
 800967c:	b508      	push	{r3, lr}
 800967e:	2001      	movs	r0, #1
 8009680:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009684:	f7ff ffb8 	bl	80095f8 <_Z41__static_initialization_and_destruction_0ii>
 8009688:	bd08      	pop	{r3, pc}
 800968a:	bf00      	nop

0800968c <CMSIS_STUB_SCB__get_CONTROL>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800968c:	f3ef 8014 	mrs	r0, CONTROL
    //

    /*__STATIC_INLINE*/ uint32_t CMSIS_STUB_SCB__get_CONTROL()
    {
        return __get_CONTROL();
    }
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop

08009694 <CMSIS_STUB_SCB__get_IPSR>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009694:	f3ef 8005 	mrs	r0, IPSR
    }

    /*__STATIC_INLINE*/ uint32_t CMSIS_STUB_SCB__get_IPSR()
    {
        return __get_IPSR();
    }
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop

0800969c <CMSIS_STUB_SCB__set_PSP>:

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800969c:	f380 8809 	msr	PSP, r0
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop

080096a8 <CMSIS_STUB_SCB__get_BASEPRI>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80096a8:	f3ef 8011 	mrs	r0, BASEPRI
    }

    /*__STATIC_INLINE*/ uint32_t  CMSIS_STUB_SCB__get_BASEPRI()
    {
        return __get_BASEPRI() >> (8 - __NVIC_PRIO_BITS);
    }
 80096ac:	0900      	lsrs	r0, r0, #4
 80096ae:	4770      	bx	lr

080096b0 <CMSIS_STUB_SCB__set_BASEPRI>:

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096b0:	2301      	movs	r3, #1
 80096b2:	f383 8810 	msr	PRIMASK, r3
 80096b6:	f3bf 8f6f 	isb	sy
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80096ba:	f3ef 8311 	mrs	r3, BASEPRI

    /*__STATIC_INLINE*/ uint32_t CMSIS_STUB_SCB__set_BASEPRI(uint32_t basePri)
    {
        __set_PRIMASK(1);
        __ISB();
        register uint32_t prev = __get_BASEPRI() >> (8 - __NVIC_PRIO_BITS);
 80096be:	091b      	lsrs	r3, r3, #4
        __set_BASEPRI(basePri << (8 - __NVIC_PRIO_BITS));
 80096c0:	0100      	lsls	r0, r0, #4

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80096c2:	f380 8811 	msr	BASEPRI, r0

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096c6:	2200      	movs	r2, #0
 80096c8:	f382 8810 	msr	PRIMASK, r2
 80096cc:	f3bf 8f6f 	isb	sy
        __set_PRIMASK(0);
        __ISB();
        return prev;
    }
 80096d0:	4618      	mov	r0, r3
 80096d2:	4770      	bx	lr

080096d4 <CUSTOM_STUB_SCB__get_FPCCR>:
#endif /* (__CORTEX_M == 0x04) */


    /*__STATIC_INLINE*/ uint32_t CUSTOM_STUB_SCB__get_FPCCR()
    {
        return *((uint32_t volatile *)0xE000EF34);
 80096d4:	4b01      	ldr	r3, [pc, #4]	; (80096dc <CUSTOM_STUB_SCB__get_FPCCR+0x8>)
 80096d6:	6818      	ldr	r0, [r3, #0]
    }
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	e000ef34 	.word	0xe000ef34

080096e0 <CUSTOM_STUB_SCB__set_FPCCR>:

    /*__STATIC_INLINE*/ void CUSTOM_STUB_SCB__set_FPCCR(uint32_t fpscr)
    {
        *((uint32_t volatile *)0xE000EF34) = fpscr;
 80096e0:	4b01      	ldr	r3, [pc, #4]	; (80096e8 <CUSTOM_STUB_SCB__set_FPCCR+0x8>)
 80096e2:	6018      	str	r0, [r3, #0]
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	e000ef34 	.word	0xe000ef34

080096ec <CUSTOM_STUB_SCB_set_CCR>:
    // CCR
    //

    /*__STATIC_INLINE*/ void CUSTOM_STUB_SCB_set_CCR(uint32_t value)
    {
        *((uint32_t volatile *)0xE000ED14) = value;
 80096ec:	4b01      	ldr	r3, [pc, #4]	; (80096f4 <CUSTOM_STUB_SCB_set_CCR+0x8>)
 80096ee:	6018      	str	r0, [r3, #0]
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	e000ed14 	.word	0xe000ed14

080096f8 <CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler>:
    // System Handlers
    // 

    /*__STATIC_INLINE*/ void CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler(uint32_t ex)
    {
        uint32_t SHCRS = *((uint32_t volatile *)0xE000ED24);
 80096f8:	4a02      	ldr	r2, [pc, #8]	; (8009704 <CUSTOM_STUB_SCB_SHCRS_EnableSystemHandler+0xc>)
 80096fa:	6813      	ldr	r3, [r2, #0]

        SHCRS |= ex;
 80096fc:	4318      	orrs	r0, r3

        *((uint32_t volatile *)0xE000ED24) = SHCRS;
 80096fe:	6010      	str	r0, [r2, #0]
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	e000ed24 	.word	0xe000ed24

08009708 <CUSTOM_STUB_SCB_ICSR_RaiseSystemException>:
    {
        //
        // Set/Clears system handlers in ICSR register of SCB. 
        // CMSIS does not allow using NVIC api to set/clear System Handlers. 
        //
        uint32_t ICSR = *((uint32_t volatile *)0xE000ED04);
 8009708:	4a02      	ldr	r2, [pc, #8]	; (8009714 <CUSTOM_STUB_SCB_ICSR_RaiseSystemException+0xc>)
 800970a:	6813      	ldr	r3, [r2, #0]

        ICSR |= ex;
 800970c:	4318      	orrs	r0, r3

        *((uint32_t volatile *)0xE000ED04) = ICSR;
 800970e:	6010      	str	r0, [r2, #0]
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	e000ed04 	.word	0xe000ed04

08009718 <CUSTOM_STUB_SCB_SCR_SetSystemControlRegister>:
        return __get_IPSR() & 0x000000FF;
    }

    /*__STATIC_INLINE*/ void CUSTOM_STUB_SCB_SCR_SetSystemControlRegister(uint32_t scr)
    {
        *((uint32_t volatile *)0xE000ED10) = scr;
 8009718:	4b01      	ldr	r3, [pc, #4]	; (8009720 <CUSTOM_STUB_SCB_SCR_SetSystemControlRegister+0x8>)
 800971a:	6018      	str	r0, [r3, #0]
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	e000ed10 	.word	0xe000ed10

08009724 <CMSIS_STUB_POWER_WaitForEvent>:
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 8009724:	bf20      	wfe
 8009726:	4770      	bx	lr

08009728 <CUSTOM_STUB_RaiseSupervisorCallForLongJump>:
    /*__STATIC_INLINE*/ 
    __attribute__((naked)) 
    __attribute__((aligned(8))) 
    void CUSTOM_STUB_RaiseSupervisorCallForLongJump()
    {
        __ASM volatile ("svc #17");
 8009728:	df11      	svc	17
 800972a:	bf00      	nop
 800972c:	0000      	movs	r0, r0
	...

08009730 <CUSTOM_STUB_RaiseSupervisorCallForStartThreads>:
    /*__STATIC_INLINE*/
    __attribute__((naked))
    __attribute__((aligned(8)))
    void CUSTOM_STUB_RaiseSupervisorCallForStartThreads()
    {
        __ASM volatile ("svc #18");
 8009730:	df12      	svc	18
 8009732:	bf00      	nop
 8009734:	0000      	movs	r0, r0
	...

08009738 <CUSTOM_STUB_RaiseSupervisorCallForRetireThread>:
    /*__STATIC_INLINE*/ 
    __attribute__((naked))
    __attribute__((aligned(8)))
    void CUSTOM_STUB_RaiseSupervisorCallForRetireThread()
    {
        __ASM volatile ("svc #19");
 8009738:	df13      	svc	19
 800973a:	bf00      	nop
 800973c:	0000      	movs	r0, r0
	...

08009740 <CUSTOM_STUB_RaiseSupervisorCallForSnapshotProcessModeRegisters>:
    /*__STATIC_INLINE*/
    /*__attribute__((naked))*/
    __attribute__((aligned(8)))
        void CUSTOM_STUB_RaiseSupervisorCallForSnapshotProcessModeRegisters()
    {
        __ASM volatile ("svc #20");
 8009740:	df14      	svc	20
 8009742:	4770      	bx	lr

08009744 <CUSTOM_STUB_SetExcReturn>:
    //
    uint32_t svc_exc_return = 0xDEADBEEF;

    void CUSTOM_STUB_SetExcReturn(uint32_t ret)
    {
        svc_exc_return = ret; 
 8009744:	4b01      	ldr	r3, [pc, #4]	; (800974c <CUSTOM_STUB_SetExcReturn+0x8>)
 8009746:	6018      	str	r0, [r3, #0]
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	20000a54 	.word	0x20000a54

08009750 <CUSTOM_STUB_FetchSoftwareFrameSnapshot>:
    {
        //
        // Return the snapshot from the storage area at sw_hw__frame
        //
        return &sw_hw__frame[0];
    }
 8009750:	4800      	ldr	r0, [pc, #0]	; (8009754 <CUSTOM_STUB_FetchSoftwareFrameSnapshot+0x4>)
 8009752:	4770      	bx	lr
 8009754:	20000b50 	.word	0x20000b50

08009758 <SVC_Handler>:

    
    __attribute__((naked)) 
    void SVC_Handler(void)
    {    
        __ASM volatile ("TST    LR, #0x4");                 // Test bit 3 to use decide which stack pointer we are coming from 
 8009758:	f01e 0f04 	tst.w	lr, #4
        __ASM volatile ("ITE    EQ");        
 800975c:	bf0c      	ite	eq
        __ASM volatile ("MRSEQ  R0, msp");
 800975e:	f3ef 8008 	mrseq	r0, MSP
        __ASM volatile ("MRSNE  R0, psp");
 8009762:	f3ef 8009 	mrsne	r0, PSP
        // all remaining registers onto the stack first and into the convenience space
        // right after
        // TODO: move to managed layer
        //
        {
            __ASM volatile ("LDR    R12, [R0 , #24]");          // load the SVC number
 8009766:	f8d0 c018 	ldr.w	ip, [r0, #24]
            __ASM volatile ("LDRH   R12, [R12, #-2]");
 800976a:	f83c cc02 	ldrh.w	ip, [ip, #-2]
            __ASM volatile ("BICS   R12, R12, #0xFF00");
 800976e:	f43c 4c7f 	bics.w	ip, ip, #65280	; 0xff00
            __ASM volatile ("CMP    R12, #20");                 // check if we are serving a frame snapshot (SVC_Code.SupervisorCall__SnapshotProcessModeRegisters) ...
 8009772:	f1bc 0f14 	cmp.w	ip, #20
            __ASM volatile ("BNE    __SVCCALL");                // ... skip if not
 8009776:	d116      	bne.n	80097a6 <__SVCCALL>

            {
                //
                // Snapshot
                //
                __ASM volatile ("MOV    R2 , LR");              // Save LR and CONTROL, to save the status and privilege/stack mode
 8009778:	4672      	mov	r2, lr
                __ASM volatile ("MRS    R3 , CONTROL");
 800977a:	f3ef 8314 	mrs	r3, CONTROL

                __ASM volatile ("STMDB  R0!, {R2-R11}");        // Push the SW stack frame, a total of 10 registers, including R2/3
 800977e:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
                //
                // Now the stack has the full frame of 18 registers (RegistersOnStack)
                // We need to move the frame to the convenience space and then pop the 
                // Software frame before return
                //
                __ASM volatile ("MOV    R1 , %0" : /*output*/ : "r"(&sw_hw__frame[0]));
 8009782:	4b0e      	ldr	r3, [pc, #56]	; (80097bc <__SVCCALL+0x16>)
 8009784:	4619      	mov	r1, r3
                __ASM volatile ("MOV    R2 , R0");              // R0 contains the beginning of the frame
 8009786:	4602      	mov	r2, r0
                __ASM volatile ("MOV    R12, #18");
 8009788:	f04f 0c12 	mov.w	ip, #18

0800978c <__COPY_TO_FRAME>:

                __ASM volatile ("__COPY_TO_FRAME:");

                __ASM volatile ("LDR    R3, [R2]");
 800978c:	6813      	ldr	r3, [r2, #0]
                __ASM volatile ("STR    R3, [R1]");
 800978e:	600b      	str	r3, [r1, #0]

                __ASM volatile ("ADD    R2 , #4");
 8009790:	f102 0204 	add.w	r2, r2, #4
                __ASM volatile ("ADD    R1 , #4");
 8009794:	f101 0104 	add.w	r1, r1, #4
                __ASM volatile ("SUBS   R12, #1");
 8009798:	f1bc 0c01 	subs.w	ip, ip, #1
                __ASM volatile ("CMP    R12, #0"); 
 800979c:	f1bc 0f00 	cmp.w	ip, #0
                __ASM volatile ("BNE   __COPY_TO_FRAME");
 80097a0:	d1f4      	bne.n	800978c <__COPY_TO_FRAME>

                __ASM volatile ("LDMIA    R0!, {R2-R11}");      // Unstack the SW frame (10 registers) before proceeding as usual
 80097a2:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}

080097a6 <__SVCCALL>:
        //
        // Normal service call
        //
        __ASM volatile ("__SVCCALL:");

        __ASM volatile ("MOV    R1, %0" : /*output*/ : "r"(&svc_exc_return) );
 80097a6:	4c06      	ldr	r4, [pc, #24]	; (80097c0 <__SVCCALL+0x1a>)
 80097a8:	4621      	mov	r1, r4
        __ASM volatile ("STR    LR, [R1]");
 80097aa:	f8c1 e000 	str.w	lr, [r1]


#if __FPU_USED != 0
        SVC_Handler_Zelig_VFP_NoFPContext();
 80097ae:	f7f6 ff19 	bl	80005e4 <SVC_Handler_Zelig_VFP_NoFPContext>
        //
        // Push
        //
        //NotifySoftwareFrameSnapshot(); 

        __ASM volatile ("MOV    R1, %0" : /*output*/ : "r"(&svc_exc_return));
 80097b2:	4621      	mov	r1, r4
        __ASM volatile ("LDR    LR, [R1]");
 80097b4:	f8d1 e000 	ldr.w	lr, [r1]

        __ASM volatile ("BX     LR");
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	20000b50 	.word	0x20000b50
 80097c0:	20000a54 	.word	0x20000a54

080097c4 <PendSV_Handler>:
    // point context is active 
    //

    __attribute__((naked)) void PendSV_Handler(void)
    {
        __ASM volatile ("MRS      R0, PSP");                 // Save current process stack pointer value into R0
 80097c4:	f3ef 8009 	mrs	r0, PSP

#if __FPU_USED != 0
        __ASM volatile ("ANDS     R1, LR, #0x10");           // When bit 4 in LR is zero (0), we need to stack FP registers as well 
 80097c8:	f01e 0110 	ands.w	r1, lr, #16
        __ASM volatile ("CMP      R1, #0");                  // R1 is the second parameter of PendSV_Handler_Zelig_VFP_FullFPContext
 80097cc:	2900      	cmp	r1, #0
        __ASM volatile ("IT       EQ");
 80097ce:	bf08      	it	eq
        __ASM volatile ("VSTMDBEQ R0!, {S16-S31}");
 80097d0:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
#endif

        __ASM volatile ("MOV      R2, LR");                  // Save LR and CONTROL, to save the status and privilege/stack mode
 80097d4:	4672      	mov	r2, lr
        __ASM volatile ("MRS      R3, CONTROL");
 80097d6:	f3ef 8314 	mrs	r3, CONTROL

        __ASM volatile ("STMDB    R0!, {R2-R11}");           // Stack the SW stack frame, a total of 10 registers, including R2/3
 80097da:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}

#if __FPU_USED != 0
        PendSV_Handler_Zelig_VFP();
 80097de:	f7f6 ff3b 	bl	8000658 <PendSV_Handler_Zelig_VFP>
#else
        PendSV_Handler_Zelig();                              // Perform context switch, practically setting the stack pointer for the next task
#endif

        __ASM volatile ("LDMIA    R0!, {R2-R11}");           // Unstack the next tasks state
 80097e2:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}

        __ASM volatile ("MOV      LR, R2");                  // Restore LR and CONTROL, to restore the status and privilege/stack mode
 80097e6:	4696      	mov	lr, r2
        __ASM volatile ("MSR      CONTROL, R3");
 80097e8:	f383 8814 	msr	CONTROL, r3
        __ASM volatile ("ISB");                              // architectural recommendation, always use ISB after updating control register
 80097ec:	f3bf 8f6f 	isb	sy

#if __FPU_USED != 0
        __ASM volatile ("ANDS     R1, LR, #0x10");               // When bit 4 in LR is zero (0), we need to stack FP registers as well 
 80097f0:	f01e 0110 	ands.w	r1, lr, #16
        __ASM volatile ("CMP      R1, #0");
 80097f4:	2900      	cmp	r1, #0
        __ASM volatile ("IT       EQ");
 80097f6:	bf08      	it	eq
        __ASM volatile ("VLDMIAEQ R0!, {S16-S31}");
 80097f8:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
#endif

        __ASM volatile ("MSR      PSP, R0");                 // update stack pointer to correct location after unstacking 
 80097fc:	f380 8809 	msr	PSP, r0

        __ASM volatile ("BX       LR");
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop

08009804 <CUSTOM_STUB_STM32F411_DisableMPU>:

    // According to http://www.st.com/st-web-ui/static/active/en/resource/technical/document/programming_manual/DM00046982.pdf
    // pg. 186 the MPU is off by default
    // TODO: Someone should double-check I got the address right
    void CUSTOM_STUB_STM32F411_DisableMPU()
    {
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop

08009808 <Break>:
    {
        // this will likely generate a hard fault
        __builtin_trap();
    }

    void Break()
 8009808:	e7fe      	b.n	8009808 <Break>
 800980a:	bf00      	nop

0800980c <Breakpoint>:
    }

    // placing this outside the BreakPoint() function to avoid compiler unused var warning
    volatile uint32_t valueToWatch;
    void Breakpoint(unsigned n)
    {
 800980c:	b508      	push	{r3, lr}
        valueToWatch = n;
 800980e:	4b02      	ldr	r3, [pc, #8]	; (8009818 <Breakpoint+0xc>)
 8009810:	6018      	str	r0, [r3, #0]

        Break();
 8009812:	f7ff fff9 	bl	8009808 <Break>
 8009816:	bf00      	nop
 8009818:	20000b98 	.word	0x20000b98

0800981c <Nop>:
    }

    void Nop()
    {
        asm("nop");
 800981c:	bf00      	nop
 800981e:	4770      	bx	lr

08009820 <ConvertToCharString>:
    //

#define MAXLOGSTRINGSIZE 256

    void ConvertToCharString(char* output, const uint16_t* input, const uint32_t length)
    {
 8009820:	b430      	push	{r4, r5}
        for (unsigned i = 0; i < length; i++)
 8009822:	2300      	movs	r3, #0
 8009824:	e009      	b.n	800983a <ConvertToCharString+0x1a>
        {
            uint16_t ch = input[i];
 8009826:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
            output[i] = (ch > 0xFF) ? '?' : (char)ch;
 800982a:	18c5      	adds	r5, r0, r3
 800982c:	2cff      	cmp	r4, #255	; 0xff
 800982e:	d801      	bhi.n	8009834 <ConvertToCharString+0x14>
 8009830:	b2e4      	uxtb	r4, r4
 8009832:	e000      	b.n	8009836 <ConvertToCharString+0x16>
 8009834:	243f      	movs	r4, #63	; 0x3f
 8009836:	702c      	strb	r4, [r5, #0]

#define MAXLOGSTRINGSIZE 256

    void ConvertToCharString(char* output, const uint16_t* input, const uint32_t length)
    {
        for (unsigned i = 0; i < length; i++)
 8009838:	3301      	adds	r3, #1
 800983a:	4293      	cmp	r3, r2
 800983c:	d3f3      	bcc.n	8009826 <ConvertToCharString+0x6>
        {
            uint16_t ch = input[i];
            output[i] = (ch > 0xFF) ? '?' : (char)ch;
        }
    }
 800983e:	bc30      	pop	{r4, r5}
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop

08009844 <DebugLogPrint>:
            printf "DebugLog: %s\n", message
            cont
            end

        */
        asm("nop");
 8009844:	bf00      	nop
 8009846:	4770      	bx	lr

08009848 <DebugLog0>:
    }

    void DebugLog0(uint16_t* message, uint32_t length)
    {
 8009848:	b510      	push	{r4, lr}
 800984a:	b0c0      	sub	sp, #256	; 0x100
 800984c:	460c      	mov	r4, r1
        char buffer[MAXLOGSTRINGSIZE];
        if (length < MAXLOGSTRINGSIZE)
 800984e:	29ff      	cmp	r1, #255	; 0xff
 8009850:	d80c      	bhi.n	800986c <DebugLog0+0x24>
 8009852:	4603      	mov	r3, r0
        {
            ConvertToCharString(buffer, message, length);
 8009854:	4668      	mov	r0, sp
 8009856:	4619      	mov	r1, r3
 8009858:	4622      	mov	r2, r4
 800985a:	f7ff ffe1 	bl	8009820 <ConvertToCharString>
            buffer[length] = '\0';
 800985e:	2300      	movs	r3, #0
 8009860:	f80d 3004 	strb.w	r3, [sp, r4]

            DebugLogPrint(buffer);
 8009864:	4668      	mov	r0, sp
 8009866:	f7ff ffed 	bl	8009844 <DebugLogPrint>
 800986a:	e002      	b.n	8009872 <DebugLog0+0x2a>
        }
        else
        {
            DebugLogPrint((char*)"ERROR: MAXLOGSTRINGSIZE exceeded");
 800986c:	4802      	ldr	r0, [pc, #8]	; (8009878 <DebugLog0+0x30>)
 800986e:	f7ff ffe9 	bl	8009844 <DebugLogPrint>
        }
    }
 8009872:	b040      	add	sp, #256	; 0x100
 8009874:	bd10      	pop	{r4, pc}
 8009876:	bf00      	nop
 8009878:	0801c280 	.word	0x0801c280

0800987c <DebugLog1>:

    void DebugLog1(uint16_t* message, uint32_t length, int32_t p1)
    {
 800987c:	b530      	push	{r4, r5, lr}
 800987e:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8009882:	460c      	mov	r4, r1
        char buffer[MAXLOGSTRINGSIZE];
        if (length < MAXLOGSTRINGSIZE)
 8009884:	29ff      	cmp	r1, #255	; 0xff
 8009886:	d814      	bhi.n	80098b2 <DebugLog1+0x36>
 8009888:	4603      	mov	r3, r0
 800988a:	4615      	mov	r5, r2
        {
            ConvertToCharString(buffer, message, length);
 800988c:	4668      	mov	r0, sp
 800988e:	4619      	mov	r1, r3
 8009890:	4622      	mov	r2, r4
 8009892:	f7ff ffc5 	bl	8009820 <ConvertToCharString>
            buffer[length] = '\0';
 8009896:	2300      	movs	r3, #0
 8009898:	f80d 3004 	strb.w	r3, [sp, r4]
            {
                char buffer2[MAXLOGSTRINGSIZE];
                snprintf(buffer2, MAXLOGSTRINGSIZE, buffer, p1);
 800989c:	a840      	add	r0, sp, #256	; 0x100
 800989e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80098a2:	466a      	mov	r2, sp
 80098a4:	462b      	mov	r3, r5
 80098a6:	f003 f959 	bl	800cb5c <sniprintf>
                DebugLogPrint(buffer2);
 80098aa:	a840      	add	r0, sp, #256	; 0x100
 80098ac:	f7ff ffca 	bl	8009844 <DebugLogPrint>
 80098b0:	e002      	b.n	80098b8 <DebugLog1+0x3c>
            }
        }
        else
        {
            DebugLogPrint((char*)"ERROR: MAXLOGSTRINGSIZE exceeded");
 80098b2:	4803      	ldr	r0, [pc, #12]	; (80098c0 <DebugLog1+0x44>)
 80098b4:	f7ff ffc6 	bl	8009844 <DebugLogPrint>
        }
    }
 80098b8:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 80098bc:	bd30      	pop	{r4, r5, pc}
 80098be:	bf00      	nop
 80098c0:	0801c280 	.word	0x0801c280

080098c4 <DebugLog3>:
            DebugLogPrint((char*)"ERROR: MAXLOGSTRINGSIZE exceeded");
        }
    }

    void DebugLog3(uint16_t* message, uint32_t length, int32_t p1, int32_t p2, int32_t p3)
    {
 80098c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098c6:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 80098ca:	460c      	mov	r4, r1
        char buffer[MAXLOGSTRINGSIZE];
        if (length < MAXLOGSTRINGSIZE)
 80098cc:	29ff      	cmp	r1, #255	; 0xff
 80098ce:	d818      	bhi.n	8009902 <DebugLog3+0x3e>
 80098d0:	4686      	mov	lr, r0
 80098d2:	4616      	mov	r6, r2
 80098d4:	461f      	mov	r7, r3
        {
            ConvertToCharString(buffer, message, length);
 80098d6:	ad02      	add	r5, sp, #8
 80098d8:	4628      	mov	r0, r5
 80098da:	4671      	mov	r1, lr
 80098dc:	4622      	mov	r2, r4
 80098de:	f7ff ff9f 	bl	8009820 <ConvertToCharString>
            buffer[length] = '\0';
 80098e2:	2300      	movs	r3, #0
 80098e4:	552b      	strb	r3, [r5, r4]
            {
                char buffer2[MAXLOGSTRINGSIZE];
                snprintf(buffer2, MAXLOGSTRINGSIZE, buffer, p1, p2, p3);
 80098e6:	9700      	str	r7, [sp, #0]
 80098e8:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80098ea:	9301      	str	r3, [sp, #4]
 80098ec:	a842      	add	r0, sp, #264	; 0x108
 80098ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80098f2:	462a      	mov	r2, r5
 80098f4:	4633      	mov	r3, r6
 80098f6:	f003 f931 	bl	800cb5c <sniprintf>
                DebugLogPrint(buffer2);
 80098fa:	a842      	add	r0, sp, #264	; 0x108
 80098fc:	f7ff ffa2 	bl	8009844 <DebugLogPrint>
 8009900:	e002      	b.n	8009908 <DebugLog3+0x44>
            }
        }
        else
        {
            DebugLogPrint((char*)"ERROR: MAXLOGSTRINGSIZE exceeded");
 8009902:	4803      	ldr	r0, [pc, #12]	; (8009910 <DebugLog3+0x4c>)
 8009904:	f7ff ff9e 	bl	8009844 <DebugLogPrint>
        }
    }
 8009908:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 800990c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800990e:	bf00      	nop
 8009910:	0801c280 	.word	0x0801c280

08009914 <DebugLog5>:
            DebugLogPrint((char*)"ERROR: MAXLOGSTRINGSIZE exceeded");
        }
    }

    void DebugLog5(uint16_t* message, uint32_t length, int32_t p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5)
    {
 8009914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009916:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800991a:	460c      	mov	r4, r1
        char buffer[MAXLOGSTRINGSIZE];
        if (length < MAXLOGSTRINGSIZE)
 800991c:	29ff      	cmp	r1, #255	; 0xff
 800991e:	d81c      	bhi.n	800995a <DebugLog5+0x46>
 8009920:	4686      	mov	lr, r0
 8009922:	4616      	mov	r6, r2
 8009924:	461f      	mov	r7, r3
        {
            ConvertToCharString(buffer, message, length);
 8009926:	ad04      	add	r5, sp, #16
 8009928:	4628      	mov	r0, r5
 800992a:	4671      	mov	r1, lr
 800992c:	4622      	mov	r2, r4
 800992e:	f7ff ff77 	bl	8009820 <ConvertToCharString>
            buffer[length] = '\0';
 8009932:	2300      	movs	r3, #0
 8009934:	552b      	strb	r3, [r5, r4]
            {
                char buffer2[MAXLOGSTRINGSIZE];
                snprintf(buffer2, MAXLOGSTRINGSIZE, buffer, p1, p2, p3, p4, p5);
 8009936:	9700      	str	r7, [sp, #0]
 8009938:	9b8a      	ldr	r3, [sp, #552]	; 0x228
 800993a:	9301      	str	r3, [sp, #4]
 800993c:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 800993e:	9302      	str	r3, [sp, #8]
 8009940:	9b8c      	ldr	r3, [sp, #560]	; 0x230
 8009942:	9303      	str	r3, [sp, #12]
 8009944:	a844      	add	r0, sp, #272	; 0x110
 8009946:	f44f 7180 	mov.w	r1, #256	; 0x100
 800994a:	462a      	mov	r2, r5
 800994c:	4633      	mov	r3, r6
 800994e:	f003 f905 	bl	800cb5c <sniprintf>
                DebugLogPrint(buffer2);
 8009952:	a844      	add	r0, sp, #272	; 0x110
 8009954:	f7ff ff76 	bl	8009844 <DebugLogPrint>
 8009958:	e002      	b.n	8009960 <DebugLog5+0x4c>
            }
        }
        else
        {
            DebugLogPrint((char*)"ERROR: MAXLOGSTRINGSIZE exceeded");
 800995a:	4803      	ldr	r0, [pc, #12]	; (8009968 <DebugLog5+0x54>)
 800995c:	f7ff ff72 	bl	8009844 <DebugLogPrint>
        }
    }
 8009960:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 8009964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009966:	bf00      	nop
 8009968:	0801c280 	.word	0x0801c280

0800996c <CUSTOM_STUB_DebuggerConnected>:
    // Faults and Diagnostic
    //

    uint32_t CUSTOM_STUB_DebuggerConnected()
    {
        return (CoreDebug->DHCSR & 0x00000001);
 800996c:	4b02      	ldr	r3, [pc, #8]	; (8009978 <CUSTOM_STUB_DebuggerConnected+0xc>)
 800996e:	6818      	ldr	r0, [r3, #0]
    }
 8009970:	f000 0001 	and.w	r0, r0, #1
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	e000edf0 	.word	0xe000edf0

0800997c <CUSTOM_STUB_SCB__get_CFSR>:
        return 0;
    }

    uint32_t CUSTOM_STUB_SCB__get_CFSR()
    {
        return *((uint32_t volatile *)0xE000ED28);
 800997c:	4b01      	ldr	r3, [pc, #4]	; (8009984 <CUSTOM_STUB_SCB__get_CFSR+0x8>)
 800997e:	6818      	ldr	r0, [r3, #0]
    }
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	e000ed28 	.word	0xe000ed28

08009988 <CUSTOM_STUB_SCB__get_HFSR>:

    uint32_t CUSTOM_STUB_SCB__get_HFSR()
    {
        return *((uint32_t volatile *)0xE000ED2C);
 8009988:	4b01      	ldr	r3, [pc, #4]	; (8009990 <CUSTOM_STUB_SCB__get_HFSR+0x8>)
 800998a:	6818      	ldr	r0, [r3, #0]
    }
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	e000ed2c 	.word	0xe000ed2c

08009994 <CUSTOM_STUB_SCB__get_MMFAR>:

    uint32_t CUSTOM_STUB_SCB__get_MMFAR()
    {
        return *((uint32_t volatile *)0xE000ED34);
 8009994:	4b01      	ldr	r3, [pc, #4]	; (800999c <CUSTOM_STUB_SCB__get_MMFAR+0x8>)
 8009996:	6818      	ldr	r0, [r3, #0]
    }
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	e000ed34 	.word	0xe000ed34

080099a0 <CUSTOM_STUB_SCB__get_BFAR>:

    uint32_t CUSTOM_STUB_SCB__get_BFAR()
    {
        return *((uint32_t volatile *)0xE000ED38);
 80099a0:	4b01      	ldr	r3, [pc, #4]	; (80099a8 <CUSTOM_STUB_SCB__get_BFAR+0x8>)
 80099a2:	6818      	ldr	r0, [r3, #0]
    }
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	e000ed38 	.word	0xe000ed38

080099ac <HardFault_Handler>:
    __ASM volatile ("BX     LR");       \


    __attribute__((naked)) void HardFault_Handler(void)
    {
        DEFAULT_FAULT_HANDLER( HardFault_Handler_Zelig );
 80099ac:	f01e 0f04 	tst.w	lr, #4
 80099b0:	bf0c      	ite	eq
 80099b2:	f3ef 8008 	mrseq	r0, MSP
 80099b6:	f3ef 8009 	mrsne	r0, PSP
 80099ba:	f7f6 fc55 	bl	8000268 <HardFault_Handler_Zelig>
 80099be:	4770      	bx	lr

080099c0 <MemManage_Handler>:
    }

    __attribute__((naked)) void MemManage_Handler(void)
    {
        DEFAULT_FAULT_HANDLER( MemManage_Handler_Zelig );
 80099c0:	f01e 0f04 	tst.w	lr, #4
 80099c4:	bf0c      	ite	eq
 80099c6:	f3ef 8008 	mrseq	r0, MSP
 80099ca:	f3ef 8009 	mrsne	r0, PSP
 80099ce:	f7f6 fc7b 	bl	80002c8 <MemManage_Handler_Zelig>
 80099d2:	4770      	bx	lr

080099d4 <BusFault_Handler>:
    }

    __attribute__((naked)) void BusFault_Handler(void)
    {
        DEFAULT_FAULT_HANDLER( BusFault_Handler_Zelig );
 80099d4:	f01e 0f04 	tst.w	lr, #4
 80099d8:	bf0c      	ite	eq
 80099da:	f3ef 8008 	mrseq	r0, MSP
 80099de:	f3ef 8009 	mrsne	r0, PSP
 80099e2:	f7f6 fccd 	bl	8000380 <BusFault_Handler_Zelig>
 80099e6:	4770      	bx	lr

080099e8 <UsageFault_Handler>:
    }

    __attribute__((naked)) void UsageFault_Handler(void)
    {
        DEFAULT_FAULT_HANDLER( UsageFault_Handler_Zelig );
 80099e8:	f01e 0f04 	tst.w	lr, #4
 80099ec:	bf0c      	ite	eq
 80099ee:	f3ef 8008 	mrseq	r0, MSP
 80099f2:	f3ef 8009 	mrsne	r0, PSP
 80099f6:	f7f6 fca1 	bl	800033c <UsageFault_Handler_Zelig>
 80099fa:	4770      	bx	lr

080099fc <LLOS_MEMORY_GetMaxHeapSize>:

extern "C"
{
    HRESULT LLOS_MEMORY_GetMaxHeapSize(uint32_t* pMaxHeapSize)
    {
        if (pMaxHeapSize == NULL)
 80099fc:	b120      	cbz	r0, 8009a08 <LLOS_MEMORY_GetMaxHeapSize+0xc>
        {
            return LLOS_E_INVALID_PARAMETER;
        }

        *pMaxHeapSize = 0x4000;
 80099fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009a02:	6002      	str	r2, [r0, #0]
#if __HEAP_SIZE > 0
        *pMaxHeapSize = __HEAP_SIZE;
#endif
#endif

        return S_OK;
 8009a04:	2000      	movs	r0, #0
 8009a06:	4770      	bx	lr
{
    HRESULT LLOS_MEMORY_GetMaxHeapSize(uint32_t* pMaxHeapSize)
    {
        if (pMaxHeapSize == NULL)
        {
            return LLOS_E_INVALID_PARAMETER;
 8009a08:	f04f 407d 	mov.w	r0, #4244635648	; 0xfd000000
        *pMaxHeapSize = __HEAP_SIZE;
#endif
#endif

        return S_OK;
    }
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop

08009a10 <LLOS_MEMORY_GetDefaultManagedStackSize>:
        return __DEFAULT_STACK_SIZE;
#else
        // The following return value (0) will result in the default stack size defined in managed code being used
        return 0;
#endif
    }
 8009a10:	2000      	movs	r0, #0
 8009a12:	4770      	bx	lr

08009a14 <LLOS_MEMORY_Allocate>:

    HRESULT LLOS_MEMORY_Allocate(uint32_t size, uint8_t fill, LLOS_Opaque* pAllocation)
    {
        if (pAllocation == NULL)
 8009a14:	b1b2      	cbz	r2, 8009a44 <LLOS_MEMORY_Allocate+0x30>
        return 0;
#endif
    }

    HRESULT LLOS_MEMORY_Allocate(uint32_t size, uint8_t fill, LLOS_Opaque* pAllocation)
    {
 8009a16:	b570      	push	{r4, r5, r6, lr}
 8009a18:	4614      	mov	r4, r2
 8009a1a:	460e      	mov	r6, r1
 8009a1c:	4605      	mov	r5, r0
        if (pAllocation == NULL)
        {
            return LLOS_E_INVALID_PARAMETER;
        }

        if (fill == 0)
 8009a1e:	b921      	cbnz	r1, 8009a2a <LLOS_MEMORY_Allocate+0x16>
        {
            *pAllocation = LLOS_CALLOC(size, 1);
 8009a20:	2101      	movs	r1, #1
 8009a22:	f001 fdd7 	bl	800b5d4 <calloc>
 8009a26:	6020      	str	r0, [r4, #0]
 8009a28:	e007      	b.n	8009a3a <LLOS_MEMORY_Allocate+0x26>
        }
        else
        {
            *pAllocation = LLOS_MALLOC(size);
 8009a2a:	f001 ffb3 	bl	800b994 <malloc>
 8009a2e:	6020      	str	r0, [r4, #0]

            if (*pAllocation != NULL)
 8009a30:	b118      	cbz	r0, 8009a3a <LLOS_MEMORY_Allocate+0x26>
            {
                LLOS_MEMSET(*pAllocation, fill, size);
 8009a32:	4631      	mov	r1, r6
 8009a34:	462a      	mov	r2, r5
 8009a36:	f001 ffcf 	bl	800b9d8 <memset>
            }
        }

        if (*pAllocation == NULL)
 8009a3a:	6823      	ldr	r3, [r4, #0]
 8009a3c:	b92b      	cbnz	r3, 8009a4a <LLOS_MEMORY_Allocate+0x36>
        {
            return LLOS_E_OUT_OF_MEMORY;
 8009a3e:	f04f 407a 	mov.w	r0, #4194304000	; 0xfa000000
 8009a42:	bd70      	pop	{r4, r5, r6, pc}

    HRESULT LLOS_MEMORY_Allocate(uint32_t size, uint8_t fill, LLOS_Opaque* pAllocation)
    {
        if (pAllocation == NULL)
        {
            return LLOS_E_INVALID_PARAMETER;
 8009a44:	f04f 407d 	mov.w	r0, #4244635648	; 0xfd000000
        {
            return LLOS_E_OUT_OF_MEMORY;
        }

        return S_OK;
    }
 8009a48:	4770      	bx	lr
        if (*pAllocation == NULL)
        {
            return LLOS_E_OUT_OF_MEMORY;
        }

        return S_OK;
 8009a4a:	2000      	movs	r0, #0
    }
 8009a4c:	bd70      	pop	{r4, r5, r6, pc}
 8009a4e:	bf00      	nop

08009a50 <CMSIS_STUB_NVIC_SetPriorityGrouping>:
    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009a50:	f000 0007 	and.w	r0, r0, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009a54:	4a07      	ldr	r2, [pc, #28]	; (8009a74 <CMSIS_STUB_NVIC_SetPriorityGrouping+0x24>)
 8009a56:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8009a58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009a5c:	041b      	lsls	r3, r3, #16
 8009a5e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009a60:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
 8009a64:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8009a68:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8009a6c:	60d0      	str	r0, [r2, #12]
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	4770      	bx	lr
 8009a74:	e000ed00 	.word	0xe000ed00

08009a78 <CMSIS_STUB_NVIC_SetPriority>:
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	da06      	bge.n	8009a8a <CMSIS_STUB_NVIC_SetPriority+0x12>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a7c:	f000 000f 	and.w	r0, r0, #15
 8009a80:	0109      	lsls	r1, r1, #4
 8009a82:	b2c9      	uxtb	r1, r1
 8009a84:	4b06      	ldr	r3, [pc, #24]	; (8009aa0 <CMSIS_STUB_NVIC_SetPriority+0x28>)
 8009a86:	5419      	strb	r1, [r3, r0]
 8009a88:	e007      	b.n	8009a9a <CMSIS_STUB_NVIC_SetPriority+0x22>
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a8a:	0109      	lsls	r1, r1, #4
 8009a8c:	b2c9      	uxtb	r1, r1
 8009a8e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8009a92:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8009a96:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8009a9a:	f3bf 8f6f 	isb	sy
 8009a9e:	4770      	bx	lr
 8009aa0:	e000ed14 	.word	0xe000ed14

08009aa4 <MbedInterruptHandler>:
    static const ticker_data_t *s_pTickerData = get_us_ticker_data();

    // This is used to call back into the Kernel using a WellKnownMethod
    static void MbedInterruptHandler(uint32_t id)
    {
        if (s_TimerCallback != NULL)
 8009aa4:	4b07      	ldr	r3, [pc, #28]	; (8009ac4 <MbedInterruptHandler+0x20>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	b15b      	cbz	r3, 8009ac2 <MbedInterruptHandler+0x1e>
        {
            LLOS_MbedTimer *pCtx = (LLOS_MbedTimer*)id;

            if (pCtx != NULL)
 8009aaa:	b150      	cbz	r0, 8009ac2 <MbedInterruptHandler+0x1e>
    static LLOS_SYSTEM_TIMER_Callback s_TimerCallback = NULL;
    static const ticker_data_t *s_pTickerData = get_us_ticker_data();

    // This is used to call back into the Kernel using a WellKnownMethod
    static void MbedInterruptHandler(uint32_t id)
    {
 8009aac:	b510      	push	{r4, lr}
 8009aae:	4604      	mov	r4, r0
        {
            LLOS_MbedTimer *pCtx = (LLOS_MbedTimer*)id;

            if (pCtx != NULL)
            {
                uint64_t ticks = us_ticker_read();
 8009ab0:	f001 fb60 	bl	800b174 <us_ticker_read>
 8009ab4:	4602      	mov	r2, r0

                s_TimerCallback(pCtx->Context, ticks);
 8009ab6:	4b03      	ldr	r3, [pc, #12]	; (8009ac4 <MbedInterruptHandler+0x20>)
 8009ab8:	6819      	ldr	r1, [r3, #0]
 8009aba:	6820      	ldr	r0, [r4, #0]
 8009abc:	2300      	movs	r3, #0
 8009abe:	4788      	blx	r1
 8009ac0:	bd10      	pop	{r4, pc}
 8009ac2:	4770      	bx	lr
 8009ac4:	20000ba0 	.word	0x20000ba0

08009ac8 <_Z41__static_initialization_and_destruction_0ii>:
        ticker_remove_event(s_pTickerData, &pCtx->TickerEvent);
        ticker_insert_event(s_pTickerData, &pCtx->TickerEvent, us_ticker_read() + (uint32_t)microsecondsFromNow, (uint32_t)pTimer);

        return S_OK;
    }
}
 8009ac8:	2801      	cmp	r0, #1
 8009aca:	d109      	bne.n	8009ae0 <_Z41__static_initialization_and_destruction_0ii+0x18>
 8009acc:	b508      	push	{r3, lr}
 8009ace:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ad2:	4299      	cmp	r1, r3
 8009ad4:	d103      	bne.n	8009ade <_Z41__static_initialization_and_destruction_0ii+0x16>
        LLOS_Context   Context;
        ticker_event_t TickerEvent;
    } LLOS_MbedTimer;

    static LLOS_SYSTEM_TIMER_Callback s_TimerCallback = NULL;
    static const ticker_data_t *s_pTickerData = get_us_ticker_data();
 8009ad6:	f001 fc87 	bl	800b3e8 <get_us_ticker_data>
 8009ada:	4b02      	ldr	r3, [pc, #8]	; (8009ae4 <_Z41__static_initialization_and_destruction_0ii+0x1c>)
 8009adc:	6018      	str	r0, [r3, #0]
 8009ade:	bd08      	pop	{r3, pc}
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	20000b9c 	.word	0x20000b9c

08009ae8 <LLOS_SYSTEM_TIMER_Enable>:
            }
        }
    }

    HRESULT LLOS_SYSTEM_TIMER_Enable(LLOS_SYSTEM_TIMER_Callback callback)
    {
 8009ae8:	b508      	push	{r3, lr}
        s_TimerCallback = callback;
 8009aea:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <LLOS_SYSTEM_TIMER_Enable+0x18>)
 8009aec:	6018      	str	r0, [r3, #0]

        us_ticker_init();
 8009aee:	f001 fb2f 	bl	800b150 <us_ticker_init>

        ticker_set_handler(s_pTickerData, MbedInterruptHandler);
 8009af2:	4b04      	ldr	r3, [pc, #16]	; (8009b04 <LLOS_SYSTEM_TIMER_Enable+0x1c>)
 8009af4:	6818      	ldr	r0, [r3, #0]
 8009af6:	4904      	ldr	r1, [pc, #16]	; (8009b08 <LLOS_SYSTEM_TIMER_Enable+0x20>)
 8009af8:	f001 fbfe 	bl	800b2f8 <ticker_set_handler>

        return S_OK;
    }
 8009afc:	2000      	movs	r0, #0
 8009afe:	bd08      	pop	{r3, pc}
 8009b00:	20000ba0 	.word	0x20000ba0
 8009b04:	20000b9c 	.word	0x20000b9c
 8009b08:	08009aa5 	.word	0x08009aa5

08009b0c <LLOS_SYSTEM_TIMER_GetTicks>:
    {
        return LLOS_E_NOT_SUPPORTED;
    }

    uint64_t LLOS_SYSTEM_TIMER_GetTicks()
    {
 8009b0c:	b508      	push	{r3, lr}
        return us_ticker_read();
 8009b0e:	f001 fb31 	bl	800b174 <us_ticker_read>
    }
 8009b12:	2100      	movs	r1, #0
 8009b14:	bd08      	pop	{r3, pc}
 8009b16:	bf00      	nop

08009b18 <LLOS_SYSTEM_TIMER_GetTimerFrequency>:

    uint64_t LLOS_SYSTEM_TIMER_GetTimerFrequency()
    {
        return 1000000; // 1us tick timer = 1MHz
    }
 8009b18:	4801      	ldr	r0, [pc, #4]	; (8009b20 <LLOS_SYSTEM_TIMER_GetTimerFrequency+0x8>)
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	000f4240 	.word	0x000f4240

08009b24 <LLOS_SYSTEM_TIMER_AllocateTimer>:

    HRESULT LLOS_SYSTEM_TIMER_AllocateTimer(LLOS_Context callbackContext, LLOS_Context *pTimer)
    {
        LLOS_MbedTimer *pCtx;

        if (pTimer == NULL)
 8009b24:	b151      	cbz	r1, 8009b3c <LLOS_SYSTEM_TIMER_AllocateTimer+0x18>
    {
        return 1000000; // 1us tick timer = 1MHz
    }

    HRESULT LLOS_SYSTEM_TIMER_AllocateTimer(LLOS_Context callbackContext, LLOS_Context *pTimer)
    {
 8009b26:	b538      	push	{r3, r4, r5, lr}
 8009b28:	460c      	mov	r4, r1
 8009b2a:	4605      	mov	r5, r0
        if (pTimer == NULL)
        {
            return LLOS_E_INVALID_PARAMETER;
        }
        
        pCtx = (LLOS_MbedTimer*)AllocateFromManagedHeap(sizeof(LLOS_MbedTimer));
 8009b2c:	2010      	movs	r0, #16
 8009b2e:	f7fa ff1b 	bl	8004968 <AllocateFromManagedHeap>

        if (pCtx == NULL)
 8009b32:	b130      	cbz	r0, 8009b42 <LLOS_SYSTEM_TIMER_AllocateTimer+0x1e>
        {
            return LLOS_E_OUT_OF_MEMORY;
        }

        pCtx->Context = callbackContext;
 8009b34:	6005      	str	r5, [r0, #0]

        *pTimer = pCtx;
 8009b36:	6020      	str	r0, [r4, #0]

        return S_OK;
 8009b38:	2000      	movs	r0, #0
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
    {
        LLOS_MbedTimer *pCtx;

        if (pTimer == NULL)
        {
            return LLOS_E_INVALID_PARAMETER;
 8009b3c:	f04f 407d 	mov.w	r0, #4244635648	; 0xfd000000
        pCtx->Context = callbackContext;

        *pTimer = pCtx;

        return S_OK;
    }
 8009b40:	4770      	bx	lr
        
        pCtx = (LLOS_MbedTimer*)AllocateFromManagedHeap(sizeof(LLOS_MbedTimer));

        if (pCtx == NULL)
        {
            return LLOS_E_OUT_OF_MEMORY;
 8009b42:	f04f 407a 	mov.w	r0, #4194304000	; 0xfa000000
        pCtx->Context = callbackContext;

        *pTimer = pCtx;

        return S_OK;
    }
 8009b46:	bd38      	pop	{r3, r4, r5, pc}

08009b48 <LLOS_SYSTEM_TIMER_ScheduleTimer>:

    HRESULT LLOS_SYSTEM_TIMER_ScheduleTimer(LLOS_Context pTimer, uint64_t microsecondsFromNow)
    {
        LLOS_MbedTimer *pCtx = (LLOS_MbedTimer*)pTimer;

        if (pCtx == NULL || microsecondsFromNow > 0xFFFFFFFFuLL)
 8009b48:	b1e0      	cbz	r0, 8009b84 <LLOS_SYSTEM_TIMER_ScheduleTimer+0x3c>
            ticker_remove_event(s_pTickerData, &pCtx->TickerEvent);
        }
    }

    HRESULT LLOS_SYSTEM_TIMER_ScheduleTimer(LLOS_Context pTimer, uint64_t microsecondsFromNow)
    {
 8009b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4c:	4614      	mov	r4, r2
 8009b4e:	4606      	mov	r6, r0
        LLOS_MbedTimer *pCtx = (LLOS_MbedTimer*)pTimer;

        if (pCtx == NULL || microsecondsFromNow > 0xFFFFFFFFuLL)
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	bf08      	it	eq
 8009b54:	2a00      	cmpeq	r2, #0
 8009b56:	d218      	bcs.n	8009b8a <LLOS_SYSTEM_TIMER_ScheduleTimer+0x42>
        {
            return LLOS_E_INVALID_PARAMETER;
        }

        if (microsecondsFromNow < 2)
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	bf08      	it	eq
 8009b5c:	2a02      	cmpeq	r2, #2
 8009b5e:	d200      	bcs.n	8009b62 <LLOS_SYSTEM_TIMER_ScheduleTimer+0x1a>
        {
            microsecondsFromNow = 2;
 8009b60:	2402      	movs	r4, #2
        }

        ticker_remove_event(s_pTickerData, &pCtx->TickerEvent);
 8009b62:	1d35      	adds	r5, r6, #4
 8009b64:	4f0a      	ldr	r7, [pc, #40]	; (8009b90 <LLOS_SYSTEM_TIMER_ScheduleTimer+0x48>)
 8009b66:	6838      	ldr	r0, [r7, #0]
 8009b68:	4629      	mov	r1, r5
 8009b6a:	f001 fc19 	bl	800b3a0 <ticker_remove_event>
        ticker_insert_event(s_pTickerData, &pCtx->TickerEvent, us_ticker_read() + (uint32_t)microsecondsFromNow, (uint32_t)pTimer);
 8009b6e:	683f      	ldr	r7, [r7, #0]
 8009b70:	f001 fb00 	bl	800b174 <us_ticker_read>
 8009b74:	1902      	adds	r2, r0, r4
 8009b76:	4638      	mov	r0, r7
 8009b78:	4629      	mov	r1, r5
 8009b7a:	4633      	mov	r3, r6
 8009b7c:	f001 fbec 	bl	800b358 <ticker_insert_event>

        return S_OK;
 8009b80:	2000      	movs	r0, #0
 8009b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        LLOS_MbedTimer *pCtx = (LLOS_MbedTimer*)pTimer;

        if (pCtx == NULL || microsecondsFromNow > 0xFFFFFFFFuLL)
        {
            return LLOS_E_INVALID_PARAMETER;
 8009b84:	f04f 407d 	mov.w	r0, #4244635648	; 0xfd000000

        ticker_remove_event(s_pTickerData, &pCtx->TickerEvent);
        ticker_insert_event(s_pTickerData, &pCtx->TickerEvent, us_ticker_read() + (uint32_t)microsecondsFromNow, (uint32_t)pTimer);

        return S_OK;
    }
 8009b88:	4770      	bx	lr
    {
        LLOS_MbedTimer *pCtx = (LLOS_MbedTimer*)pTimer;

        if (pCtx == NULL || microsecondsFromNow > 0xFFFFFFFFuLL)
        {
            return LLOS_E_INVALID_PARAMETER;
 8009b8a:	f04f 407d 	mov.w	r0, #4244635648	; 0xfd000000

        ticker_remove_event(s_pTickerData, &pCtx->TickerEvent);
        ticker_insert_event(s_pTickerData, &pCtx->TickerEvent, us_ticker_read() + (uint32_t)microsecondsFromNow, (uint32_t)pTimer);

        return S_OK;
    }
 8009b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b90:	20000b9c 	.word	0x20000b9c

08009b94 <_GLOBAL__sub_I_LLOS_SYSTEM_TIMER_Enable>:
}
 8009b94:	b508      	push	{r3, lr}
 8009b96:	2001      	movs	r0, #1
 8009b98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009b9c:	f7ff ff94 	bl	8009ac8 <_Z41__static_initialization_and_destruction_0ii>
 8009ba0:	bd08      	pop	{r3, pc}
 8009ba2:	bf00      	nop

08009ba4 <CMSIS_STUB_SysTick_GetCTRL>:
	//////	#define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration struct       */
	//////

	/*__STATIC_INLINE*/ uint32_t CMSIS_STUB_SysTick_GetCTRL()
	{
		return SysTick->CTRL;
 8009ba4:	4b01      	ldr	r3, [pc, #4]	; (8009bac <CMSIS_STUB_SysTick_GetCTRL+0x8>)
 8009ba6:	6818      	ldr	r0, [r3, #0]
	}
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	e000e010 	.word	0xe000e010

08009bb0 <CMSIS_STUB_SysTick_SetCTRL>:

	/*__STATIC_INLINE*/ void CMSIS_STUB_SysTick_SetCTRL(uint32_t value)
	{
		SysTick->CTRL = value;
 8009bb0:	4b01      	ldr	r3, [pc, #4]	; (8009bb8 <CMSIS_STUB_SysTick_SetCTRL+0x8>)
 8009bb2:	6018      	str	r0, [r3, #0]
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop
 8009bb8:	e000e010 	.word	0xe000e010

08009bbc <CMSIS_STUB_SysTick_SetLOAD>:
		return SysTick->LOAD & 0x00FFFFFF;
	}

	/*__STATIC_INLINE*/ void CMSIS_STUB_SysTick_SetLOAD(uint32_t value)
	{
		SysTick->LOAD |= value & 0x00FFFFFF;
 8009bbc:	4b03      	ldr	r3, [pc, #12]	; (8009bcc <CMSIS_STUB_SysTick_SetLOAD+0x10>)
 8009bbe:	685a      	ldr	r2, [r3, #4]
 8009bc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8009bc4:	4310      	orrs	r0, r2
 8009bc6:	6058      	str	r0, [r3, #4]
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	e000e010 	.word	0xe000e010

08009bd0 <CMSIS_STUB_SysTick_SetVAL>:
		return SysTick->VAL & 0x00FFFFFF;
	}

	/*__STATIC_INLINE*/ void CMSIS_STUB_SysTick_SetVAL(uint32_t value)
	{
		SysTick->VAL |= value & 0x00FFFFFF;
 8009bd0:	4b03      	ldr	r3, [pc, #12]	; (8009be0 <CMSIS_STUB_SysTick_SetVAL+0x10>)
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8009bd8:	4310      	orrs	r0, r2
 8009bda:	6098      	str	r0, [r3, #8]
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	e000e010 	.word	0xe000e010

08009be4 <CMSIS_STUB_SysTick_GetCALIB>:
	}

	/*__STATIC_INLINE*/ uint32_t CMSIS_STUB_SysTick_GetCALIB()
	{
		return SysTick->CALIB;
 8009be4:	4b01      	ldr	r3, [pc, #4]	; (8009bec <CMSIS_STUB_SysTick_GetCALIB+0x8>)
 8009be6:	68d8      	ldr	r0, [r3, #12]
	}
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	e000e010 	.word	0xe000e010

08009bf0 <SysTick_Handler>:

    extern void ContextSwitchTimer_Handler_Zelig();

    __attribute__((naked)) void SysTick_Handler(void)
    {
        __ASM volatile ("STR       LR, [SP, #-4]!");                // Save LR to stack
 8009bf0:	f84d ed04 	str.w	lr, [sp, #-4]!

        ContextSwitchTimer_Handler_Zelig();
 8009bf4:	f7f6 fd98 	bl	8000728 <ContextSwitchTimer_Handler_Zelig>

        __ASM volatile ("LDR       LR, [SP], #4");                  // Restore LR from stack
 8009bf8:	f85d eb04 	ldr.w	lr, [sp], #4
        __ASM volatile ("BX        LR");
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop

08009c00 <Reset_Handler>:
 8009c00:	f8df d030 	ldr.w	sp, [pc, #48]	; 8009c34 <LoopFillZerobss+0x10>
 8009c04:	2100      	movs	r1, #0
 8009c06:	e003      	b.n	8009c10 <LoopCopyDataInit>

08009c08 <CopyDataInit>:
 8009c08:	4b0b      	ldr	r3, [pc, #44]	; (8009c38 <LoopFillZerobss+0x14>)
 8009c0a:	585b      	ldr	r3, [r3, r1]
 8009c0c:	5043      	str	r3, [r0, r1]
 8009c0e:	3104      	adds	r1, #4

08009c10 <LoopCopyDataInit>:
 8009c10:	480a      	ldr	r0, [pc, #40]	; (8009c3c <LoopFillZerobss+0x18>)
 8009c12:	4b0b      	ldr	r3, [pc, #44]	; (8009c40 <LoopFillZerobss+0x1c>)
 8009c14:	1842      	adds	r2, r0, r1
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d3f6      	bcc.n	8009c08 <CopyDataInit>
 8009c1a:	4a0a      	ldr	r2, [pc, #40]	; (8009c44 <LoopFillZerobss+0x20>)
 8009c1c:	e002      	b.n	8009c24 <LoopFillZerobss>

08009c1e <FillZerobss>:
 8009c1e:	2300      	movs	r3, #0
 8009c20:	f842 3b04 	str.w	r3, [r2], #4

08009c24 <LoopFillZerobss>:
 8009c24:	4b08      	ldr	r3, [pc, #32]	; (8009c48 <LoopFillZerobss+0x24>)
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d3f9      	bcc.n	8009c1e <FillZerobss>
 8009c2a:	f001 f869 	bl	800ad00 <SystemInit>
 8009c2e:	f7f6 fae1 	bl	80001f4 <_mainCRTStartup>
 8009c32:	4770      	bx	lr
 8009c34:	20020000 	.word	0x20020000
 8009c38:	0801ca68 	.word	0x0801ca68
 8009c3c:	200001a0 	.word	0x200001a0
 8009c40:	20000b18 	.word	0x20000b18
 8009c44:	20000b24 	.word	0x20000b24
 8009c48:	20000dc0 	.word	0x20000dc0

08009c4c <ADC_IRQHandler>:
 8009c4c:	e7fe      	b.n	8009c4c <ADC_IRQHandler>
	...

08009c50 <mbed_die>:
 8009c50:	b500      	push	{lr}
 8009c52:	b085      	sub	sp, #20
 8009c54:	b672      	cpsid	i
 8009c56:	2105      	movs	r1, #5
 8009c58:	4668      	mov	r0, sp
 8009c5a:	f001 fad9 	bl	800b210 <gpio_init_out>
 8009c5e:	e010      	b.n	8009c82 <mbed_die+0x32>
 8009c60:	9b03      	ldr	r3, [sp, #12]
 8009c62:	9a01      	ldr	r2, [sp, #4]
 8009c64:	601a      	str	r2, [r3, #0]
 8009c66:	2096      	movs	r0, #150	; 0x96
 8009c68:	f001 fbe2 	bl	800b430 <wait_ms>
 8009c6c:	f99d 3000 	ldrsb.w	r3, [sp]
 8009c70:	3301      	adds	r3, #1
 8009c72:	d010      	beq.n	8009c96 <mbed_die+0x46>
 8009c74:	9b01      	ldr	r3, [sp, #4]
 8009c76:	9a03      	ldr	r2, [sp, #12]
 8009c78:	041b      	lsls	r3, r3, #16
 8009c7a:	6013      	str	r3, [r2, #0]
 8009c7c:	2096      	movs	r0, #150	; 0x96
 8009c7e:	f001 fbd7 	bl	800b430 <wait_ms>
 8009c82:	f99d 3000 	ldrsb.w	r3, [sp]
 8009c86:	3301      	adds	r3, #1
 8009c88:	d1ea      	bne.n	8009c60 <mbed_die+0x10>
 8009c8a:	4806      	ldr	r0, [pc, #24]	; (8009ca4 <mbed_die+0x54>)
 8009c8c:	4906      	ldr	r1, [pc, #24]	; (8009ca8 <mbed_die+0x58>)
 8009c8e:	2234      	movs	r2, #52	; 0x34
 8009c90:	f001 faa0 	bl	800b1d4 <mbed_assert_internal>
 8009c94:	e7e4      	b.n	8009c60 <mbed_die+0x10>
 8009c96:	4803      	ldr	r0, [pc, #12]	; (8009ca4 <mbed_die+0x54>)
 8009c98:	4903      	ldr	r1, [pc, #12]	; (8009ca8 <mbed_die+0x58>)
 8009c9a:	2234      	movs	r2, #52	; 0x34
 8009c9c:	f001 fa9a 	bl	800b1d4 <mbed_assert_internal>
 8009ca0:	e7e8      	b.n	8009c74 <mbed_die+0x24>
 8009ca2:	bf00      	nop
 8009ca4:	0801c204 	.word	0x0801c204
 8009ca8:	0801c2a4 	.word	0x0801c2a4

08009cac <NVIC_SetVector>:
 8009cac:	4a0f      	ldr	r2, [pc, #60]	; (8009cec <NVIC_SetVector+0x40>)
 8009cae:	b430      	push	{r4, r5}
 8009cb0:	6893      	ldr	r3, [r2, #8]
 8009cb2:	6894      	ldr	r4, [r2, #8]
 8009cb4:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
 8009cb8:	461a      	mov	r2, r3
 8009cba:	d004      	beq.n	8009cc6 <NVIC_SetVector+0x1a>
 8009cbc:	3010      	adds	r0, #16
 8009cbe:	bc30      	pop	{r4, r5}
 8009cc0:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 8009cc4:	4770      	bx	lr
 8009cc6:	4a0a      	ldr	r2, [pc, #40]	; (8009cf0 <NVIC_SetVector+0x44>)
 8009cc8:	f503 75cc 	add.w	r5, r3, #408	; 0x198
 8009ccc:	f853 4b04 	ldr.w	r4, [r3], #4
 8009cd0:	f842 4f04 	str.w	r4, [r2, #4]!
 8009cd4:	42ab      	cmp	r3, r5
 8009cd6:	d1f9      	bne.n	8009ccc <NVIC_SetVector+0x20>
 8009cd8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009cdc:	4b03      	ldr	r3, [pc, #12]	; (8009cec <NVIC_SetVector+0x40>)
 8009cde:	3010      	adds	r0, #16
 8009ce0:	609a      	str	r2, [r3, #8]
 8009ce2:	bc30      	pop	{r4, r5}
 8009ce4:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	e000ed00 	.word	0xe000ed00
 8009cf0:	1ffffffc 	.word	0x1ffffffc

08009cf4 <timer_irq_handler>:
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	4c0f      	ldr	r4, [pc, #60]	; (8009d34 <timer_irq_handler+0x40>)
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	68da      	ldr	r2, [r3, #12]
 8009cfc:	0791      	lsls	r1, r2, #30
 8009cfe:	d415      	bmi.n	8009d2c <timer_irq_handler+0x38>
 8009d00:	68da      	ldr	r2, [r3, #12]
 8009d02:	0752      	lsls	r2, r2, #29
 8009d04:	d509      	bpl.n	8009d1a <timer_irq_handler+0x26>
 8009d06:	f06f 0204 	mvn.w	r2, #4
 8009d0a:	4e0b      	ldr	r6, [pc, #44]	; (8009d38 <timer_irq_handler+0x44>)
 8009d0c:	611a      	str	r2, [r3, #16]
 8009d0e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8009d10:	6833      	ldr	r3, [r6, #0]
 8009d12:	1aeb      	subs	r3, r5, r3
 8009d14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d18:	d200      	bcs.n	8009d1c <timer_irq_handler+0x28>
 8009d1a:	bd70      	pop	{r4, r5, r6, pc}
 8009d1c:	f000 f954 	bl	8009fc8 <HAL_IncTick>
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	6035      	str	r5, [r6, #0]
 8009d24:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
 8009d28:	639d      	str	r5, [r3, #56]	; 0x38
 8009d2a:	bd70      	pop	{r4, r5, r6, pc}
 8009d2c:	f001 fb60 	bl	800b3f0 <us_ticker_irq_handler>
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	e7e5      	b.n	8009d00 <timer_irq_handler+0xc>
 8009d34:	20000d24 	.word	0x20000d24
 8009d38:	20000ba4 	.word	0x20000ba4

08009d3c <HAL_InitTick>:
 8009d3c:	4b24      	ldr	r3, [pc, #144]	; (8009dd0 <HAL_InitTick+0x94>)
 8009d3e:	b530      	push	{r4, r5, lr}
 8009d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d42:	4c24      	ldr	r4, [pc, #144]	; (8009dd4 <HAL_InitTick+0x98>)
 8009d44:	f042 0208 	orr.w	r2, r2, #8
 8009d48:	641a      	str	r2, [r3, #64]	; 0x40
 8009d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d4c:	b083      	sub	sp, #12
 8009d4e:	f002 0208 	and.w	r2, r2, #8
 8009d52:	9201      	str	r2, [sp, #4]
 8009d54:	9a01      	ldr	r2, [sp, #4]
 8009d56:	6a1a      	ldr	r2, [r3, #32]
 8009d58:	f042 0208 	orr.w	r2, r2, #8
 8009d5c:	621a      	str	r2, [r3, #32]
 8009d5e:	6a1a      	ldr	r2, [r3, #32]
 8009d60:	f022 0208 	bic.w	r2, r2, #8
 8009d64:	621a      	str	r2, [r3, #32]
 8009d66:	f000 feef 	bl	800ab48 <SystemCoreClockUpdate>
 8009d6a:	4b1b      	ldr	r3, [pc, #108]	; (8009dd8 <HAL_InitTick+0x9c>)
 8009d6c:	4a1b      	ldr	r2, [pc, #108]	; (8009ddc <HAL_InitTick+0xa0>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	491b      	ldr	r1, [pc, #108]	; (8009de0 <HAL_InitTick+0xa4>)
 8009d72:	6021      	str	r1, [r4, #0]
 8009d74:	fba2 2303 	umull	r2, r3, r2, r3
 8009d78:	0c9b      	lsrs	r3, r3, #18
 8009d7a:	2500      	movs	r5, #0
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d82:	4620      	mov	r0, r4
 8009d84:	6063      	str	r3, [r4, #4]
 8009d86:	60e2      	str	r2, [r4, #12]
 8009d88:	6125      	str	r5, [r4, #16]
 8009d8a:	60a5      	str	r5, [r4, #8]
 8009d8c:	6165      	str	r5, [r4, #20]
 8009d8e:	f000 fdc5 	bl	800a91c <HAL_TIM_OC_Init>
 8009d92:	2032      	movs	r0, #50	; 0x32
 8009d94:	4913      	ldr	r1, [pc, #76]	; (8009de4 <HAL_InitTick+0xa8>)
 8009d96:	f7ff ff89 	bl	8009cac <NVIC_SetVector>
 8009d9a:	4b13      	ldr	r3, [pc, #76]	; (8009de8 <HAL_InitTick+0xac>)
 8009d9c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009da0:	605a      	str	r2, [r3, #4]
 8009da2:	4629      	mov	r1, r5
 8009da4:	4620      	mov	r0, r4
 8009da6:	f000 fd4b 	bl	800a840 <HAL_TIM_OC_Start>
 8009daa:	4620      	mov	r0, r4
 8009dac:	2104      	movs	r1, #4
 8009dae:	f000 fd47 	bl	800a840 <HAL_TIM_OC_Start>
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	490d      	ldr	r1, [pc, #52]	; (8009dec <HAL_InitTick+0xb0>)
 8009db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009db8:	600a      	str	r2, [r1, #0]
 8009dba:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8009dbe:	639a      	str	r2, [r3, #56]	; 0x38
 8009dc0:	68da      	ldr	r2, [r3, #12]
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	f042 0204 	orr.w	r2, r2, #4
 8009dc8:	60da      	str	r2, [r3, #12]
 8009dca:	b003      	add	sp, #12
 8009dcc:	bd30      	pop	{r4, r5, pc}
 8009dce:	bf00      	nop
 8009dd0:	40023800 	.word	0x40023800
 8009dd4:	20000d24 	.word	0x20000d24
 8009dd8:	20000a5c 	.word	0x20000a5c
 8009ddc:	431bde83 	.word	0x431bde83
 8009de0:	40000c00 	.word	0x40000c00
 8009de4:	08009cf5 	.word	0x08009cf5
 8009de8:	e000e100 	.word	0xe000e100
 8009dec:	20000ba4 	.word	0x20000ba4

08009df0 <mbed_sdk_init>:
 8009df0:	b508      	push	{r3, lr}
 8009df2:	f000 fea9 	bl	800ab48 <SystemCoreClockUpdate>
 8009df6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009dfa:	f000 b8cb 	b.w	8009f94 <HAL_Init>
 8009dfe:	bf00      	nop

08009e00 <_ZL11init_serialv.part.0>:
 8009e00:	4802      	ldr	r0, [pc, #8]	; (8009e0c <_ZL11init_serialv.part.0+0xc>)
 8009e02:	2102      	movs	r1, #2
 8009e04:	2203      	movs	r2, #3
 8009e06:	f001 b8fb 	b.w	800b000 <serial_init>
 8009e0a:	bf00      	nop
 8009e0c:	20000da0 	.word	0x20000da0

08009e10 <_close>:
 8009e10:	2802      	cmp	r0, #2
 8009e12:	dd0a      	ble.n	8009e2a <_close+0x1a>
 8009e14:	1ec3      	subs	r3, r0, #3
 8009e16:	4a07      	ldr	r2, [pc, #28]	; (8009e34 <_close+0x24>)
 8009e18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8009e22:	b120      	cbz	r0, 8009e2e <_close+0x1e>
 8009e24:	6803      	ldr	r3, [r0, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	4718      	bx	r3
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	4770      	bx	lr
 8009e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e32:	4770      	bx	lr
 8009e34:	20000ba8 	.word	0x20000ba8

08009e38 <_write>:
 8009e38:	2802      	cmp	r0, #2
 8009e3a:	dc12      	bgt.n	8009e62 <_write+0x2a>
 8009e3c:	4b0e      	ldr	r3, [pc, #56]	; (8009e78 <_write+0x40>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	460c      	mov	r4, r1
 8009e44:	4616      	mov	r6, r2
 8009e46:	b90b      	cbnz	r3, 8009e4c <_write+0x14>
 8009e48:	f7ff ffda 	bl	8009e00 <_ZL11init_serialv.part.0>
 8009e4c:	19a5      	adds	r5, r4, r6
 8009e4e:	b136      	cbz	r6, 8009e5e <_write+0x26>
 8009e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e54:	4809      	ldr	r0, [pc, #36]	; (8009e7c <_write+0x44>)
 8009e56:	f001 f96f 	bl	800b138 <serial_putc>
 8009e5a:	42ac      	cmp	r4, r5
 8009e5c:	d1f8      	bne.n	8009e50 <_write+0x18>
 8009e5e:	4630      	mov	r0, r6
 8009e60:	bd70      	pop	{r4, r5, r6, pc}
 8009e62:	3803      	subs	r0, #3
 8009e64:	4b06      	ldr	r3, [pc, #24]	; (8009e80 <_write+0x48>)
 8009e66:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009e6a:	b110      	cbz	r0, 8009e72 <_write+0x3a>
 8009e6c:	6803      	ldr	r3, [r0, #0]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4718      	bx	r3
 8009e72:	f04f 30ff 	mov.w	r0, #4294967295
 8009e76:	4770      	bx	lr
 8009e78:	20000cac 	.word	0x20000cac
 8009e7c:	20000da0 	.word	0x20000da0
 8009e80:	20000ba8 	.word	0x20000ba8

08009e84 <_read>:
 8009e84:	2802      	cmp	r0, #2
 8009e86:	dc0d      	bgt.n	8009ea4 <_read+0x20>
 8009e88:	4b0c      	ldr	r3, [pc, #48]	; (8009ebc <_read+0x38>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	b510      	push	{r4, lr}
 8009e8e:	460c      	mov	r4, r1
 8009e90:	b90b      	cbnz	r3, 8009e96 <_read+0x12>
 8009e92:	f7ff ffb5 	bl	8009e00 <_ZL11init_serialv.part.0>
 8009e96:	480a      	ldr	r0, [pc, #40]	; (8009ec0 <_read+0x3c>)
 8009e98:	f001 f942 	bl	800b120 <serial_getc>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	7020      	strb	r0, [r4, #0]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	bd10      	pop	{r4, pc}
 8009ea4:	3803      	subs	r0, #3
 8009ea6:	4b07      	ldr	r3, [pc, #28]	; (8009ec4 <_read+0x40>)
 8009ea8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009eac:	b110      	cbz	r0, 8009eb4 <_read+0x30>
 8009eae:	6803      	ldr	r3, [r0, #0]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	4718      	bx	r3
 8009eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8009eb8:	4618      	mov	r0, r3
 8009eba:	4770      	bx	lr
 8009ebc:	20000cac 	.word	0x20000cac
 8009ec0:	20000da0 	.word	0x20000da0
 8009ec4:	20000ba8 	.word	0x20000ba8

08009ec8 <_isatty>:
 8009ec8:	2802      	cmp	r0, #2
 8009eca:	dd07      	ble.n	8009edc <_isatty+0x14>
 8009ecc:	3803      	subs	r0, #3
 8009ece:	4b06      	ldr	r3, [pc, #24]	; (8009ee8 <_isatty+0x20>)
 8009ed0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009ed4:	b120      	cbz	r0, 8009ee0 <_isatty+0x18>
 8009ed6:	6803      	ldr	r3, [r0, #0]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	4718      	bx	r3
 8009edc:	2001      	movs	r0, #1
 8009ede:	4770      	bx	lr
 8009ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	20000ba8 	.word	0x20000ba8

08009eec <_lseek>:
 8009eec:	2802      	cmp	r0, #2
 8009eee:	dd07      	ble.n	8009f00 <_lseek+0x14>
 8009ef0:	3803      	subs	r0, #3
 8009ef2:	4b06      	ldr	r3, [pc, #24]	; (8009f0c <_lseek+0x20>)
 8009ef4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009ef8:	b120      	cbz	r0, 8009f04 <_lseek+0x18>
 8009efa:	6803      	ldr	r3, [r0, #0]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	4718      	bx	r3
 8009f00:	2000      	movs	r0, #0
 8009f02:	4770      	bx	lr
 8009f04:	f04f 30ff 	mov.w	r0, #4294967295
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	20000ba8 	.word	0x20000ba8

08009f10 <_fstat>:
 8009f10:	2802      	cmp	r0, #2
 8009f12:	b508      	push	{r3, lr}
 8009f14:	d804      	bhi.n	8009f20 <_fstat+0x10>
 8009f16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f1a:	604b      	str	r3, [r1, #4]
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	bd08      	pop	{r3, pc}
 8009f20:	f001 fb70 	bl	800b604 <__errno>
 8009f24:	2309      	movs	r3, #9
 8009f26:	6003      	str	r3, [r0, #0]
 8009f28:	f04f 30ff 	mov.w	r0, #4294967295
 8009f2c:	bd08      	pop	{r3, pc}
 8009f2e:	bf00      	nop

08009f30 <mbed_main>:
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop

08009f34 <__wrap_main>:
 8009f34:	b508      	push	{r3, lr}
 8009f36:	f7ff ff5b 	bl	8009df0 <mbed_sdk_init>
 8009f3a:	f7ff fff9 	bl	8009f30 <mbed_main>
 8009f3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009f42:	f7f6 ba57 	b.w	80003f4 <main>
 8009f46:	bf00      	nop

08009f48 <_sbrk>:
 8009f48:	4a07      	ldr	r2, [pc, #28]	; (8009f68 <_sbrk+0x20>)
 8009f4a:	6813      	ldr	r3, [r2, #0]
 8009f4c:	4418      	add	r0, r3
 8009f4e:	f3ef 8108 	mrs	r1, MSP
 8009f52:	4288      	cmp	r0, r1
 8009f54:	d202      	bcs.n	8009f5c <_sbrk+0x14>
 8009f56:	6010      	str	r0, [r2, #0]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	4770      	bx	lr
 8009f5c:	4b03      	ldr	r3, [pc, #12]	; (8009f6c <_sbrk+0x24>)
 8009f5e:	220c      	movs	r2, #12
 8009f60:	601a      	str	r2, [r3, #0]
 8009f62:	f04f 30ff 	mov.w	r0, #4294967295
 8009f66:	4770      	bx	lr
 8009f68:	20000a58 	.word	0x20000a58
 8009f6c:	20000dbc 	.word	0x20000dbc

08009f70 <_exit>:
 8009f70:	4c07      	ldr	r4, [pc, #28]	; (8009f90 <_exit+0x20>)
 8009f72:	b508      	push	{r3, lr}
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	4605      	mov	r5, r0
 8009f78:	6898      	ldr	r0, [r3, #8]
 8009f7a:	f001 fc0b 	bl	800b794 <fflush>
 8009f7e:	6823      	ldr	r3, [r4, #0]
 8009f80:	68d8      	ldr	r0, [r3, #12]
 8009f82:	f001 fc07 	bl	800b794 <fflush>
 8009f86:	b905      	cbnz	r5, 8009f8a <_exit+0x1a>
 8009f88:	e7fe      	b.n	8009f88 <_exit+0x18>
 8009f8a:	f7ff fe61 	bl	8009c50 <mbed_die>
 8009f8e:	e7fb      	b.n	8009f88 <_exit+0x18>
 8009f90:	20000ac0 	.word	0x20000ac0

08009f94 <HAL_Init>:
 8009f94:	b508      	push	{r3, lr}
 8009f96:	4b0b      	ldr	r3, [pc, #44]	; (8009fc4 <HAL_Init+0x30>)
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f9e:	601a      	str	r2, [r3, #0]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009fa6:	601a      	str	r2, [r3, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fae:	601a      	str	r2, [r3, #0]
 8009fb0:	2003      	movs	r0, #3
 8009fb2:	f000 f817 	bl	8009fe4 <HAL_NVIC_SetPriorityGrouping>
 8009fb6:	200f      	movs	r0, #15
 8009fb8:	f7ff fec0 	bl	8009d3c <HAL_InitTick>
 8009fbc:	f000 f824 	bl	800a008 <HAL_MspInit>
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	bd08      	pop	{r3, pc}
 8009fc4:	40023c00 	.word	0x40023c00

08009fc8 <HAL_IncTick>:
 8009fc8:	4a02      	ldr	r2, [pc, #8]	; (8009fd4 <HAL_IncTick+0xc>)
 8009fca:	6813      	ldr	r3, [r2, #0]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	6013      	str	r3, [r2, #0]
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	20000ca8 	.word	0x20000ca8

08009fd8 <HAL_GetTick>:
 8009fd8:	4b01      	ldr	r3, [pc, #4]	; (8009fe0 <HAL_GetTick+0x8>)
 8009fda:	6818      	ldr	r0, [r3, #0]
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	20000ca8 	.word	0x20000ca8

08009fe4 <HAL_NVIC_SetPriorityGrouping>:
 8009fe4:	4a07      	ldr	r2, [pc, #28]	; (800a004 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8009fe6:	68d1      	ldr	r1, [r2, #12]
 8009fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009fec:	400b      	ands	r3, r1
 8009fee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009ff2:	f000 0007 	and.w	r0, r0, #7
 8009ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ffa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8009ffe:	60d3      	str	r3, [r2, #12]
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	e000ed00 	.word	0xe000ed00

0800a008 <HAL_MspInit>:
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop

0800a00c <HAL_GPIO_Init>:
 800a00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a010:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 800a1e4 <HAL_GPIO_Init+0x1d8>
 800a014:	f8d1 e000 	ldr.w	lr, [r1]
 800a018:	4f6d      	ldr	r7, [pc, #436]	; (800a1d0 <HAL_GPIO_Init+0x1c4>)
 800a01a:	b083      	sub	sp, #12
 800a01c:	2300      	movs	r3, #0
 800a01e:	f04f 0801 	mov.w	r8, #1
 800a022:	e003      	b.n	800a02c <HAL_GPIO_Init+0x20>
 800a024:	3301      	adds	r3, #1
 800a026:	2b10      	cmp	r3, #16
 800a028:	f000 8085 	beq.w	800a136 <HAL_GPIO_Init+0x12a>
 800a02c:	fa08 f203 	lsl.w	r2, r8, r3
 800a030:	ea02 040e 	and.w	r4, r2, lr
 800a034:	4294      	cmp	r4, r2
 800a036:	d1f5      	bne.n	800a024 <HAL_GPIO_Init+0x18>
 800a038:	684d      	ldr	r5, [r1, #4]
 800a03a:	f025 0a10 	bic.w	sl, r5, #16
 800a03e:	f1ba 0f02 	cmp.w	sl, #2
 800a042:	d07b      	beq.n	800a13c <HAL_GPIO_Init+0x130>
 800a044:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800a048:	2203      	movs	r2, #3
 800a04a:	f8d0 b000 	ldr.w	fp, [r0]
 800a04e:	fa02 f209 	lsl.w	r2, r2, r9
 800a052:	43d2      	mvns	r2, r2
 800a054:	f005 0603 	and.w	r6, r5, #3
 800a058:	ea02 0b0b 	and.w	fp, r2, fp
 800a05c:	fa06 f609 	lsl.w	r6, r6, r9
 800a060:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a064:	ea4b 0606 	orr.w	r6, fp, r6
 800a068:	f1ba 0f01 	cmp.w	sl, #1
 800a06c:	6006      	str	r6, [r0, #0]
 800a06e:	f240 808b 	bls.w	800a188 <HAL_GPIO_Init+0x17c>
 800a072:	68c6      	ldr	r6, [r0, #12]
 800a074:	4032      	ands	r2, r6
 800a076:	688e      	ldr	r6, [r1, #8]
 800a078:	fa06 f609 	lsl.w	r6, r6, r9
 800a07c:	4316      	orrs	r6, r2
 800a07e:	00ea      	lsls	r2, r5, #3
 800a080:	60c6      	str	r6, [r0, #12]
 800a082:	d5cf      	bpl.n	800a024 <HAL_GPIO_Init+0x18>
 800a084:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 800a088:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a08c:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
 800a090:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 800a094:	f023 0203 	bic.w	r2, r3, #3
 800a098:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800a09c:	9601      	str	r6, [sp, #4]
 800a09e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a0a2:	f003 0603 	and.w	r6, r3, #3
 800a0a6:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 800a0aa:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800a0ae:	260f      	movs	r6, #15
 800a0b0:	fa06 fa0b 	lsl.w	sl, r6, fp
 800a0b4:	4e47      	ldr	r6, [pc, #284]	; (800a1d4 <HAL_GPIO_Init+0x1c8>)
 800a0b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a0ba:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800a0be:	42b0      	cmp	r0, r6
 800a0c0:	ea29 090a 	bic.w	r9, r9, sl
 800a0c4:	d074      	beq.n	800a1b0 <HAL_GPIO_Init+0x1a4>
 800a0c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800a0ca:	42b0      	cmp	r0, r6
 800a0cc:	d072      	beq.n	800a1b4 <HAL_GPIO_Init+0x1a8>
 800a0ce:	4e42      	ldr	r6, [pc, #264]	; (800a1d8 <HAL_GPIO_Init+0x1cc>)
 800a0d0:	42b0      	cmp	r0, r6
 800a0d2:	d072      	beq.n	800a1ba <HAL_GPIO_Init+0x1ae>
 800a0d4:	4e41      	ldr	r6, [pc, #260]	; (800a1dc <HAL_GPIO_Init+0x1d0>)
 800a0d6:	42b0      	cmp	r0, r6
 800a0d8:	d074      	beq.n	800a1c4 <HAL_GPIO_Init+0x1b8>
 800a0da:	4e41      	ldr	r6, [pc, #260]	; (800a1e0 <HAL_GPIO_Init+0x1d4>)
 800a0dc:	42b0      	cmp	r0, r6
 800a0de:	bf0c      	ite	eq
 800a0e0:	f04f 0a04 	moveq.w	sl, #4
 800a0e4:	f04f 0a05 	movne.w	sl, #5
 800a0e8:	fa0a f60b 	lsl.w	r6, sl, fp
 800a0ec:	ea46 0609 	orr.w	r6, r6, r9
 800a0f0:	6096      	str	r6, [r2, #8]
 800a0f2:	683a      	ldr	r2, [r7, #0]
 800a0f4:	43e6      	mvns	r6, r4
 800a0f6:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 800a0fa:	bf14      	ite	ne
 800a0fc:	4322      	orrne	r2, r4
 800a0fe:	4032      	andeq	r2, r6
 800a100:	603a      	str	r2, [r7, #0]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	f415 3f00 	tst.w	r5, #131072	; 0x20000
 800a108:	bf14      	ite	ne
 800a10a:	4322      	orrne	r2, r4
 800a10c:	4032      	andeq	r2, r6
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
 800a116:	bf14      	ite	ne
 800a118:	4322      	orrne	r2, r4
 800a11a:	4032      	andeq	r2, r6
 800a11c:	60ba      	str	r2, [r7, #8]
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	02ad      	lsls	r5, r5, #10
 800a122:	f103 0301 	add.w	r3, r3, #1
 800a126:	bf54      	ite	pl
 800a128:	ea06 0402 	andpl.w	r4, r6, r2
 800a12c:	4314      	orrmi	r4, r2
 800a12e:	2b10      	cmp	r3, #16
 800a130:	60fc      	str	r4, [r7, #12]
 800a132:	f47f af7b 	bne.w	800a02c <HAL_GPIO_Init+0x20>
 800a136:	b003      	add	sp, #12
 800a138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a13c:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800a140:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800a144:	f003 0607 	and.w	r6, r3, #7
 800a148:	f8d9 2020 	ldr.w	r2, [r9, #32]
 800a14c:	00b6      	lsls	r6, r6, #2
 800a14e:	f04f 0a0f 	mov.w	sl, #15
 800a152:	fa0a fb06 	lsl.w	fp, sl, r6
 800a156:	ea22 0a0b 	bic.w	sl, r2, fp
 800a15a:	690a      	ldr	r2, [r1, #16]
 800a15c:	40b2      	lsls	r2, r6
 800a15e:	ea4a 0202 	orr.w	r2, sl, r2
 800a162:	f8c9 2020 	str.w	r2, [r9, #32]
 800a166:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800a16a:	2203      	movs	r2, #3
 800a16c:	f8d0 a000 	ldr.w	sl, [r0]
 800a170:	fa02 f209 	lsl.w	r2, r2, r9
 800a174:	43d2      	mvns	r2, r2
 800a176:	f005 0603 	and.w	r6, r5, #3
 800a17a:	ea02 0a0a 	and.w	sl, r2, sl
 800a17e:	fa06 f609 	lsl.w	r6, r6, r9
 800a182:	ea4a 0606 	orr.w	r6, sl, r6
 800a186:	6006      	str	r6, [r0, #0]
 800a188:	6886      	ldr	r6, [r0, #8]
 800a18a:	ea02 0a06 	and.w	sl, r2, r6
 800a18e:	68ce      	ldr	r6, [r1, #12]
 800a190:	fa06 f609 	lsl.w	r6, r6, r9
 800a194:	ea4a 0606 	orr.w	r6, sl, r6
 800a198:	6086      	str	r6, [r0, #8]
 800a19a:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800a19e:	f3c5 1600 	ubfx	r6, r5, #4, #1
 800a1a2:	ea2a 0a04 	bic.w	sl, sl, r4
 800a1a6:	409e      	lsls	r6, r3
 800a1a8:	ea4a 0606 	orr.w	r6, sl, r6
 800a1ac:	6046      	str	r6, [r0, #4]
 800a1ae:	e760      	b.n	800a072 <HAL_GPIO_Init+0x66>
 800a1b0:	2600      	movs	r6, #0
 800a1b2:	e79b      	b.n	800a0ec <HAL_GPIO_Init+0xe0>
 800a1b4:	fa08 f60b 	lsl.w	r6, r8, fp
 800a1b8:	e798      	b.n	800a0ec <HAL_GPIO_Init+0xe0>
 800a1ba:	f04f 0a02 	mov.w	sl, #2
 800a1be:	fa0a f60b 	lsl.w	r6, sl, fp
 800a1c2:	e793      	b.n	800a0ec <HAL_GPIO_Init+0xe0>
 800a1c4:	f04f 0a03 	mov.w	sl, #3
 800a1c8:	fa0a f60b 	lsl.w	r6, sl, fp
 800a1cc:	e78e      	b.n	800a0ec <HAL_GPIO_Init+0xe0>
 800a1ce:	bf00      	nop
 800a1d0:	40013c00 	.word	0x40013c00
 800a1d4:	40020000 	.word	0x40020000
 800a1d8:	40020800 	.word	0x40020800
 800a1dc:	40020c00 	.word	0x40020c00
 800a1e0:	40021000 	.word	0x40021000
 800a1e4:	40023800 	.word	0x40023800

0800a1e8 <HAL_RCC_OscConfig>:
 800a1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1ea:	6803      	ldr	r3, [r0, #0]
 800a1ec:	07de      	lsls	r6, r3, #31
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	d533      	bpl.n	800a25c <HAL_RCC_OscConfig+0x74>
 800a1f4:	499f      	ldr	r1, [pc, #636]	; (800a474 <HAL_RCC_OscConfig+0x28c>)
 800a1f6:	688a      	ldr	r2, [r1, #8]
 800a1f8:	f002 020c 	and.w	r2, r2, #12
 800a1fc:	2a04      	cmp	r2, #4
 800a1fe:	f000 80ea 	beq.w	800a3d6 <HAL_RCC_OscConfig+0x1ee>
 800a202:	688a      	ldr	r2, [r1, #8]
 800a204:	f002 020c 	and.w	r2, r2, #12
 800a208:	2a08      	cmp	r2, #8
 800a20a:	f000 80e0 	beq.w	800a3ce <HAL_RCC_OscConfig+0x1e6>
 800a20e:	4b9a      	ldr	r3, [pc, #616]	; (800a478 <HAL_RCC_OscConfig+0x290>)
 800a210:	4d98      	ldr	r5, [pc, #608]	; (800a474 <HAL_RCC_OscConfig+0x28c>)
 800a212:	2200      	movs	r2, #0
 800a214:	701a      	strb	r2, [r3, #0]
 800a216:	f7ff fedf 	bl	8009fd8 <HAL_GetTick>
 800a21a:	4606      	mov	r6, r0
 800a21c:	e005      	b.n	800a22a <HAL_RCC_OscConfig+0x42>
 800a21e:	f7ff fedb 	bl	8009fd8 <HAL_GetTick>
 800a222:	1b80      	subs	r0, r0, r6
 800a224:	28c8      	cmp	r0, #200	; 0xc8
 800a226:	f200 80c1 	bhi.w	800a3ac <HAL_RCC_OscConfig+0x1c4>
 800a22a:	682b      	ldr	r3, [r5, #0]
 800a22c:	0399      	lsls	r1, r3, #14
 800a22e:	d4f6      	bmi.n	800a21e <HAL_RCC_OscConfig+0x36>
 800a230:	4b91      	ldr	r3, [pc, #580]	; (800a478 <HAL_RCC_OscConfig+0x290>)
 800a232:	7922      	ldrb	r2, [r4, #4]
 800a234:	701a      	strb	r2, [r3, #0]
 800a236:	6863      	ldr	r3, [r4, #4]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f000 8108 	beq.w	800a44e <HAL_RCC_OscConfig+0x266>
 800a23e:	f7ff fecb 	bl	8009fd8 <HAL_GetTick>
 800a242:	4d8c      	ldr	r5, [pc, #560]	; (800a474 <HAL_RCC_OscConfig+0x28c>)
 800a244:	4606      	mov	r6, r0
 800a246:	e005      	b.n	800a254 <HAL_RCC_OscConfig+0x6c>
 800a248:	f7ff fec6 	bl	8009fd8 <HAL_GetTick>
 800a24c:	1b80      	subs	r0, r0, r6
 800a24e:	28c8      	cmp	r0, #200	; 0xc8
 800a250:	f200 80ac 	bhi.w	800a3ac <HAL_RCC_OscConfig+0x1c4>
 800a254:	682b      	ldr	r3, [r5, #0]
 800a256:	039a      	lsls	r2, r3, #14
 800a258:	d5f6      	bpl.n	800a248 <HAL_RCC_OscConfig+0x60>
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	079f      	lsls	r7, r3, #30
 800a25e:	d52e      	bpl.n	800a2be <HAL_RCC_OscConfig+0xd6>
 800a260:	4a84      	ldr	r2, [pc, #528]	; (800a474 <HAL_RCC_OscConfig+0x28c>)
 800a262:	6891      	ldr	r1, [r2, #8]
 800a264:	f011 0f0c 	tst.w	r1, #12
 800a268:	f000 80a7 	beq.w	800a3ba <HAL_RCC_OscConfig+0x1d2>
 800a26c:	6891      	ldr	r1, [r2, #8]
 800a26e:	f001 010c 	and.w	r1, r1, #12
 800a272:	2908      	cmp	r1, #8
 800a274:	f000 809d 	beq.w	800a3b2 <HAL_RCC_OscConfig+0x1ca>
 800a278:	68e3      	ldr	r3, [r4, #12]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f000 80d6 	beq.w	800a42c <HAL_RCC_OscConfig+0x244>
 800a280:	4b7e      	ldr	r3, [pc, #504]	; (800a47c <HAL_RCC_OscConfig+0x294>)
 800a282:	4d7c      	ldr	r5, [pc, #496]	; (800a474 <HAL_RCC_OscConfig+0x28c>)
 800a284:	2201      	movs	r2, #1
 800a286:	601a      	str	r2, [r3, #0]
 800a288:	f7ff fea6 	bl	8009fd8 <HAL_GetTick>
 800a28c:	4606      	mov	r6, r0
 800a28e:	e005      	b.n	800a29c <HAL_RCC_OscConfig+0xb4>
 800a290:	f7ff fea2 	bl	8009fd8 <HAL_GetTick>
 800a294:	1b80      	subs	r0, r0, r6
 800a296:	2864      	cmp	r0, #100	; 0x64
 800a298:	f200 8088 	bhi.w	800a3ac <HAL_RCC_OscConfig+0x1c4>
 800a29c:	682b      	ldr	r3, [r5, #0]
 800a29e:	4a75      	ldr	r2, [pc, #468]	; (800a474 <HAL_RCC_OscConfig+0x28c>)
 800a2a0:	0798      	lsls	r0, r3, #30
 800a2a2:	d5f5      	bpl.n	800a290 <HAL_RCC_OscConfig+0xa8>
 800a2a4:	6811      	ldr	r1, [r2, #0]
 800a2a6:	20f8      	movs	r0, #248	; 0xf8
 800a2a8:	fa90 f0a0 	rbit	r0, r0
 800a2ac:	6923      	ldr	r3, [r4, #16]
 800a2ae:	fab0 f080 	clz	r0, r0
 800a2b2:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 800a2b6:	4083      	lsls	r3, r0
 800a2b8:	430b      	orrs	r3, r1
 800a2ba:	6013      	str	r3, [r2, #0]
 800a2bc:	6823      	ldr	r3, [r4, #0]
 800a2be:	071a      	lsls	r2, r3, #28
 800a2c0:	d420      	bmi.n	800a304 <HAL_RCC_OscConfig+0x11c>
 800a2c2:	0759      	lsls	r1, r3, #29
 800a2c4:	d434      	bmi.n	800a330 <HAL_RCC_OscConfig+0x148>
 800a2c6:	69a3      	ldr	r3, [r4, #24]
 800a2c8:	b1cb      	cbz	r3, 800a2fe <HAL_RCC_OscConfig+0x116>
 800a2ca:	4d6a      	ldr	r5, [pc, #424]	; (800a474 <HAL_RCC_OscConfig+0x28c>)
 800a2cc:	68aa      	ldr	r2, [r5, #8]
 800a2ce:	f002 020c 	and.w	r2, r2, #12
 800a2d2:	2a08      	cmp	r2, #8
 800a2d4:	d078      	beq.n	800a3c8 <HAL_RCC_OscConfig+0x1e0>
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	4b69      	ldr	r3, [pc, #420]	; (800a480 <HAL_RCC_OscConfig+0x298>)
 800a2da:	f04f 0200 	mov.w	r2, #0
 800a2de:	601a      	str	r2, [r3, #0]
 800a2e0:	f000 80c3 	beq.w	800a46a <HAL_RCC_OscConfig+0x282>
 800a2e4:	f7ff fe78 	bl	8009fd8 <HAL_GetTick>
 800a2e8:	462c      	mov	r4, r5
 800a2ea:	4605      	mov	r5, r0
 800a2ec:	e004      	b.n	800a2f8 <HAL_RCC_OscConfig+0x110>
 800a2ee:	f7ff fe73 	bl	8009fd8 <HAL_GetTick>
 800a2f2:	1b40      	subs	r0, r0, r5
 800a2f4:	2864      	cmp	r0, #100	; 0x64
 800a2f6:	d859      	bhi.n	800a3ac <HAL_RCC_OscConfig+0x1c4>
 800a2f8:	6823      	ldr	r3, [r4, #0]
 800a2fa:	019b      	lsls	r3, r3, #6
 800a2fc:	d4f7      	bmi.n	800a2ee <HAL_RCC_OscConfig+0x106>
 800a2fe:	2000      	movs	r0, #0
 800a300:	b003      	add	sp, #12
 800a302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a304:	6963      	ldr	r3, [r4, #20]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d06f      	beq.n	800a3ea <HAL_RCC_OscConfig+0x202>
 800a30a:	4b5e      	ldr	r3, [pc, #376]	; (800a484 <HAL_RCC_OscConfig+0x29c>)
 800a30c:	4d59      	ldr	r5, [pc, #356]	; (800a474 <HAL_RCC_OscConfig+0x28c>)
 800a30e:	2201      	movs	r2, #1
 800a310:	601a      	str	r2, [r3, #0]
 800a312:	f7ff fe61 	bl	8009fd8 <HAL_GetTick>
 800a316:	4606      	mov	r6, r0
 800a318:	e004      	b.n	800a324 <HAL_RCC_OscConfig+0x13c>
 800a31a:	f7ff fe5d 	bl	8009fd8 <HAL_GetTick>
 800a31e:	1b80      	subs	r0, r0, r6
 800a320:	2864      	cmp	r0, #100	; 0x64
 800a322:	d843      	bhi.n	800a3ac <HAL_RCC_OscConfig+0x1c4>
 800a324:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a326:	079f      	lsls	r7, r3, #30
 800a328:	d5f7      	bpl.n	800a31a <HAL_RCC_OscConfig+0x132>
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	0759      	lsls	r1, r3, #29
 800a32e:	d5ca      	bpl.n	800a2c6 <HAL_RCC_OscConfig+0xde>
 800a330:	4b50      	ldr	r3, [pc, #320]	; (800a474 <HAL_RCC_OscConfig+0x28c>)
 800a332:	4d55      	ldr	r5, [pc, #340]	; (800a488 <HAL_RCC_OscConfig+0x2a0>)
 800a334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a336:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a33a:	641a      	str	r2, [r3, #64]	; 0x40
 800a33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a342:	9301      	str	r3, [sp, #4]
 800a344:	9b01      	ldr	r3, [sp, #4]
 800a346:	682b      	ldr	r3, [r5, #0]
 800a348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a34c:	602b      	str	r3, [r5, #0]
 800a34e:	f7ff fe43 	bl	8009fd8 <HAL_GetTick>
 800a352:	4606      	mov	r6, r0
 800a354:	e004      	b.n	800a360 <HAL_RCC_OscConfig+0x178>
 800a356:	f7ff fe3f 	bl	8009fd8 <HAL_GetTick>
 800a35a:	1b80      	subs	r0, r0, r6
 800a35c:	2864      	cmp	r0, #100	; 0x64
 800a35e:	d825      	bhi.n	800a3ac <HAL_RCC_OscConfig+0x1c4>
 800a360:	682b      	ldr	r3, [r5, #0]
 800a362:	05da      	lsls	r2, r3, #23
 800a364:	d5f7      	bpl.n	800a356 <HAL_RCC_OscConfig+0x16e>
 800a366:	4b49      	ldr	r3, [pc, #292]	; (800a48c <HAL_RCC_OscConfig+0x2a4>)
 800a368:	4d42      	ldr	r5, [pc, #264]	; (800a474 <HAL_RCC_OscConfig+0x28c>)
 800a36a:	2200      	movs	r2, #0
 800a36c:	701a      	strb	r2, [r3, #0]
 800a36e:	f7ff fe33 	bl	8009fd8 <HAL_GetTick>
 800a372:	4606      	mov	r6, r0
 800a374:	e004      	b.n	800a380 <HAL_RCC_OscConfig+0x198>
 800a376:	f7ff fe2f 	bl	8009fd8 <HAL_GetTick>
 800a37a:	1b80      	subs	r0, r0, r6
 800a37c:	2864      	cmp	r0, #100	; 0x64
 800a37e:	d815      	bhi.n	800a3ac <HAL_RCC_OscConfig+0x1c4>
 800a380:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a382:	079b      	lsls	r3, r3, #30
 800a384:	d4f7      	bmi.n	800a376 <HAL_RCC_OscConfig+0x18e>
 800a386:	4b41      	ldr	r3, [pc, #260]	; (800a48c <HAL_RCC_OscConfig+0x2a4>)
 800a388:	7a22      	ldrb	r2, [r4, #8]
 800a38a:	701a      	strb	r2, [r3, #0]
 800a38c:	68a3      	ldr	r3, [r4, #8]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f000 80be 	beq.w	800a510 <HAL_RCC_OscConfig+0x328>
 800a394:	f7ff fe20 	bl	8009fd8 <HAL_GetTick>
 800a398:	4d36      	ldr	r5, [pc, #216]	; (800a474 <HAL_RCC_OscConfig+0x28c>)
 800a39a:	4606      	mov	r6, r0
 800a39c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a39e:	079f      	lsls	r7, r3, #30
 800a3a0:	d491      	bmi.n	800a2c6 <HAL_RCC_OscConfig+0xde>
 800a3a2:	f7ff fe19 	bl	8009fd8 <HAL_GetTick>
 800a3a6:	1b80      	subs	r0, r0, r6
 800a3a8:	2864      	cmp	r0, #100	; 0x64
 800a3aa:	d9f7      	bls.n	800a39c <HAL_RCC_OscConfig+0x1b4>
 800a3ac:	2003      	movs	r0, #3
 800a3ae:	b003      	add	sp, #12
 800a3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3b2:	6852      	ldr	r2, [r2, #4]
 800a3b4:	0256      	lsls	r6, r2, #9
 800a3b6:	f53f af5f 	bmi.w	800a278 <HAL_RCC_OscConfig+0x90>
 800a3ba:	4a2e      	ldr	r2, [pc, #184]	; (800a474 <HAL_RCC_OscConfig+0x28c>)
 800a3bc:	6812      	ldr	r2, [r2, #0]
 800a3be:	0795      	lsls	r5, r2, #30
 800a3c0:	d523      	bpl.n	800a40a <HAL_RCC_OscConfig+0x222>
 800a3c2:	68e2      	ldr	r2, [r4, #12]
 800a3c4:	2a01      	cmp	r2, #1
 800a3c6:	d020      	beq.n	800a40a <HAL_RCC_OscConfig+0x222>
 800a3c8:	2001      	movs	r0, #1
 800a3ca:	b003      	add	sp, #12
 800a3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3ce:	684a      	ldr	r2, [r1, #4]
 800a3d0:	0255      	lsls	r5, r2, #9
 800a3d2:	f57f af1c 	bpl.w	800a20e <HAL_RCC_OscConfig+0x26>
 800a3d6:	4a27      	ldr	r2, [pc, #156]	; (800a474 <HAL_RCC_OscConfig+0x28c>)
 800a3d8:	6812      	ldr	r2, [r2, #0]
 800a3da:	0390      	lsls	r0, r2, #14
 800a3dc:	f57f af3e 	bpl.w	800a25c <HAL_RCC_OscConfig+0x74>
 800a3e0:	6862      	ldr	r2, [r4, #4]
 800a3e2:	2a00      	cmp	r2, #0
 800a3e4:	f47f af3a 	bne.w	800a25c <HAL_RCC_OscConfig+0x74>
 800a3e8:	e7ee      	b.n	800a3c8 <HAL_RCC_OscConfig+0x1e0>
 800a3ea:	4a26      	ldr	r2, [pc, #152]	; (800a484 <HAL_RCC_OscConfig+0x29c>)
 800a3ec:	4d21      	ldr	r5, [pc, #132]	; (800a474 <HAL_RCC_OscConfig+0x28c>)
 800a3ee:	6013      	str	r3, [r2, #0]
 800a3f0:	f7ff fdf2 	bl	8009fd8 <HAL_GetTick>
 800a3f4:	4606      	mov	r6, r0
 800a3f6:	e004      	b.n	800a402 <HAL_RCC_OscConfig+0x21a>
 800a3f8:	f7ff fdee 	bl	8009fd8 <HAL_GetTick>
 800a3fc:	1b80      	subs	r0, r0, r6
 800a3fe:	2864      	cmp	r0, #100	; 0x64
 800a400:	d8d4      	bhi.n	800a3ac <HAL_RCC_OscConfig+0x1c4>
 800a402:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a404:	0798      	lsls	r0, r3, #30
 800a406:	d4f7      	bmi.n	800a3f8 <HAL_RCC_OscConfig+0x210>
 800a408:	e78f      	b.n	800a32a <HAL_RCC_OscConfig+0x142>
 800a40a:	4d1a      	ldr	r5, [pc, #104]	; (800a474 <HAL_RCC_OscConfig+0x28c>)
 800a40c:	20f8      	movs	r0, #248	; 0xf8
 800a40e:	6829      	ldr	r1, [r5, #0]
 800a410:	fa90 f0a0 	rbit	r0, r0
 800a414:	6922      	ldr	r2, [r4, #16]
 800a416:	fab0 f080 	clz	r0, r0
 800a41a:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 800a41e:	4082      	lsls	r2, r0
 800a420:	430a      	orrs	r2, r1
 800a422:	602a      	str	r2, [r5, #0]
 800a424:	071a      	lsls	r2, r3, #28
 800a426:	f57f af4c 	bpl.w	800a2c2 <HAL_RCC_OscConfig+0xda>
 800a42a:	e76b      	b.n	800a304 <HAL_RCC_OscConfig+0x11c>
 800a42c:	4a13      	ldr	r2, [pc, #76]	; (800a47c <HAL_RCC_OscConfig+0x294>)
 800a42e:	4d11      	ldr	r5, [pc, #68]	; (800a474 <HAL_RCC_OscConfig+0x28c>)
 800a430:	6013      	str	r3, [r2, #0]
 800a432:	f7ff fdd1 	bl	8009fd8 <HAL_GetTick>
 800a436:	4606      	mov	r6, r0
 800a438:	e004      	b.n	800a444 <HAL_RCC_OscConfig+0x25c>
 800a43a:	f7ff fdcd 	bl	8009fd8 <HAL_GetTick>
 800a43e:	1b80      	subs	r0, r0, r6
 800a440:	2864      	cmp	r0, #100	; 0x64
 800a442:	d8b3      	bhi.n	800a3ac <HAL_RCC_OscConfig+0x1c4>
 800a444:	682b      	ldr	r3, [r5, #0]
 800a446:	0799      	lsls	r1, r3, #30
 800a448:	d4f7      	bmi.n	800a43a <HAL_RCC_OscConfig+0x252>
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	e737      	b.n	800a2be <HAL_RCC_OscConfig+0xd6>
 800a44e:	f7ff fdc3 	bl	8009fd8 <HAL_GetTick>
 800a452:	4d08      	ldr	r5, [pc, #32]	; (800a474 <HAL_RCC_OscConfig+0x28c>)
 800a454:	4606      	mov	r6, r0
 800a456:	e004      	b.n	800a462 <HAL_RCC_OscConfig+0x27a>
 800a458:	f7ff fdbe 	bl	8009fd8 <HAL_GetTick>
 800a45c:	1b80      	subs	r0, r0, r6
 800a45e:	28c8      	cmp	r0, #200	; 0xc8
 800a460:	d8a4      	bhi.n	800a3ac <HAL_RCC_OscConfig+0x1c4>
 800a462:	682b      	ldr	r3, [r5, #0]
 800a464:	039b      	lsls	r3, r3, #14
 800a466:	d4f7      	bmi.n	800a458 <HAL_RCC_OscConfig+0x270>
 800a468:	e6f7      	b.n	800a25a <HAL_RCC_OscConfig+0x72>
 800a46a:	f7ff fdb5 	bl	8009fd8 <HAL_GetTick>
 800a46e:	4606      	mov	r6, r0
 800a470:	e013      	b.n	800a49a <HAL_RCC_OscConfig+0x2b2>
 800a472:	bf00      	nop
 800a474:	40023800 	.word	0x40023800
 800a478:	40023802 	.word	0x40023802
 800a47c:	42470000 	.word	0x42470000
 800a480:	42470060 	.word	0x42470060
 800a484:	42470e80 	.word	0x42470e80
 800a488:	40007000 	.word	0x40007000
 800a48c:	40023870 	.word	0x40023870
 800a490:	f7ff fda2 	bl	8009fd8 <HAL_GetTick>
 800a494:	1b80      	subs	r0, r0, r6
 800a496:	2864      	cmp	r0, #100	; 0x64
 800a498:	d888      	bhi.n	800a3ac <HAL_RCC_OscConfig+0x1c4>
 800a49a:	682b      	ldr	r3, [r5, #0]
 800a49c:	4a23      	ldr	r2, [pc, #140]	; (800a52c <HAL_RCC_OscConfig+0x344>)
 800a49e:	0199      	lsls	r1, r3, #6
 800a4a0:	d4f6      	bmi.n	800a490 <HAL_RCC_OscConfig+0x2a8>
 800a4a2:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 800a4a6:	fa97 f7a7 	rbit	r7, r7
 800a4aa:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 800a4ae:	fab7 f787 	clz	r7, r7
 800a4b2:	fa96 f6a6 	rbit	r6, r6
 800a4b6:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 800a4ba:	fab6 f686 	clz	r6, r6
 800a4be:	fa90 f0a0 	rbit	r0, r0
 800a4c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a4c4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a4c6:	f8d4 c020 	ldr.w	ip, [r4, #32]
 800a4ca:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800a4ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a4d0:	fab0 f080 	clz	r0, r0
 800a4d4:	085b      	lsrs	r3, r3, #1
 800a4d6:	fa05 f407 	lsl.w	r4, r5, r7
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	ea4c 050e 	orr.w	r5, ip, lr
 800a4e0:	432c      	orrs	r4, r5
 800a4e2:	40b3      	lsls	r3, r6
 800a4e4:	4081      	lsls	r1, r0
 800a4e6:	4323      	orrs	r3, r4
 800a4e8:	4811      	ldr	r0, [pc, #68]	; (800a530 <HAL_RCC_OscConfig+0x348>)
 800a4ea:	430b      	orrs	r3, r1
 800a4ec:	2101      	movs	r1, #1
 800a4ee:	6053      	str	r3, [r2, #4]
 800a4f0:	6001      	str	r1, [r0, #0]
 800a4f2:	4614      	mov	r4, r2
 800a4f4:	f7ff fd70 	bl	8009fd8 <HAL_GetTick>
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	e005      	b.n	800a508 <HAL_RCC_OscConfig+0x320>
 800a4fc:	f7ff fd6c 	bl	8009fd8 <HAL_GetTick>
 800a500:	1b40      	subs	r0, r0, r5
 800a502:	2864      	cmp	r0, #100	; 0x64
 800a504:	f63f af52 	bhi.w	800a3ac <HAL_RCC_OscConfig+0x1c4>
 800a508:	6823      	ldr	r3, [r4, #0]
 800a50a:	019a      	lsls	r2, r3, #6
 800a50c:	d5f6      	bpl.n	800a4fc <HAL_RCC_OscConfig+0x314>
 800a50e:	e6f6      	b.n	800a2fe <HAL_RCC_OscConfig+0x116>
 800a510:	f7ff fd62 	bl	8009fd8 <HAL_GetTick>
 800a514:	4d05      	ldr	r5, [pc, #20]	; (800a52c <HAL_RCC_OscConfig+0x344>)
 800a516:	4606      	mov	r6, r0
 800a518:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a51a:	0798      	lsls	r0, r3, #30
 800a51c:	f57f aed3 	bpl.w	800a2c6 <HAL_RCC_OscConfig+0xde>
 800a520:	f7ff fd5a 	bl	8009fd8 <HAL_GetTick>
 800a524:	1b80      	subs	r0, r0, r6
 800a526:	2864      	cmp	r0, #100	; 0x64
 800a528:	d9f6      	bls.n	800a518 <HAL_RCC_OscConfig+0x330>
 800a52a:	e73f      	b.n	800a3ac <HAL_RCC_OscConfig+0x1c4>
 800a52c:	40023800 	.word	0x40023800
 800a530:	42470060 	.word	0x42470060

0800a534 <HAL_RCC_ClockConfig>:
 800a534:	4a7c      	ldr	r2, [pc, #496]	; (800a728 <HAL_RCC_ClockConfig+0x1f4>)
 800a536:	6813      	ldr	r3, [r2, #0]
 800a538:	f003 030f 	and.w	r3, r3, #15
 800a53c:	428b      	cmp	r3, r1
 800a53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a542:	460c      	mov	r4, r1
 800a544:	4605      	mov	r5, r0
 800a546:	d209      	bcs.n	800a55c <HAL_RCC_ClockConfig+0x28>
 800a548:	b2cb      	uxtb	r3, r1
 800a54a:	7013      	strb	r3, [r2, #0]
 800a54c:	6813      	ldr	r3, [r2, #0]
 800a54e:	f003 030f 	and.w	r3, r3, #15
 800a552:	428b      	cmp	r3, r1
 800a554:	d058      	beq.n	800a608 <HAL_RCC_ClockConfig+0xd4>
 800a556:	2001      	movs	r0, #1
 800a558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a55c:	6803      	ldr	r3, [r0, #0]
 800a55e:	079a      	lsls	r2, r3, #30
 800a560:	d506      	bpl.n	800a570 <HAL_RCC_ClockConfig+0x3c>
 800a562:	4872      	ldr	r0, [pc, #456]	; (800a72c <HAL_RCC_ClockConfig+0x1f8>)
 800a564:	68aa      	ldr	r2, [r5, #8]
 800a566:	6881      	ldr	r1, [r0, #8]
 800a568:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800a56c:	430a      	orrs	r2, r1
 800a56e:	6082      	str	r2, [r0, #8]
 800a570:	07df      	lsls	r7, r3, #31
 800a572:	d527      	bpl.n	800a5c4 <HAL_RCC_ClockConfig+0x90>
 800a574:	686b      	ldr	r3, [r5, #4]
 800a576:	2b01      	cmp	r3, #1
 800a578:	d079      	beq.n	800a66e <HAL_RCC_ClockConfig+0x13a>
 800a57a:	1e9a      	subs	r2, r3, #2
 800a57c:	2a01      	cmp	r2, #1
 800a57e:	4a6b      	ldr	r2, [pc, #428]	; (800a72c <HAL_RCC_ClockConfig+0x1f8>)
 800a580:	6812      	ldr	r2, [r2, #0]
 800a582:	f240 8087 	bls.w	800a694 <HAL_RCC_ClockConfig+0x160>
 800a586:	0791      	lsls	r1, r2, #30
 800a588:	d5e5      	bpl.n	800a556 <HAL_RCC_ClockConfig+0x22>
 800a58a:	4e68      	ldr	r6, [pc, #416]	; (800a72c <HAL_RCC_ClockConfig+0x1f8>)
 800a58c:	68b2      	ldr	r2, [r6, #8]
 800a58e:	f022 0203 	bic.w	r2, r2, #3
 800a592:	4313      	orrs	r3, r2
 800a594:	60b3      	str	r3, [r6, #8]
 800a596:	f7ff fd1f 	bl	8009fd8 <HAL_GetTick>
 800a59a:	686b      	ldr	r3, [r5, #4]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	4607      	mov	r7, r0
 800a5a0:	d07c      	beq.n	800a69c <HAL_RCC_ClockConfig+0x168>
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	f000 8088 	beq.w	800a6b8 <HAL_RCC_ClockConfig+0x184>
 800a5a8:	2b03      	cmp	r3, #3
 800a5aa:	d065      	beq.n	800a678 <HAL_RCC_ClockConfig+0x144>
 800a5ac:	f241 3888 	movw	r8, #5000	; 0x1388
 800a5b0:	e004      	b.n	800a5bc <HAL_RCC_ClockConfig+0x88>
 800a5b2:	f7ff fd11 	bl	8009fd8 <HAL_GetTick>
 800a5b6:	1bc0      	subs	r0, r0, r7
 800a5b8:	4540      	cmp	r0, r8
 800a5ba:	d865      	bhi.n	800a688 <HAL_RCC_ClockConfig+0x154>
 800a5bc:	68b3      	ldr	r3, [r6, #8]
 800a5be:	f013 0f0c 	tst.w	r3, #12
 800a5c2:	d1f6      	bne.n	800a5b2 <HAL_RCC_ClockConfig+0x7e>
 800a5c4:	4b58      	ldr	r3, [pc, #352]	; (800a728 <HAL_RCC_ClockConfig+0x1f4>)
 800a5c6:	b2e2      	uxtb	r2, r4
 800a5c8:	701a      	strb	r2, [r3, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 030f 	and.w	r3, r3, #15
 800a5d0:	42a3      	cmp	r3, r4
 800a5d2:	d1c0      	bne.n	800a556 <HAL_RCC_ClockConfig+0x22>
 800a5d4:	682b      	ldr	r3, [r5, #0]
 800a5d6:	075a      	lsls	r2, r3, #29
 800a5d8:	d506      	bpl.n	800a5e8 <HAL_RCC_ClockConfig+0xb4>
 800a5da:	4854      	ldr	r0, [pc, #336]	; (800a72c <HAL_RCC_ClockConfig+0x1f8>)
 800a5dc:	68ea      	ldr	r2, [r5, #12]
 800a5de:	6881      	ldr	r1, [r0, #8]
 800a5e0:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 800a5e4:	430a      	orrs	r2, r1
 800a5e6:	6082      	str	r2, [r0, #8]
 800a5e8:	071b      	lsls	r3, r3, #28
 800a5ea:	d507      	bpl.n	800a5fc <HAL_RCC_ClockConfig+0xc8>
 800a5ec:	4a4f      	ldr	r2, [pc, #316]	; (800a72c <HAL_RCC_ClockConfig+0x1f8>)
 800a5ee:	6929      	ldr	r1, [r5, #16]
 800a5f0:	6893      	ldr	r3, [r2, #8]
 800a5f2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a5f6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a5fa:	6093      	str	r3, [r2, #8]
 800a5fc:	200f      	movs	r0, #15
 800a5fe:	f7ff fb9d 	bl	8009d3c <HAL_InitTick>
 800a602:	2000      	movs	r0, #0
 800a604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a608:	6803      	ldr	r3, [r0, #0]
 800a60a:	079f      	lsls	r7, r3, #30
 800a60c:	d506      	bpl.n	800a61c <HAL_RCC_ClockConfig+0xe8>
 800a60e:	4847      	ldr	r0, [pc, #284]	; (800a72c <HAL_RCC_ClockConfig+0x1f8>)
 800a610:	68aa      	ldr	r2, [r5, #8]
 800a612:	6881      	ldr	r1, [r0, #8]
 800a614:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800a618:	430a      	orrs	r2, r1
 800a61a:	6082      	str	r2, [r0, #8]
 800a61c:	07de      	lsls	r6, r3, #31
 800a61e:	d5da      	bpl.n	800a5d6 <HAL_RCC_ClockConfig+0xa2>
 800a620:	686b      	ldr	r3, [r5, #4]
 800a622:	2b01      	cmp	r3, #1
 800a624:	d056      	beq.n	800a6d4 <HAL_RCC_ClockConfig+0x1a0>
 800a626:	1e9a      	subs	r2, r3, #2
 800a628:	2a01      	cmp	r2, #1
 800a62a:	4a40      	ldr	r2, [pc, #256]	; (800a72c <HAL_RCC_ClockConfig+0x1f8>)
 800a62c:	6812      	ldr	r2, [r2, #0]
 800a62e:	d92e      	bls.n	800a68e <HAL_RCC_ClockConfig+0x15a>
 800a630:	0791      	lsls	r1, r2, #30
 800a632:	d590      	bpl.n	800a556 <HAL_RCC_ClockConfig+0x22>
 800a634:	4c3d      	ldr	r4, [pc, #244]	; (800a72c <HAL_RCC_ClockConfig+0x1f8>)
 800a636:	68a2      	ldr	r2, [r4, #8]
 800a638:	f022 0203 	bic.w	r2, r2, #3
 800a63c:	4313      	orrs	r3, r2
 800a63e:	60a3      	str	r3, [r4, #8]
 800a640:	f7ff fcca 	bl	8009fd8 <HAL_GetTick>
 800a644:	686b      	ldr	r3, [r5, #4]
 800a646:	2b01      	cmp	r3, #1
 800a648:	4606      	mov	r6, r0
 800a64a:	d048      	beq.n	800a6de <HAL_RCC_ClockConfig+0x1aa>
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	d054      	beq.n	800a6fa <HAL_RCC_ClockConfig+0x1c6>
 800a650:	2b03      	cmp	r3, #3
 800a652:	d060      	beq.n	800a716 <HAL_RCC_ClockConfig+0x1e2>
 800a654:	f241 3788 	movw	r7, #5000	; 0x1388
 800a658:	e004      	b.n	800a664 <HAL_RCC_ClockConfig+0x130>
 800a65a:	f7ff fcbd 	bl	8009fd8 <HAL_GetTick>
 800a65e:	1b80      	subs	r0, r0, r6
 800a660:	42b8      	cmp	r0, r7
 800a662:	d811      	bhi.n	800a688 <HAL_RCC_ClockConfig+0x154>
 800a664:	68a3      	ldr	r3, [r4, #8]
 800a666:	f013 0f0c 	tst.w	r3, #12
 800a66a:	d1f6      	bne.n	800a65a <HAL_RCC_ClockConfig+0x126>
 800a66c:	e7b2      	b.n	800a5d4 <HAL_RCC_ClockConfig+0xa0>
 800a66e:	4a2f      	ldr	r2, [pc, #188]	; (800a72c <HAL_RCC_ClockConfig+0x1f8>)
 800a670:	6812      	ldr	r2, [r2, #0]
 800a672:	0396      	lsls	r6, r2, #14
 800a674:	d489      	bmi.n	800a58a <HAL_RCC_ClockConfig+0x56>
 800a676:	e76e      	b.n	800a556 <HAL_RCC_ClockConfig+0x22>
 800a678:	f241 3488 	movw	r4, #5000	; 0x1388
 800a67c:	68b3      	ldr	r3, [r6, #8]
 800a67e:	f7ff fcab 	bl	8009fd8 <HAL_GetTick>
 800a682:	1bc0      	subs	r0, r0, r7
 800a684:	42a0      	cmp	r0, r4
 800a686:	d9f9      	bls.n	800a67c <HAL_RCC_ClockConfig+0x148>
 800a688:	2003      	movs	r0, #3
 800a68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a68e:	0190      	lsls	r0, r2, #6
 800a690:	d4d0      	bmi.n	800a634 <HAL_RCC_ClockConfig+0x100>
 800a692:	e760      	b.n	800a556 <HAL_RCC_ClockConfig+0x22>
 800a694:	0190      	lsls	r0, r2, #6
 800a696:	f53f af78 	bmi.w	800a58a <HAL_RCC_ClockConfig+0x56>
 800a69a:	e75c      	b.n	800a556 <HAL_RCC_ClockConfig+0x22>
 800a69c:	f241 3888 	movw	r8, #5000	; 0x1388
 800a6a0:	e004      	b.n	800a6ac <HAL_RCC_ClockConfig+0x178>
 800a6a2:	f7ff fc99 	bl	8009fd8 <HAL_GetTick>
 800a6a6:	1bc0      	subs	r0, r0, r7
 800a6a8:	4540      	cmp	r0, r8
 800a6aa:	d8ed      	bhi.n	800a688 <HAL_RCC_ClockConfig+0x154>
 800a6ac:	68b3      	ldr	r3, [r6, #8]
 800a6ae:	f003 030c 	and.w	r3, r3, #12
 800a6b2:	2b04      	cmp	r3, #4
 800a6b4:	d1f5      	bne.n	800a6a2 <HAL_RCC_ClockConfig+0x16e>
 800a6b6:	e785      	b.n	800a5c4 <HAL_RCC_ClockConfig+0x90>
 800a6b8:	f241 3888 	movw	r8, #5000	; 0x1388
 800a6bc:	e004      	b.n	800a6c8 <HAL_RCC_ClockConfig+0x194>
 800a6be:	f7ff fc8b 	bl	8009fd8 <HAL_GetTick>
 800a6c2:	1bc0      	subs	r0, r0, r7
 800a6c4:	4540      	cmp	r0, r8
 800a6c6:	d8df      	bhi.n	800a688 <HAL_RCC_ClockConfig+0x154>
 800a6c8:	68b3      	ldr	r3, [r6, #8]
 800a6ca:	f003 030c 	and.w	r3, r3, #12
 800a6ce:	2b08      	cmp	r3, #8
 800a6d0:	d1f5      	bne.n	800a6be <HAL_RCC_ClockConfig+0x18a>
 800a6d2:	e777      	b.n	800a5c4 <HAL_RCC_ClockConfig+0x90>
 800a6d4:	4a15      	ldr	r2, [pc, #84]	; (800a72c <HAL_RCC_ClockConfig+0x1f8>)
 800a6d6:	6812      	ldr	r2, [r2, #0]
 800a6d8:	0394      	lsls	r4, r2, #14
 800a6da:	d4ab      	bmi.n	800a634 <HAL_RCC_ClockConfig+0x100>
 800a6dc:	e73b      	b.n	800a556 <HAL_RCC_ClockConfig+0x22>
 800a6de:	f241 3788 	movw	r7, #5000	; 0x1388
 800a6e2:	e004      	b.n	800a6ee <HAL_RCC_ClockConfig+0x1ba>
 800a6e4:	f7ff fc78 	bl	8009fd8 <HAL_GetTick>
 800a6e8:	1b80      	subs	r0, r0, r6
 800a6ea:	42b8      	cmp	r0, r7
 800a6ec:	d8cc      	bhi.n	800a688 <HAL_RCC_ClockConfig+0x154>
 800a6ee:	68a3      	ldr	r3, [r4, #8]
 800a6f0:	f003 030c 	and.w	r3, r3, #12
 800a6f4:	2b04      	cmp	r3, #4
 800a6f6:	d1f5      	bne.n	800a6e4 <HAL_RCC_ClockConfig+0x1b0>
 800a6f8:	e76c      	b.n	800a5d4 <HAL_RCC_ClockConfig+0xa0>
 800a6fa:	f241 3788 	movw	r7, #5000	; 0x1388
 800a6fe:	e004      	b.n	800a70a <HAL_RCC_ClockConfig+0x1d6>
 800a700:	f7ff fc6a 	bl	8009fd8 <HAL_GetTick>
 800a704:	1b80      	subs	r0, r0, r6
 800a706:	42b8      	cmp	r0, r7
 800a708:	d8be      	bhi.n	800a688 <HAL_RCC_ClockConfig+0x154>
 800a70a:	68a3      	ldr	r3, [r4, #8]
 800a70c:	f003 030c 	and.w	r3, r3, #12
 800a710:	2b08      	cmp	r3, #8
 800a712:	d1f5      	bne.n	800a700 <HAL_RCC_ClockConfig+0x1cc>
 800a714:	e75e      	b.n	800a5d4 <HAL_RCC_ClockConfig+0xa0>
 800a716:	f241 3588 	movw	r5, #5000	; 0x1388
 800a71a:	68a3      	ldr	r3, [r4, #8]
 800a71c:	f7ff fc5c 	bl	8009fd8 <HAL_GetTick>
 800a720:	1b80      	subs	r0, r0, r6
 800a722:	42a8      	cmp	r0, r5
 800a724:	d9f9      	bls.n	800a71a <HAL_RCC_ClockConfig+0x1e6>
 800a726:	e7af      	b.n	800a688 <HAL_RCC_ClockConfig+0x154>
 800a728:	40023c00 	.word	0x40023c00
 800a72c:	40023800 	.word	0x40023800

0800a730 <HAL_RCC_GetSysClockFreq>:
 800a730:	491c      	ldr	r1, [pc, #112]	; (800a7a4 <HAL_RCC_GetSysClockFreq+0x74>)
 800a732:	688b      	ldr	r3, [r1, #8]
 800a734:	f003 030c 	and.w	r3, r3, #12
 800a738:	2b04      	cmp	r3, #4
 800a73a:	d031      	beq.n	800a7a0 <HAL_RCC_GetSysClockFreq+0x70>
 800a73c:	2b08      	cmp	r3, #8
 800a73e:	d12d      	bne.n	800a79c <HAL_RCC_GetSysClockFreq+0x6c>
 800a740:	684a      	ldr	r2, [r1, #4]
 800a742:	b430      	push	{r4, r5}
 800a744:	684d      	ldr	r5, [r1, #4]
 800a746:	f002 043f 	and.w	r4, r2, #63	; 0x3f
 800a74a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a74e:	684a      	ldr	r2, [r1, #4]
 800a750:	0269      	lsls	r1, r5, #9
 800a752:	fa93 f3a3 	rbit	r3, r3
 800a756:	f647 70c0 	movw	r0, #32704	; 0x7fc0
 800a75a:	ea00 0002 	and.w	r0, r0, r2
 800a75e:	bf4a      	itet	mi
 800a760:	4911      	ldrmi	r1, [pc, #68]	; (800a7a8 <HAL_RCC_GetSysClockFreq+0x78>)
 800a762:	4a12      	ldrpl	r2, [pc, #72]	; (800a7ac <HAL_RCC_GetSysClockFreq+0x7c>)
 800a764:	fbb1 f2f4 	udivmi	r2, r1, r4
 800a768:	490e      	ldr	r1, [pc, #56]	; (800a7a4 <HAL_RCC_GetSysClockFreq+0x74>)
 800a76a:	fab3 f383 	clz	r3, r3
 800a76e:	fa20 f003 	lsr.w	r0, r0, r3
 800a772:	bf58      	it	pl
 800a774:	fbb2 f2f4 	udivpl	r2, r2, r4
 800a778:	fb02 f300 	mul.w	r3, r2, r0
 800a77c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a780:	6848      	ldr	r0, [r1, #4]
 800a782:	fa92 f2a2 	rbit	r2, r2
 800a786:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 800a78a:	fab2 f282 	clz	r2, r2
 800a78e:	40d0      	lsrs	r0, r2
 800a790:	3001      	adds	r0, #1
 800a792:	0040      	lsls	r0, r0, #1
 800a794:	bc30      	pop	{r4, r5}
 800a796:	fbb3 f0f0 	udiv	r0, r3, r0
 800a79a:	4770      	bx	lr
 800a79c:	4803      	ldr	r0, [pc, #12]	; (800a7ac <HAL_RCC_GetSysClockFreq+0x7c>)
 800a79e:	4770      	bx	lr
 800a7a0:	4801      	ldr	r0, [pc, #4]	; (800a7a8 <HAL_RCC_GetSysClockFreq+0x78>)
 800a7a2:	4770      	bx	lr
 800a7a4:	40023800 	.word	0x40023800
 800a7a8:	007a1200 	.word	0x007a1200
 800a7ac:	00f42400 	.word	0x00f42400

0800a7b0 <HAL_RCC_GetHCLKFreq>:
 800a7b0:	b510      	push	{r4, lr}
 800a7b2:	f7ff ffbd 	bl	800a730 <HAL_RCC_GetSysClockFreq>
 800a7b6:	4b08      	ldr	r3, [pc, #32]	; (800a7d8 <HAL_RCC_GetHCLKFreq+0x28>)
 800a7b8:	22f0      	movs	r2, #240	; 0xf0
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	fa92 f2a2 	rbit	r2, r2
 800a7c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7c4:	fab2 f282 	clz	r2, r2
 800a7c8:	4c04      	ldr	r4, [pc, #16]	; (800a7dc <HAL_RCC_GetHCLKFreq+0x2c>)
 800a7ca:	4905      	ldr	r1, [pc, #20]	; (800a7e0 <HAL_RCC_GetHCLKFreq+0x30>)
 800a7cc:	40d3      	lsrs	r3, r2
 800a7ce:	5ce3      	ldrb	r3, [r4, r3]
 800a7d0:	40d8      	lsrs	r0, r3
 800a7d2:	6008      	str	r0, [r1, #0]
 800a7d4:	bd10      	pop	{r4, pc}
 800a7d6:	bf00      	nop
 800a7d8:	40023800 	.word	0x40023800
 800a7dc:	0801c314 	.word	0x0801c314
 800a7e0:	20000a5c 	.word	0x20000a5c

0800a7e4 <HAL_RCC_GetPCLK1Freq>:
 800a7e4:	b508      	push	{r3, lr}
 800a7e6:	f7ff ffe3 	bl	800a7b0 <HAL_RCC_GetHCLKFreq>
 800a7ea:	4b07      	ldr	r3, [pc, #28]	; (800a808 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7ec:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	fa92 f2a2 	rbit	r2, r2
 800a7f6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800a7fa:	fab2 f282 	clz	r2, r2
 800a7fe:	4903      	ldr	r1, [pc, #12]	; (800a80c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a800:	40d3      	lsrs	r3, r2
 800a802:	5ccb      	ldrb	r3, [r1, r3]
 800a804:	40d8      	lsrs	r0, r3
 800a806:	bd08      	pop	{r3, pc}
 800a808:	40023800 	.word	0x40023800
 800a80c:	0801c314 	.word	0x0801c314

0800a810 <HAL_RCC_GetPCLK2Freq>:
 800a810:	b508      	push	{r3, lr}
 800a812:	f7ff ffcd 	bl	800a7b0 <HAL_RCC_GetHCLKFreq>
 800a816:	4b07      	ldr	r3, [pc, #28]	; (800a834 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a818:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	fa92 f2a2 	rbit	r2, r2
 800a822:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a826:	fab2 f282 	clz	r2, r2
 800a82a:	4903      	ldr	r1, [pc, #12]	; (800a838 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a82c:	40d3      	lsrs	r3, r2
 800a82e:	5ccb      	ldrb	r3, [r1, r3]
 800a830:	40d8      	lsrs	r0, r3
 800a832:	bd08      	pop	{r3, pc}
 800a834:	40023800 	.word	0x40023800
 800a838:	0801c314 	.word	0x0801c314

0800a83c <HAL_TIM_OC_MspInit>:
 800a83c:	4770      	bx	lr
 800a83e:	bf00      	nop

0800a840 <HAL_TIM_OC_Start>:
 800a840:	6803      	ldr	r3, [r0, #0]
 800a842:	2201      	movs	r2, #1
 800a844:	6a18      	ldr	r0, [r3, #32]
 800a846:	408a      	lsls	r2, r1
 800a848:	ea20 0002 	bic.w	r0, r0, r2
 800a84c:	b410      	push	{r4}
 800a84e:	6218      	str	r0, [r3, #32]
 800a850:	6a19      	ldr	r1, [r3, #32]
 800a852:	4c09      	ldr	r4, [pc, #36]	; (800a878 <HAL_TIM_OC_Start+0x38>)
 800a854:	430a      	orrs	r2, r1
 800a856:	42a3      	cmp	r3, r4
 800a858:	621a      	str	r2, [r3, #32]
 800a85a:	d007      	beq.n	800a86c <HAL_TIM_OC_Start+0x2c>
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a862:	f042 0201 	orr.w	r2, r2, #1
 800a866:	2000      	movs	r0, #0
 800a868:	601a      	str	r2, [r3, #0]
 800a86a:	4770      	bx	lr
 800a86c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a86e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a872:	645a      	str	r2, [r3, #68]	; 0x44
 800a874:	e7f2      	b.n	800a85c <HAL_TIM_OC_Start+0x1c>
 800a876:	bf00      	nop
 800a878:	40010000 	.word	0x40010000

0800a87c <TIM_Base_SetConfig>:
 800a87c:	4a26      	ldr	r2, [pc, #152]	; (800a918 <TIM_Base_SetConfig+0x9c>)
 800a87e:	6803      	ldr	r3, [r0, #0]
 800a880:	4290      	cmp	r0, r2
 800a882:	b470      	push	{r4, r5, r6}
 800a884:	d034      	beq.n	800a8f0 <TIM_Base_SetConfig+0x74>
 800a886:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a88a:	d020      	beq.n	800a8ce <TIM_Base_SetConfig+0x52>
 800a88c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a890:	4290      	cmp	r0, r2
 800a892:	d01c      	beq.n	800a8ce <TIM_Base_SetConfig+0x52>
 800a894:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a898:	4290      	cmp	r0, r2
 800a89a:	d018      	beq.n	800a8ce <TIM_Base_SetConfig+0x52>
 800a89c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a8a0:	4290      	cmp	r0, r2
 800a8a2:	d014      	beq.n	800a8ce <TIM_Base_SetConfig+0x52>
 800a8a4:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800a8a8:	4290      	cmp	r0, r2
 800a8aa:	d014      	beq.n	800a8d6 <TIM_Base_SetConfig+0x5a>
 800a8ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a8b0:	4290      	cmp	r0, r2
 800a8b2:	d010      	beq.n	800a8d6 <TIM_Base_SetConfig+0x5a>
 800a8b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a8b8:	4290      	cmp	r0, r2
 800a8ba:	d00c      	beq.n	800a8d6 <TIM_Base_SetConfig+0x5a>
 800a8bc:	688c      	ldr	r4, [r1, #8]
 800a8be:	680a      	ldr	r2, [r1, #0]
 800a8c0:	6003      	str	r3, [r0, #0]
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	62c4      	str	r4, [r0, #44]	; 0x2c
 800a8c6:	6282      	str	r2, [r0, #40]	; 0x28
 800a8c8:	bc70      	pop	{r4, r5, r6}
 800a8ca:	6143      	str	r3, [r0, #20]
 800a8cc:	4770      	bx	lr
 800a8ce:	684a      	ldr	r2, [r1, #4]
 800a8d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	68ca      	ldr	r2, [r1, #12]
 800a8d8:	688c      	ldr	r4, [r1, #8]
 800a8da:	6809      	ldr	r1, [r1, #0]
 800a8dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	6003      	str	r3, [r0, #0]
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	62c4      	str	r4, [r0, #44]	; 0x2c
 800a8e8:	6281      	str	r1, [r0, #40]	; 0x28
 800a8ea:	bc70      	pop	{r4, r5, r6}
 800a8ec:	6143      	str	r3, [r0, #20]
 800a8ee:	4770      	bx	lr
 800a8f0:	684a      	ldr	r2, [r1, #4]
 800a8f2:	68cc      	ldr	r4, [r1, #12]
 800a8f4:	688e      	ldr	r6, [r1, #8]
 800a8f6:	680d      	ldr	r5, [r1, #0]
 800a8f8:	6909      	ldr	r1, [r1, #16]
 800a8fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8fe:	4313      	orrs	r3, r2
 800a900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a904:	4323      	orrs	r3, r4
 800a906:	6003      	str	r3, [r0, #0]
 800a908:	2301      	movs	r3, #1
 800a90a:	62c6      	str	r6, [r0, #44]	; 0x2c
 800a90c:	6285      	str	r5, [r0, #40]	; 0x28
 800a90e:	6301      	str	r1, [r0, #48]	; 0x30
 800a910:	bc70      	pop	{r4, r5, r6}
 800a912:	6143      	str	r3, [r0, #20]
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop
 800a918:	40010000 	.word	0x40010000

0800a91c <HAL_TIM_OC_Init>:
 800a91c:	b1c0      	cbz	r0, 800a950 <HAL_TIM_OC_Init+0x34>
 800a91e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a922:	b510      	push	{r4, lr}
 800a924:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a928:	4604      	mov	r4, r0
 800a92a:	b163      	cbz	r3, 800a946 <HAL_TIM_OC_Init+0x2a>
 800a92c:	4621      	mov	r1, r4
 800a92e:	2302      	movs	r3, #2
 800a930:	f851 0b04 	ldr.w	r0, [r1], #4
 800a934:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800a938:	f7ff ffa0 	bl	800a87c <TIM_Base_SetConfig>
 800a93c:	2301      	movs	r3, #1
 800a93e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800a942:	2000      	movs	r0, #0
 800a944:	bd10      	pop	{r4, pc}
 800a946:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 800a94a:	f7ff ff77 	bl	800a83c <HAL_TIM_OC_MspInit>
 800a94e:	e7ed      	b.n	800a92c <HAL_TIM_OC_Init+0x10>
 800a950:	2001      	movs	r0, #1
 800a952:	4770      	bx	lr

0800a954 <UART_SetConfig>:
 800a954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a958:	6804      	ldr	r4, [r0, #0]
 800a95a:	68c7      	ldr	r7, [r0, #12]
 800a95c:	6923      	ldr	r3, [r4, #16]
 800a95e:	69c5      	ldr	r5, [r0, #28]
 800a960:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800a964:	6882      	ldr	r2, [r0, #8]
 800a966:	6941      	ldr	r1, [r0, #20]
 800a968:	f423 5e40 	bic.w	lr, r3, #12288	; 0x3000
 800a96c:	ea4e 0707 	orr.w	r7, lr, r7
 800a970:	4606      	mov	r6, r0
 800a972:	6980      	ldr	r0, [r0, #24]
 800a974:	6127      	str	r7, [r4, #16]
 800a976:	68e3      	ldr	r3, [r4, #12]
 800a978:	ea4c 0202 	orr.w	r2, ip, r2
 800a97c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a980:	430a      	orrs	r2, r1
 800a982:	f023 030c 	bic.w	r3, r3, #12
 800a986:	432a      	orrs	r2, r5
 800a988:	4313      	orrs	r3, r2
 800a98a:	60e3      	str	r3, [r4, #12]
 800a98c:	6963      	ldr	r3, [r4, #20]
 800a98e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a992:	4303      	orrs	r3, r0
 800a994:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800a998:	6163      	str	r3, [r4, #20]
 800a99a:	4b51      	ldr	r3, [pc, #324]	; (800aae0 <UART_SetConfig+0x18c>)
 800a99c:	d039      	beq.n	800aa12 <UART_SetConfig+0xbe>
 800a99e:	429c      	cmp	r4, r3
 800a9a0:	f000 8081 	beq.w	800aaa6 <UART_SetConfig+0x152>
 800a9a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9a8:	429c      	cmp	r4, r3
 800a9aa:	d07c      	beq.n	800aaa6 <UART_SetConfig+0x152>
 800a9ac:	f7ff ff1a 	bl	800a7e4 <HAL_RCC_GetPCLK1Freq>
 800a9b0:	6875      	ldr	r5, [r6, #4]
 800a9b2:	4f4c      	ldr	r7, [pc, #304]	; (800aae4 <UART_SetConfig+0x190>)
 800a9b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a9b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a9bc:	00ad      	lsls	r5, r5, #2
 800a9be:	fbb0 f5f5 	udiv	r5, r0, r5
 800a9c2:	f7ff ff0f 	bl	800a7e4 <HAL_RCC_GetPCLK1Freq>
 800a9c6:	fba7 3505 	umull	r3, r5, r7, r5
 800a9ca:	6872      	ldr	r2, [r6, #4]
 800a9cc:	096d      	lsrs	r5, r5, #5
 800a9ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a9d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a9d6:	0092      	lsls	r2, r2, #2
 800a9d8:	012d      	lsls	r5, r5, #4
 800a9da:	fbb0 f8f2 	udiv	r8, r0, r2
 800a9de:	f7ff ff01 	bl	800a7e4 <HAL_RCC_GetPCLK1Freq>
 800a9e2:	6871      	ldr	r1, [r6, #4]
 800a9e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a9e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a9ec:	0089      	lsls	r1, r1, #2
 800a9ee:	fbb0 f1f1 	udiv	r1, r0, r1
 800a9f2:	fba7 3101 	umull	r3, r1, r7, r1
 800a9f6:	0949      	lsrs	r1, r1, #5
 800a9f8:	2264      	movs	r2, #100	; 0x64
 800a9fa:	fb02 8211 	mls	r2, r2, r1, r8
 800a9fe:	0112      	lsls	r2, r2, #4
 800aa00:	3232      	adds	r2, #50	; 0x32
 800aa02:	fba7 2302 	umull	r2, r3, r7, r2
 800aa06:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800aa0a:	432b      	orrs	r3, r5
 800aa0c:	60a3      	str	r3, [r4, #8]
 800aa0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa12:	429c      	cmp	r4, r3
 800aa14:	d025      	beq.n	800aa62 <UART_SetConfig+0x10e>
 800aa16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa1a:	429c      	cmp	r4, r3
 800aa1c:	d021      	beq.n	800aa62 <UART_SetConfig+0x10e>
 800aa1e:	f7ff fee1 	bl	800a7e4 <HAL_RCC_GetPCLK1Freq>
 800aa22:	6875      	ldr	r5, [r6, #4]
 800aa24:	4f2f      	ldr	r7, [pc, #188]	; (800aae4 <UART_SetConfig+0x190>)
 800aa26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aa2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aa2e:	006d      	lsls	r5, r5, #1
 800aa30:	fbb0 f5f5 	udiv	r5, r0, r5
 800aa34:	f7ff fed6 	bl	800a7e4 <HAL_RCC_GetPCLK1Freq>
 800aa38:	6872      	ldr	r2, [r6, #4]
 800aa3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aa3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aa42:	0052      	lsls	r2, r2, #1
 800aa44:	fbb0 f8f2 	udiv	r8, r0, r2
 800aa48:	f7ff fecc 	bl	800a7e4 <HAL_RCC_GetPCLK1Freq>
 800aa4c:	fba7 3505 	umull	r3, r5, r7, r5
 800aa50:	6871      	ldr	r1, [r6, #4]
 800aa52:	096d      	lsrs	r5, r5, #5
 800aa54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aa58:	012d      	lsls	r5, r5, #4
 800aa5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aa5e:	0049      	lsls	r1, r1, #1
 800aa60:	e7c5      	b.n	800a9ee <UART_SetConfig+0x9a>
 800aa62:	f7ff fed5 	bl	800a810 <HAL_RCC_GetPCLK2Freq>
 800aa66:	6875      	ldr	r5, [r6, #4]
 800aa68:	4f1e      	ldr	r7, [pc, #120]	; (800aae4 <UART_SetConfig+0x190>)
 800aa6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aa6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aa72:	006d      	lsls	r5, r5, #1
 800aa74:	fbb0 f5f5 	udiv	r5, r0, r5
 800aa78:	f7ff feca 	bl	800a810 <HAL_RCC_GetPCLK2Freq>
 800aa7c:	6872      	ldr	r2, [r6, #4]
 800aa7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aa82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aa86:	0052      	lsls	r2, r2, #1
 800aa88:	fbb0 f8f2 	udiv	r8, r0, r2
 800aa8c:	f7ff fec0 	bl	800a810 <HAL_RCC_GetPCLK2Freq>
 800aa90:	fba7 3505 	umull	r3, r5, r7, r5
 800aa94:	6871      	ldr	r1, [r6, #4]
 800aa96:	096d      	lsrs	r5, r5, #5
 800aa98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aa9c:	012d      	lsls	r5, r5, #4
 800aa9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aaa2:	0049      	lsls	r1, r1, #1
 800aaa4:	e7a3      	b.n	800a9ee <UART_SetConfig+0x9a>
 800aaa6:	f7ff feb3 	bl	800a810 <HAL_RCC_GetPCLK2Freq>
 800aaaa:	6875      	ldr	r5, [r6, #4]
 800aaac:	4f0d      	ldr	r7, [pc, #52]	; (800aae4 <UART_SetConfig+0x190>)
 800aaae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aab2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aab6:	00ad      	lsls	r5, r5, #2
 800aab8:	fbb0 f5f5 	udiv	r5, r0, r5
 800aabc:	f7ff fea8 	bl	800a810 <HAL_RCC_GetPCLK2Freq>
 800aac0:	fba7 3505 	umull	r3, r5, r7, r5
 800aac4:	6872      	ldr	r2, [r6, #4]
 800aac6:	096d      	lsrs	r5, r5, #5
 800aac8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aacc:	0092      	lsls	r2, r2, #2
 800aace:	012d      	lsls	r5, r5, #4
 800aad0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aad4:	fbb0 f8f2 	udiv	r8, r0, r2
 800aad8:	f7ff fe9a 	bl	800a810 <HAL_RCC_GetPCLK2Freq>
 800aadc:	e781      	b.n	800a9e2 <UART_SetConfig+0x8e>
 800aade:	bf00      	nop
 800aae0:	40011000 	.word	0x40011000
 800aae4:	51eb851f 	.word	0x51eb851f

0800aae8 <HAL_UART_MspInit>:
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop

0800aaec <HAL_UART_Init>:
 800aaec:	b350      	cbz	r0, 800ab44 <HAL_UART_Init+0x58>
 800aaee:	b538      	push	{r3, r4, r5, lr}
 800aaf0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800aafa:	b1f3      	cbz	r3, 800ab3a <HAL_UART_Init+0x4e>
 800aafc:	6822      	ldr	r2, [r4, #0]
 800aafe:	2302      	movs	r3, #2
 800ab00:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800ab04:	68d3      	ldr	r3, [r2, #12]
 800ab06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab0a:	60d3      	str	r3, [r2, #12]
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f7ff ff21 	bl	800a954 <UART_SetConfig>
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	691a      	ldr	r2, [r3, #16]
 800ab16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab1a:	611a      	str	r2, [r3, #16]
 800ab1c:	695a      	ldr	r2, [r3, #20]
 800ab1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab22:	615a      	str	r2, [r3, #20]
 800ab24:	68da      	ldr	r2, [r3, #12]
 800ab26:	2100      	movs	r1, #0
 800ab28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ab2c:	2501      	movs	r5, #1
 800ab2e:	60da      	str	r2, [r3, #12]
 800ab30:	4608      	mov	r0, r1
 800ab32:	63e1      	str	r1, [r4, #60]	; 0x3c
 800ab34:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 800ab38:	bd38      	pop	{r3, r4, r5, pc}
 800ab3a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 800ab3e:	f7ff ffd3 	bl	800aae8 <HAL_UART_MspInit>
 800ab42:	e7db      	b.n	800aafc <HAL_UART_Init+0x10>
 800ab44:	2001      	movs	r0, #1
 800ab46:	4770      	bx	lr

0800ab48 <SystemCoreClockUpdate>:
 800ab48:	4818      	ldr	r0, [pc, #96]	; (800abac <SystemCoreClockUpdate+0x64>)
 800ab4a:	6883      	ldr	r3, [r0, #8]
 800ab4c:	f003 030c 	and.w	r3, r3, #12
 800ab50:	2b04      	cmp	r3, #4
 800ab52:	d029      	beq.n	800aba8 <SystemCoreClockUpdate+0x60>
 800ab54:	2b08      	cmp	r3, #8
 800ab56:	d00a      	beq.n	800ab6e <SystemCoreClockUpdate+0x26>
 800ab58:	4b15      	ldr	r3, [pc, #84]	; (800abb0 <SystemCoreClockUpdate+0x68>)
 800ab5a:	4a14      	ldr	r2, [pc, #80]	; (800abac <SystemCoreClockUpdate+0x64>)
 800ab5c:	4815      	ldr	r0, [pc, #84]	; (800abb4 <SystemCoreClockUpdate+0x6c>)
 800ab5e:	6892      	ldr	r2, [r2, #8]
 800ab60:	4915      	ldr	r1, [pc, #84]	; (800abb8 <SystemCoreClockUpdate+0x70>)
 800ab62:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800ab66:	5c82      	ldrb	r2, [r0, r2]
 800ab68:	40d3      	lsrs	r3, r2
 800ab6a:	600b      	str	r3, [r1, #0]
 800ab6c:	4770      	bx	lr
 800ab6e:	6843      	ldr	r3, [r0, #4]
 800ab70:	6841      	ldr	r1, [r0, #4]
 800ab72:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800ab76:	6843      	ldr	r3, [r0, #4]
 800ab78:	bf18      	it	ne
 800ab7a:	4810      	ldrne	r0, [pc, #64]	; (800abbc <SystemCoreClockUpdate+0x74>)
 800ab7c:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 800ab80:	bf0c      	ite	eq
 800ab82:	490b      	ldreq	r1, [pc, #44]	; (800abb0 <SystemCoreClockUpdate+0x68>)
 800ab84:	fbb0 f1f2 	udivne	r1, r0, r2
 800ab88:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800ab8c:	bf08      	it	eq
 800ab8e:	fbb1 f1f2 	udiveq	r1, r1, r2
 800ab92:	fb01 f203 	mul.w	r2, r1, r3
 800ab96:	4b05      	ldr	r3, [pc, #20]	; (800abac <SystemCoreClockUpdate+0x64>)
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800ab9e:	3301      	adds	r3, #1
 800aba0:	005b      	lsls	r3, r3, #1
 800aba2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aba6:	e7d8      	b.n	800ab5a <SystemCoreClockUpdate+0x12>
 800aba8:	4b04      	ldr	r3, [pc, #16]	; (800abbc <SystemCoreClockUpdate+0x74>)
 800abaa:	e7d6      	b.n	800ab5a <SystemCoreClockUpdate+0x12>
 800abac:	40023800 	.word	0x40023800
 800abb0:	00f42400 	.word	0x00f42400
 800abb4:	0801c324 	.word	0x0801c324
 800abb8:	20000a5c 	.word	0x20000a5c
 800abbc:	007a1200 	.word	0x007a1200

0800abc0 <SetSysClock_PLL_HSE>:
 800abc0:	4b20      	ldr	r3, [pc, #128]	; (800ac44 <SetSysClock_PLL_HSE+0x84>)
 800abc2:	4a21      	ldr	r2, [pc, #132]	; (800ac48 <SetSysClock_PLL_HSE+0x88>)
 800abc4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800abc6:	b530      	push	{r4, r5, lr}
 800abc8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800abcc:	6419      	str	r1, [r3, #64]	; 0x40
 800abce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd0:	b095      	sub	sp, #84	; 0x54
 800abd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abd6:	9301      	str	r3, [sp, #4]
 800abd8:	9b01      	ldr	r3, [sp, #4]
 800abda:	6813      	ldr	r3, [r2, #0]
 800abdc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800abe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abe4:	6013      	str	r3, [r2, #0]
 800abe6:	6813      	ldr	r3, [r2, #0]
 800abe8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800abec:	9302      	str	r3, [sp, #8]
 800abee:	2301      	movs	r3, #1
 800abf0:	9a02      	ldr	r2, [sp, #8]
 800abf2:	9308      	str	r3, [sp, #32]
 800abf4:	b100      	cbz	r0, 800abf8 <SetSysClock_PLL_HSE+0x38>
 800abf6:	2305      	movs	r3, #5
 800abf8:	9309      	str	r3, [sp, #36]	; 0x24
 800abfa:	21c0      	movs	r1, #192	; 0xc0
 800abfc:	2304      	movs	r3, #4
 800abfe:	2208      	movs	r2, #8
 800ac00:	2402      	movs	r4, #2
 800ac02:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
 800ac06:	a808      	add	r0, sp, #32
 800ac08:	9310      	str	r3, [sp, #64]	; 0x40
 800ac0a:	9312      	str	r3, [sp, #72]	; 0x48
 800ac0c:	940e      	str	r4, [sp, #56]	; 0x38
 800ac0e:	950f      	str	r5, [sp, #60]	; 0x3c
 800ac10:	9111      	str	r1, [sp, #68]	; 0x44
 800ac12:	9213      	str	r2, [sp, #76]	; 0x4c
 800ac14:	f7ff fae8 	bl	800a1e8 <HAL_RCC_OscConfig>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	b110      	cbz	r0, 800ac22 <SetSysClock_PLL_HSE+0x62>
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	b015      	add	sp, #84	; 0x54
 800ac20:	bd30      	pop	{r4, r5, pc}
 800ac22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ac26:	250f      	movs	r5, #15
 800ac28:	a803      	add	r0, sp, #12
 800ac2a:	2103      	movs	r1, #3
 800ac2c:	9404      	str	r4, [sp, #16]
 800ac2e:	9305      	str	r3, [sp, #20]
 800ac30:	9307      	str	r3, [sp, #28]
 800ac32:	9503      	str	r5, [sp, #12]
 800ac34:	9206      	str	r2, [sp, #24]
 800ac36:	f7ff fc7d 	bl	800a534 <HAL_RCC_ClockConfig>
 800ac3a:	fab0 f080 	clz	r0, r0
 800ac3e:	0940      	lsrs	r0, r0, #5
 800ac40:	b015      	add	sp, #84	; 0x54
 800ac42:	bd30      	pop	{r4, r5, pc}
 800ac44:	40023800 	.word	0x40023800
 800ac48:	40007000 	.word	0x40007000

0800ac4c <SetSysClock_PLL_HSI>:
 800ac4c:	4b22      	ldr	r3, [pc, #136]	; (800acd8 <SetSysClock_PLL_HSI+0x8c>)
 800ac4e:	4a23      	ldr	r2, [pc, #140]	; (800acdc <SetSysClock_PLL_HSI+0x90>)
 800ac50:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ac52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac54:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800ac58:	6419      	str	r1, [r3, #64]	; 0x40
 800ac5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac5c:	b095      	sub	sp, #84	; 0x54
 800ac5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac62:	9301      	str	r3, [sp, #4]
 800ac64:	9b01      	ldr	r3, [sp, #4]
 800ac66:	6813      	ldr	r3, [r2, #0]
 800ac68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800ac6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac70:	6013      	str	r3, [r2, #0]
 800ac72:	6813      	ldr	r3, [r2, #0]
 800ac74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ac78:	9302      	str	r3, [sp, #8]
 800ac7a:	f04f 0e01 	mov.w	lr, #1
 800ac7e:	2308      	movs	r3, #8
 800ac80:	2400      	movs	r4, #0
 800ac82:	21c0      	movs	r1, #192	; 0xc0
 800ac84:	2204      	movs	r2, #4
 800ac86:	2603      	movs	r6, #3
 800ac88:	2710      	movs	r7, #16
 800ac8a:	2502      	movs	r5, #2
 800ac8c:	a808      	add	r0, sp, #32
 800ac8e:	9310      	str	r3, [sp, #64]	; 0x40
 800ac90:	9313      	str	r3, [sp, #76]	; 0x4c
 800ac92:	f8dd c008 	ldr.w	ip, [sp, #8]
 800ac96:	9608      	str	r6, [sp, #32]
 800ac98:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800ac9c:	9409      	str	r4, [sp, #36]	; 0x24
 800ac9e:	940f      	str	r4, [sp, #60]	; 0x3c
 800aca0:	970c      	str	r7, [sp, #48]	; 0x30
 800aca2:	950e      	str	r5, [sp, #56]	; 0x38
 800aca4:	9111      	str	r1, [sp, #68]	; 0x44
 800aca6:	9212      	str	r2, [sp, #72]	; 0x48
 800aca8:	f7ff fa9e 	bl	800a1e8 <HAL_RCC_OscConfig>
 800acac:	4603      	mov	r3, r0
 800acae:	b110      	cbz	r0, 800acb6 <SetSysClock_PLL_HSI+0x6a>
 800acb0:	4620      	mov	r0, r4
 800acb2:	b015      	add	sp, #84	; 0x54
 800acb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800acba:	4631      	mov	r1, r6
 800acbc:	240f      	movs	r4, #15
 800acbe:	a803      	add	r0, sp, #12
 800acc0:	9504      	str	r5, [sp, #16]
 800acc2:	9305      	str	r3, [sp, #20]
 800acc4:	9307      	str	r3, [sp, #28]
 800acc6:	9403      	str	r4, [sp, #12]
 800acc8:	9206      	str	r2, [sp, #24]
 800acca:	f7ff fc33 	bl	800a534 <HAL_RCC_ClockConfig>
 800acce:	fab0 f080 	clz	r0, r0
 800acd2:	0940      	lsrs	r0, r0, #5
 800acd4:	b015      	add	sp, #84	; 0x54
 800acd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acd8:	40023800 	.word	0x40023800
 800acdc:	40007000 	.word	0x40007000

0800ace0 <SetSysClock>:
 800ace0:	b508      	push	{r3, lr}
 800ace2:	2001      	movs	r0, #1
 800ace4:	f7ff ff6c 	bl	800abc0 <SetSysClock_PLL_HSE>
 800ace8:	b100      	cbz	r0, 800acec <SetSysClock+0xc>
 800acea:	bd08      	pop	{r3, pc}
 800acec:	f7ff ff68 	bl	800abc0 <SetSysClock_PLL_HSE>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	d1fa      	bne.n	800acea <SetSysClock+0xa>
 800acf4:	f7ff ffaa 	bl	800ac4c <SetSysClock_PLL_HSI>
 800acf8:	2800      	cmp	r0, #0
 800acfa:	d1f6      	bne.n	800acea <SetSysClock+0xa>
 800acfc:	e7fe      	b.n	800acfc <SetSysClock+0x1c>
 800acfe:	bf00      	nop

0800ad00 <SystemInit>:
 800ad00:	4a17      	ldr	r2, [pc, #92]	; (800ad60 <SystemInit+0x60>)
 800ad02:	4818      	ldr	r0, [pc, #96]	; (800ad64 <SystemInit+0x64>)
 800ad04:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800ad08:	b570      	push	{r4, r5, r6, lr}
 800ad0a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad0e:	4c16      	ldr	r4, [pc, #88]	; (800ad68 <SystemInit+0x68>)
 800ad10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	4e15      	ldr	r6, [pc, #84]	; (800ad6c <SystemInit+0x6c>)
 800ad18:	4d15      	ldr	r5, [pc, #84]	; (800ad70 <SystemInit+0x70>)
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	f043 0301 	orr.w	r3, r3, #1
 800ad20:	6023      	str	r3, [r4, #0]
 800ad22:	60a1      	str	r1, [r4, #8]
 800ad24:	6823      	ldr	r3, [r4, #0]
 800ad26:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800ad2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad2e:	6023      	str	r3, [r4, #0]
 800ad30:	6066      	str	r6, [r4, #4]
 800ad32:	6823      	ldr	r3, [r4, #0]
 800ad34:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 800ad38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	60e1      	str	r1, [r4, #12]
 800ad40:	6096      	str	r6, [r2, #8]
 800ad42:	6005      	str	r5, [r0, #0]
 800ad44:	f7ff f926 	bl	8009f94 <HAL_Init>
 800ad48:	f7ff ffca 	bl	800ace0 <SetSysClock>
 800ad4c:	6a23      	ldr	r3, [r4, #32]
 800ad4e:	f043 0308 	orr.w	r3, r3, #8
 800ad52:	6223      	str	r3, [r4, #32]
 800ad54:	6a23      	ldr	r3, [r4, #32]
 800ad56:	f023 0308 	bic.w	r3, r3, #8
 800ad5a:	6223      	str	r3, [r4, #32]
 800ad5c:	bd70      	pop	{r4, r5, r6, pc}
 800ad5e:	bf00      	nop
 800ad60:	e000ed00 	.word	0xe000ed00
 800ad64:	20000a5c 	.word	0x20000a5c
 800ad68:	40023800 	.word	0x40023800
 800ad6c:	24003010 	.word	0x24003010
 800ad70:	00f42400 	.word	0x00f42400

0800ad74 <gpio_set>:
 800ad74:	1c43      	adds	r3, r0, #1
 800ad76:	b510      	push	{r4, lr}
 800ad78:	4604      	mov	r4, r0
 800ad7a:	d008      	beq.n	800ad8e <gpio_set+0x1a>
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	2100      	movs	r1, #0
 800ad80:	f000 f8c0 	bl	800af04 <pin_function>
 800ad84:	f004 040f 	and.w	r4, r4, #15
 800ad88:	2001      	movs	r0, #1
 800ad8a:	40a0      	lsls	r0, r4
 800ad8c:	bd10      	pop	{r4, pc}
 800ad8e:	4803      	ldr	r0, [pc, #12]	; (800ad9c <gpio_set+0x28>)
 800ad90:	4903      	ldr	r1, [pc, #12]	; (800ada0 <gpio_set+0x2c>)
 800ad92:	2227      	movs	r2, #39	; 0x27
 800ad94:	f000 fa1e 	bl	800b1d4 <mbed_assert_internal>
 800ad98:	e7f0      	b.n	800ad7c <gpio_set+0x8>
 800ad9a:	bf00      	nop
 800ad9c:	0801c334 	.word	0x0801c334
 800ada0:	0801c348 	.word	0x0801c348

0800ada4 <gpio_init>:
 800ada4:	b570      	push	{r4, r5, r6, lr}
 800ada6:	4605      	mov	r5, r0
 800ada8:	1c4b      	adds	r3, r1, #1
 800adaa:	460c      	mov	r4, r1
 800adac:	7029      	strb	r1, [r5, #0]
 800adae:	d00d      	beq.n	800adcc <gpio_init+0x28>
 800adb0:	f3c1 1003 	ubfx	r0, r1, #4, #4
 800adb4:	f000 f830 	bl	800ae18 <Set_GPIO_Clock>
 800adb8:	4606      	mov	r6, r0
 800adba:	4620      	mov	r0, r4
 800adbc:	f7ff ffda 	bl	800ad74 <gpio_set>
 800adc0:	f106 0310 	add.w	r3, r6, #16
 800adc4:	3618      	adds	r6, #24
 800adc6:	6068      	str	r0, [r5, #4]
 800adc8:	60ab      	str	r3, [r5, #8]
 800adca:	60ee      	str	r6, [r5, #12]
 800adcc:	bd70      	pop	{r4, r5, r6, pc}
 800adce:	bf00      	nop

0800add0 <gpio_mode>:
 800add0:	f990 0000 	ldrsb.w	r0, [r0]
 800add4:	f000 b8c4 	b.w	800af60 <pin_mode>

0800add8 <gpio_dir>:
 800add8:	b538      	push	{r3, r4, r5, lr}
 800adda:	4605      	mov	r5, r0
 800addc:	f990 0000 	ldrsb.w	r0, [r0]
 800ade0:	1c43      	adds	r3, r0, #1
 800ade2:	460c      	mov	r4, r1
 800ade4:	d00b      	beq.n	800adfe <gpio_dir+0x26>
 800ade6:	2c01      	cmp	r4, #1
 800ade8:	d004      	beq.n	800adf4 <gpio_dir+0x1c>
 800adea:	2100      	movs	r1, #0
 800adec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adf0:	f000 b888 	b.w	800af04 <pin_function>
 800adf4:	4621      	mov	r1, r4
 800adf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adfa:	f000 b883 	b.w	800af04 <pin_function>
 800adfe:	4804      	ldr	r0, [pc, #16]	; (800ae10 <gpio_dir+0x38>)
 800ae00:	4904      	ldr	r1, [pc, #16]	; (800ae14 <gpio_dir+0x3c>)
 800ae02:	2246      	movs	r2, #70	; 0x46
 800ae04:	f000 f9e6 	bl	800b1d4 <mbed_assert_internal>
 800ae08:	f995 0000 	ldrsb.w	r0, [r5]
 800ae0c:	e7eb      	b.n	800ade6 <gpio_dir+0xe>
 800ae0e:	bf00      	nop
 800ae10:	0801c204 	.word	0x0801c204
 800ae14:	0801c348 	.word	0x0801c348

0800ae18 <Set_GPIO_Clock>:
 800ae18:	b500      	push	{lr}
 800ae1a:	b087      	sub	sp, #28
 800ae1c:	2807      	cmp	r0, #7
 800ae1e:	d859      	bhi.n	800aed4 <Set_GPIO_Clock+0xbc>
 800ae20:	e8df f000 	tbb	[pc, r0]
 800ae24:	3c2e2012 	.word	0x3c2e2012
 800ae28:	0458584a 	.word	0x0458584a
 800ae2c:	4b2d      	ldr	r3, [pc, #180]	; (800aee4 <Set_GPIO_Clock+0xcc>)
 800ae2e:	482e      	ldr	r0, [pc, #184]	; (800aee8 <Set_GPIO_Clock+0xd0>)
 800ae30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ae36:	631a      	str	r2, [r3, #48]	; 0x30
 800ae38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae3e:	9305      	str	r3, [sp, #20]
 800ae40:	9b05      	ldr	r3, [sp, #20]
 800ae42:	b007      	add	sp, #28
 800ae44:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae48:	4b26      	ldr	r3, [pc, #152]	; (800aee4 <Set_GPIO_Clock+0xcc>)
 800ae4a:	4828      	ldr	r0, [pc, #160]	; (800aeec <Set_GPIO_Clock+0xd4>)
 800ae4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae4e:	f042 0201 	orr.w	r2, r2, #1
 800ae52:	631a      	str	r2, [r3, #48]	; 0x30
 800ae54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae56:	f003 0301 	and.w	r3, r3, #1
 800ae5a:	9300      	str	r3, [sp, #0]
 800ae5c:	9b00      	ldr	r3, [sp, #0]
 800ae5e:	b007      	add	sp, #28
 800ae60:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae64:	4b1f      	ldr	r3, [pc, #124]	; (800aee4 <Set_GPIO_Clock+0xcc>)
 800ae66:	4822      	ldr	r0, [pc, #136]	; (800aef0 <Set_GPIO_Clock+0xd8>)
 800ae68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae6a:	f042 0202 	orr.w	r2, r2, #2
 800ae6e:	631a      	str	r2, [r3, #48]	; 0x30
 800ae70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae72:	f003 0302 	and.w	r3, r3, #2
 800ae76:	9301      	str	r3, [sp, #4]
 800ae78:	9b01      	ldr	r3, [sp, #4]
 800ae7a:	b007      	add	sp, #28
 800ae7c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae80:	4b18      	ldr	r3, [pc, #96]	; (800aee4 <Set_GPIO_Clock+0xcc>)
 800ae82:	481c      	ldr	r0, [pc, #112]	; (800aef4 <Set_GPIO_Clock+0xdc>)
 800ae84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae86:	f042 0204 	orr.w	r2, r2, #4
 800ae8a:	631a      	str	r2, [r3, #48]	; 0x30
 800ae8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae8e:	f003 0304 	and.w	r3, r3, #4
 800ae92:	9302      	str	r3, [sp, #8]
 800ae94:	9b02      	ldr	r3, [sp, #8]
 800ae96:	b007      	add	sp, #28
 800ae98:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae9c:	4b11      	ldr	r3, [pc, #68]	; (800aee4 <Set_GPIO_Clock+0xcc>)
 800ae9e:	4816      	ldr	r0, [pc, #88]	; (800aef8 <Set_GPIO_Clock+0xe0>)
 800aea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aea2:	f042 0208 	orr.w	r2, r2, #8
 800aea6:	631a      	str	r2, [r3, #48]	; 0x30
 800aea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeaa:	f003 0308 	and.w	r3, r3, #8
 800aeae:	9303      	str	r3, [sp, #12]
 800aeb0:	9b03      	ldr	r3, [sp, #12]
 800aeb2:	b007      	add	sp, #28
 800aeb4:	f85d fb04 	ldr.w	pc, [sp], #4
 800aeb8:	4b0a      	ldr	r3, [pc, #40]	; (800aee4 <Set_GPIO_Clock+0xcc>)
 800aeba:	4810      	ldr	r0, [pc, #64]	; (800aefc <Set_GPIO_Clock+0xe4>)
 800aebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aebe:	f042 0210 	orr.w	r2, r2, #16
 800aec2:	631a      	str	r2, [r3, #48]	; 0x30
 800aec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aec6:	f003 0310 	and.w	r3, r3, #16
 800aeca:	9304      	str	r3, [sp, #16]
 800aecc:	9b04      	ldr	r3, [sp, #16]
 800aece:	b007      	add	sp, #28
 800aed0:	f85d fb04 	ldr.w	pc, [sp], #4
 800aed4:	480a      	ldr	r0, [pc, #40]	; (800af00 <Set_GPIO_Clock+0xe8>)
 800aed6:	f000 f989 	bl	800b1ec <error>
 800aeda:	2000      	movs	r0, #0
 800aedc:	b007      	add	sp, #28
 800aede:	f85d fb04 	ldr.w	pc, [sp], #4
 800aee2:	bf00      	nop
 800aee4:	40023800 	.word	0x40023800
 800aee8:	40021c00 	.word	0x40021c00
 800aeec:	40020000 	.word	0x40020000
 800aef0:	40020400 	.word	0x40020400
 800aef4:	40020800 	.word	0x40020800
 800aef8:	40020c00 	.word	0x40020c00
 800aefc:	40021000 	.word	0x40021000
 800af00:	0801c3e4 	.word	0x0801c3e4

0800af04 <pin_function>:
 800af04:	b530      	push	{r4, r5, lr}
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	b087      	sub	sp, #28
 800af0a:	4605      	mov	r5, r0
 800af0c:	460c      	mov	r4, r1
 800af0e:	d01b      	beq.n	800af48 <pin_function+0x44>
 800af10:	f3c5 1003 	ubfx	r0, r5, #4, #4
 800af14:	f7ff ff80 	bl	800ae18 <Set_GPIO_Clock>
 800af18:	f005 050f 	and.w	r5, r5, #15
 800af1c:	f004 010f 	and.w	r1, r4, #15
 800af20:	4a0c      	ldr	r2, [pc, #48]	; (800af54 <pin_function+0x50>)
 800af22:	2301      	movs	r3, #1
 800af24:	40ab      	lsls	r3, r5
 800af26:	9301      	str	r3, [sp, #4]
 800af28:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 800af2c:	9502      	str	r5, [sp, #8]
 800af2e:	f3c4 1202 	ubfx	r2, r4, #4, #3
 800af32:	2303      	movs	r3, #3
 800af34:	f3c4 14c3 	ubfx	r4, r4, #7, #4
 800af38:	a901      	add	r1, sp, #4
 800af3a:	9203      	str	r2, [sp, #12]
 800af3c:	9405      	str	r4, [sp, #20]
 800af3e:	9304      	str	r3, [sp, #16]
 800af40:	f7ff f864 	bl	800a00c <HAL_GPIO_Init>
 800af44:	b007      	add	sp, #28
 800af46:	bd30      	pop	{r4, r5, pc}
 800af48:	4803      	ldr	r0, [pc, #12]	; (800af58 <pin_function+0x54>)
 800af4a:	4904      	ldr	r1, [pc, #16]	; (800af5c <pin_function+0x58>)
 800af4c:	2281      	movs	r2, #129	; 0x81
 800af4e:	f000 f941 	bl	800b1d4 <mbed_assert_internal>
 800af52:	e7dd      	b.n	800af10 <pin_function+0xc>
 800af54:	0801c3b0 	.word	0x0801c3b0
 800af58:	0801c334 	.word	0x0801c334
 800af5c:	0801c408 	.word	0x0801c408

0800af60 <pin_mode>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	1c43      	adds	r3, r0, #1
 800af64:	4604      	mov	r4, r0
 800af66:	460d      	mov	r5, r1
 800af68:	d014      	beq.n	800af94 <pin_mode+0x34>
 800af6a:	f3c4 1003 	ubfx	r0, r4, #4, #4
 800af6e:	f7ff ff53 	bl	800ae18 <Set_GPIO_Clock>
 800af72:	f004 040f 	and.w	r4, r4, #15
 800af76:	68c2      	ldr	r2, [r0, #12]
 800af78:	0064      	lsls	r4, r4, #1
 800af7a:	2303      	movs	r3, #3
 800af7c:	40a3      	lsls	r3, r4
 800af7e:	ea22 0303 	bic.w	r3, r2, r3
 800af82:	60c3      	str	r3, [r0, #12]
 800af84:	2d02      	cmp	r5, #2
 800af86:	68c3      	ldr	r3, [r0, #12]
 800af88:	bf8c      	ite	hi
 800af8a:	2500      	movhi	r5, #0
 800af8c:	40a5      	lslls	r5, r4
 800af8e:	431d      	orrs	r5, r3
 800af90:	60c5      	str	r5, [r0, #12]
 800af92:	bd38      	pop	{r3, r4, r5, pc}
 800af94:	4802      	ldr	r0, [pc, #8]	; (800afa0 <pin_mode+0x40>)
 800af96:	4903      	ldr	r1, [pc, #12]	; (800afa4 <pin_mode+0x44>)
 800af98:	22a6      	movs	r2, #166	; 0xa6
 800af9a:	f000 f91b 	bl	800b1d4 <mbed_assert_internal>
 800af9e:	e7e4      	b.n	800af6a <pin_mode+0xa>
 800afa0:	0801c334 	.word	0x0801c334
 800afa4:	0801c408 	.word	0x0801c408

0800afa8 <init_uart>:
 800afa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afaa:	f990 2019 	ldrsb.w	r2, [r0, #25]
 800afae:	4b12      	ldr	r3, [pc, #72]	; (800aff8 <init_uart+0x50>)
 800afb0:	6801      	ldr	r1, [r0, #0]
 800afb2:	6887      	ldr	r7, [r0, #8]
 800afb4:	68c6      	ldr	r6, [r0, #12]
 800afb6:	6905      	ldr	r5, [r0, #16]
 800afb8:	6944      	ldr	r4, [r0, #20]
 800afba:	6019      	str	r1, [r3, #0]
 800afbc:	3201      	adds	r2, #1
 800afbe:	f04f 0100 	mov.w	r1, #0
 800afc2:	605f      	str	r7, [r3, #4]
 800afc4:	609e      	str	r6, [r3, #8]
 800afc6:	60dd      	str	r5, [r3, #12]
 800afc8:	611c      	str	r4, [r3, #16]
 800afca:	6199      	str	r1, [r3, #24]
 800afcc:	d010      	beq.n	800aff0 <init_uart+0x48>
 800afce:	f990 2018 	ldrsb.w	r2, [r0, #24]
 800afd2:	3201      	adds	r2, #1
 800afd4:	bf0c      	ite	eq
 800afd6:	2204      	moveq	r2, #4
 800afd8:	220c      	movne	r2, #12
 800afda:	615a      	str	r2, [r3, #20]
 800afdc:	4806      	ldr	r0, [pc, #24]	; (800aff8 <init_uart+0x50>)
 800afde:	f7ff fd85 	bl	800aaec <HAL_UART_Init>
 800afe2:	b900      	cbnz	r0, 800afe6 <init_uart+0x3e>
 800afe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afe6:	4805      	ldr	r0, [pc, #20]	; (800affc <init_uart+0x54>)
 800afe8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800afec:	f000 b8fe 	b.w	800b1ec <error>
 800aff0:	2208      	movs	r2, #8
 800aff2:	615a      	str	r2, [r3, #20]
 800aff4:	e7f2      	b.n	800afdc <init_uart+0x34>
 800aff6:	bf00      	nop
 800aff8:	20000d60 	.word	0x20000d60
 800affc:	0801c46c 	.word	0x0801c46c

0800b000 <serial_init>:
 800b000:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b002:	4604      	mov	r4, r0
 800b004:	b085      	sub	sp, #20
 800b006:	4608      	mov	r0, r1
 800b008:	460e      	mov	r6, r1
 800b00a:	493c      	ldr	r1, [pc, #240]	; (800b0fc <serial_init+0xfc>)
 800b00c:	4615      	mov	r5, r2
 800b00e:	f000 f957 	bl	800b2c0 <pinmap_peripheral>
 800b012:	493b      	ldr	r1, [pc, #236]	; (800b100 <serial_init+0x100>)
 800b014:	4607      	mov	r7, r0
 800b016:	4628      	mov	r0, r5
 800b018:	f000 f952 	bl	800b2c0 <pinmap_peripheral>
 800b01c:	4601      	mov	r1, r0
 800b01e:	4638      	mov	r0, r7
 800b020:	f000 f93c 	bl	800b29c <pinmap_merge>
 800b024:	1c41      	adds	r1, r0, #1
 800b026:	6020      	str	r0, [r4, #0]
 800b028:	d061      	beq.n	800b0ee <serial_init+0xee>
 800b02a:	4b36      	ldr	r3, [pc, #216]	; (800b104 <serial_init+0x104>)
 800b02c:	4298      	cmp	r0, r3
 800b02e:	d047      	beq.n	800b0c0 <serial_init+0xc0>
 800b030:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b034:	4298      	cmp	r0, r3
 800b036:	d036      	beq.n	800b0a6 <serial_init+0xa6>
 800b038:	f5a3 4350 	sub.w	r3, r3, #53248	; 0xd000
 800b03c:	4298      	cmp	r0, r3
 800b03e:	d025      	beq.n	800b08c <serial_init+0x8c>
 800b040:	4630      	mov	r0, r6
 800b042:	492e      	ldr	r1, [pc, #184]	; (800b0fc <serial_init+0xfc>)
 800b044:	f000 f908 	bl	800b258 <pinmap_pinout>
 800b048:	4628      	mov	r0, r5
 800b04a:	492d      	ldr	r1, [pc, #180]	; (800b100 <serial_init+0x100>)
 800b04c:	f000 f904 	bl	800b258 <pinmap_pinout>
 800b050:	1c72      	adds	r2, r6, #1
 800b052:	d003      	beq.n	800b05c <serial_init+0x5c>
 800b054:	4630      	mov	r0, r6
 800b056:	2101      	movs	r1, #1
 800b058:	f7ff ff82 	bl	800af60 <pin_mode>
 800b05c:	1c6b      	adds	r3, r5, #1
 800b05e:	d003      	beq.n	800b068 <serial_init+0x68>
 800b060:	4628      	mov	r0, r5
 800b062:	2101      	movs	r1, #1
 800b064:	f7ff ff7c 	bl	800af60 <pin_mode>
 800b068:	2300      	movs	r3, #0
 800b06a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800b06e:	60a2      	str	r2, [r4, #8]
 800b070:	60e3      	str	r3, [r4, #12]
 800b072:	6123      	str	r3, [r4, #16]
 800b074:	6163      	str	r3, [r4, #20]
 800b076:	7626      	strb	r6, [r4, #24]
 800b078:	7665      	strb	r5, [r4, #25]
 800b07a:	4620      	mov	r0, r4
 800b07c:	f7ff ff94 	bl	800afa8 <init_uart>
 800b080:	4b21      	ldr	r3, [pc, #132]	; (800b108 <serial_init+0x108>)
 800b082:	6822      	ldr	r2, [r4, #0]
 800b084:	429a      	cmp	r2, r3
 800b086:	d028      	beq.n	800b0da <serial_init+0xda>
 800b088:	b005      	add	sp, #20
 800b08a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b08c:	4b1f      	ldr	r3, [pc, #124]	; (800b10c <serial_init+0x10c>)
 800b08e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b090:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b094:	641a      	str	r2, [r3, #64]	; 0x40
 800b096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b09c:	9302      	str	r3, [sp, #8]
 800b09e:	2301      	movs	r3, #1
 800b0a0:	9a02      	ldr	r2, [sp, #8]
 800b0a2:	6063      	str	r3, [r4, #4]
 800b0a4:	e7cc      	b.n	800b040 <serial_init+0x40>
 800b0a6:	4b19      	ldr	r3, [pc, #100]	; (800b10c <serial_init+0x10c>)
 800b0a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0aa:	f042 0220 	orr.w	r2, r2, #32
 800b0ae:	645a      	str	r2, [r3, #68]	; 0x44
 800b0b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0b2:	f003 0320 	and.w	r3, r3, #32
 800b0b6:	9303      	str	r3, [sp, #12]
 800b0b8:	9b03      	ldr	r3, [sp, #12]
 800b0ba:	2305      	movs	r3, #5
 800b0bc:	6063      	str	r3, [r4, #4]
 800b0be:	e7bf      	b.n	800b040 <serial_init+0x40>
 800b0c0:	4b12      	ldr	r3, [pc, #72]	; (800b10c <serial_init+0x10c>)
 800b0c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0c4:	f042 0210 	orr.w	r2, r2, #16
 800b0c8:	645a      	str	r2, [r3, #68]	; 0x44
 800b0ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0cc:	f003 0310 	and.w	r3, r3, #16
 800b0d0:	9301      	str	r3, [sp, #4]
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	9a01      	ldr	r2, [sp, #4]
 800b0d6:	6063      	str	r3, [r4, #4]
 800b0d8:	e7b2      	b.n	800b040 <serial_init+0x40>
 800b0da:	4b0d      	ldr	r3, [pc, #52]	; (800b110 <serial_init+0x110>)
 800b0dc:	480d      	ldr	r0, [pc, #52]	; (800b114 <serial_init+0x114>)
 800b0de:	4621      	mov	r1, r4
 800b0e0:	221c      	movs	r2, #28
 800b0e2:	2401      	movs	r4, #1
 800b0e4:	601c      	str	r4, [r3, #0]
 800b0e6:	f000 fc6c 	bl	800b9c2 <memcpy>
 800b0ea:	b005      	add	sp, #20
 800b0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0ee:	480a      	ldr	r0, [pc, #40]	; (800b118 <serial_init+0x118>)
 800b0f0:	490a      	ldr	r1, [pc, #40]	; (800b11c <serial_init+0x11c>)
 800b0f2:	2253      	movs	r2, #83	; 0x53
 800b0f4:	f000 f86e 	bl	800b1d4 <mbed_assert_internal>
 800b0f8:	6820      	ldr	r0, [r4, #0]
 800b0fa:	e796      	b.n	800b02a <serial_init+0x2a>
 800b0fc:	0801c614 	.word	0x0801c614
 800b100:	0801c5c0 	.word	0x0801c5c0
 800b104:	40011000 	.word	0x40011000
 800b108:	40004400 	.word	0x40004400
 800b10c:	40023800 	.word	0x40023800
 800b110:	20000cac 	.word	0x20000cac
 800b114:	20000da0 	.word	0x20000da0
 800b118:	0801c484 	.word	0x0801c484
 800b11c:	0801c4a0 	.word	0x0801c4a0

0800b120 <serial_getc>:
 800b120:	6802      	ldr	r2, [r0, #0]
 800b122:	6813      	ldr	r3, [r2, #0]
 800b124:	069b      	lsls	r3, r3, #26
 800b126:	d5fc      	bpl.n	800b122 <serial_getc+0x2>
 800b128:	4b02      	ldr	r3, [pc, #8]	; (800b134 <serial_getc+0x14>)
 800b12a:	6850      	ldr	r0, [r2, #4]
 800b12c:	601a      	str	r2, [r3, #0]
 800b12e:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800b132:	4770      	bx	lr
 800b134:	20000d60 	.word	0x20000d60

0800b138 <serial_putc>:
 800b138:	6802      	ldr	r2, [r0, #0]
 800b13a:	6813      	ldr	r3, [r2, #0]
 800b13c:	061b      	lsls	r3, r3, #24
 800b13e:	d5fc      	bpl.n	800b13a <serial_putc+0x2>
 800b140:	4b02      	ldr	r3, [pc, #8]	; (800b14c <serial_putc+0x14>)
 800b142:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800b146:	6051      	str	r1, [r2, #4]
 800b148:	601a      	str	r2, [r3, #0]
 800b14a:	4770      	bx	lr
 800b14c:	20000d60 	.word	0x20000d60

0800b150 <us_ticker_init>:
 800b150:	4b05      	ldr	r3, [pc, #20]	; (800b168 <us_ticker_init+0x18>)
 800b152:	6818      	ldr	r0, [r3, #0]
 800b154:	b100      	cbz	r0, 800b158 <us_ticker_init+0x8>
 800b156:	4770      	bx	lr
 800b158:	4a04      	ldr	r2, [pc, #16]	; (800b16c <us_ticker_init+0x1c>)
 800b15a:	4905      	ldr	r1, [pc, #20]	; (800b170 <us_ticker_init+0x20>)
 800b15c:	6011      	str	r1, [r2, #0]
 800b15e:	2201      	movs	r2, #1
 800b160:	601a      	str	r2, [r3, #0]
 800b162:	f7fe bdeb 	b.w	8009d3c <HAL_InitTick>
 800b166:	bf00      	nop
 800b168:	20000cec 	.word	0x20000cec
 800b16c:	20000cb0 	.word	0x20000cb0
 800b170:	40000c00 	.word	0x40000c00

0800b174 <us_ticker_read>:
 800b174:	b508      	push	{r3, lr}
 800b176:	4b06      	ldr	r3, [pc, #24]	; (800b190 <us_ticker_read+0x1c>)
 800b178:	6818      	ldr	r0, [r3, #0]
 800b17a:	b930      	cbnz	r0, 800b18a <us_ticker_read+0x16>
 800b17c:	4a05      	ldr	r2, [pc, #20]	; (800b194 <us_ticker_read+0x20>)
 800b17e:	4906      	ldr	r1, [pc, #24]	; (800b198 <us_ticker_read+0x24>)
 800b180:	6011      	str	r1, [r2, #0]
 800b182:	2201      	movs	r2, #1
 800b184:	601a      	str	r2, [r3, #0]
 800b186:	f7fe fdd9 	bl	8009d3c <HAL_InitTick>
 800b18a:	4b03      	ldr	r3, [pc, #12]	; (800b198 <us_ticker_read+0x24>)
 800b18c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b18e:	bd08      	pop	{r3, pc}
 800b190:	20000cec 	.word	0x20000cec
 800b194:	20000cb0 	.word	0x20000cb0
 800b198:	40000c00 	.word	0x40000c00

0800b19c <us_ticker_set_interrupt>:
 800b19c:	4b03      	ldr	r3, [pc, #12]	; (800b1ac <us_ticker_set_interrupt+0x10>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	6358      	str	r0, [r3, #52]	; 0x34
 800b1a2:	68da      	ldr	r2, [r3, #12]
 800b1a4:	f042 0202 	orr.w	r2, r2, #2
 800b1a8:	60da      	str	r2, [r3, #12]
 800b1aa:	4770      	bx	lr
 800b1ac:	20000cb0 	.word	0x20000cb0

0800b1b0 <us_ticker_disable_interrupt>:
 800b1b0:	4b03      	ldr	r3, [pc, #12]	; (800b1c0 <us_ticker_disable_interrupt+0x10>)
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	68d3      	ldr	r3, [r2, #12]
 800b1b6:	f023 0302 	bic.w	r3, r3, #2
 800b1ba:	60d3      	str	r3, [r2, #12]
 800b1bc:	4770      	bx	lr
 800b1be:	bf00      	nop
 800b1c0:	20000cb0 	.word	0x20000cb0

0800b1c4 <us_ticker_clear_interrupt>:
 800b1c4:	4b02      	ldr	r3, [pc, #8]	; (800b1d0 <us_ticker_clear_interrupt+0xc>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f06f 0202 	mvn.w	r2, #2
 800b1cc:	611a      	str	r2, [r3, #16]
 800b1ce:	4770      	bx	lr
 800b1d0:	20000cb0 	.word	0x20000cb0

0800b1d4 <mbed_assert_internal>:
 800b1d4:	b410      	push	{r4}
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	4613      	mov	r3, r2
 800b1da:	4601      	mov	r1, r0
 800b1dc:	4622      	mov	r2, r4
 800b1de:	4802      	ldr	r0, [pc, #8]	; (800b1e8 <mbed_assert_internal+0x14>)
 800b1e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1e4:	f000 b802 	b.w	800b1ec <error>
 800b1e8:	0801c508 	.word	0x0801c508

0800b1ec <error>:
 800b1ec:	b40f      	push	{r0, r1, r2, r3}
 800b1ee:	b500      	push	{lr}
 800b1f0:	4b06      	ldr	r3, [pc, #24]	; (800b20c <error+0x20>)
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	aa04      	add	r2, sp, #16
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f852 1b04 	ldr.w	r1, [r2], #4
 800b1fc:	68d8      	ldr	r0, [r3, #12]
 800b1fe:	9201      	str	r2, [sp, #4]
 800b200:	f000 fdca 	bl	800bd98 <vfiprintf>
 800b204:	2001      	movs	r0, #1
 800b206:	f000 fa03 	bl	800b610 <exit>
 800b20a:	bf00      	nop
 800b20c:	20000ac0 	.word	0x20000ac0

0800b210 <gpio_init_out>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	460d      	mov	r5, r1
 800b214:	4604      	mov	r4, r0
 800b216:	f7ff fdc5 	bl	800ada4 <gpio_init>
 800b21a:	3501      	adds	r5, #1
 800b21c:	d011      	beq.n	800b242 <gpio_init_out+0x32>
 800b21e:	f994 3000 	ldrsb.w	r3, [r4]
 800b222:	3301      	adds	r3, #1
 800b224:	d00e      	beq.n	800b244 <gpio_init_out+0x34>
 800b226:	6863      	ldr	r3, [r4, #4]
 800b228:	68e2      	ldr	r2, [r4, #12]
 800b22a:	041b      	lsls	r3, r3, #16
 800b22c:	4620      	mov	r0, r4
 800b22e:	6013      	str	r3, [r2, #0]
 800b230:	2101      	movs	r1, #1
 800b232:	f7ff fdd1 	bl	800add8 <gpio_dir>
 800b236:	4620      	mov	r0, r4
 800b238:	2100      	movs	r1, #0
 800b23a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b23e:	f7ff bdc7 	b.w	800add0 <gpio_mode>
 800b242:	bd38      	pop	{r3, r4, r5, pc}
 800b244:	4802      	ldr	r0, [pc, #8]	; (800b250 <gpio_init_out+0x40>)
 800b246:	4903      	ldr	r1, [pc, #12]	; (800b254 <gpio_init_out+0x44>)
 800b248:	2234      	movs	r2, #52	; 0x34
 800b24a:	f7ff ffc3 	bl	800b1d4 <mbed_assert_internal>
 800b24e:	e7ea      	b.n	800b226 <gpio_init_out+0x16>
 800b250:	0801c204 	.word	0x0801c204
 800b254:	0801c2a4 	.word	0x0801c2a4

0800b258 <pinmap_pinout>:
 800b258:	1c43      	adds	r3, r0, #1
 800b25a:	b510      	push	{r4, lr}
 800b25c:	4604      	mov	r4, r0
 800b25e:	d019      	beq.n	800b294 <pinmap_pinout+0x3c>
 800b260:	f991 3000 	ldrsb.w	r3, [r1]
 800b264:	1c58      	adds	r0, r3, #1
 800b266:	d104      	bne.n	800b272 <pinmap_pinout+0x1a>
 800b268:	e00f      	b.n	800b28a <pinmap_pinout+0x32>
 800b26a:	f911 3f0c 	ldrsb.w	r3, [r1, #12]!
 800b26e:	1c5a      	adds	r2, r3, #1
 800b270:	d00b      	beq.n	800b28a <pinmap_pinout+0x32>
 800b272:	429c      	cmp	r4, r3
 800b274:	d1f9      	bne.n	800b26a <pinmap_pinout+0x12>
 800b276:	4620      	mov	r0, r4
 800b278:	6889      	ldr	r1, [r1, #8]
 800b27a:	f7ff fe43 	bl	800af04 <pin_function>
 800b27e:	4620      	mov	r0, r4
 800b280:	2100      	movs	r1, #0
 800b282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b286:	f7ff be6b 	b.w	800af60 <pin_mode>
 800b28a:	4803      	ldr	r0, [pc, #12]	; (800b298 <pinmap_pinout+0x40>)
 800b28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b290:	f7ff bfac 	b.w	800b1ec <error>
 800b294:	bd10      	pop	{r4, pc}
 800b296:	bf00      	nop
 800b298:	0801c53c 	.word	0x0801c53c

0800b29c <pinmap_merge>:
 800b29c:	4288      	cmp	r0, r1
 800b29e:	d00a      	beq.n	800b2b6 <pinmap_merge+0x1a>
 800b2a0:	1c42      	adds	r2, r0, #1
 800b2a2:	d009      	beq.n	800b2b8 <pinmap_merge+0x1c>
 800b2a4:	3101      	adds	r1, #1
 800b2a6:	d006      	beq.n	800b2b6 <pinmap_merge+0x1a>
 800b2a8:	b508      	push	{r3, lr}
 800b2aa:	4804      	ldr	r0, [pc, #16]	; (800b2bc <pinmap_merge+0x20>)
 800b2ac:	f7ff ff9e 	bl	800b1ec <error>
 800b2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b4:	bd08      	pop	{r3, pc}
 800b2b6:	4770      	bx	lr
 800b2b8:	4608      	mov	r0, r1
 800b2ba:	4770      	bx	lr
 800b2bc:	0801c550 	.word	0x0801c550

0800b2c0 <pinmap_peripheral>:
 800b2c0:	1c42      	adds	r2, r0, #1
 800b2c2:	d00f      	beq.n	800b2e4 <pinmap_peripheral+0x24>
 800b2c4:	b508      	push	{r3, lr}
 800b2c6:	f991 3000 	ldrsb.w	r3, [r1]
 800b2ca:	1c5a      	adds	r2, r3, #1
 800b2cc:	d104      	bne.n	800b2d8 <pinmap_peripheral+0x18>
 800b2ce:	e00a      	b.n	800b2e6 <pinmap_peripheral+0x26>
 800b2d0:	f911 3f0c 	ldrsb.w	r3, [r1, #12]!
 800b2d4:	1c5a      	adds	r2, r3, #1
 800b2d6:	d006      	beq.n	800b2e6 <pinmap_peripheral+0x26>
 800b2d8:	4298      	cmp	r0, r3
 800b2da:	d1f9      	bne.n	800b2d0 <pinmap_peripheral+0x10>
 800b2dc:	6848      	ldr	r0, [r1, #4]
 800b2de:	1c41      	adds	r1, r0, #1
 800b2e0:	d001      	beq.n	800b2e6 <pinmap_peripheral+0x26>
 800b2e2:	bd08      	pop	{r3, pc}
 800b2e4:	4770      	bx	lr
 800b2e6:	4803      	ldr	r0, [pc, #12]	; (800b2f4 <pinmap_peripheral+0x34>)
 800b2e8:	f7ff ff80 	bl	800b1ec <error>
 800b2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f0:	e7f7      	b.n	800b2e2 <pinmap_peripheral+0x22>
 800b2f2:	bf00      	nop
 800b2f4:	0801c564 	.word	0x0801c564

0800b2f8 <ticker_set_handler>:
 800b2f8:	b538      	push	{r3, r4, r5, lr}
 800b2fa:	6803      	ldr	r3, [r0, #0]
 800b2fc:	4604      	mov	r4, r0
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	460d      	mov	r5, r1
 800b302:	4798      	blx	r3
 800b304:	6863      	ldr	r3, [r4, #4]
 800b306:	601d      	str	r5, [r3, #0]
 800b308:	bd38      	pop	{r3, r4, r5, pc}
 800b30a:	bf00      	nop

0800b30c <ticker_irq_handler>:
 800b30c:	6803      	ldr	r3, [r0, #0]
 800b30e:	b570      	push	{r4, r5, r6, lr}
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	4605      	mov	r5, r0
 800b314:	4798      	blx	r3
 800b316:	686b      	ldr	r3, [r5, #4]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	b183      	cbz	r3, 800b33e <ticker_irq_handler+0x32>
 800b31c:	682a      	ldr	r2, [r5, #0]
 800b31e:	681c      	ldr	r4, [r3, #0]
 800b320:	6853      	ldr	r3, [r2, #4]
 800b322:	4798      	blx	r3
 800b324:	1a20      	subs	r0, r4, r0
 800b326:	2800      	cmp	r0, #0
 800b328:	686a      	ldr	r2, [r5, #4]
 800b32a:	dc0d      	bgt.n	800b348 <ticker_irq_handler+0x3c>
 800b32c:	6850      	ldr	r0, [r2, #4]
 800b32e:	6811      	ldr	r1, [r2, #0]
 800b330:	6883      	ldr	r3, [r0, #8]
 800b332:	6053      	str	r3, [r2, #4]
 800b334:	2900      	cmp	r1, #0
 800b336:	d0f0      	beq.n	800b31a <ticker_irq_handler+0xe>
 800b338:	6840      	ldr	r0, [r0, #4]
 800b33a:	4788      	blx	r1
 800b33c:	e7eb      	b.n	800b316 <ticker_irq_handler+0xa>
 800b33e:	682b      	ldr	r3, [r5, #0]
 800b340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	4718      	bx	r3
 800b348:	682b      	ldr	r3, [r5, #0]
 800b34a:	6852      	ldr	r2, [r2, #4]
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	6810      	ldr	r0, [r2, #0]
 800b350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b354:	4718      	bx	r3
 800b356:	bf00      	nop

0800b358 <ticker_insert_event>:
 800b358:	b530      	push	{r4, r5, lr}
 800b35a:	b083      	sub	sp, #12
 800b35c:	b672      	cpsid	i
 800b35e:	6844      	ldr	r4, [r0, #4]
 800b360:	600a      	str	r2, [r1, #0]
 800b362:	6865      	ldr	r5, [r4, #4]
 800b364:	604b      	str	r3, [r1, #4]
 800b366:	b18d      	cbz	r5, 800b38c <ticker_insert_event+0x34>
 800b368:	682b      	ldr	r3, [r5, #0]
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	da05      	bge.n	800b37c <ticker_insert_event+0x24>
 800b370:	e00c      	b.n	800b38c <ticker_insert_event+0x34>
 800b372:	681c      	ldr	r4, [r3, #0]
 800b374:	1b14      	subs	r4, r2, r4
 800b376:	2c00      	cmp	r4, #0
 800b378:	db03      	blt.n	800b382 <ticker_insert_event+0x2a>
 800b37a:	461d      	mov	r5, r3
 800b37c:	68ab      	ldr	r3, [r5, #8]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d1f7      	bne.n	800b372 <ticker_insert_event+0x1a>
 800b382:	60a9      	str	r1, [r5, #8]
 800b384:	608b      	str	r3, [r1, #8]
 800b386:	b662      	cpsie	i
 800b388:	b003      	add	sp, #12
 800b38a:	bd30      	pop	{r4, r5, pc}
 800b38c:	6803      	ldr	r3, [r0, #0]
 800b38e:	6061      	str	r1, [r4, #4]
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	9101      	str	r1, [sp, #4]
 800b394:	4610      	mov	r0, r2
 800b396:	4798      	blx	r3
 800b398:	462b      	mov	r3, r5
 800b39a:	9901      	ldr	r1, [sp, #4]
 800b39c:	e7f2      	b.n	800b384 <ticker_insert_event+0x2c>
 800b39e:	bf00      	nop

0800b3a0 <ticker_remove_event>:
 800b3a0:	b508      	push	{r3, lr}
 800b3a2:	b672      	cpsid	i
 800b3a4:	6843      	ldr	r3, [r0, #4]
 800b3a6:	685a      	ldr	r2, [r3, #4]
 800b3a8:	428a      	cmp	r2, r1
 800b3aa:	d011      	beq.n	800b3d0 <ticker_remove_event+0x30>
 800b3ac:	b14a      	cbz	r2, 800b3c2 <ticker_remove_event+0x22>
 800b3ae:	6893      	ldr	r3, [r2, #8]
 800b3b0:	428b      	cmp	r3, r1
 800b3b2:	d008      	beq.n	800b3c6 <ticker_remove_event+0x26>
 800b3b4:	b12b      	cbz	r3, 800b3c2 <ticker_remove_event+0x22>
 800b3b6:	689a      	ldr	r2, [r3, #8]
 800b3b8:	428a      	cmp	r2, r1
 800b3ba:	d005      	beq.n	800b3c8 <ticker_remove_event+0x28>
 800b3bc:	4613      	mov	r3, r2
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1f9      	bne.n	800b3b6 <ticker_remove_event+0x16>
 800b3c2:	b662      	cpsie	i
 800b3c4:	bd08      	pop	{r3, pc}
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	688a      	ldr	r2, [r1, #8]
 800b3ca:	609a      	str	r2, [r3, #8]
 800b3cc:	b662      	cpsie	i
 800b3ce:	bd08      	pop	{r3, pc}
 800b3d0:	6892      	ldr	r2, [r2, #8]
 800b3d2:	605a      	str	r2, [r3, #4]
 800b3d4:	6803      	ldr	r3, [r0, #0]
 800b3d6:	b122      	cbz	r2, 800b3e2 <ticker_remove_event+0x42>
 800b3d8:	6810      	ldr	r0, [r2, #0]
 800b3da:	691b      	ldr	r3, [r3, #16]
 800b3dc:	4798      	blx	r3
 800b3de:	b662      	cpsie	i
 800b3e0:	bd08      	pop	{r3, pc}
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	4798      	blx	r3
 800b3e6:	e7ec      	b.n	800b3c2 <ticker_remove_event+0x22>

0800b3e8 <get_us_ticker_data>:
 800b3e8:	4800      	ldr	r0, [pc, #0]	; (800b3ec <get_us_ticker_data+0x4>)
 800b3ea:	4770      	bx	lr
 800b3ec:	0801c5b8 	.word	0x0801c5b8

0800b3f0 <us_ticker_irq_handler>:
 800b3f0:	4801      	ldr	r0, [pc, #4]	; (800b3f8 <us_ticker_irq_handler+0x8>)
 800b3f2:	f7ff bf8b 	b.w	800b30c <ticker_irq_handler>
 800b3f6:	bf00      	nop
 800b3f8:	0801c5b8 	.word	0x0801c5b8

0800b3fc <wait_us>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	4605      	mov	r5, r0
 800b400:	f7ff feb8 	bl	800b174 <us_ticker_read>
 800b404:	4604      	mov	r4, r0
 800b406:	f7ff feb5 	bl	800b174 <us_ticker_read>
 800b40a:	1b00      	subs	r0, r0, r4
 800b40c:	42a8      	cmp	r0, r5
 800b40e:	d3fa      	bcc.n	800b406 <wait_us+0xa>
 800b410:	bd38      	pop	{r3, r4, r5, pc}
 800b412:	bf00      	nop

0800b414 <wait>:
 800b414:	ee07 0a10 	vmov	s14, r0
 800b418:	eddf 7a04 	vldr	s15, [pc, #16]	; 800b42c <wait+0x18>
 800b41c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b424:	ee17 0a90 	vmov	r0, s15
 800b428:	f7ff bfe8 	b.w	800b3fc <wait_us>
 800b42c:	49742400 	.word	0x49742400

0800b430 <wait_ms>:
 800b430:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b434:	fb03 f000 	mul.w	r0, r3, r0
 800b438:	f7ff bfe0 	b.w	800b3fc <wait_us>

0800b43c <LLOS_lwIPTaskRun>:
}

void LLOS_lwIPTaskRun(void* thread)
{
    sys_thread_t t = (sys_thread_t)thread;
    void (*func)(void *arg) = t->thread;
 800b43c:	b508      	push	{r3, lr}
    
    func(t->arg);
 800b43e:	6943      	ldr	r3, [r0, #20]
}

 800b440:	6980      	ldr	r0, [r0, #24]
 800b442:	4798      	blx	r3
 800b444:	bd08      	pop	{r3, pc}
 800b446:	bf00      	nop

0800b448 <osSemaphoreDelete>:
}

osStatus osSemaphoreDelete(osSemaphoreId semaphore_id)
{
    return (osStatus)LLOS_osSemaphoreDelete((void*)semaphore_id);
}
 800b448:	b508      	push	{r3, lr}

 800b44a:	f7fd fe3f 	bl	80090cc <LLOS_osSemaphoreDelete>
osMutexId osMutexCreate(const osMutexDef_t *mutex_def)
 800b44e:	bd08      	pop	{r3, pc}

0800b450 <_Z41__static_initialization_and_destruction_0ii>:
 800b450:	2801      	cmp	r0, #1
 800b452:	d125      	bne.n	800b4a0 <_Z41__static_initialization_and_destruction_0ii+0x50>
 800b454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b458:	4299      	cmp	r1, r3
 800b45a:	d121      	bne.n	800b4a0 <_Z41__static_initialization_and_destruction_0ii+0x50>
 800b45c:	b570      	push	{r4, r5, r6, lr}
 800b45e:	4e11      	ldr	r6, [pc, #68]	; (800b4a4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800b460:	4630      	mov	r0, r6
 800b462:	2100      	movs	r1, #0
 800b464:	f000 f830 	bl	800b4c8 <_ZN4rtos9SemaphoreC1El>
 800b468:	4d0f      	ldr	r5, [pc, #60]	; (800b4a8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800b46a:	4c10      	ldr	r4, [pc, #64]	; (800b4ac <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800b46c:	4630      	mov	r0, r6
 800b46e:	4629      	mov	r1, r5
 800b470:	4622      	mov	r2, r4
 800b472:	f000 f833 	bl	800b4dc <__aeabi_atexit>
 800b476:	4e0e      	ldr	r6, [pc, #56]	; (800b4b0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800b478:	4630      	mov	r0, r6
 800b47a:	2100      	movs	r1, #0
 800b47c:	f000 f824 	bl	800b4c8 <_ZN4rtos9SemaphoreC1El>
 800b480:	4630      	mov	r0, r6
 800b482:	4629      	mov	r1, r5
 800b484:	4622      	mov	r2, r4
 800b486:	f000 f829 	bl	800b4dc <__aeabi_atexit>
 800b48a:	4e0a      	ldr	r6, [pc, #40]	; (800b4b4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800b48c:	4630      	mov	r0, r6
 800b48e:	2100      	movs	r1, #0
 800b490:	f000 f81a 	bl	800b4c8 <_ZN4rtos9SemaphoreC1El>
 800b494:	4630      	mov	r0, r6
 800b496:	4629      	mov	r1, r5
 800b498:	4622      	mov	r2, r4
 800b49a:	f000 f81f 	bl	800b4dc <__aeabi_atexit>
 800b49e:	bd70      	pop	{r4, r5, r6, pc}
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop
 800b4a4:	20000cf8 	.word	0x20000cf8
 800b4a8:	0800b4cd 	.word	0x0800b4cd
 800b4ac:	200001a0 	.word	0x200001a0
 800b4b0:	20000d10 	.word	0x20000d10
 800b4b4:	20000d04 	.word	0x20000d04

0800b4b8 <_GLOBAL__sub_I__ZN17EthernetInterface4initEv>:
 800b4b8:	b508      	push	{r3, lr}
 800b4ba:	2001      	movs	r0, #1
 800b4bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b4c0:	f7ff ffc6 	bl	800b450 <_Z41__static_initialization_and_destruction_0ii>
 800b4c4:	bd08      	pop	{r3, pc}
 800b4c6:	bf00      	nop

0800b4c8 <_ZN4rtos9SemaphoreC1El>:
 800b4c8:	6081      	str	r1, [r0, #8]
 800b4ca:	4770      	bx	lr

0800b4cc <_ZN4rtos9SemaphoreD1Ev>:
 800b4cc:	b510      	push	{r4, lr}
 800b4ce:	4604      	mov	r4, r0
 800b4d0:	6800      	ldr	r0, [r0, #0]
 800b4d2:	f7ff ffb9 	bl	800b448 <osSemaphoreDelete>
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	bd10      	pop	{r4, pc}
 800b4da:	bf00      	nop

0800b4dc <__aeabi_atexit>:
 800b4dc:	4603      	mov	r3, r0
 800b4de:	4608      	mov	r0, r1
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	f000 b881 	b.w	800b5e8 <__cxa_atexit>

0800b4e6 <abort>:
 800b4e6:	b508      	push	{r3, lr}
 800b4e8:	2006      	movs	r0, #6
 800b4ea:	f001 fb1b 	bl	800cb24 <raise>
 800b4ee:	2001      	movs	r0, #1
 800b4f0:	f7fe fd3e 	bl	8009f70 <_exit>

0800b4f4 <__aeabi_memclr>:
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	f000 b81f 	b.w	800b538 <__aeabi_memset>

0800b4fa <__aeabi_memcpy>:
 800b4fa:	f000 ba62 	b.w	800b9c2 <memcpy>

0800b4fe <__aeabi_memmove>:
 800b4fe:	4288      	cmp	r0, r1
 800b500:	b410      	push	{r4}
 800b502:	d90d      	bls.n	800b520 <__aeabi_memmove+0x22>
 800b504:	188b      	adds	r3, r1, r2
 800b506:	4298      	cmp	r0, r3
 800b508:	d20a      	bcs.n	800b520 <__aeabi_memmove+0x22>
 800b50a:	1881      	adds	r1, r0, r2
 800b50c:	b132      	cbz	r2, 800b51c <__aeabi_memmove+0x1e>
 800b50e:	1a9a      	subs	r2, r3, r2
 800b510:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b514:	429a      	cmp	r2, r3
 800b516:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b51a:	d1f9      	bne.n	800b510 <__aeabi_memmove+0x12>
 800b51c:	bc10      	pop	{r4}
 800b51e:	4770      	bx	lr
 800b520:	2a00      	cmp	r2, #0
 800b522:	d0fb      	beq.n	800b51c <__aeabi_memmove+0x1e>
 800b524:	440a      	add	r2, r1
 800b526:	1e43      	subs	r3, r0, #1
 800b528:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b52c:	428a      	cmp	r2, r1
 800b52e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b532:	d1f9      	bne.n	800b528 <__aeabi_memmove+0x2a>
 800b534:	bc10      	pop	{r4}
 800b536:	4770      	bx	lr

0800b538 <__aeabi_memset>:
 800b538:	b470      	push	{r4, r5, r6}
 800b53a:	0784      	lsls	r4, r0, #30
 800b53c:	d046      	beq.n	800b5cc <__aeabi_memset+0x94>
 800b53e:	1e4c      	subs	r4, r1, #1
 800b540:	2900      	cmp	r1, #0
 800b542:	d041      	beq.n	800b5c8 <__aeabi_memset+0x90>
 800b544:	b2d5      	uxtb	r5, r2
 800b546:	4603      	mov	r3, r0
 800b548:	e002      	b.n	800b550 <__aeabi_memset+0x18>
 800b54a:	1e61      	subs	r1, r4, #1
 800b54c:	b3e4      	cbz	r4, 800b5c8 <__aeabi_memset+0x90>
 800b54e:	460c      	mov	r4, r1
 800b550:	f803 5b01 	strb.w	r5, [r3], #1
 800b554:	0799      	lsls	r1, r3, #30
 800b556:	d1f8      	bne.n	800b54a <__aeabi_memset+0x12>
 800b558:	2c03      	cmp	r4, #3
 800b55a:	d92e      	bls.n	800b5ba <__aeabi_memset+0x82>
 800b55c:	b2d5      	uxtb	r5, r2
 800b55e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800b562:	2c0f      	cmp	r4, #15
 800b564:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800b568:	d919      	bls.n	800b59e <__aeabi_memset+0x66>
 800b56a:	4626      	mov	r6, r4
 800b56c:	f103 0110 	add.w	r1, r3, #16
 800b570:	3e10      	subs	r6, #16
 800b572:	2e0f      	cmp	r6, #15
 800b574:	f841 5c10 	str.w	r5, [r1, #-16]
 800b578:	f841 5c0c 	str.w	r5, [r1, #-12]
 800b57c:	f841 5c08 	str.w	r5, [r1, #-8]
 800b580:	f841 5c04 	str.w	r5, [r1, #-4]
 800b584:	f101 0110 	add.w	r1, r1, #16
 800b588:	d8f2      	bhi.n	800b570 <__aeabi_memset+0x38>
 800b58a:	f1a4 0110 	sub.w	r1, r4, #16
 800b58e:	f021 010f 	bic.w	r1, r1, #15
 800b592:	f004 040f 	and.w	r4, r4, #15
 800b596:	3110      	adds	r1, #16
 800b598:	2c03      	cmp	r4, #3
 800b59a:	440b      	add	r3, r1
 800b59c:	d90d      	bls.n	800b5ba <__aeabi_memset+0x82>
 800b59e:	461e      	mov	r6, r3
 800b5a0:	4621      	mov	r1, r4
 800b5a2:	3904      	subs	r1, #4
 800b5a4:	2903      	cmp	r1, #3
 800b5a6:	f846 5b04 	str.w	r5, [r6], #4
 800b5aa:	d8fa      	bhi.n	800b5a2 <__aeabi_memset+0x6a>
 800b5ac:	1f21      	subs	r1, r4, #4
 800b5ae:	f021 0103 	bic.w	r1, r1, #3
 800b5b2:	3104      	adds	r1, #4
 800b5b4:	440b      	add	r3, r1
 800b5b6:	f004 0403 	and.w	r4, r4, #3
 800b5ba:	b12c      	cbz	r4, 800b5c8 <__aeabi_memset+0x90>
 800b5bc:	b2d2      	uxtb	r2, r2
 800b5be:	441c      	add	r4, r3
 800b5c0:	f803 2b01 	strb.w	r2, [r3], #1
 800b5c4:	42a3      	cmp	r3, r4
 800b5c6:	d1fb      	bne.n	800b5c0 <__aeabi_memset+0x88>
 800b5c8:	bc70      	pop	{r4, r5, r6}
 800b5ca:	4770      	bx	lr
 800b5cc:	460c      	mov	r4, r1
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	e7c2      	b.n	800b558 <__aeabi_memset+0x20>
	...

0800b5d4 <calloc>:
 800b5d4:	460a      	mov	r2, r1
 800b5d6:	4903      	ldr	r1, [pc, #12]	; (800b5e4 <calloc+0x10>)
 800b5d8:	4603      	mov	r3, r0
 800b5da:	6808      	ldr	r0, [r1, #0]
 800b5dc:	4619      	mov	r1, r3
 800b5de:	f000 ba03 	b.w	800b9e8 <_calloc_r>
 800b5e2:	bf00      	nop
 800b5e4:	20000ac0 	.word	0x20000ac0

0800b5e8 <__cxa_atexit>:
 800b5e8:	b538      	push	{r3, r4, r5, lr}
 800b5ea:	4605      	mov	r5, r0
 800b5ec:	4804      	ldr	r0, [pc, #16]	; (800b600 <__cxa_atexit+0x18>)
 800b5ee:	460c      	mov	r4, r1
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	b120      	cbz	r0, 800b5fe <__cxa_atexit+0x16>
 800b5f4:	2002      	movs	r0, #2
 800b5f6:	4629      	mov	r1, r5
 800b5f8:	4622      	mov	r2, r4
 800b5fa:	f3af 8000 	nop.w
 800b5fe:	bd38      	pop	{r3, r4, r5, pc}
 800b600:	00000000 	.word	0x00000000

0800b604 <__errno>:
 800b604:	4b01      	ldr	r3, [pc, #4]	; (800b60c <__errno+0x8>)
 800b606:	6818      	ldr	r0, [r3, #0]
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop
 800b60c:	20000ac0 	.word	0x20000ac0

0800b610 <exit>:
 800b610:	b508      	push	{r3, lr}
 800b612:	4b07      	ldr	r3, [pc, #28]	; (800b630 <exit+0x20>)
 800b614:	4604      	mov	r4, r0
 800b616:	b113      	cbz	r3, 800b61e <exit+0xe>
 800b618:	2100      	movs	r1, #0
 800b61a:	f3af 8000 	nop.w
 800b61e:	4b05      	ldr	r3, [pc, #20]	; (800b634 <exit+0x24>)
 800b620:	6818      	ldr	r0, [r3, #0]
 800b622:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b624:	b103      	cbz	r3, 800b628 <exit+0x18>
 800b626:	4798      	blx	r3
 800b628:	4620      	mov	r0, r4
 800b62a:	f7fe fca1 	bl	8009f70 <_exit>
 800b62e:	bf00      	nop
 800b630:	00000000 	.word	0x00000000
 800b634:	0801c6cc 	.word	0x0801c6cc

0800b638 <__sflush_r>:
 800b638:	898a      	ldrh	r2, [r1, #12]
 800b63a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b63e:	4605      	mov	r5, r0
 800b640:	0710      	lsls	r0, r2, #28
 800b642:	460c      	mov	r4, r1
 800b644:	d457      	bmi.n	800b6f6 <__sflush_r+0xbe>
 800b646:	684b      	ldr	r3, [r1, #4]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	dc02      	bgt.n	800b652 <__sflush_r+0x1a>
 800b64c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b64e:	2b00      	cmp	r3, #0
 800b650:	dd18      	ble.n	800b684 <__sflush_r+0x4c>
 800b652:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b654:	b1b6      	cbz	r6, 800b684 <__sflush_r+0x4c>
 800b656:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b65a:	2300      	movs	r3, #0
 800b65c:	b292      	uxth	r2, r2
 800b65e:	682f      	ldr	r7, [r5, #0]
 800b660:	602b      	str	r3, [r5, #0]
 800b662:	b10a      	cbz	r2, 800b668 <__sflush_r+0x30>
 800b664:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b666:	e010      	b.n	800b68a <__sflush_r+0x52>
 800b668:	6a21      	ldr	r1, [r4, #32]
 800b66a:	4628      	mov	r0, r5
 800b66c:	2301      	movs	r3, #1
 800b66e:	47b0      	blx	r6
 800b670:	1c41      	adds	r1, r0, #1
 800b672:	4602      	mov	r2, r0
 800b674:	d109      	bne.n	800b68a <__sflush_r+0x52>
 800b676:	682b      	ldr	r3, [r5, #0]
 800b678:	b13b      	cbz	r3, 800b68a <__sflush_r+0x52>
 800b67a:	2b1d      	cmp	r3, #29
 800b67c:	d001      	beq.n	800b682 <__sflush_r+0x4a>
 800b67e:	2b16      	cmp	r3, #22
 800b680:	d147      	bne.n	800b712 <__sflush_r+0xda>
 800b682:	602f      	str	r7, [r5, #0]
 800b684:	2000      	movs	r0, #0
 800b686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	075b      	lsls	r3, r3, #29
 800b68e:	d505      	bpl.n	800b69c <__sflush_r+0x64>
 800b690:	6863      	ldr	r3, [r4, #4]
 800b692:	1ad2      	subs	r2, r2, r3
 800b694:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b696:	b10b      	cbz	r3, 800b69c <__sflush_r+0x64>
 800b698:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b69a:	1ad2      	subs	r2, r2, r3
 800b69c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b69e:	6a21      	ldr	r1, [r4, #32]
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	47b0      	blx	r6
 800b6a6:	1c46      	adds	r6, r0, #1
 800b6a8:	89a3      	ldrh	r3, [r4, #12]
 800b6aa:	d105      	bne.n	800b6b8 <__sflush_r+0x80>
 800b6ac:	682a      	ldr	r2, [r5, #0]
 800b6ae:	b11a      	cbz	r2, 800b6b8 <__sflush_r+0x80>
 800b6b0:	2a1d      	cmp	r2, #29
 800b6b2:	d001      	beq.n	800b6b8 <__sflush_r+0x80>
 800b6b4:	2a16      	cmp	r2, #22
 800b6b6:	d119      	bne.n	800b6ec <__sflush_r+0xb4>
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	6062      	str	r2, [r4, #4]
 800b6bc:	04d9      	lsls	r1, r3, #19
 800b6be:	6922      	ldr	r2, [r4, #16]
 800b6c0:	6022      	str	r2, [r4, #0]
 800b6c2:	d504      	bpl.n	800b6ce <__sflush_r+0x96>
 800b6c4:	1c42      	adds	r2, r0, #1
 800b6c6:	d101      	bne.n	800b6cc <__sflush_r+0x94>
 800b6c8:	682b      	ldr	r3, [r5, #0]
 800b6ca:	b903      	cbnz	r3, 800b6ce <__sflush_r+0x96>
 800b6cc:	6560      	str	r0, [r4, #84]	; 0x54
 800b6ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6d0:	602f      	str	r7, [r5, #0]
 800b6d2:	2900      	cmp	r1, #0
 800b6d4:	d0d6      	beq.n	800b684 <__sflush_r+0x4c>
 800b6d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6da:	4299      	cmp	r1, r3
 800b6dc:	d002      	beq.n	800b6e4 <__sflush_r+0xac>
 800b6de:	4628      	mov	r0, r5
 800b6e0:	f000 f990 	bl	800ba04 <_free_r>
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	6360      	str	r0, [r4, #52]	; 0x34
 800b6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6f0:	81a3      	strh	r3, [r4, #12]
 800b6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f6:	690f      	ldr	r7, [r1, #16]
 800b6f8:	2f00      	cmp	r7, #0
 800b6fa:	d0c3      	beq.n	800b684 <__sflush_r+0x4c>
 800b6fc:	0793      	lsls	r3, r2, #30
 800b6fe:	680e      	ldr	r6, [r1, #0]
 800b700:	bf08      	it	eq
 800b702:	694b      	ldreq	r3, [r1, #20]
 800b704:	600f      	str	r7, [r1, #0]
 800b706:	bf18      	it	ne
 800b708:	2300      	movne	r3, #0
 800b70a:	ebc7 0806 	rsb	r8, r7, r6
 800b70e:	608b      	str	r3, [r1, #8]
 800b710:	e012      	b.n	800b738 <__sflush_r+0x100>
 800b712:	89a3      	ldrh	r3, [r4, #12]
 800b714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b718:	81a3      	strh	r3, [r4, #12]
 800b71a:	f04f 30ff 	mov.w	r0, #4294967295
 800b71e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b722:	4628      	mov	r0, r5
 800b724:	6a21      	ldr	r1, [r4, #32]
 800b726:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b728:	463a      	mov	r2, r7
 800b72a:	4643      	mov	r3, r8
 800b72c:	47b0      	blx	r6
 800b72e:	2800      	cmp	r0, #0
 800b730:	ddef      	ble.n	800b712 <__sflush_r+0xda>
 800b732:	4407      	add	r7, r0
 800b734:	ebc0 0808 	rsb	r8, r0, r8
 800b738:	f1b8 0f00 	cmp.w	r8, #0
 800b73c:	dcf1      	bgt.n	800b722 <__sflush_r+0xea>
 800b73e:	e7a1      	b.n	800b684 <__sflush_r+0x4c>

0800b740 <_fflush_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	690b      	ldr	r3, [r1, #16]
 800b744:	4605      	mov	r5, r0
 800b746:	460c      	mov	r4, r1
 800b748:	b1db      	cbz	r3, 800b782 <_fflush_r+0x42>
 800b74a:	b118      	cbz	r0, 800b754 <_fflush_r+0x14>
 800b74c:	6983      	ldr	r3, [r0, #24]
 800b74e:	b90b      	cbnz	r3, 800b754 <_fflush_r+0x14>
 800b750:	f000 f872 	bl	800b838 <__sinit>
 800b754:	4b0c      	ldr	r3, [pc, #48]	; (800b788 <_fflush_r+0x48>)
 800b756:	429c      	cmp	r4, r3
 800b758:	d101      	bne.n	800b75e <_fflush_r+0x1e>
 800b75a:	686c      	ldr	r4, [r5, #4]
 800b75c:	e008      	b.n	800b770 <_fflush_r+0x30>
 800b75e:	4b0b      	ldr	r3, [pc, #44]	; (800b78c <_fflush_r+0x4c>)
 800b760:	429c      	cmp	r4, r3
 800b762:	d101      	bne.n	800b768 <_fflush_r+0x28>
 800b764:	68ac      	ldr	r4, [r5, #8]
 800b766:	e003      	b.n	800b770 <_fflush_r+0x30>
 800b768:	4b09      	ldr	r3, [pc, #36]	; (800b790 <_fflush_r+0x50>)
 800b76a:	429c      	cmp	r4, r3
 800b76c:	bf08      	it	eq
 800b76e:	68ec      	ldreq	r4, [r5, #12]
 800b770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b774:	b12b      	cbz	r3, 800b782 <_fflush_r+0x42>
 800b776:	4628      	mov	r0, r5
 800b778:	4621      	mov	r1, r4
 800b77a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b77e:	f7ff bf5b 	b.w	800b638 <__sflush_r>
 800b782:	2000      	movs	r0, #0
 800b784:	bd38      	pop	{r3, r4, r5, pc}
 800b786:	bf00      	nop
 800b788:	0801c668 	.word	0x0801c668
 800b78c:	0801c688 	.word	0x0801c688
 800b790:	0801c6a8 	.word	0x0801c6a8

0800b794 <fflush>:
 800b794:	4601      	mov	r1, r0
 800b796:	b920      	cbnz	r0, 800b7a2 <fflush+0xe>
 800b798:	4b04      	ldr	r3, [pc, #16]	; (800b7ac <fflush+0x18>)
 800b79a:	4905      	ldr	r1, [pc, #20]	; (800b7b0 <fflush+0x1c>)
 800b79c:	6818      	ldr	r0, [r3, #0]
 800b79e:	f000 b8b5 	b.w	800b90c <_fwalk_reent>
 800b7a2:	4b04      	ldr	r3, [pc, #16]	; (800b7b4 <fflush+0x20>)
 800b7a4:	6818      	ldr	r0, [r3, #0]
 800b7a6:	f7ff bfcb 	b.w	800b740 <_fflush_r>
 800b7aa:	bf00      	nop
 800b7ac:	0801c6cc 	.word	0x0801c6cc
 800b7b0:	0800b741 	.word	0x0800b741
 800b7b4:	20000ac0 	.word	0x20000ac0

0800b7b8 <_cleanup_r>:
 800b7b8:	4901      	ldr	r1, [pc, #4]	; (800b7c0 <_cleanup_r+0x8>)
 800b7ba:	f000 b8a7 	b.w	800b90c <_fwalk_reent>
 800b7be:	bf00      	nop
 800b7c0:	0800b741 	.word	0x0800b741

0800b7c4 <std.isra.0>:
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	b510      	push	{r4, lr}
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	6003      	str	r3, [r0, #0]
 800b7cc:	6043      	str	r3, [r0, #4]
 800b7ce:	6083      	str	r3, [r0, #8]
 800b7d0:	8181      	strh	r1, [r0, #12]
 800b7d2:	6643      	str	r3, [r0, #100]	; 0x64
 800b7d4:	81c2      	strh	r2, [r0, #14]
 800b7d6:	6103      	str	r3, [r0, #16]
 800b7d8:	6143      	str	r3, [r0, #20]
 800b7da:	6183      	str	r3, [r0, #24]
 800b7dc:	4619      	mov	r1, r3
 800b7de:	305c      	adds	r0, #92	; 0x5c
 800b7e0:	2208      	movs	r2, #8
 800b7e2:	f000 f8f9 	bl	800b9d8 <memset>
 800b7e6:	4b05      	ldr	r3, [pc, #20]	; (800b7fc <std.isra.0+0x38>)
 800b7e8:	6263      	str	r3, [r4, #36]	; 0x24
 800b7ea:	4b05      	ldr	r3, [pc, #20]	; (800b800 <std.isra.0+0x3c>)
 800b7ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800b7ee:	4b05      	ldr	r3, [pc, #20]	; (800b804 <std.isra.0+0x40>)
 800b7f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b7f2:	4b05      	ldr	r3, [pc, #20]	; (800b808 <std.isra.0+0x44>)
 800b7f4:	6224      	str	r4, [r4, #32]
 800b7f6:	6323      	str	r3, [r4, #48]	; 0x30
 800b7f8:	bd10      	pop	{r4, pc}
 800b7fa:	bf00      	nop
 800b7fc:	0800cc09 	.word	0x0800cc09
 800b800:	0800cc2b 	.word	0x0800cc2b
 800b804:	0800cc63 	.word	0x0800cc63
 800b808:	0800cc87 	.word	0x0800cc87

0800b80c <__sfmoreglue>:
 800b80c:	b570      	push	{r4, r5, r6, lr}
 800b80e:	2368      	movs	r3, #104	; 0x68
 800b810:	1e4d      	subs	r5, r1, #1
 800b812:	435d      	muls	r5, r3
 800b814:	460e      	mov	r6, r1
 800b816:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b81a:	f000 f937 	bl	800ba8c <_malloc_r>
 800b81e:	4604      	mov	r4, r0
 800b820:	b140      	cbz	r0, 800b834 <__sfmoreglue+0x28>
 800b822:	2100      	movs	r1, #0
 800b824:	e880 0042 	stmia.w	r0, {r1, r6}
 800b828:	300c      	adds	r0, #12
 800b82a:	60a0      	str	r0, [r4, #8]
 800b82c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b830:	f000 f8d2 	bl	800b9d8 <memset>
 800b834:	4620      	mov	r0, r4
 800b836:	bd70      	pop	{r4, r5, r6, pc}

0800b838 <__sinit>:
 800b838:	6983      	ldr	r3, [r0, #24]
 800b83a:	b510      	push	{r4, lr}
 800b83c:	4604      	mov	r4, r0
 800b83e:	bb33      	cbnz	r3, 800b88e <__sinit+0x56>
 800b840:	6483      	str	r3, [r0, #72]	; 0x48
 800b842:	64c3      	str	r3, [r0, #76]	; 0x4c
 800b844:	6503      	str	r3, [r0, #80]	; 0x50
 800b846:	4b12      	ldr	r3, [pc, #72]	; (800b890 <__sinit+0x58>)
 800b848:	4a12      	ldr	r2, [pc, #72]	; (800b894 <__sinit+0x5c>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	6282      	str	r2, [r0, #40]	; 0x28
 800b84e:	4298      	cmp	r0, r3
 800b850:	bf04      	itt	eq
 800b852:	2301      	moveq	r3, #1
 800b854:	6183      	streq	r3, [r0, #24]
 800b856:	f000 f81f 	bl	800b898 <__sfp>
 800b85a:	6060      	str	r0, [r4, #4]
 800b85c:	4620      	mov	r0, r4
 800b85e:	f000 f81b 	bl	800b898 <__sfp>
 800b862:	60a0      	str	r0, [r4, #8]
 800b864:	4620      	mov	r0, r4
 800b866:	f000 f817 	bl	800b898 <__sfp>
 800b86a:	2104      	movs	r1, #4
 800b86c:	60e0      	str	r0, [r4, #12]
 800b86e:	2200      	movs	r2, #0
 800b870:	6860      	ldr	r0, [r4, #4]
 800b872:	f7ff ffa7 	bl	800b7c4 <std.isra.0>
 800b876:	68a0      	ldr	r0, [r4, #8]
 800b878:	2109      	movs	r1, #9
 800b87a:	2201      	movs	r2, #1
 800b87c:	f7ff ffa2 	bl	800b7c4 <std.isra.0>
 800b880:	68e0      	ldr	r0, [r4, #12]
 800b882:	2112      	movs	r1, #18
 800b884:	2202      	movs	r2, #2
 800b886:	f7ff ff9d 	bl	800b7c4 <std.isra.0>
 800b88a:	2301      	movs	r3, #1
 800b88c:	61a3      	str	r3, [r4, #24]
 800b88e:	bd10      	pop	{r4, pc}
 800b890:	0801c6cc 	.word	0x0801c6cc
 800b894:	0800b7b9 	.word	0x0800b7b9

0800b898 <__sfp>:
 800b898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89a:	4b1b      	ldr	r3, [pc, #108]	; (800b908 <__sfp+0x70>)
 800b89c:	681e      	ldr	r6, [r3, #0]
 800b89e:	69b3      	ldr	r3, [r6, #24]
 800b8a0:	4607      	mov	r7, r0
 800b8a2:	b913      	cbnz	r3, 800b8aa <__sfp+0x12>
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	f7ff ffc7 	bl	800b838 <__sinit>
 800b8aa:	3648      	adds	r6, #72	; 0x48
 800b8ac:	68b4      	ldr	r4, [r6, #8]
 800b8ae:	6873      	ldr	r3, [r6, #4]
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	d404      	bmi.n	800b8be <__sfp+0x26>
 800b8b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b8b8:	b175      	cbz	r5, 800b8d8 <__sfp+0x40>
 800b8ba:	3468      	adds	r4, #104	; 0x68
 800b8bc:	e7f8      	b.n	800b8b0 <__sfp+0x18>
 800b8be:	6833      	ldr	r3, [r6, #0]
 800b8c0:	b92b      	cbnz	r3, 800b8ce <__sfp+0x36>
 800b8c2:	4638      	mov	r0, r7
 800b8c4:	2104      	movs	r1, #4
 800b8c6:	f7ff ffa1 	bl	800b80c <__sfmoreglue>
 800b8ca:	6030      	str	r0, [r6, #0]
 800b8cc:	b108      	cbz	r0, 800b8d2 <__sfp+0x3a>
 800b8ce:	6836      	ldr	r6, [r6, #0]
 800b8d0:	e7ec      	b.n	800b8ac <__sfp+0x14>
 800b8d2:	230c      	movs	r3, #12
 800b8d4:	603b      	str	r3, [r7, #0]
 800b8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b8dc:	81e3      	strh	r3, [r4, #14]
 800b8de:	2301      	movs	r3, #1
 800b8e0:	81a3      	strh	r3, [r4, #12]
 800b8e2:	6665      	str	r5, [r4, #100]	; 0x64
 800b8e4:	6025      	str	r5, [r4, #0]
 800b8e6:	60a5      	str	r5, [r4, #8]
 800b8e8:	6065      	str	r5, [r4, #4]
 800b8ea:	6125      	str	r5, [r4, #16]
 800b8ec:	6165      	str	r5, [r4, #20]
 800b8ee:	61a5      	str	r5, [r4, #24]
 800b8f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	2208      	movs	r2, #8
 800b8f8:	f000 f86e 	bl	800b9d8 <memset>
 800b8fc:	6365      	str	r5, [r4, #52]	; 0x34
 800b8fe:	63a5      	str	r5, [r4, #56]	; 0x38
 800b900:	64a5      	str	r5, [r4, #72]	; 0x48
 800b902:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b904:	4620      	mov	r0, r4
 800b906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b908:	0801c6cc 	.word	0x0801c6cc

0800b90c <_fwalk_reent>:
 800b90c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b910:	4680      	mov	r8, r0
 800b912:	4689      	mov	r9, r1
 800b914:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b918:	2600      	movs	r6, #0
 800b91a:	b194      	cbz	r4, 800b942 <_fwalk_reent+0x36>
 800b91c:	68a5      	ldr	r5, [r4, #8]
 800b91e:	6867      	ldr	r7, [r4, #4]
 800b920:	3f01      	subs	r7, #1
 800b922:	d40c      	bmi.n	800b93e <_fwalk_reent+0x32>
 800b924:	89ab      	ldrh	r3, [r5, #12]
 800b926:	2b01      	cmp	r3, #1
 800b928:	d907      	bls.n	800b93a <_fwalk_reent+0x2e>
 800b92a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b92e:	3301      	adds	r3, #1
 800b930:	d003      	beq.n	800b93a <_fwalk_reent+0x2e>
 800b932:	4640      	mov	r0, r8
 800b934:	4629      	mov	r1, r5
 800b936:	47c8      	blx	r9
 800b938:	4306      	orrs	r6, r0
 800b93a:	3568      	adds	r5, #104	; 0x68
 800b93c:	e7f0      	b.n	800b920 <_fwalk_reent+0x14>
 800b93e:	6824      	ldr	r4, [r4, #0]
 800b940:	e7eb      	b.n	800b91a <_fwalk_reent+0xe>
 800b942:	4630      	mov	r0, r6
 800b944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b948 <__libc_init_array>:
 800b948:	b570      	push	{r4, r5, r6, lr}
 800b94a:	4b0e      	ldr	r3, [pc, #56]	; (800b984 <__libc_init_array+0x3c>)
 800b94c:	4c0e      	ldr	r4, [pc, #56]	; (800b988 <__libc_init_array+0x40>)
 800b94e:	1ae4      	subs	r4, r4, r3
 800b950:	10a4      	asrs	r4, r4, #2
 800b952:	2500      	movs	r5, #0
 800b954:	461e      	mov	r6, r3
 800b956:	42a5      	cmp	r5, r4
 800b958:	d004      	beq.n	800b964 <__libc_init_array+0x1c>
 800b95a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b95e:	4798      	blx	r3
 800b960:	3501      	adds	r5, #1
 800b962:	e7f8      	b.n	800b956 <__libc_init_array+0xe>
 800b964:	f006 f86e 	bl	8011a44 <_init>
 800b968:	4c08      	ldr	r4, [pc, #32]	; (800b98c <__libc_init_array+0x44>)
 800b96a:	4b09      	ldr	r3, [pc, #36]	; (800b990 <__libc_init_array+0x48>)
 800b96c:	1ae4      	subs	r4, r4, r3
 800b96e:	10a4      	asrs	r4, r4, #2
 800b970:	2500      	movs	r5, #0
 800b972:	461e      	mov	r6, r3
 800b974:	42a5      	cmp	r5, r4
 800b976:	d004      	beq.n	800b982 <__libc_init_array+0x3a>
 800b978:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b97c:	4798      	blx	r3
 800b97e:	3501      	adds	r5, #1
 800b980:	e7f8      	b.n	800b974 <__libc_init_array+0x2c>
 800b982:	bd70      	pop	{r4, r5, r6, pc}
 800b984:	20000b00 	.word	0x20000b00
 800b988:	20000b00 	.word	0x20000b00
 800b98c:	20000b10 	.word	0x20000b10
 800b990:	20000b00 	.word	0x20000b00

0800b994 <malloc>:
 800b994:	4b02      	ldr	r3, [pc, #8]	; (800b9a0 <malloc+0xc>)
 800b996:	4601      	mov	r1, r0
 800b998:	6818      	ldr	r0, [r3, #0]
 800b99a:	f000 b877 	b.w	800ba8c <_malloc_r>
 800b99e:	bf00      	nop
 800b9a0:	20000ac0 	.word	0x20000ac0

0800b9a4 <memchr>:
 800b9a4:	b510      	push	{r4, lr}
 800b9a6:	b2c9      	uxtb	r1, r1
 800b9a8:	4402      	add	r2, r0
 800b9aa:	4290      	cmp	r0, r2
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	d006      	beq.n	800b9be <memchr+0x1a>
 800b9b0:	781c      	ldrb	r4, [r3, #0]
 800b9b2:	428c      	cmp	r4, r1
 800b9b4:	f100 0001 	add.w	r0, r0, #1
 800b9b8:	d1f7      	bne.n	800b9aa <memchr+0x6>
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	bd10      	pop	{r4, pc}
 800b9be:	2000      	movs	r0, #0
 800b9c0:	bd10      	pop	{r4, pc}

0800b9c2 <memcpy>:
 800b9c2:	b510      	push	{r4, lr}
 800b9c4:	1e43      	subs	r3, r0, #1
 800b9c6:	440a      	add	r2, r1
 800b9c8:	4291      	cmp	r1, r2
 800b9ca:	d004      	beq.n	800b9d6 <memcpy+0x14>
 800b9cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9d4:	e7f8      	b.n	800b9c8 <memcpy+0x6>
 800b9d6:	bd10      	pop	{r4, pc}

0800b9d8 <memset>:
 800b9d8:	4402      	add	r2, r0
 800b9da:	4603      	mov	r3, r0
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d002      	beq.n	800b9e6 <memset+0xe>
 800b9e0:	f803 1b01 	strb.w	r1, [r3], #1
 800b9e4:	e7fa      	b.n	800b9dc <memset+0x4>
 800b9e6:	4770      	bx	lr

0800b9e8 <_calloc_r>:
 800b9e8:	b538      	push	{r3, r4, r5, lr}
 800b9ea:	fb02 f401 	mul.w	r4, r2, r1
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	f000 f84c 	bl	800ba8c <_malloc_r>
 800b9f4:	4605      	mov	r5, r0
 800b9f6:	b118      	cbz	r0, 800ba00 <_calloc_r+0x18>
 800b9f8:	2100      	movs	r1, #0
 800b9fa:	4622      	mov	r2, r4
 800b9fc:	f7ff ffec 	bl	800b9d8 <memset>
 800ba00:	4628      	mov	r0, r5
 800ba02:	bd38      	pop	{r3, r4, r5, pc}

0800ba04 <_free_r>:
 800ba04:	b530      	push	{r4, r5, lr}
 800ba06:	2900      	cmp	r1, #0
 800ba08:	d03d      	beq.n	800ba86 <_free_r+0x82>
 800ba0a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800ba0e:	1f0b      	subs	r3, r1, #4
 800ba10:	491d      	ldr	r1, [pc, #116]	; (800ba88 <_free_r+0x84>)
 800ba12:	2a00      	cmp	r2, #0
 800ba14:	bfb8      	it	lt
 800ba16:	189b      	addlt	r3, r3, r2
 800ba18:	680a      	ldr	r2, [r1, #0]
 800ba1a:	460c      	mov	r4, r1
 800ba1c:	b912      	cbnz	r2, 800ba24 <_free_r+0x20>
 800ba1e:	605a      	str	r2, [r3, #4]
 800ba20:	600b      	str	r3, [r1, #0]
 800ba22:	bd30      	pop	{r4, r5, pc}
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d20d      	bcs.n	800ba44 <_free_r+0x40>
 800ba28:	6819      	ldr	r1, [r3, #0]
 800ba2a:	1858      	adds	r0, r3, r1
 800ba2c:	4290      	cmp	r0, r2
 800ba2e:	bf01      	itttt	eq
 800ba30:	585a      	ldreq	r2, [r3, r1]
 800ba32:	1852      	addeq	r2, r2, r1
 800ba34:	601a      	streq	r2, [r3, #0]
 800ba36:	6842      	ldreq	r2, [r0, #4]
 800ba38:	605a      	str	r2, [r3, #4]
 800ba3a:	6023      	str	r3, [r4, #0]
 800ba3c:	bd30      	pop	{r4, r5, pc}
 800ba3e:	4299      	cmp	r1, r3
 800ba40:	d803      	bhi.n	800ba4a <_free_r+0x46>
 800ba42:	460a      	mov	r2, r1
 800ba44:	6851      	ldr	r1, [r2, #4]
 800ba46:	2900      	cmp	r1, #0
 800ba48:	d1f9      	bne.n	800ba3e <_free_r+0x3a>
 800ba4a:	6814      	ldr	r4, [r2, #0]
 800ba4c:	1915      	adds	r5, r2, r4
 800ba4e:	429d      	cmp	r5, r3
 800ba50:	d10a      	bne.n	800ba68 <_free_r+0x64>
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4423      	add	r3, r4
 800ba56:	18d0      	adds	r0, r2, r3
 800ba58:	4288      	cmp	r0, r1
 800ba5a:	6013      	str	r3, [r2, #0]
 800ba5c:	d113      	bne.n	800ba86 <_free_r+0x82>
 800ba5e:	6808      	ldr	r0, [r1, #0]
 800ba60:	4403      	add	r3, r0
 800ba62:	6013      	str	r3, [r2, #0]
 800ba64:	684b      	ldr	r3, [r1, #4]
 800ba66:	e00d      	b.n	800ba84 <_free_r+0x80>
 800ba68:	d902      	bls.n	800ba70 <_free_r+0x6c>
 800ba6a:	230c      	movs	r3, #12
 800ba6c:	6003      	str	r3, [r0, #0]
 800ba6e:	bd30      	pop	{r4, r5, pc}
 800ba70:	681c      	ldr	r4, [r3, #0]
 800ba72:	1918      	adds	r0, r3, r4
 800ba74:	4288      	cmp	r0, r1
 800ba76:	bf04      	itt	eq
 800ba78:	6808      	ldreq	r0, [r1, #0]
 800ba7a:	6849      	ldreq	r1, [r1, #4]
 800ba7c:	6059      	str	r1, [r3, #4]
 800ba7e:	bf04      	itt	eq
 800ba80:	1900      	addeq	r0, r0, r4
 800ba82:	6018      	streq	r0, [r3, #0]
 800ba84:	6053      	str	r3, [r2, #4]
 800ba86:	bd30      	pop	{r4, r5, pc}
 800ba88:	20000d20 	.word	0x20000d20

0800ba8c <_malloc_r>:
 800ba8c:	b570      	push	{r4, r5, r6, lr}
 800ba8e:	1ccc      	adds	r4, r1, #3
 800ba90:	f024 0403 	bic.w	r4, r4, #3
 800ba94:	3408      	adds	r4, #8
 800ba96:	2c0c      	cmp	r4, #12
 800ba98:	bf38      	it	cc
 800ba9a:	240c      	movcc	r4, #12
 800ba9c:	2c00      	cmp	r4, #0
 800ba9e:	4606      	mov	r6, r0
 800baa0:	da03      	bge.n	800baaa <_malloc_r+0x1e>
 800baa2:	230c      	movs	r3, #12
 800baa4:	6033      	str	r3, [r6, #0]
 800baa6:	2000      	movs	r0, #0
 800baa8:	bd70      	pop	{r4, r5, r6, pc}
 800baaa:	428c      	cmp	r4, r1
 800baac:	d3f9      	bcc.n	800baa2 <_malloc_r+0x16>
 800baae:	4a20      	ldr	r2, [pc, #128]	; (800bb30 <_malloc_r+0xa4>)
 800bab0:	6813      	ldr	r3, [r2, #0]
 800bab2:	4610      	mov	r0, r2
 800bab4:	4619      	mov	r1, r3
 800bab6:	b1a1      	cbz	r1, 800bae2 <_malloc_r+0x56>
 800bab8:	680a      	ldr	r2, [r1, #0]
 800baba:	1b12      	subs	r2, r2, r4
 800babc:	d40e      	bmi.n	800badc <_malloc_r+0x50>
 800babe:	2a0b      	cmp	r2, #11
 800bac0:	d903      	bls.n	800baca <_malloc_r+0x3e>
 800bac2:	600a      	str	r2, [r1, #0]
 800bac4:	188b      	adds	r3, r1, r2
 800bac6:	508c      	str	r4, [r1, r2]
 800bac8:	e01f      	b.n	800bb0a <_malloc_r+0x7e>
 800baca:	428b      	cmp	r3, r1
 800bacc:	bf0d      	iteet	eq
 800bace:	685a      	ldreq	r2, [r3, #4]
 800bad0:	684a      	ldrne	r2, [r1, #4]
 800bad2:	605a      	strne	r2, [r3, #4]
 800bad4:	6002      	streq	r2, [r0, #0]
 800bad6:	bf18      	it	ne
 800bad8:	460b      	movne	r3, r1
 800bada:	e016      	b.n	800bb0a <_malloc_r+0x7e>
 800badc:	460b      	mov	r3, r1
 800bade:	6849      	ldr	r1, [r1, #4]
 800bae0:	e7e9      	b.n	800bab6 <_malloc_r+0x2a>
 800bae2:	4d14      	ldr	r5, [pc, #80]	; (800bb34 <_malloc_r+0xa8>)
 800bae4:	682b      	ldr	r3, [r5, #0]
 800bae6:	b91b      	cbnz	r3, 800baf0 <_malloc_r+0x64>
 800bae8:	4630      	mov	r0, r6
 800baea:	f000 ffdf 	bl	800caac <_sbrk_r>
 800baee:	6028      	str	r0, [r5, #0]
 800baf0:	4630      	mov	r0, r6
 800baf2:	4621      	mov	r1, r4
 800baf4:	f000 ffda 	bl	800caac <_sbrk_r>
 800baf8:	1c42      	adds	r2, r0, #1
 800bafa:	4603      	mov	r3, r0
 800bafc:	d0d1      	beq.n	800baa2 <_malloc_r+0x16>
 800bafe:	1cc5      	adds	r5, r0, #3
 800bb00:	f025 0503 	bic.w	r5, r5, #3
 800bb04:	4285      	cmp	r5, r0
 800bb06:	d10a      	bne.n	800bb1e <_malloc_r+0x92>
 800bb08:	601c      	str	r4, [r3, #0]
 800bb0a:	f103 000b 	add.w	r0, r3, #11
 800bb0e:	1d1a      	adds	r2, r3, #4
 800bb10:	f020 0007 	bic.w	r0, r0, #7
 800bb14:	1a82      	subs	r2, r0, r2
 800bb16:	d00a      	beq.n	800bb2e <_malloc_r+0xa2>
 800bb18:	4251      	negs	r1, r2
 800bb1a:	5099      	str	r1, [r3, r2]
 800bb1c:	bd70      	pop	{r4, r5, r6, pc}
 800bb1e:	4630      	mov	r0, r6
 800bb20:	1ae9      	subs	r1, r5, r3
 800bb22:	f000 ffc3 	bl	800caac <_sbrk_r>
 800bb26:	3001      	adds	r0, #1
 800bb28:	d0bb      	beq.n	800baa2 <_malloc_r+0x16>
 800bb2a:	462b      	mov	r3, r5
 800bb2c:	e7ec      	b.n	800bb08 <_malloc_r+0x7c>
 800bb2e:	bd70      	pop	{r4, r5, r6, pc}
 800bb30:	20000d20 	.word	0x20000d20
 800bb34:	20000d1c 	.word	0x20000d1c

0800bb38 <__sfputc_r>:
 800bb38:	6893      	ldr	r3, [r2, #8]
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	b510      	push	{r4, lr}
 800bb40:	6093      	str	r3, [r2, #8]
 800bb42:	da09      	bge.n	800bb58 <__sfputc_r+0x20>
 800bb44:	6994      	ldr	r4, [r2, #24]
 800bb46:	42a3      	cmp	r3, r4
 800bb48:	db02      	blt.n	800bb50 <__sfputc_r+0x18>
 800bb4a:	b2cb      	uxtb	r3, r1
 800bb4c:	2b0a      	cmp	r3, #10
 800bb4e:	d103      	bne.n	800bb58 <__sfputc_r+0x20>
 800bb50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb54:	f001 bf8c 	b.w	800da70 <__swbuf_r>
 800bb58:	6813      	ldr	r3, [r2, #0]
 800bb5a:	1c58      	adds	r0, r3, #1
 800bb5c:	6010      	str	r0, [r2, #0]
 800bb5e:	7019      	strb	r1, [r3, #0]
 800bb60:	b2c8      	uxtb	r0, r1
 800bb62:	bd10      	pop	{r4, pc}

0800bb64 <__sfputs_r>:
 800bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb66:	4606      	mov	r6, r0
 800bb68:	460f      	mov	r7, r1
 800bb6a:	4614      	mov	r4, r2
 800bb6c:	18d5      	adds	r5, r2, r3
 800bb6e:	42ac      	cmp	r4, r5
 800bb70:	d008      	beq.n	800bb84 <__sfputs_r+0x20>
 800bb72:	4630      	mov	r0, r6
 800bb74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb78:	463a      	mov	r2, r7
 800bb7a:	f7ff ffdd 	bl	800bb38 <__sfputc_r>
 800bb7e:	1c43      	adds	r3, r0, #1
 800bb80:	d1f5      	bne.n	800bb6e <__sfputs_r+0xa>
 800bb82:	e000      	b.n	800bb86 <__sfputs_r+0x22>
 800bb84:	2000      	movs	r0, #0
 800bb86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb88 <_vfiprintf_r>:
 800bb88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb8c:	b09d      	sub	sp, #116	; 0x74
 800bb8e:	460d      	mov	r5, r1
 800bb90:	4690      	mov	r8, r2
 800bb92:	9303      	str	r3, [sp, #12]
 800bb94:	4606      	mov	r6, r0
 800bb96:	b118      	cbz	r0, 800bba0 <_vfiprintf_r+0x18>
 800bb98:	6983      	ldr	r3, [r0, #24]
 800bb9a:	b90b      	cbnz	r3, 800bba0 <_vfiprintf_r+0x18>
 800bb9c:	f7ff fe4c 	bl	800b838 <__sinit>
 800bba0:	4b75      	ldr	r3, [pc, #468]	; (800bd78 <_vfiprintf_r+0x1f0>)
 800bba2:	429d      	cmp	r5, r3
 800bba4:	d101      	bne.n	800bbaa <_vfiprintf_r+0x22>
 800bba6:	6875      	ldr	r5, [r6, #4]
 800bba8:	e008      	b.n	800bbbc <_vfiprintf_r+0x34>
 800bbaa:	4b74      	ldr	r3, [pc, #464]	; (800bd7c <_vfiprintf_r+0x1f4>)
 800bbac:	429d      	cmp	r5, r3
 800bbae:	d101      	bne.n	800bbb4 <_vfiprintf_r+0x2c>
 800bbb0:	68b5      	ldr	r5, [r6, #8]
 800bbb2:	e003      	b.n	800bbbc <_vfiprintf_r+0x34>
 800bbb4:	4b72      	ldr	r3, [pc, #456]	; (800bd80 <_vfiprintf_r+0x1f8>)
 800bbb6:	429d      	cmp	r5, r3
 800bbb8:	bf08      	it	eq
 800bbba:	68f5      	ldreq	r5, [r6, #12]
 800bbbc:	89ab      	ldrh	r3, [r5, #12]
 800bbbe:	071c      	lsls	r4, r3, #28
 800bbc0:	d50a      	bpl.n	800bbd8 <_vfiprintf_r+0x50>
 800bbc2:	692b      	ldr	r3, [r5, #16]
 800bbc4:	b143      	cbz	r3, 800bbd8 <_vfiprintf_r+0x50>
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	9309      	str	r3, [sp, #36]	; 0x24
 800bbca:	2320      	movs	r3, #32
 800bbcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbd0:	2330      	movs	r3, #48	; 0x30
 800bbd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbd6:	e041      	b.n	800bc5c <_vfiprintf_r+0xd4>
 800bbd8:	4630      	mov	r0, r6
 800bbda:	4629      	mov	r1, r5
 800bbdc:	f001 ffae 	bl	800db3c <__swsetup_r>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	d0f0      	beq.n	800bbc6 <_vfiprintf_r+0x3e>
 800bbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe8:	e0c2      	b.n	800bd70 <_vfiprintf_r+0x1e8>
 800bbea:	9a03      	ldr	r2, [sp, #12]
 800bbec:	1d11      	adds	r1, r2, #4
 800bbee:	6812      	ldr	r2, [r2, #0]
 800bbf0:	9103      	str	r1, [sp, #12]
 800bbf2:	2a00      	cmp	r2, #0
 800bbf4:	bfbb      	ittet	lt
 800bbf6:	4252      	neglt	r2, r2
 800bbf8:	f043 0302 	orrlt.w	r3, r3, #2
 800bbfc:	9207      	strge	r2, [sp, #28]
 800bbfe:	9207      	strlt	r2, [sp, #28]
 800bc00:	bfb8      	it	lt
 800bc02:	9304      	strlt	r3, [sp, #16]
 800bc04:	3401      	adds	r4, #1
 800bc06:	7823      	ldrb	r3, [r4, #0]
 800bc08:	2b2e      	cmp	r3, #46	; 0x2e
 800bc0a:	d07b      	beq.n	800bd04 <_vfiprintf_r+0x17c>
 800bc0c:	f8df 8180 	ldr.w	r8, [pc, #384]	; 800bd90 <_vfiprintf_r+0x208>
 800bc10:	7821      	ldrb	r1, [r4, #0]
 800bc12:	4640      	mov	r0, r8
 800bc14:	2203      	movs	r2, #3
 800bc16:	f7ff fec5 	bl	800b9a4 <memchr>
 800bc1a:	b138      	cbz	r0, 800bc2c <_vfiprintf_r+0xa4>
 800bc1c:	9a04      	ldr	r2, [sp, #16]
 800bc1e:	ebc8 0000 	rsb	r0, r8, r0
 800bc22:	2340      	movs	r3, #64	; 0x40
 800bc24:	4083      	lsls	r3, r0
 800bc26:	4313      	orrs	r3, r2
 800bc28:	9304      	str	r3, [sp, #16]
 800bc2a:	3401      	adds	r4, #1
 800bc2c:	7821      	ldrb	r1, [r4, #0]
 800bc2e:	4855      	ldr	r0, [pc, #340]	; (800bd84 <_vfiprintf_r+0x1fc>)
 800bc30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc34:	2206      	movs	r2, #6
 800bc36:	f104 0801 	add.w	r8, r4, #1
 800bc3a:	f7ff feb3 	bl	800b9a4 <memchr>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	f000 8085 	beq.w	800bd4e <_vfiprintf_r+0x1c6>
 800bc44:	4b50      	ldr	r3, [pc, #320]	; (800bd88 <_vfiprintf_r+0x200>)
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d178      	bne.n	800bd3c <_vfiprintf_r+0x1b4>
 800bc4a:	9b03      	ldr	r3, [sp, #12]
 800bc4c:	3307      	adds	r3, #7
 800bc4e:	f023 0307 	bic.w	r3, r3, #7
 800bc52:	3308      	adds	r3, #8
 800bc54:	9303      	str	r3, [sp, #12]
 800bc56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc58:	443b      	add	r3, r7
 800bc5a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc5c:	4643      	mov	r3, r8
 800bc5e:	461c      	mov	r4, r3
 800bc60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc64:	b91a      	cbnz	r2, 800bc6e <_vfiprintf_r+0xe6>
 800bc66:	ebb4 0908 	subs.w	r9, r4, r8
 800bc6a:	d00e      	beq.n	800bc8a <_vfiprintf_r+0x102>
 800bc6c:	e002      	b.n	800bc74 <_vfiprintf_r+0xec>
 800bc6e:	2a25      	cmp	r2, #37	; 0x25
 800bc70:	d1f5      	bne.n	800bc5e <_vfiprintf_r+0xd6>
 800bc72:	e7f8      	b.n	800bc66 <_vfiprintf_r+0xde>
 800bc74:	4630      	mov	r0, r6
 800bc76:	4629      	mov	r1, r5
 800bc78:	4642      	mov	r2, r8
 800bc7a:	464b      	mov	r3, r9
 800bc7c:	f7ff ff72 	bl	800bb64 <__sfputs_r>
 800bc80:	3001      	adds	r0, #1
 800bc82:	d070      	beq.n	800bd66 <_vfiprintf_r+0x1de>
 800bc84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc86:	444b      	add	r3, r9
 800bc88:	9309      	str	r3, [sp, #36]	; 0x24
 800bc8a:	7823      	ldrb	r3, [r4, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d06a      	beq.n	800bd66 <_vfiprintf_r+0x1de>
 800bc90:	2300      	movs	r3, #0
 800bc92:	f04f 32ff 	mov.w	r2, #4294967295
 800bc96:	9304      	str	r3, [sp, #16]
 800bc98:	9307      	str	r3, [sp, #28]
 800bc9a:	9205      	str	r2, [sp, #20]
 800bc9c:	9306      	str	r3, [sp, #24]
 800bc9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bca2:	931a      	str	r3, [sp, #104]	; 0x68
 800bca4:	f104 0801 	add.w	r8, r4, #1
 800bca8:	4644      	mov	r4, r8
 800bcaa:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800bd94 <_vfiprintf_r+0x20c>
 800bcae:	7821      	ldrb	r1, [r4, #0]
 800bcb0:	4648      	mov	r0, r9
 800bcb2:	2205      	movs	r2, #5
 800bcb4:	f7ff fe76 	bl	800b9a4 <memchr>
 800bcb8:	f108 0801 	add.w	r8, r8, #1
 800bcbc:	9b04      	ldr	r3, [sp, #16]
 800bcbe:	b130      	cbz	r0, 800bcce <_vfiprintf_r+0x146>
 800bcc0:	ebc9 0000 	rsb	r0, r9, r0
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	4082      	lsls	r2, r0
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	9304      	str	r3, [sp, #16]
 800bccc:	e7ec      	b.n	800bca8 <_vfiprintf_r+0x120>
 800bcce:	06d8      	lsls	r0, r3, #27
 800bcd0:	bf44      	itt	mi
 800bcd2:	2220      	movmi	r2, #32
 800bcd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bcd8:	0719      	lsls	r1, r3, #28
 800bcda:	bf44      	itt	mi
 800bcdc:	222b      	movmi	r2, #43	; 0x2b
 800bcde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bce2:	7822      	ldrb	r2, [r4, #0]
 800bce4:	2a2a      	cmp	r2, #42	; 0x2a
 800bce6:	d080      	beq.n	800bbea <_vfiprintf_r+0x62>
 800bce8:	9907      	ldr	r1, [sp, #28]
 800bcea:	4623      	mov	r3, r4
 800bcec:	461c      	mov	r4, r3
 800bcee:	3301      	adds	r3, #1
 800bcf0:	7822      	ldrb	r2, [r4, #0]
 800bcf2:	3a30      	subs	r2, #48	; 0x30
 800bcf4:	2a09      	cmp	r2, #9
 800bcf6:	d803      	bhi.n	800bd00 <_vfiprintf_r+0x178>
 800bcf8:	200a      	movs	r0, #10
 800bcfa:	fb00 2101 	mla	r1, r0, r1, r2
 800bcfe:	e7f5      	b.n	800bcec <_vfiprintf_r+0x164>
 800bd00:	9107      	str	r1, [sp, #28]
 800bd02:	e780      	b.n	800bc06 <_vfiprintf_r+0x7e>
 800bd04:	7863      	ldrb	r3, [r4, #1]
 800bd06:	2b2a      	cmp	r3, #42	; 0x2a
 800bd08:	d10a      	bne.n	800bd20 <_vfiprintf_r+0x198>
 800bd0a:	9b03      	ldr	r3, [sp, #12]
 800bd0c:	1d1a      	adds	r2, r3, #4
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	9203      	str	r2, [sp, #12]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	bfb8      	it	lt
 800bd16:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd1a:	3402      	adds	r4, #2
 800bd1c:	9305      	str	r3, [sp, #20]
 800bd1e:	e775      	b.n	800bc0c <_vfiprintf_r+0x84>
 800bd20:	1c61      	adds	r1, r4, #1
 800bd22:	2200      	movs	r2, #0
 800bd24:	460c      	mov	r4, r1
 800bd26:	3101      	adds	r1, #1
 800bd28:	7823      	ldrb	r3, [r4, #0]
 800bd2a:	3b30      	subs	r3, #48	; 0x30
 800bd2c:	2b09      	cmp	r3, #9
 800bd2e:	d803      	bhi.n	800bd38 <_vfiprintf_r+0x1b0>
 800bd30:	200a      	movs	r0, #10
 800bd32:	fb00 3202 	mla	r2, r0, r2, r3
 800bd36:	e7f5      	b.n	800bd24 <_vfiprintf_r+0x19c>
 800bd38:	9205      	str	r2, [sp, #20]
 800bd3a:	e767      	b.n	800bc0c <_vfiprintf_r+0x84>
 800bd3c:	ab03      	add	r3, sp, #12
 800bd3e:	9300      	str	r3, [sp, #0]
 800bd40:	4630      	mov	r0, r6
 800bd42:	a904      	add	r1, sp, #16
 800bd44:	462a      	mov	r2, r5
 800bd46:	4b11      	ldr	r3, [pc, #68]	; (800bd8c <_vfiprintf_r+0x204>)
 800bd48:	f000 f8c4 	bl	800bed4 <_printf_float>
 800bd4c:	e007      	b.n	800bd5e <_vfiprintf_r+0x1d6>
 800bd4e:	ab03      	add	r3, sp, #12
 800bd50:	9300      	str	r3, [sp, #0]
 800bd52:	4630      	mov	r0, r6
 800bd54:	a904      	add	r1, sp, #16
 800bd56:	462a      	mov	r2, r5
 800bd58:	4b0c      	ldr	r3, [pc, #48]	; (800bd8c <_vfiprintf_r+0x204>)
 800bd5a:	f000 fb77 	bl	800c44c <_printf_i>
 800bd5e:	1c42      	adds	r2, r0, #1
 800bd60:	4607      	mov	r7, r0
 800bd62:	f47f af78 	bne.w	800bc56 <_vfiprintf_r+0xce>
 800bd66:	89ab      	ldrh	r3, [r5, #12]
 800bd68:	065b      	lsls	r3, r3, #25
 800bd6a:	f53f af3b 	bmi.w	800bbe4 <_vfiprintf_r+0x5c>
 800bd6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd70:	b01d      	add	sp, #116	; 0x74
 800bd72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd76:	bf00      	nop
 800bd78:	0801c668 	.word	0x0801c668
 800bd7c:	0801c688 	.word	0x0801c688
 800bd80:	0801c6a8 	.word	0x0801c6a8
 800bd84:	0801c6da 	.word	0x0801c6da
 800bd88:	0800bed5 	.word	0x0800bed5
 800bd8c:	0800bb65 	.word	0x0800bb65
 800bd90:	0801c6d6 	.word	0x0801c6d6
 800bd94:	0801c6d0 	.word	0x0801c6d0

0800bd98 <vfiprintf>:
 800bd98:	b530      	push	{r4, r5, lr}
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	4a04      	ldr	r2, [pc, #16]	; (800bdb0 <vfiprintf+0x18>)
 800bd9e:	4605      	mov	r5, r0
 800bda0:	460c      	mov	r4, r1
 800bda2:	6810      	ldr	r0, [r2, #0]
 800bda4:	4629      	mov	r1, r5
 800bda6:	4622      	mov	r2, r4
 800bda8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdac:	f7ff beec 	b.w	800bb88 <_vfiprintf_r>
 800bdb0:	20000ac0 	.word	0x20000ac0

0800bdb4 <__cvt>:
 800bdb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdb8:	b088      	sub	sp, #32
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bdbe:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bdc0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800bdc2:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800bdc6:	461d      	mov	r5, r3
 800bdc8:	bfb8      	it	lt
 800bdca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bdce:	f027 0720 	bic.w	r7, r7, #32
 800bdd2:	bfb6      	itet	lt
 800bdd4:	461d      	movlt	r5, r3
 800bdd6:	2300      	movge	r3, #0
 800bdd8:	232d      	movlt	r3, #45	; 0x2d
 800bdda:	4614      	mov	r4, r2
 800bddc:	bfb8      	it	lt
 800bdde:	4614      	movlt	r4, r2
 800bde0:	2f46      	cmp	r7, #70	; 0x46
 800bde2:	700b      	strb	r3, [r1, #0]
 800bde4:	d003      	beq.n	800bdee <__cvt+0x3a>
 800bde6:	2f45      	cmp	r7, #69	; 0x45
 800bde8:	d103      	bne.n	800bdf2 <__cvt+0x3e>
 800bdea:	3601      	adds	r6, #1
 800bdec:	e001      	b.n	800bdf2 <__cvt+0x3e>
 800bdee:	2303      	movs	r3, #3
 800bdf0:	e000      	b.n	800bdf4 <__cvt+0x40>
 800bdf2:	2302      	movs	r3, #2
 800bdf4:	e88d 0448 	stmia.w	sp, {r3, r6, sl}
 800bdf8:	ab06      	add	r3, sp, #24
 800bdfa:	9303      	str	r3, [sp, #12]
 800bdfc:	ab07      	add	r3, sp, #28
 800bdfe:	9304      	str	r3, [sp, #16]
 800be00:	4622      	mov	r2, r4
 800be02:	462b      	mov	r3, r5
 800be04:	f001 ffa4 	bl	800dd50 <_dtoa_r>
 800be08:	2f47      	cmp	r7, #71	; 0x47
 800be0a:	4680      	mov	r8, r0
 800be0c:	d102      	bne.n	800be14 <__cvt+0x60>
 800be0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be10:	07db      	lsls	r3, r3, #31
 800be12:	d526      	bpl.n	800be62 <__cvt+0xae>
 800be14:	2f46      	cmp	r7, #70	; 0x46
 800be16:	eb08 0906 	add.w	r9, r8, r6
 800be1a:	d111      	bne.n	800be40 <__cvt+0x8c>
 800be1c:	f898 3000 	ldrb.w	r3, [r8]
 800be20:	2b30      	cmp	r3, #48	; 0x30
 800be22:	d10a      	bne.n	800be3a <__cvt+0x86>
 800be24:	4620      	mov	r0, r4
 800be26:	4629      	mov	r1, r5
 800be28:	2200      	movs	r2, #0
 800be2a:	2300      	movs	r3, #0
 800be2c:	f004 faa6 	bl	801037c <__aeabi_dcmpeq>
 800be30:	b918      	cbnz	r0, 800be3a <__cvt+0x86>
 800be32:	f1c6 0601 	rsb	r6, r6, #1
 800be36:	f8ca 6000 	str.w	r6, [sl]
 800be3a:	f8da 3000 	ldr.w	r3, [sl]
 800be3e:	4499      	add	r9, r3
 800be40:	4620      	mov	r0, r4
 800be42:	4629      	mov	r1, r5
 800be44:	2200      	movs	r2, #0
 800be46:	2300      	movs	r3, #0
 800be48:	f004 fa98 	bl	801037c <__aeabi_dcmpeq>
 800be4c:	b108      	cbz	r0, 800be52 <__cvt+0x9e>
 800be4e:	f8cd 901c 	str.w	r9, [sp, #28]
 800be52:	9b07      	ldr	r3, [sp, #28]
 800be54:	454b      	cmp	r3, r9
 800be56:	d204      	bcs.n	800be62 <__cvt+0xae>
 800be58:	1c5a      	adds	r2, r3, #1
 800be5a:	9207      	str	r2, [sp, #28]
 800be5c:	2230      	movs	r2, #48	; 0x30
 800be5e:	701a      	strb	r2, [r3, #0]
 800be60:	e7f7      	b.n	800be52 <__cvt+0x9e>
 800be62:	9b07      	ldr	r3, [sp, #28]
 800be64:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800be66:	ebc8 0303 	rsb	r3, r8, r3
 800be6a:	4640      	mov	r0, r8
 800be6c:	6013      	str	r3, [r2, #0]
 800be6e:	b008      	add	sp, #32
 800be70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800be74 <__exponent>:
 800be74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be76:	4603      	mov	r3, r0
 800be78:	2900      	cmp	r1, #0
 800be7a:	bfb8      	it	lt
 800be7c:	4249      	neglt	r1, r1
 800be7e:	f803 2b02 	strb.w	r2, [r3], #2
 800be82:	bfb4      	ite	lt
 800be84:	222d      	movlt	r2, #45	; 0x2d
 800be86:	222b      	movge	r2, #43	; 0x2b
 800be88:	2909      	cmp	r1, #9
 800be8a:	7042      	strb	r2, [r0, #1]
 800be8c:	dd19      	ble.n	800bec2 <__exponent+0x4e>
 800be8e:	f10d 0407 	add.w	r4, sp, #7
 800be92:	4626      	mov	r6, r4
 800be94:	220a      	movs	r2, #10
 800be96:	fb91 f5f2 	sdiv	r5, r1, r2
 800be9a:	fb02 1115 	mls	r1, r2, r5, r1
 800be9e:	3130      	adds	r1, #48	; 0x30
 800bea0:	2d09      	cmp	r5, #9
 800bea2:	f804 1d01 	strb.w	r1, [r4, #-1]!
 800bea6:	4629      	mov	r1, r5
 800bea8:	dcf4      	bgt.n	800be94 <__exponent+0x20>
 800beaa:	3130      	adds	r1, #48	; 0x30
 800beac:	1e65      	subs	r5, r4, #1
 800beae:	f804 1c01 	strb.w	r1, [r4, #-1]
 800beb2:	42b5      	cmp	r5, r6
 800beb4:	461a      	mov	r2, r3
 800beb6:	d20a      	bcs.n	800bece <__exponent+0x5a>
 800beb8:	f815 2b01 	ldrb.w	r2, [r5], #1
 800bebc:	f803 2b01 	strb.w	r2, [r3], #1
 800bec0:	e7f7      	b.n	800beb2 <__exponent+0x3e>
 800bec2:	2430      	movs	r4, #48	; 0x30
 800bec4:	461a      	mov	r2, r3
 800bec6:	4421      	add	r1, r4
 800bec8:	f802 4b02 	strb.w	r4, [r2], #2
 800becc:	7059      	strb	r1, [r3, #1]
 800bece:	1a10      	subs	r0, r2, r0
 800bed0:	b002      	add	sp, #8
 800bed2:	bd70      	pop	{r4, r5, r6, pc}

0800bed4 <_printf_float>:
 800bed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed8:	b091      	sub	sp, #68	; 0x44
 800beda:	468b      	mov	fp, r1
 800bedc:	4615      	mov	r5, r2
 800bede:	461e      	mov	r6, r3
 800bee0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800bee2:	4604      	mov	r4, r0
 800bee4:	f003 f804 	bl	800eef0 <_localeconv_r>
 800bee8:	f8d0 a000 	ldr.w	sl, [r0]
 800beec:	4650      	mov	r0, sl
 800beee:	f000 fece 	bl	800cc8e <strlen>
 800bef2:	2300      	movs	r3, #0
 800bef4:	930e      	str	r3, [sp, #56]	; 0x38
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	9009      	str	r0, [sp, #36]	; 0x24
 800befa:	3307      	adds	r3, #7
 800befc:	f023 0307 	bic.w	r3, r3, #7
 800bf00:	f103 0208 	add.w	r2, r3, #8
 800bf04:	f89b 8018 	ldrb.w	r8, [fp, #24]
 800bf08:	603a      	str	r2, [r7, #0]
 800bf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0e:	e9cb 2312 	strd	r2, r3, [fp, #72]	; 0x48
 800bf12:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 800bf16:	f000 fd9f 	bl	800ca58 <__fpclassifyd>
 800bf1a:	2801      	cmp	r0, #1
 800bf1c:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 800bf20:	d119      	bne.n	800bf56 <_printf_float+0x82>
 800bf22:	2200      	movs	r2, #0
 800bf24:	2300      	movs	r3, #0
 800bf26:	f004 fa33 	bl	8010390 <__aeabi_dcmplt>
 800bf2a:	b110      	cbz	r0, 800bf32 <_printf_float+0x5e>
 800bf2c:	232d      	movs	r3, #45	; 0x2d
 800bf2e:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 800bf32:	4ba0      	ldr	r3, [pc, #640]	; (800c1b4 <_printf_float+0x2e0>)
 800bf34:	4fa0      	ldr	r7, [pc, #640]	; (800c1b8 <_printf_float+0x2e4>)
 800bf36:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bf3a:	bf88      	it	hi
 800bf3c:	461f      	movhi	r7, r3
 800bf3e:	2303      	movs	r3, #3
 800bf40:	f8cb 3010 	str.w	r3, [fp, #16]
 800bf44:	f8db 3000 	ldr.w	r3, [fp]
 800bf48:	f023 0304 	bic.w	r3, r3, #4
 800bf4c:	f8cb 3000 	str.w	r3, [fp]
 800bf50:	f04f 0900 	mov.w	r9, #0
 800bf54:	e0a1      	b.n	800c09a <_printf_float+0x1c6>
 800bf56:	f000 fd7f 	bl	800ca58 <__fpclassifyd>
 800bf5a:	f8db 3000 	ldr.w	r3, [fp]
 800bf5e:	b948      	cbnz	r0, 800bf74 <_printf_float+0xa0>
 800bf60:	4a96      	ldr	r2, [pc, #600]	; (800c1bc <_printf_float+0x2e8>)
 800bf62:	4f97      	ldr	r7, [pc, #604]	; (800c1c0 <_printf_float+0x2ec>)
 800bf64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bf68:	bf88      	it	hi
 800bf6a:	4617      	movhi	r7, r2
 800bf6c:	2203      	movs	r2, #3
 800bf6e:	f8cb 2010 	str.w	r2, [fp, #16]
 800bf72:	e7e9      	b.n	800bf48 <_printf_float+0x74>
 800bf74:	f8db 2004 	ldr.w	r2, [fp, #4]
 800bf78:	ed9b 7b12 	vldr	d7, [fp, #72]	; 0x48
 800bf7c:	1c57      	adds	r7, r2, #1
 800bf7e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bf82:	d101      	bne.n	800bf88 <_printf_float+0xb4>
 800bf84:	2206      	movs	r2, #6
 800bf86:	e009      	b.n	800bf9c <_printf_float+0xc8>
 800bf88:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800bf8c:	d002      	beq.n	800bf94 <_printf_float+0xc0>
 800bf8e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bf92:	d105      	bne.n	800bfa0 <_printf_float+0xcc>
 800bf94:	2a00      	cmp	r2, #0
 800bf96:	f040 81c7 	bne.w	800c328 <_printf_float+0x454>
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f8cb 2004 	str.w	r2, [fp, #4]
 800bfa0:	f8db 2004 	ldr.w	r2, [fp, #4]
 800bfa4:	f8cd 8010 	str.w	r8, [sp, #16]
 800bfa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bfac:	e88d 000c 	stmia.w	sp, {r2, r3}
 800bfb0:	f8cb 3000 	str.w	r3, [fp]
 800bfb4:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800bfb8:	9302      	str	r3, [sp, #8]
 800bfba:	ab0d      	add	r3, sp, #52	; 0x34
 800bfbc:	9303      	str	r3, [sp, #12]
 800bfbe:	ab0e      	add	r3, sp, #56	; 0x38
 800bfc0:	9305      	str	r3, [sp, #20]
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	9306      	str	r3, [sp, #24]
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bfcc:	f7ff fef2 	bl	800bdb4 <__cvt>
 800bfd0:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800bfd4:	2b47      	cmp	r3, #71	; 0x47
 800bfd6:	4607      	mov	r7, r0
 800bfd8:	d10a      	bne.n	800bff0 <_printf_float+0x11c>
 800bfda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfdc:	1cd8      	adds	r0, r3, #3
 800bfde:	db03      	blt.n	800bfe8 <_printf_float+0x114>
 800bfe0:	f8db 2004 	ldr.w	r2, [fp, #4]
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	dd37      	ble.n	800c058 <_printf_float+0x184>
 800bfe8:	f1a8 0802 	sub.w	r8, r8, #2
 800bfec:	fa5f f888 	uxtb.w	r8, r8
 800bff0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800bff4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bff6:	d815      	bhi.n	800c024 <_printf_float+0x150>
 800bff8:	3901      	subs	r1, #1
 800bffa:	4642      	mov	r2, r8
 800bffc:	f10b 0050 	add.w	r0, fp, #80	; 0x50
 800c000:	910d      	str	r1, [sp, #52]	; 0x34
 800c002:	f7ff ff37 	bl	800be74 <__exponent>
 800c006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c008:	1883      	adds	r3, r0, r2
 800c00a:	2a01      	cmp	r2, #1
 800c00c:	4681      	mov	r9, r0
 800c00e:	f8cb 3010 	str.w	r3, [fp, #16]
 800c012:	dc03      	bgt.n	800c01c <_printf_float+0x148>
 800c014:	f8db 2000 	ldr.w	r2, [fp]
 800c018:	07d1      	lsls	r1, r2, #31
 800c01a:	d538      	bpl.n	800c08e <_printf_float+0x1ba>
 800c01c:	3301      	adds	r3, #1
 800c01e:	f8cb 3010 	str.w	r3, [fp, #16]
 800c022:	e034      	b.n	800c08e <_printf_float+0x1ba>
 800c024:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800c028:	d118      	bne.n	800c05c <_printf_float+0x188>
 800c02a:	2900      	cmp	r1, #0
 800c02c:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c030:	dd09      	ble.n	800c046 <_printf_float+0x172>
 800c032:	f8cb 1010 	str.w	r1, [fp, #16]
 800c036:	b91b      	cbnz	r3, 800c040 <_printf_float+0x16c>
 800c038:	f8db 2000 	ldr.w	r2, [fp]
 800c03c:	07d2      	lsls	r2, r2, #31
 800c03e:	d521      	bpl.n	800c084 <_printf_float+0x1b0>
 800c040:	3301      	adds	r3, #1
 800c042:	440b      	add	r3, r1
 800c044:	e01c      	b.n	800c080 <_printf_float+0x1ac>
 800c046:	b91b      	cbnz	r3, 800c050 <_printf_float+0x17c>
 800c048:	f8db 2000 	ldr.w	r2, [fp]
 800c04c:	07d0      	lsls	r0, r2, #31
 800c04e:	d501      	bpl.n	800c054 <_printf_float+0x180>
 800c050:	3302      	adds	r3, #2
 800c052:	e015      	b.n	800c080 <_printf_float+0x1ac>
 800c054:	2301      	movs	r3, #1
 800c056:	e013      	b.n	800c080 <_printf_float+0x1ac>
 800c058:	f04f 0867 	mov.w	r8, #103	; 0x67
 800c05c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c05e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c060:	4293      	cmp	r3, r2
 800c062:	db07      	blt.n	800c074 <_printf_float+0x1a0>
 800c064:	f8db 2000 	ldr.w	r2, [fp]
 800c068:	f8cb 3010 	str.w	r3, [fp, #16]
 800c06c:	07d1      	lsls	r1, r2, #31
 800c06e:	d509      	bpl.n	800c084 <_printf_float+0x1b0>
 800c070:	3301      	adds	r3, #1
 800c072:	e005      	b.n	800c080 <_printf_float+0x1ac>
 800c074:	2b00      	cmp	r3, #0
 800c076:	bfd4      	ite	le
 800c078:	f1c3 0302 	rsble	r3, r3, #2
 800c07c:	2301      	movgt	r3, #1
 800c07e:	4413      	add	r3, r2
 800c080:	f8cb 3010 	str.w	r3, [fp, #16]
 800c084:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c086:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800c08a:	f04f 0900 	mov.w	r9, #0
 800c08e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c092:	b113      	cbz	r3, 800c09a <_printf_float+0x1c6>
 800c094:	232d      	movs	r3, #45	; 0x2d
 800c096:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 800c09a:	9600      	str	r6, [sp, #0]
 800c09c:	4620      	mov	r0, r4
 800c09e:	4659      	mov	r1, fp
 800c0a0:	aa0f      	add	r2, sp, #60	; 0x3c
 800c0a2:	462b      	mov	r3, r5
 800c0a4:	f000 f95c 	bl	800c360 <_printf_common>
 800c0a8:	3001      	adds	r0, #1
 800c0aa:	d102      	bne.n	800c0b2 <_printf_float+0x1de>
 800c0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b0:	e152      	b.n	800c358 <_printf_float+0x484>
 800c0b2:	f8db 3000 	ldr.w	r3, [fp]
 800c0b6:	055a      	lsls	r2, r3, #21
 800c0b8:	d405      	bmi.n	800c0c6 <_printf_float+0x1f2>
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	4629      	mov	r1, r5
 800c0be:	463a      	mov	r2, r7
 800c0c0:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c0c4:	e108      	b.n	800c2d8 <_printf_float+0x404>
 800c0c6:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800c0ca:	f240 80d0 	bls.w	800c26e <_printf_float+0x39a>
 800c0ce:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	f004 f951 	bl	801037c <__aeabi_dcmpeq>
 800c0da:	b350      	cbz	r0, 800c132 <_printf_float+0x25e>
 800c0dc:	4620      	mov	r0, r4
 800c0de:	4629      	mov	r1, r5
 800c0e0:	4a38      	ldr	r2, [pc, #224]	; (800c1c4 <_printf_float+0x2f0>)
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	47b0      	blx	r6
 800c0e6:	3001      	adds	r0, #1
 800c0e8:	d0e0      	beq.n	800c0ac <_printf_float+0x1d8>
 800c0ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	db09      	blt.n	800c106 <_printf_float+0x232>
 800c0f2:	f8db 3000 	ldr.w	r3, [fp]
 800c0f6:	07d8      	lsls	r0, r3, #31
 800c0f8:	d405      	bmi.n	800c106 <_printf_float+0x232>
 800c0fa:	f8db 3000 	ldr.w	r3, [fp]
 800c0fe:	079f      	lsls	r7, r3, #30
 800c100:	f100 8110 	bmi.w	800c324 <_printf_float+0x450>
 800c104:	e107      	b.n	800c316 <_printf_float+0x442>
 800c106:	4620      	mov	r0, r4
 800c108:	4629      	mov	r1, r5
 800c10a:	4652      	mov	r2, sl
 800c10c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c10e:	47b0      	blx	r6
 800c110:	3001      	adds	r0, #1
 800c112:	d0cb      	beq.n	800c0ac <_printf_float+0x1d8>
 800c114:	2700      	movs	r7, #0
 800c116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c118:	3b01      	subs	r3, #1
 800c11a:	429f      	cmp	r7, r3
 800c11c:	daed      	bge.n	800c0fa <_printf_float+0x226>
 800c11e:	4620      	mov	r0, r4
 800c120:	4629      	mov	r1, r5
 800c122:	f10b 021a 	add.w	r2, fp, #26
 800c126:	2301      	movs	r3, #1
 800c128:	47b0      	blx	r6
 800c12a:	3001      	adds	r0, #1
 800c12c:	d0be      	beq.n	800c0ac <_printf_float+0x1d8>
 800c12e:	3701      	adds	r7, #1
 800c130:	e7f1      	b.n	800c116 <_printf_float+0x242>
 800c132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c134:	2b00      	cmp	r3, #0
 800c136:	dc29      	bgt.n	800c18c <_printf_float+0x2b8>
 800c138:	4620      	mov	r0, r4
 800c13a:	4629      	mov	r1, r5
 800c13c:	4a21      	ldr	r2, [pc, #132]	; (800c1c4 <_printf_float+0x2f0>)
 800c13e:	2301      	movs	r3, #1
 800c140:	47b0      	blx	r6
 800c142:	3001      	adds	r0, #1
 800c144:	d0b2      	beq.n	800c0ac <_printf_float+0x1d8>
 800c146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c148:	b92b      	cbnz	r3, 800c156 <_printf_float+0x282>
 800c14a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c14c:	b91b      	cbnz	r3, 800c156 <_printf_float+0x282>
 800c14e:	f8db 3000 	ldr.w	r3, [fp]
 800c152:	07d9      	lsls	r1, r3, #31
 800c154:	d5d1      	bpl.n	800c0fa <_printf_float+0x226>
 800c156:	4620      	mov	r0, r4
 800c158:	4629      	mov	r1, r5
 800c15a:	4652      	mov	r2, sl
 800c15c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c15e:	47b0      	blx	r6
 800c160:	3001      	adds	r0, #1
 800c162:	d0a3      	beq.n	800c0ac <_printf_float+0x1d8>
 800c164:	f04f 0800 	mov.w	r8, #0
 800c168:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c16a:	425b      	negs	r3, r3
 800c16c:	4598      	cmp	r8, r3
 800c16e:	4620      	mov	r0, r4
 800c170:	4629      	mov	r1, r5
 800c172:	da08      	bge.n	800c186 <_printf_float+0x2b2>
 800c174:	f10b 021a 	add.w	r2, fp, #26
 800c178:	2301      	movs	r3, #1
 800c17a:	47b0      	blx	r6
 800c17c:	3001      	adds	r0, #1
 800c17e:	d095      	beq.n	800c0ac <_printf_float+0x1d8>
 800c180:	f108 0801 	add.w	r8, r8, #1
 800c184:	e7f0      	b.n	800c168 <_printf_float+0x294>
 800c186:	463a      	mov	r2, r7
 800c188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c18a:	e0a5      	b.n	800c2d8 <_printf_float+0x404>
 800c18c:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 800c190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c192:	429a      	cmp	r2, r3
 800c194:	bfa8      	it	ge
 800c196:	461a      	movge	r2, r3
 800c198:	2a00      	cmp	r2, #0
 800c19a:	4691      	mov	r9, r2
 800c19c:	dc02      	bgt.n	800c1a4 <_printf_float+0x2d0>
 800c19e:	f04f 0800 	mov.w	r8, #0
 800c1a2:	e01c      	b.n	800c1de <_printf_float+0x30a>
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	4629      	mov	r1, r5
 800c1a8:	463a      	mov	r2, r7
 800c1aa:	464b      	mov	r3, r9
 800c1ac:	47b0      	blx	r6
 800c1ae:	3001      	adds	r0, #1
 800c1b0:	d1f5      	bne.n	800c19e <_printf_float+0x2ca>
 800c1b2:	e77b      	b.n	800c0ac <_printf_float+0x1d8>
 800c1b4:	0801c6e5 	.word	0x0801c6e5
 800c1b8:	0801c6e1 	.word	0x0801c6e1
 800c1bc:	0801c6ed 	.word	0x0801c6ed
 800c1c0:	0801c6e9 	.word	0x0801c6e9
 800c1c4:	0801c6f1 	.word	0x0801c6f1
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	4629      	mov	r1, r5
 800c1cc:	f10b 021a 	add.w	r2, fp, #26
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	47b0      	blx	r6
 800c1d4:	3001      	adds	r0, #1
 800c1d6:	f43f af69 	beq.w	800c0ac <_printf_float+0x1d8>
 800c1da:	f108 0801 	add.w	r8, r8, #1
 800c1de:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800c1e2:	f1b9 0f00 	cmp.w	r9, #0
 800c1e6:	bfac      	ite	ge
 800c1e8:	ebc9 0203 	rsbge	r2, r9, r3
 800c1ec:	461a      	movlt	r2, r3
 800c1ee:	4590      	cmp	r8, r2
 800c1f0:	dbea      	blt.n	800c1c8 <_printf_float+0x2f4>
 800c1f2:	eb07 0803 	add.w	r8, r7, r3
 800c1f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	db10      	blt.n	800c220 <_printf_float+0x34c>
 800c1fe:	f8db 3000 	ldr.w	r3, [fp]
 800c202:	07da      	lsls	r2, r3, #31
 800c204:	d40c      	bmi.n	800c220 <_printf_float+0x34c>
 800c206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c208:	4417      	add	r7, r2
 800c20a:	ebc8 0307 	rsb	r3, r8, r7
 800c20e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c210:	1bd2      	subs	r2, r2, r7
 800c212:	4293      	cmp	r3, r2
 800c214:	bfa8      	it	ge
 800c216:	4613      	movge	r3, r2
 800c218:	2b00      	cmp	r3, #0
 800c21a:	461f      	mov	r7, r3
 800c21c:	dc08      	bgt.n	800c230 <_printf_float+0x35c>
 800c21e:	e00e      	b.n	800c23e <_printf_float+0x36a>
 800c220:	4620      	mov	r0, r4
 800c222:	4629      	mov	r1, r5
 800c224:	4652      	mov	r2, sl
 800c226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c228:	47b0      	blx	r6
 800c22a:	3001      	adds	r0, #1
 800c22c:	d1eb      	bne.n	800c206 <_printf_float+0x332>
 800c22e:	e73d      	b.n	800c0ac <_printf_float+0x1d8>
 800c230:	4620      	mov	r0, r4
 800c232:	4629      	mov	r1, r5
 800c234:	4642      	mov	r2, r8
 800c236:	47b0      	blx	r6
 800c238:	3001      	adds	r0, #1
 800c23a:	f43f af37 	beq.w	800c0ac <_printf_float+0x1d8>
 800c23e:	f04f 0800 	mov.w	r8, #0
 800c242:	e00a      	b.n	800c25a <_printf_float+0x386>
 800c244:	4620      	mov	r0, r4
 800c246:	4629      	mov	r1, r5
 800c248:	f10b 021a 	add.w	r2, fp, #26
 800c24c:	2301      	movs	r3, #1
 800c24e:	47b0      	blx	r6
 800c250:	3001      	adds	r0, #1
 800c252:	f43f af2b 	beq.w	800c0ac <_printf_float+0x1d8>
 800c256:	f108 0801 	add.w	r8, r8, #1
 800c25a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c25c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c25e:	2f00      	cmp	r7, #0
 800c260:	eba3 0302 	sub.w	r3, r3, r2
 800c264:	bfa8      	it	ge
 800c266:	1bdb      	subge	r3, r3, r7
 800c268:	4598      	cmp	r8, r3
 800c26a:	dbeb      	blt.n	800c244 <_printf_float+0x370>
 800c26c:	e745      	b.n	800c0fa <_printf_float+0x226>
 800c26e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c270:	2a01      	cmp	r2, #1
 800c272:	dc01      	bgt.n	800c278 <_printf_float+0x3a4>
 800c274:	07db      	lsls	r3, r3, #31
 800c276:	d536      	bpl.n	800c2e6 <_printf_float+0x412>
 800c278:	4620      	mov	r0, r4
 800c27a:	4629      	mov	r1, r5
 800c27c:	463a      	mov	r2, r7
 800c27e:	2301      	movs	r3, #1
 800c280:	47b0      	blx	r6
 800c282:	3001      	adds	r0, #1
 800c284:	f43f af12 	beq.w	800c0ac <_printf_float+0x1d8>
 800c288:	4620      	mov	r0, r4
 800c28a:	4629      	mov	r1, r5
 800c28c:	4652      	mov	r2, sl
 800c28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c290:	47b0      	blx	r6
 800c292:	3001      	adds	r0, #1
 800c294:	f43f af0a 	beq.w	800c0ac <_printf_float+0x1d8>
 800c298:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 800c29c:	2200      	movs	r2, #0
 800c29e:	2300      	movs	r3, #0
 800c2a0:	f004 f86c 	bl	801037c <__aeabi_dcmpeq>
 800c2a4:	b9e8      	cbnz	r0, 800c2e2 <_printf_float+0x40e>
 800c2a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	4629      	mov	r1, r5
 800c2ac:	1c7a      	adds	r2, r7, #1
 800c2ae:	3b01      	subs	r3, #1
 800c2b0:	e01d      	b.n	800c2ee <_printf_float+0x41a>
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	4629      	mov	r1, r5
 800c2b6:	f10b 021a 	add.w	r2, fp, #26
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	47b0      	blx	r6
 800c2be:	3001      	adds	r0, #1
 800c2c0:	f43f aef4 	beq.w	800c0ac <_printf_float+0x1d8>
 800c2c4:	3701      	adds	r7, #1
 800c2c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2c8:	3b01      	subs	r3, #1
 800c2ca:	429f      	cmp	r7, r3
 800c2cc:	dbf1      	blt.n	800c2b2 <_printf_float+0x3de>
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	4629      	mov	r1, r5
 800c2d2:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 800c2d6:	464b      	mov	r3, r9
 800c2d8:	47b0      	blx	r6
 800c2da:	3001      	adds	r0, #1
 800c2dc:	f47f af0d 	bne.w	800c0fa <_printf_float+0x226>
 800c2e0:	e6e4      	b.n	800c0ac <_printf_float+0x1d8>
 800c2e2:	2700      	movs	r7, #0
 800c2e4:	e7ef      	b.n	800c2c6 <_printf_float+0x3f2>
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	4629      	mov	r1, r5
 800c2ea:	463a      	mov	r2, r7
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	47b0      	blx	r6
 800c2f0:	3001      	adds	r0, #1
 800c2f2:	d1ec      	bne.n	800c2ce <_printf_float+0x3fa>
 800c2f4:	e6da      	b.n	800c0ac <_printf_float+0x1d8>
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	f10b 0219 	add.w	r2, fp, #25
 800c2fe:	2301      	movs	r3, #1
 800c300:	47b0      	blx	r6
 800c302:	3001      	adds	r0, #1
 800c304:	f43f aed2 	beq.w	800c0ac <_printf_float+0x1d8>
 800c308:	3701      	adds	r7, #1
 800c30a:	f8db 300c 	ldr.w	r3, [fp, #12]
 800c30e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c310:	1a9b      	subs	r3, r3, r2
 800c312:	429f      	cmp	r7, r3
 800c314:	dbef      	blt.n	800c2f6 <_printf_float+0x422>
 800c316:	f8db 000c 	ldr.w	r0, [fp, #12]
 800c31a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c31c:	4298      	cmp	r0, r3
 800c31e:	bfb8      	it	lt
 800c320:	4618      	movlt	r0, r3
 800c322:	e019      	b.n	800c358 <_printf_float+0x484>
 800c324:	2700      	movs	r7, #0
 800c326:	e7f0      	b.n	800c30a <_printf_float+0x436>
 800c328:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c32c:	e88d 000c 	stmia.w	sp, {r2, r3}
 800c330:	f8cb 3000 	str.w	r3, [fp]
 800c334:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800c338:	9302      	str	r3, [sp, #8]
 800c33a:	ab0d      	add	r3, sp, #52	; 0x34
 800c33c:	9303      	str	r3, [sp, #12]
 800c33e:	ab0e      	add	r3, sp, #56	; 0x38
 800c340:	9305      	str	r3, [sp, #20]
 800c342:	2300      	movs	r3, #0
 800c344:	9306      	str	r3, [sp, #24]
 800c346:	f8cd 8010 	str.w	r8, [sp, #16]
 800c34a:	4620      	mov	r0, r4
 800c34c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c350:	f7ff fd30 	bl	800bdb4 <__cvt>
 800c354:	4607      	mov	r7, r0
 800c356:	e640      	b.n	800bfda <_printf_float+0x106>
 800c358:	b011      	add	sp, #68	; 0x44
 800c35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c35e:	bf00      	nop

0800c360 <_printf_common>:
 800c360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c364:	4691      	mov	r9, r2
 800c366:	461f      	mov	r7, r3
 800c368:	688a      	ldr	r2, [r1, #8]
 800c36a:	690b      	ldr	r3, [r1, #16]
 800c36c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c370:	4293      	cmp	r3, r2
 800c372:	bfb8      	it	lt
 800c374:	4613      	movlt	r3, r2
 800c376:	f8c9 3000 	str.w	r3, [r9]
 800c37a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c37e:	4606      	mov	r6, r0
 800c380:	460c      	mov	r4, r1
 800c382:	b112      	cbz	r2, 800c38a <_printf_common+0x2a>
 800c384:	3301      	adds	r3, #1
 800c386:	f8c9 3000 	str.w	r3, [r9]
 800c38a:	6823      	ldr	r3, [r4, #0]
 800c38c:	0699      	lsls	r1, r3, #26
 800c38e:	bf42      	ittt	mi
 800c390:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c394:	3302      	addmi	r3, #2
 800c396:	f8c9 3000 	strmi.w	r3, [r9]
 800c39a:	6825      	ldr	r5, [r4, #0]
 800c39c:	f015 0506 	ands.w	r5, r5, #6
 800c3a0:	d01c      	beq.n	800c3dc <_printf_common+0x7c>
 800c3a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c3a6:	6822      	ldr	r2, [r4, #0]
 800c3a8:	3300      	adds	r3, #0
 800c3aa:	bf18      	it	ne
 800c3ac:	2301      	movne	r3, #1
 800c3ae:	0692      	lsls	r2, r2, #26
 800c3b0:	d51f      	bpl.n	800c3f2 <_printf_common+0x92>
 800c3b2:	18e1      	adds	r1, r4, r3
 800c3b4:	1c5a      	adds	r2, r3, #1
 800c3b6:	2030      	movs	r0, #48	; 0x30
 800c3b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3bc:	4422      	add	r2, r4
 800c3be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3c6:	3302      	adds	r3, #2
 800c3c8:	e013      	b.n	800c3f2 <_printf_common+0x92>
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	4639      	mov	r1, r7
 800c3ce:	f104 0219 	add.w	r2, r4, #25
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	47c0      	blx	r8
 800c3d6:	3001      	adds	r0, #1
 800c3d8:	d007      	beq.n	800c3ea <_printf_common+0x8a>
 800c3da:	3501      	adds	r5, #1
 800c3dc:	68e3      	ldr	r3, [r4, #12]
 800c3de:	f8d9 2000 	ldr.w	r2, [r9]
 800c3e2:	1a9b      	subs	r3, r3, r2
 800c3e4:	429d      	cmp	r5, r3
 800c3e6:	dbf0      	blt.n	800c3ca <_printf_common+0x6a>
 800c3e8:	e7db      	b.n	800c3a2 <_printf_common+0x42>
 800c3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3f2:	4630      	mov	r0, r6
 800c3f4:	4639      	mov	r1, r7
 800c3f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3fa:	47c0      	blx	r8
 800c3fc:	3001      	adds	r0, #1
 800c3fe:	d0f4      	beq.n	800c3ea <_printf_common+0x8a>
 800c400:	6822      	ldr	r2, [r4, #0]
 800c402:	f8d9 5000 	ldr.w	r5, [r9]
 800c406:	68e3      	ldr	r3, [r4, #12]
 800c408:	f002 0206 	and.w	r2, r2, #6
 800c40c:	2a04      	cmp	r2, #4
 800c40e:	bf08      	it	eq
 800c410:	1b5d      	subeq	r5, r3, r5
 800c412:	6922      	ldr	r2, [r4, #16]
 800c414:	68a3      	ldr	r3, [r4, #8]
 800c416:	bf0c      	ite	eq
 800c418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c41c:	2500      	movne	r5, #0
 800c41e:	4293      	cmp	r3, r2
 800c420:	bfc4      	itt	gt
 800c422:	1a9b      	subgt	r3, r3, r2
 800c424:	18ed      	addgt	r5, r5, r3
 800c426:	f04f 0900 	mov.w	r9, #0
 800c42a:	45a9      	cmp	r9, r5
 800c42c:	da0a      	bge.n	800c444 <_printf_common+0xe4>
 800c42e:	4630      	mov	r0, r6
 800c430:	4639      	mov	r1, r7
 800c432:	f104 021a 	add.w	r2, r4, #26
 800c436:	2301      	movs	r3, #1
 800c438:	47c0      	blx	r8
 800c43a:	3001      	adds	r0, #1
 800c43c:	d0d5      	beq.n	800c3ea <_printf_common+0x8a>
 800c43e:	f109 0901 	add.w	r9, r9, #1
 800c442:	e7f2      	b.n	800c42a <_printf_common+0xca>
 800c444:	2000      	movs	r0, #0
 800c446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800c44c <_printf_i>:
 800c44c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c450:	460c      	mov	r4, r1
 800c452:	4617      	mov	r7, r2
 800c454:	7e22      	ldrb	r2, [r4, #24]
 800c456:	2a6e      	cmp	r2, #110	; 0x6e
 800c458:	4698      	mov	r8, r3
 800c45a:	4606      	mov	r6, r0
 800c45c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c45e:	f101 0143 	add.w	r1, r1, #67	; 0x43
 800c462:	f000 80af 	beq.w	800c5c4 <_printf_i+0x178>
 800c466:	d812      	bhi.n	800c48e <_printf_i+0x42>
 800c468:	2a63      	cmp	r2, #99	; 0x63
 800c46a:	d023      	beq.n	800c4b4 <_printf_i+0x68>
 800c46c:	d80a      	bhi.n	800c484 <_printf_i+0x38>
 800c46e:	2a00      	cmp	r2, #0
 800c470:	f000 80bc 	beq.w	800c5ec <_printf_i+0x1a0>
 800c474:	2a58      	cmp	r2, #88	; 0x58
 800c476:	f040 80cb 	bne.w	800c610 <_printf_i+0x1c4>
 800c47a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800c47e:	f8df e204 	ldr.w	lr, [pc, #516]	; 800c684 <_printf_i+0x238>
 800c482:	e057      	b.n	800c534 <_printf_i+0xe8>
 800c484:	2a64      	cmp	r2, #100	; 0x64
 800c486:	d01e      	beq.n	800c4c6 <_printf_i+0x7a>
 800c488:	2a69      	cmp	r2, #105	; 0x69
 800c48a:	d01c      	beq.n	800c4c6 <_printf_i+0x7a>
 800c48c:	e0c0      	b.n	800c610 <_printf_i+0x1c4>
 800c48e:	2a73      	cmp	r2, #115	; 0x73
 800c490:	f000 80b0 	beq.w	800c5f4 <_printf_i+0x1a8>
 800c494:	d809      	bhi.n	800c4aa <_printf_i+0x5e>
 800c496:	2a6f      	cmp	r2, #111	; 0x6f
 800c498:	d02e      	beq.n	800c4f8 <_printf_i+0xac>
 800c49a:	2a70      	cmp	r2, #112	; 0x70
 800c49c:	f040 80b8 	bne.w	800c610 <_printf_i+0x1c4>
 800c4a0:	6822      	ldr	r2, [r4, #0]
 800c4a2:	f042 0220 	orr.w	r2, r2, #32
 800c4a6:	6022      	str	r2, [r4, #0]
 800c4a8:	e03f      	b.n	800c52a <_printf_i+0xde>
 800c4aa:	2a75      	cmp	r2, #117	; 0x75
 800c4ac:	d024      	beq.n	800c4f8 <_printf_i+0xac>
 800c4ae:	2a78      	cmp	r2, #120	; 0x78
 800c4b0:	d03b      	beq.n	800c52a <_printf_i+0xde>
 800c4b2:	e0ad      	b.n	800c610 <_printf_i+0x1c4>
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	1d11      	adds	r1, r2, #4
 800c4b8:	6019      	str	r1, [r3, #0]
 800c4ba:	6813      	ldr	r3, [r2, #0]
 800c4bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4c4:	e0a8      	b.n	800c618 <_printf_i+0x1cc>
 800c4c6:	6820      	ldr	r0, [r4, #0]
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c4ce:	d002      	beq.n	800c4d6 <_printf_i+0x8a>
 800c4d0:	1d10      	adds	r0, r2, #4
 800c4d2:	6018      	str	r0, [r3, #0]
 800c4d4:	e008      	b.n	800c4e8 <_printf_i+0x9c>
 800c4d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c4da:	f102 0004 	add.w	r0, r2, #4
 800c4de:	6018      	str	r0, [r3, #0]
 800c4e0:	d002      	beq.n	800c4e8 <_printf_i+0x9c>
 800c4e2:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c4e6:	e000      	b.n	800c4ea <_printf_i+0x9e>
 800c4e8:	6813      	ldr	r3, [r2, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	da3e      	bge.n	800c56c <_printf_i+0x120>
 800c4ee:	222d      	movs	r2, #45	; 0x2d
 800c4f0:	425b      	negs	r3, r3
 800c4f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c4f6:	e039      	b.n	800c56c <_printf_i+0x120>
 800c4f8:	6820      	ldr	r0, [r4, #0]
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c500:	d002      	beq.n	800c508 <_printf_i+0xbc>
 800c502:	1d10      	adds	r0, r2, #4
 800c504:	6018      	str	r0, [r3, #0]
 800c506:	e007      	b.n	800c518 <_printf_i+0xcc>
 800c508:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c50c:	f102 0004 	add.w	r0, r2, #4
 800c510:	6018      	str	r0, [r3, #0]
 800c512:	d001      	beq.n	800c518 <_printf_i+0xcc>
 800c514:	8813      	ldrh	r3, [r2, #0]
 800c516:	e000      	b.n	800c51a <_printf_i+0xce>
 800c518:	6813      	ldr	r3, [r2, #0]
 800c51a:	7e22      	ldrb	r2, [r4, #24]
 800c51c:	f8df e164 	ldr.w	lr, [pc, #356]	; 800c684 <_printf_i+0x238>
 800c520:	2a6f      	cmp	r2, #111	; 0x6f
 800c522:	bf0c      	ite	eq
 800c524:	2208      	moveq	r2, #8
 800c526:	220a      	movne	r2, #10
 800c528:	e01c      	b.n	800c564 <_printf_i+0x118>
 800c52a:	2278      	movs	r2, #120	; 0x78
 800c52c:	f8df e158 	ldr.w	lr, [pc, #344]	; 800c688 <_printf_i+0x23c>
 800c530:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800c534:	6822      	ldr	r2, [r4, #0]
 800c536:	6818      	ldr	r0, [r3, #0]
 800c538:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c53c:	f100 0504 	add.w	r5, r0, #4
 800c540:	601d      	str	r5, [r3, #0]
 800c542:	d103      	bne.n	800c54c <_printf_i+0x100>
 800c544:	0655      	lsls	r5, r2, #25
 800c546:	d501      	bpl.n	800c54c <_printf_i+0x100>
 800c548:	8803      	ldrh	r3, [r0, #0]
 800c54a:	e000      	b.n	800c54e <_printf_i+0x102>
 800c54c:	6803      	ldr	r3, [r0, #0]
 800c54e:	07d0      	lsls	r0, r2, #31
 800c550:	bf44      	itt	mi
 800c552:	f042 0220 	orrmi.w	r2, r2, #32
 800c556:	6022      	strmi	r2, [r4, #0]
 800c558:	b91b      	cbnz	r3, 800c562 <_printf_i+0x116>
 800c55a:	6822      	ldr	r2, [r4, #0]
 800c55c:	f022 0220 	bic.w	r2, r2, #32
 800c560:	6022      	str	r2, [r4, #0]
 800c562:	2210      	movs	r2, #16
 800c564:	2000      	movs	r0, #0
 800c566:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800c56a:	e002      	b.n	800c572 <_printf_i+0x126>
 800c56c:	f8df e114 	ldr.w	lr, [pc, #276]	; 800c684 <_printf_i+0x238>
 800c570:	220a      	movs	r2, #10
 800c572:	6865      	ldr	r5, [r4, #4]
 800c574:	60a5      	str	r5, [r4, #8]
 800c576:	2d00      	cmp	r5, #0
 800c578:	bfa2      	ittt	ge
 800c57a:	6820      	ldrge	r0, [r4, #0]
 800c57c:	f020 0004 	bicge.w	r0, r0, #4
 800c580:	6020      	strge	r0, [r4, #0]
 800c582:	b903      	cbnz	r3, 800c586 <_printf_i+0x13a>
 800c584:	b165      	cbz	r5, 800c5a0 <_printf_i+0x154>
 800c586:	460d      	mov	r5, r1
 800c588:	fbb3 f0f2 	udiv	r0, r3, r2
 800c58c:	fb02 3310 	mls	r3, r2, r0, r3
 800c590:	f81e 3003 	ldrb.w	r3, [lr, r3]
 800c594:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c598:	4603      	mov	r3, r0
 800c59a:	2800      	cmp	r0, #0
 800c59c:	d1f4      	bne.n	800c588 <_printf_i+0x13c>
 800c59e:	e000      	b.n	800c5a2 <_printf_i+0x156>
 800c5a0:	460d      	mov	r5, r1
 800c5a2:	2a08      	cmp	r2, #8
 800c5a4:	d10b      	bne.n	800c5be <_printf_i+0x172>
 800c5a6:	6823      	ldr	r3, [r4, #0]
 800c5a8:	07da      	lsls	r2, r3, #31
 800c5aa:	d508      	bpl.n	800c5be <_printf_i+0x172>
 800c5ac:	6923      	ldr	r3, [r4, #16]
 800c5ae:	6862      	ldr	r2, [r4, #4]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	bfde      	ittt	le
 800c5b4:	2330      	movle	r3, #48	; 0x30
 800c5b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c5ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c5be:	1b49      	subs	r1, r1, r5
 800c5c0:	6121      	str	r1, [r4, #16]
 800c5c2:	e02e      	b.n	800c622 <_printf_i+0x1d6>
 800c5c4:	6825      	ldr	r5, [r4, #0]
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	6960      	ldr	r0, [r4, #20]
 800c5ca:	f015 0f80 	tst.w	r5, #128	; 0x80
 800c5ce:	d003      	beq.n	800c5d8 <_printf_i+0x18c>
 800c5d0:	1d15      	adds	r5, r2, #4
 800c5d2:	601d      	str	r5, [r3, #0]
 800c5d4:	6813      	ldr	r3, [r2, #0]
 800c5d6:	e008      	b.n	800c5ea <_printf_i+0x19e>
 800c5d8:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c5dc:	f102 0504 	add.w	r5, r2, #4
 800c5e0:	601d      	str	r5, [r3, #0]
 800c5e2:	6813      	ldr	r3, [r2, #0]
 800c5e4:	d001      	beq.n	800c5ea <_printf_i+0x19e>
 800c5e6:	8018      	strh	r0, [r3, #0]
 800c5e8:	e000      	b.n	800c5ec <_printf_i+0x1a0>
 800c5ea:	6018      	str	r0, [r3, #0]
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	6123      	str	r3, [r4, #16]
 800c5f0:	460d      	mov	r5, r1
 800c5f2:	e016      	b.n	800c622 <_printf_i+0x1d6>
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	1d11      	adds	r1, r2, #4
 800c5f8:	6019      	str	r1, [r3, #0]
 800c5fa:	6815      	ldr	r5, [r2, #0]
 800c5fc:	6862      	ldr	r2, [r4, #4]
 800c5fe:	4628      	mov	r0, r5
 800c600:	2100      	movs	r1, #0
 800c602:	f7ff f9cf 	bl	800b9a4 <memchr>
 800c606:	b108      	cbz	r0, 800c60c <_printf_i+0x1c0>
 800c608:	1b40      	subs	r0, r0, r5
 800c60a:	6060      	str	r0, [r4, #4]
 800c60c:	6863      	ldr	r3, [r4, #4]
 800c60e:	e004      	b.n	800c61a <_printf_i+0x1ce>
 800c610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c614:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800c618:	2301      	movs	r3, #1
 800c61a:	6123      	str	r3, [r4, #16]
 800c61c:	2300      	movs	r3, #0
 800c61e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c622:	f8cd 8000 	str.w	r8, [sp]
 800c626:	4630      	mov	r0, r6
 800c628:	4621      	mov	r1, r4
 800c62a:	aa03      	add	r2, sp, #12
 800c62c:	463b      	mov	r3, r7
 800c62e:	f7ff fe97 	bl	800c360 <_printf_common>
 800c632:	3001      	adds	r0, #1
 800c634:	d102      	bne.n	800c63c <_printf_i+0x1f0>
 800c636:	f04f 30ff 	mov.w	r0, #4294967295
 800c63a:	e01f      	b.n	800c67c <_printf_i+0x230>
 800c63c:	4630      	mov	r0, r6
 800c63e:	4639      	mov	r1, r7
 800c640:	462a      	mov	r2, r5
 800c642:	6923      	ldr	r3, [r4, #16]
 800c644:	47c0      	blx	r8
 800c646:	3001      	adds	r0, #1
 800c648:	d0f5      	beq.n	800c636 <_printf_i+0x1ea>
 800c64a:	6823      	ldr	r3, [r4, #0]
 800c64c:	079b      	lsls	r3, r3, #30
 800c64e:	d405      	bmi.n	800c65c <_printf_i+0x210>
 800c650:	68e0      	ldr	r0, [r4, #12]
 800c652:	9b03      	ldr	r3, [sp, #12]
 800c654:	4298      	cmp	r0, r3
 800c656:	bfb8      	it	lt
 800c658:	4618      	movlt	r0, r3
 800c65a:	e00f      	b.n	800c67c <_printf_i+0x230>
 800c65c:	2500      	movs	r5, #0
 800c65e:	68e3      	ldr	r3, [r4, #12]
 800c660:	9a03      	ldr	r2, [sp, #12]
 800c662:	1a9b      	subs	r3, r3, r2
 800c664:	429d      	cmp	r5, r3
 800c666:	daf3      	bge.n	800c650 <_printf_i+0x204>
 800c668:	4630      	mov	r0, r6
 800c66a:	4639      	mov	r1, r7
 800c66c:	f104 0219 	add.w	r2, r4, #25
 800c670:	2301      	movs	r3, #1
 800c672:	47c0      	blx	r8
 800c674:	3001      	adds	r0, #1
 800c676:	d0de      	beq.n	800c636 <_printf_i+0x1ea>
 800c678:	3501      	adds	r5, #1
 800c67a:	e7f0      	b.n	800c65e <_printf_i+0x212>
 800c67c:	b004      	add	sp, #16
 800c67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c682:	bf00      	nop
 800c684:	0801c6f3 	.word	0x0801c6f3
 800c688:	0801c704 	.word	0x0801c704

0800c68c <_scanf_float>:
 800c68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c690:	4699      	mov	r9, r3
 800c692:	688b      	ldr	r3, [r1, #8]
 800c694:	4615      	mov	r5, r2
 800c696:	1e5a      	subs	r2, r3, #1
 800c698:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c69c:	bf81      	itttt	hi
 800c69e:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800c6a2:	eb03 0c02 	addhi.w	ip, r3, r2
 800c6a6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c6aa:	608b      	strhi	r3, [r1, #8]
 800c6ac:	680b      	ldr	r3, [r1, #0]
 800c6ae:	460f      	mov	r7, r1
 800c6b0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c6b4:	b087      	sub	sp, #28
 800c6b6:	f847 3b1c 	str.w	r3, [r7], #28
 800c6ba:	f04f 0b00 	mov.w	fp, #0
 800c6be:	4606      	mov	r6, r0
 800c6c0:	460c      	mov	r4, r1
 800c6c2:	bf98      	it	ls
 800c6c4:	f04f 0c00 	movls.w	ip, #0
 800c6c8:	46b8      	mov	r8, r7
 800c6ca:	465a      	mov	r2, fp
 800c6cc:	f8cd b00c 	str.w	fp, [sp, #12]
 800c6d0:	f8cd b008 	str.w	fp, [sp, #8]
 800c6d4:	46da      	mov	sl, fp
 800c6d6:	f8cd b004 	str.w	fp, [sp, #4]
 800c6da:	68a1      	ldr	r1, [r4, #8]
 800c6dc:	2900      	cmp	r1, #0
 800c6de:	f000 80ec 	beq.w	800c8ba <_scanf_float+0x22e>
 800c6e2:	682b      	ldr	r3, [r5, #0]
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	2b49      	cmp	r3, #73	; 0x49
 800c6e8:	d070      	beq.n	800c7cc <_scanf_float+0x140>
 800c6ea:	d816      	bhi.n	800c71a <_scanf_float+0x8e>
 800c6ec:	2b39      	cmp	r3, #57	; 0x39
 800c6ee:	d80d      	bhi.n	800c70c <_scanf_float+0x80>
 800c6f0:	2b31      	cmp	r3, #49	; 0x31
 800c6f2:	d240      	bcs.n	800c776 <_scanf_float+0xea>
 800c6f4:	2b2d      	cmp	r3, #45	; 0x2d
 800c6f6:	d046      	beq.n	800c786 <_scanf_float+0xfa>
 800c6f8:	d802      	bhi.n	800c700 <_scanf_float+0x74>
 800c6fa:	2b2b      	cmp	r3, #43	; 0x2b
 800c6fc:	d043      	beq.n	800c786 <_scanf_float+0xfa>
 800c6fe:	e0dc      	b.n	800c8ba <_scanf_float+0x22e>
 800c700:	2b2e      	cmp	r3, #46	; 0x2e
 800c702:	f000 8092 	beq.w	800c82a <_scanf_float+0x19e>
 800c706:	2b30      	cmp	r3, #48	; 0x30
 800c708:	d023      	beq.n	800c752 <_scanf_float+0xc6>
 800c70a:	e0d6      	b.n	800c8ba <_scanf_float+0x22e>
 800c70c:	2b45      	cmp	r3, #69	; 0x45
 800c70e:	f000 8095 	beq.w	800c83c <_scanf_float+0x1b0>
 800c712:	2b46      	cmp	r3, #70	; 0x46
 800c714:	d077      	beq.n	800c806 <_scanf_float+0x17a>
 800c716:	2b41      	cmp	r3, #65	; 0x41
 800c718:	e00c      	b.n	800c734 <_scanf_float+0xa8>
 800c71a:	2b65      	cmp	r3, #101	; 0x65
 800c71c:	f000 808e 	beq.w	800c83c <_scanf_float+0x1b0>
 800c720:	d80a      	bhi.n	800c738 <_scanf_float+0xac>
 800c722:	2b54      	cmp	r3, #84	; 0x54
 800c724:	d075      	beq.n	800c812 <_scanf_float+0x186>
 800c726:	d802      	bhi.n	800c72e <_scanf_float+0xa2>
 800c728:	2b4e      	cmp	r3, #78	; 0x4e
 800c72a:	d034      	beq.n	800c796 <_scanf_float+0x10a>
 800c72c:	e0c5      	b.n	800c8ba <_scanf_float+0x22e>
 800c72e:	2b59      	cmp	r3, #89	; 0x59
 800c730:	d075      	beq.n	800c81e <_scanf_float+0x192>
 800c732:	2b61      	cmp	r3, #97	; 0x61
 800c734:	d046      	beq.n	800c7c4 <_scanf_float+0x138>
 800c736:	e0c0      	b.n	800c8ba <_scanf_float+0x22e>
 800c738:	2b6e      	cmp	r3, #110	; 0x6e
 800c73a:	d02c      	beq.n	800c796 <_scanf_float+0x10a>
 800c73c:	d804      	bhi.n	800c748 <_scanf_float+0xbc>
 800c73e:	2b66      	cmp	r3, #102	; 0x66
 800c740:	d061      	beq.n	800c806 <_scanf_float+0x17a>
 800c742:	2b69      	cmp	r3, #105	; 0x69
 800c744:	d042      	beq.n	800c7cc <_scanf_float+0x140>
 800c746:	e0b8      	b.n	800c8ba <_scanf_float+0x22e>
 800c748:	2b74      	cmp	r3, #116	; 0x74
 800c74a:	d062      	beq.n	800c812 <_scanf_float+0x186>
 800c74c:	2b79      	cmp	r3, #121	; 0x79
 800c74e:	d066      	beq.n	800c81e <_scanf_float+0x192>
 800c750:	e0b3      	b.n	800c8ba <_scanf_float+0x22e>
 800c752:	6820      	ldr	r0, [r4, #0]
 800c754:	f410 7f80 	tst.w	r0, #256	; 0x100
 800c758:	d00d      	beq.n	800c776 <_scanf_float+0xea>
 800c75a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800c75e:	6020      	str	r0, [r4, #0]
 800c760:	f10a 0a01 	add.w	sl, sl, #1
 800c764:	f1bc 0f00 	cmp.w	ip, #0
 800c768:	f000 808a 	beq.w	800c880 <_scanf_float+0x1f4>
 800c76c:	3101      	adds	r1, #1
 800c76e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c772:	60a1      	str	r1, [r4, #8]
 800c774:	e084      	b.n	800c880 <_scanf_float+0x1f4>
 800c776:	eb12 0f0b 	cmn.w	r2, fp
 800c77a:	f040 809e 	bne.w	800c8ba <_scanf_float+0x22e>
 800c77e:	6821      	ldr	r1, [r4, #0]
 800c780:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800c784:	e005      	b.n	800c792 <_scanf_float+0x106>
 800c786:	6821      	ldr	r1, [r4, #0]
 800c788:	0608      	lsls	r0, r1, #24
 800c78a:	f140 8096 	bpl.w	800c8ba <_scanf_float+0x22e>
 800c78e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c792:	6021      	str	r1, [r4, #0]
 800c794:	e070      	b.n	800c878 <_scanf_float+0x1ec>
 800c796:	b96a      	cbnz	r2, 800c7b4 <_scanf_float+0x128>
 800c798:	f1ba 0f00 	cmp.w	sl, #0
 800c79c:	d10c      	bne.n	800c7b8 <_scanf_float+0x12c>
 800c79e:	6821      	ldr	r1, [r4, #0]
 800c7a0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c7a4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c7a8:	d106      	bne.n	800c7b8 <_scanf_float+0x12c>
 800c7aa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c7ae:	6021      	str	r1, [r4, #0]
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	e061      	b.n	800c878 <_scanf_float+0x1ec>
 800c7b4:	2a02      	cmp	r2, #2
 800c7b6:	d05e      	beq.n	800c876 <_scanf_float+0x1ea>
 800c7b8:	f1bb 0f01 	cmp.w	fp, #1
 800c7bc:	d01e      	beq.n	800c7fc <_scanf_float+0x170>
 800c7be:	f1bb 0f04 	cmp.w	fp, #4
 800c7c2:	e01a      	b.n	800c7fa <_scanf_float+0x16e>
 800c7c4:	2a01      	cmp	r2, #1
 800c7c6:	d178      	bne.n	800c8ba <_scanf_float+0x22e>
 800c7c8:	2202      	movs	r2, #2
 800c7ca:	e055      	b.n	800c878 <_scanf_float+0x1ec>
 800c7cc:	f1bb 0f00 	cmp.w	fp, #0
 800c7d0:	d10e      	bne.n	800c7f0 <_scanf_float+0x164>
 800c7d2:	f1ba 0f00 	cmp.w	sl, #0
 800c7d6:	d173      	bne.n	800c8c0 <_scanf_float+0x234>
 800c7d8:	6821      	ldr	r1, [r4, #0]
 800c7da:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c7de:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c7e2:	d171      	bne.n	800c8c8 <_scanf_float+0x23c>
 800c7e4:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c7e8:	6021      	str	r1, [r4, #0]
 800c7ea:	f04f 0b01 	mov.w	fp, #1
 800c7ee:	e043      	b.n	800c878 <_scanf_float+0x1ec>
 800c7f0:	f1bb 0f03 	cmp.w	fp, #3
 800c7f4:	d002      	beq.n	800c7fc <_scanf_float+0x170>
 800c7f6:	f1bb 0f05 	cmp.w	fp, #5
 800c7fa:	d15e      	bne.n	800c8ba <_scanf_float+0x22e>
 800c7fc:	f10b 0b01 	add.w	fp, fp, #1
 800c800:	fa5f fb8b 	uxtb.w	fp, fp
 800c804:	e038      	b.n	800c878 <_scanf_float+0x1ec>
 800c806:	f1bb 0f02 	cmp.w	fp, #2
 800c80a:	d156      	bne.n	800c8ba <_scanf_float+0x22e>
 800c80c:	f04f 0b03 	mov.w	fp, #3
 800c810:	e032      	b.n	800c878 <_scanf_float+0x1ec>
 800c812:	f1bb 0f06 	cmp.w	fp, #6
 800c816:	d150      	bne.n	800c8ba <_scanf_float+0x22e>
 800c818:	f04f 0b07 	mov.w	fp, #7
 800c81c:	e02c      	b.n	800c878 <_scanf_float+0x1ec>
 800c81e:	f1bb 0f07 	cmp.w	fp, #7
 800c822:	d14a      	bne.n	800c8ba <_scanf_float+0x22e>
 800c824:	f04f 0b08 	mov.w	fp, #8
 800c828:	e026      	b.n	800c878 <_scanf_float+0x1ec>
 800c82a:	6821      	ldr	r1, [r4, #0]
 800c82c:	0588      	lsls	r0, r1, #22
 800c82e:	d544      	bpl.n	800c8ba <_scanf_float+0x22e>
 800c830:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800c834:	6021      	str	r1, [r4, #0]
 800c836:	f8cd a004 	str.w	sl, [sp, #4]
 800c83a:	e01d      	b.n	800c878 <_scanf_float+0x1ec>
 800c83c:	6821      	ldr	r1, [r4, #0]
 800c83e:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800c842:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800c846:	d004      	beq.n	800c852 <_scanf_float+0x1c6>
 800c848:	0548      	lsls	r0, r1, #21
 800c84a:	d536      	bpl.n	800c8ba <_scanf_float+0x22e>
 800c84c:	f1ba 0f00 	cmp.w	sl, #0
 800c850:	d03a      	beq.n	800c8c8 <_scanf_float+0x23c>
 800c852:	0588      	lsls	r0, r1, #22
 800c854:	bf5c      	itt	pl
 800c856:	9801      	ldrpl	r0, [sp, #4]
 800c858:	f8cd 800c 	strpl.w	r8, [sp, #12]
 800c85c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c860:	bf58      	it	pl
 800c862:	ebc0 000a 	rsbpl	r0, r0, sl
 800c866:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800c86a:	bf58      	it	pl
 800c86c:	9002      	strpl	r0, [sp, #8]
 800c86e:	6021      	str	r1, [r4, #0]
 800c870:	f04f 0a00 	mov.w	sl, #0
 800c874:	e000      	b.n	800c878 <_scanf_float+0x1ec>
 800c876:	2203      	movs	r2, #3
 800c878:	f888 3000 	strb.w	r3, [r8]
 800c87c:	f108 0801 	add.w	r8, r8, #1
 800c880:	68a3      	ldr	r3, [r4, #8]
 800c882:	3b01      	subs	r3, #1
 800c884:	60a3      	str	r3, [r4, #8]
 800c886:	6923      	ldr	r3, [r4, #16]
 800c888:	3301      	adds	r3, #1
 800c88a:	6123      	str	r3, [r4, #16]
 800c88c:	686b      	ldr	r3, [r5, #4]
 800c88e:	3b01      	subs	r3, #1
 800c890:	2b00      	cmp	r3, #0
 800c892:	606b      	str	r3, [r5, #4]
 800c894:	dd03      	ble.n	800c89e <_scanf_float+0x212>
 800c896:	682b      	ldr	r3, [r5, #0]
 800c898:	3301      	adds	r3, #1
 800c89a:	602b      	str	r3, [r5, #0]
 800c89c:	e71d      	b.n	800c6da <_scanf_float+0x4e>
 800c89e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c8a2:	9205      	str	r2, [sp, #20]
 800c8a4:	4630      	mov	r0, r6
 800c8a6:	4629      	mov	r1, r5
 800c8a8:	f8cd c010 	str.w	ip, [sp, #16]
 800c8ac:	4798      	blx	r3
 800c8ae:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c8b2:	9a05      	ldr	r2, [sp, #20]
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	f43f af10 	beq.w	800c6da <_scanf_float+0x4e>
 800c8ba:	f1ba 0f00 	cmp.w	sl, #0
 800c8be:	d003      	beq.n	800c8c8 <_scanf_float+0x23c>
 800c8c0:	6823      	ldr	r3, [r4, #0]
 800c8c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c8c6:	6023      	str	r3, [r4, #0]
 800c8c8:	3a01      	subs	r2, #1
 800c8ca:	2a01      	cmp	r2, #1
 800c8cc:	d80e      	bhi.n	800c8ec <_scanf_float+0x260>
 800c8ce:	45b8      	cmp	r8, r7
 800c8d0:	d90a      	bls.n	800c8e8 <_scanf_float+0x25c>
 800c8d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c8d6:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 800c8da:	4630      	mov	r0, r6
 800c8dc:	462a      	mov	r2, r5
 800c8de:	4798      	blx	r3
 800c8e0:	6923      	ldr	r3, [r4, #16]
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	6123      	str	r3, [r4, #16]
 800c8e6:	e7f2      	b.n	800c8ce <_scanf_float+0x242>
 800c8e8:	2501      	movs	r5, #1
 800c8ea:	e0ae      	b.n	800ca4a <_scanf_float+0x3be>
 800c8ec:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c8f0:	2b06      	cmp	r3, #6
 800c8f2:	d822      	bhi.n	800c93a <_scanf_float+0x2ae>
 800c8f4:	f1bb 0f02 	cmp.w	fp, #2
 800c8f8:	d912      	bls.n	800c920 <_scanf_float+0x294>
 800c8fa:	f1ab 0b03 	sub.w	fp, fp, #3
 800c8fe:	fa5f fb8b 	uxtb.w	fp, fp
 800c902:	ebcb 0b08 	rsb	fp, fp, r8
 800c906:	45d8      	cmp	r8, fp
 800c908:	d017      	beq.n	800c93a <_scanf_float+0x2ae>
 800c90a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c90e:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 800c912:	4630      	mov	r0, r6
 800c914:	462a      	mov	r2, r5
 800c916:	4798      	blx	r3
 800c918:	6923      	ldr	r3, [r4, #16]
 800c91a:	3b01      	subs	r3, #1
 800c91c:	6123      	str	r3, [r4, #16]
 800c91e:	e7f2      	b.n	800c906 <_scanf_float+0x27a>
 800c920:	45b8      	cmp	r8, r7
 800c922:	d9e1      	bls.n	800c8e8 <_scanf_float+0x25c>
 800c924:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c928:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 800c92c:	4630      	mov	r0, r6
 800c92e:	462a      	mov	r2, r5
 800c930:	4798      	blx	r3
 800c932:	6923      	ldr	r3, [r4, #16]
 800c934:	3b01      	subs	r3, #1
 800c936:	6123      	str	r3, [r4, #16]
 800c938:	e7f2      	b.n	800c920 <_scanf_float+0x294>
 800c93a:	6823      	ldr	r3, [r4, #0]
 800c93c:	05da      	lsls	r2, r3, #23
 800c93e:	d52c      	bpl.n	800c99a <_scanf_float+0x30e>
 800c940:	055b      	lsls	r3, r3, #21
 800c942:	d50c      	bpl.n	800c95e <_scanf_float+0x2d2>
 800c944:	45b8      	cmp	r8, r7
 800c946:	d9cf      	bls.n	800c8e8 <_scanf_float+0x25c>
 800c948:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c94c:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 800c950:	4630      	mov	r0, r6
 800c952:	462a      	mov	r2, r5
 800c954:	4798      	blx	r3
 800c956:	6923      	ldr	r3, [r4, #16]
 800c958:	3b01      	subs	r3, #1
 800c95a:	6123      	str	r3, [r4, #16]
 800c95c:	e7f2      	b.n	800c944 <_scanf_float+0x2b8>
 800c95e:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 800c962:	6923      	ldr	r3, [r4, #16]
 800c964:	2965      	cmp	r1, #101	; 0x65
 800c966:	f103 33ff 	add.w	r3, r3, #4294967295
 800c96a:	f108 3bff 	add.w	fp, r8, #4294967295
 800c96e:	6123      	str	r3, [r4, #16]
 800c970:	d00d      	beq.n	800c98e <_scanf_float+0x302>
 800c972:	2945      	cmp	r1, #69	; 0x45
 800c974:	d00b      	beq.n	800c98e <_scanf_float+0x302>
 800c976:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c97a:	4630      	mov	r0, r6
 800c97c:	462a      	mov	r2, r5
 800c97e:	4798      	blx	r3
 800c980:	6923      	ldr	r3, [r4, #16]
 800c982:	f818 1c02 	ldrb.w	r1, [r8, #-2]
 800c986:	3b01      	subs	r3, #1
 800c988:	f1a8 0b02 	sub.w	fp, r8, #2
 800c98c:	6123      	str	r3, [r4, #16]
 800c98e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c992:	4630      	mov	r0, r6
 800c994:	462a      	mov	r2, r5
 800c996:	4798      	blx	r3
 800c998:	46d8      	mov	r8, fp
 800c99a:	6825      	ldr	r5, [r4, #0]
 800c99c:	f015 0510 	ands.w	r5, r5, #16
 800c9a0:	d152      	bne.n	800ca48 <_scanf_float+0x3bc>
 800c9a2:	f888 5000 	strb.w	r5, [r8]
 800c9a6:	6823      	ldr	r3, [r4, #0]
 800c9a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c9ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9b0:	d105      	bne.n	800c9be <_scanf_float+0x332>
 800c9b2:	9b01      	ldr	r3, [sp, #4]
 800c9b4:	ebc3 030a 	rsb	r3, r3, sl
 800c9b8:	425a      	negs	r2, r3
 800c9ba:	b96b      	cbnz	r3, 800c9d8 <_scanf_float+0x34c>
 800c9bc:	e016      	b.n	800c9ec <_scanf_float+0x360>
 800c9be:	9b02      	ldr	r3, [sp, #8]
 800c9c0:	b1a3      	cbz	r3, 800c9ec <_scanf_float+0x360>
 800c9c2:	9b03      	ldr	r3, [sp, #12]
 800c9c4:	462a      	mov	r2, r5
 800c9c6:	1c59      	adds	r1, r3, #1
 800c9c8:	4630      	mov	r0, r6
 800c9ca:	230a      	movs	r3, #10
 800c9cc:	f000 ffca 	bl	800d964 <_strtol_r>
 800c9d0:	9b02      	ldr	r3, [sp, #8]
 800c9d2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c9d6:	1ac2      	subs	r2, r0, r3
 800c9d8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c9dc:	4598      	cmp	r8, r3
 800c9de:	bf28      	it	cs
 800c9e0:	f504 78b7 	addcs.w	r8, r4, #366	; 0x16e
 800c9e4:	4640      	mov	r0, r8
 800c9e6:	491b      	ldr	r1, [pc, #108]	; (800ca54 <_scanf_float+0x3c8>)
 800c9e8:	f000 f8ea 	bl	800cbc0 <siprintf>
 800c9ec:	4630      	mov	r0, r6
 800c9ee:	4639      	mov	r1, r7
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	f000 f9a5 	bl	800cd40 <_strtod_r>
 800c9f6:	6822      	ldr	r2, [r4, #0]
 800c9f8:	f8d9 3000 	ldr.w	r3, [r9]
 800c9fc:	f012 0f02 	tst.w	r2, #2
 800ca00:	4606      	mov	r6, r0
 800ca02:	460f      	mov	r7, r1
 800ca04:	d003      	beq.n	800ca0e <_scanf_float+0x382>
 800ca06:	1d1a      	adds	r2, r3, #4
 800ca08:	f8c9 2000 	str.w	r2, [r9]
 800ca0c:	e006      	b.n	800ca1c <_scanf_float+0x390>
 800ca0e:	f012 0f04 	tst.w	r2, #4
 800ca12:	f103 0204 	add.w	r2, r3, #4
 800ca16:	f8c9 2000 	str.w	r2, [r9]
 800ca1a:	d003      	beq.n	800ca24 <_scanf_float+0x398>
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	e9c3 6700 	strd	r6, r7, [r3]
 800ca22:	e00d      	b.n	800ca40 <_scanf_float+0x3b4>
 800ca24:	f8d3 8000 	ldr.w	r8, [r3]
 800ca28:	f000 f816 	bl	800ca58 <__fpclassifyd>
 800ca2c:	b910      	cbnz	r0, 800ca34 <_scanf_float+0x3a8>
 800ca2e:	f000 f84d 	bl	800cacc <nanf>
 800ca32:	e003      	b.n	800ca3c <_scanf_float+0x3b0>
 800ca34:	4630      	mov	r0, r6
 800ca36:	4639      	mov	r1, r7
 800ca38:	f003 fd1a 	bl	8010470 <__aeabi_d2f>
 800ca3c:	f8c8 0000 	str.w	r0, [r8]
 800ca40:	68e3      	ldr	r3, [r4, #12]
 800ca42:	3301      	adds	r3, #1
 800ca44:	60e3      	str	r3, [r4, #12]
 800ca46:	e000      	b.n	800ca4a <_scanf_float+0x3be>
 800ca48:	2500      	movs	r5, #0
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	b007      	add	sp, #28
 800ca4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca52:	bf00      	nop
 800ca54:	0801c715 	.word	0x0801c715

0800ca58 <__fpclassifyd>:
 800ca58:	460a      	mov	r2, r1
 800ca5a:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
 800ca5e:	b510      	push	{r4, lr}
 800ca60:	4603      	mov	r3, r0
 800ca62:	d01b      	beq.n	800ca9c <__fpclassifyd+0x44>
 800ca64:	480f      	ldr	r0, [pc, #60]	; (800caa4 <__fpclassifyd+0x4c>)
 800ca66:	f5a2 1480 	sub.w	r4, r2, #1048576	; 0x100000
 800ca6a:	4284      	cmp	r4, r0
 800ca6c:	d910      	bls.n	800ca90 <__fpclassifyd+0x38>
 800ca6e:	f102 42ff 	add.w	r2, r2, #2139095040	; 0x7f800000
 800ca72:	480c      	ldr	r0, [pc, #48]	; (800caa4 <__fpclassifyd+0x4c>)
 800ca74:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800ca78:	4282      	cmp	r2, r0
 800ca7a:	d909      	bls.n	800ca90 <__fpclassifyd+0x38>
 800ca7c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ca80:	d308      	bcc.n	800ca94 <__fpclassifyd+0x3c>
 800ca82:	4a09      	ldr	r2, [pc, #36]	; (800caa8 <__fpclassifyd+0x50>)
 800ca84:	4291      	cmp	r1, r2
 800ca86:	d107      	bne.n	800ca98 <__fpclassifyd+0x40>
 800ca88:	fab3 f083 	clz	r0, r3
 800ca8c:	0940      	lsrs	r0, r0, #5
 800ca8e:	bd10      	pop	{r4, pc}
 800ca90:	2004      	movs	r0, #4
 800ca92:	bd10      	pop	{r4, pc}
 800ca94:	2003      	movs	r0, #3
 800ca96:	bd10      	pop	{r4, pc}
 800ca98:	2000      	movs	r0, #0
 800ca9a:	bd10      	pop	{r4, pc}
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	d1e6      	bne.n	800ca6e <__fpclassifyd+0x16>
 800caa0:	2002      	movs	r0, #2
 800caa2:	bd10      	pop	{r4, pc}
 800caa4:	7fdfffff 	.word	0x7fdfffff
 800caa8:	7ff00000 	.word	0x7ff00000

0800caac <_sbrk_r>:
 800caac:	b538      	push	{r3, r4, r5, lr}
 800caae:	4c06      	ldr	r4, [pc, #24]	; (800cac8 <_sbrk_r+0x1c>)
 800cab0:	2300      	movs	r3, #0
 800cab2:	4605      	mov	r5, r0
 800cab4:	4608      	mov	r0, r1
 800cab6:	6023      	str	r3, [r4, #0]
 800cab8:	f7fd fa46 	bl	8009f48 <_sbrk>
 800cabc:	1c43      	adds	r3, r0, #1
 800cabe:	d102      	bne.n	800cac6 <_sbrk_r+0x1a>
 800cac0:	6823      	ldr	r3, [r4, #0]
 800cac2:	b103      	cbz	r3, 800cac6 <_sbrk_r+0x1a>
 800cac4:	602b      	str	r3, [r5, #0]
 800cac6:	bd38      	pop	{r3, r4, r5, pc}
 800cac8:	20000dbc 	.word	0x20000dbc

0800cacc <nanf>:
 800cacc:	4800      	ldr	r0, [pc, #0]	; (800cad0 <nanf+0x4>)
 800cace:	4770      	bx	lr
 800cad0:	7fc00000 	.word	0x7fc00000

0800cad4 <_raise_r>:
 800cad4:	291f      	cmp	r1, #31
 800cad6:	b538      	push	{r3, r4, r5, lr}
 800cad8:	4604      	mov	r4, r0
 800cada:	460d      	mov	r5, r1
 800cadc:	d904      	bls.n	800cae8 <_raise_r+0x14>
 800cade:	2316      	movs	r3, #22
 800cae0:	6003      	str	r3, [r0, #0]
 800cae2:	f04f 30ff 	mov.w	r0, #4294967295
 800cae6:	bd38      	pop	{r3, r4, r5, pc}
 800cae8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800caea:	b112      	cbz	r2, 800caf2 <_raise_r+0x1e>
 800caec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800caf0:	b94b      	cbnz	r3, 800cb06 <_raise_r+0x32>
 800caf2:	4620      	mov	r0, r4
 800caf4:	f000 f830 	bl	800cb58 <_getpid_r>
 800caf8:	462a      	mov	r2, r5
 800cafa:	4601      	mov	r1, r0
 800cafc:	4620      	mov	r0, r4
 800cafe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb02:	f000 b817 	b.w	800cb34 <_kill_r>
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d00a      	beq.n	800cb20 <_raise_r+0x4c>
 800cb0a:	1c59      	adds	r1, r3, #1
 800cb0c:	d103      	bne.n	800cb16 <_raise_r+0x42>
 800cb0e:	2316      	movs	r3, #22
 800cb10:	6003      	str	r3, [r0, #0]
 800cb12:	2001      	movs	r0, #1
 800cb14:	bd38      	pop	{r3, r4, r5, pc}
 800cb16:	2400      	movs	r4, #0
 800cb18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb1c:	4628      	mov	r0, r5
 800cb1e:	4798      	blx	r3
 800cb20:	2000      	movs	r0, #0
 800cb22:	bd38      	pop	{r3, r4, r5, pc}

0800cb24 <raise>:
 800cb24:	4b02      	ldr	r3, [pc, #8]	; (800cb30 <raise+0xc>)
 800cb26:	4601      	mov	r1, r0
 800cb28:	6818      	ldr	r0, [r3, #0]
 800cb2a:	f7ff bfd3 	b.w	800cad4 <_raise_r>
 800cb2e:	bf00      	nop
 800cb30:	20000ac0 	.word	0x20000ac0

0800cb34 <_kill_r>:
 800cb34:	b538      	push	{r3, r4, r5, lr}
 800cb36:	4c07      	ldr	r4, [pc, #28]	; (800cb54 <_kill_r+0x20>)
 800cb38:	2300      	movs	r3, #0
 800cb3a:	4605      	mov	r5, r0
 800cb3c:	4608      	mov	r0, r1
 800cb3e:	4611      	mov	r1, r2
 800cb40:	6023      	str	r3, [r4, #0]
 800cb42:	f004 ff77 	bl	8011a34 <_kill>
 800cb46:	1c43      	adds	r3, r0, #1
 800cb48:	d102      	bne.n	800cb50 <_kill_r+0x1c>
 800cb4a:	6823      	ldr	r3, [r4, #0]
 800cb4c:	b103      	cbz	r3, 800cb50 <_kill_r+0x1c>
 800cb4e:	602b      	str	r3, [r5, #0]
 800cb50:	bd38      	pop	{r3, r4, r5, pc}
 800cb52:	bf00      	nop
 800cb54:	20000dbc 	.word	0x20000dbc

0800cb58 <_getpid_r>:
 800cb58:	f004 bf64 	b.w	8011a24 <_getpid>

0800cb5c <sniprintf>:
 800cb5c:	b40c      	push	{r2, r3}
 800cb5e:	b530      	push	{r4, r5, lr}
 800cb60:	4b16      	ldr	r3, [pc, #88]	; (800cbbc <sniprintf+0x60>)
 800cb62:	1e0c      	subs	r4, r1, #0
 800cb64:	b09d      	sub	sp, #116	; 0x74
 800cb66:	681d      	ldr	r5, [r3, #0]
 800cb68:	da04      	bge.n	800cb74 <sniprintf+0x18>
 800cb6a:	238b      	movs	r3, #139	; 0x8b
 800cb6c:	602b      	str	r3, [r5, #0]
 800cb6e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb72:	e01e      	b.n	800cbb2 <sniprintf+0x56>
 800cb74:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cb78:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cb7c:	bf14      	ite	ne
 800cb7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cb82:	4623      	moveq	r3, r4
 800cb84:	9304      	str	r3, [sp, #16]
 800cb86:	9307      	str	r3, [sp, #28]
 800cb88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb8c:	9002      	str	r0, [sp, #8]
 800cb8e:	9006      	str	r0, [sp, #24]
 800cb90:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cb94:	4628      	mov	r0, r5
 800cb96:	ab21      	add	r3, sp, #132	; 0x84
 800cb98:	a902      	add	r1, sp, #8
 800cb9a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cb9c:	9301      	str	r3, [sp, #4]
 800cb9e:	f002 fe9d 	bl	800f8dc <_svfiprintf_r>
 800cba2:	1c43      	adds	r3, r0, #1
 800cba4:	bfbc      	itt	lt
 800cba6:	238b      	movlt	r3, #139	; 0x8b
 800cba8:	602b      	strlt	r3, [r5, #0]
 800cbaa:	b114      	cbz	r4, 800cbb2 <sniprintf+0x56>
 800cbac:	9b02      	ldr	r3, [sp, #8]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	701a      	strb	r2, [r3, #0]
 800cbb2:	b01d      	add	sp, #116	; 0x74
 800cbb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbb8:	b002      	add	sp, #8
 800cbba:	4770      	bx	lr
 800cbbc:	20000ac0 	.word	0x20000ac0

0800cbc0 <siprintf>:
 800cbc0:	b40e      	push	{r1, r2, r3}
 800cbc2:	b500      	push	{lr}
 800cbc4:	b09c      	sub	sp, #112	; 0x70
 800cbc6:	f44f 7102 	mov.w	r1, #520	; 0x208
 800cbca:	f8ad 1014 	strh.w	r1, [sp, #20]
 800cbce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cbd2:	9104      	str	r1, [sp, #16]
 800cbd4:	9107      	str	r1, [sp, #28]
 800cbd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cbda:	ab1d      	add	r3, sp, #116	; 0x74
 800cbdc:	f8ad 1016 	strh.w	r1, [sp, #22]
 800cbe0:	4908      	ldr	r1, [pc, #32]	; (800cc04 <siprintf+0x44>)
 800cbe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbe6:	9002      	str	r0, [sp, #8]
 800cbe8:	9006      	str	r0, [sp, #24]
 800cbea:	6808      	ldr	r0, [r1, #0]
 800cbec:	9301      	str	r3, [sp, #4]
 800cbee:	a902      	add	r1, sp, #8
 800cbf0:	f002 fe74 	bl	800f8dc <_svfiprintf_r>
 800cbf4:	9b02      	ldr	r3, [sp, #8]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	701a      	strb	r2, [r3, #0]
 800cbfa:	b01c      	add	sp, #112	; 0x70
 800cbfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc00:	b003      	add	sp, #12
 800cc02:	4770      	bx	lr
 800cc04:	20000ac0 	.word	0x20000ac0

0800cc08 <__sread>:
 800cc08:	b510      	push	{r4, lr}
 800cc0a:	460c      	mov	r4, r1
 800cc0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc10:	f002 ff56 	bl	800fac0 <_read_r>
 800cc14:	2800      	cmp	r0, #0
 800cc16:	bfab      	itete	ge
 800cc18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc1a:	89a3      	ldrhlt	r3, [r4, #12]
 800cc1c:	181b      	addge	r3, r3, r0
 800cc1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc22:	bfac      	ite	ge
 800cc24:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc26:	81a3      	strhlt	r3, [r4, #12]
 800cc28:	bd10      	pop	{r4, pc}

0800cc2a <__swrite>:
 800cc2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc2e:	461d      	mov	r5, r3
 800cc30:	898b      	ldrh	r3, [r1, #12]
 800cc32:	05db      	lsls	r3, r3, #23
 800cc34:	4607      	mov	r7, r0
 800cc36:	460c      	mov	r4, r1
 800cc38:	4616      	mov	r6, r2
 800cc3a:	d505      	bpl.n	800cc48 <__swrite+0x1e>
 800cc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc40:	2200      	movs	r2, #0
 800cc42:	2302      	movs	r3, #2
 800cc44:	f002 f958 	bl	800eef8 <_lseek_r>
 800cc48:	89a3      	ldrh	r3, [r4, #12]
 800cc4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc52:	81a3      	strh	r3, [r4, #12]
 800cc54:	4638      	mov	r0, r7
 800cc56:	4632      	mov	r2, r6
 800cc58:	462b      	mov	r3, r5
 800cc5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc5e:	f000 bf5b 	b.w	800db18 <_write_r>

0800cc62 <__sseek>:
 800cc62:	b510      	push	{r4, lr}
 800cc64:	460c      	mov	r4, r1
 800cc66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc6a:	f002 f945 	bl	800eef8 <_lseek_r>
 800cc6e:	1c43      	adds	r3, r0, #1
 800cc70:	89a3      	ldrh	r3, [r4, #12]
 800cc72:	bf15      	itete	ne
 800cc74:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc7e:	81a3      	strheq	r3, [r4, #12]
 800cc80:	bf18      	it	ne
 800cc82:	81a3      	strhne	r3, [r4, #12]
 800cc84:	bd10      	pop	{r4, pc}

0800cc86 <__sclose>:
 800cc86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc8a:	f000 bfc3 	b.w	800dc14 <_close_r>

0800cc8e <strlen>:
 800cc8e:	4603      	mov	r3, r0
 800cc90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc94:	2a00      	cmp	r2, #0
 800cc96:	d1fb      	bne.n	800cc90 <strlen+0x2>
 800cc98:	1a18      	subs	r0, r3, r0
 800cc9a:	3801      	subs	r0, #1
 800cc9c:	4770      	bx	lr

0800cc9e <strncmp>:
 800cc9e:	b570      	push	{r4, r5, r6, lr}
 800cca0:	b1aa      	cbz	r2, 800ccce <strncmp+0x30>
 800cca2:	1e45      	subs	r5, r0, #1
 800cca4:	3901      	subs	r1, #1
 800cca6:	786b      	ldrb	r3, [r5, #1]
 800cca8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ccac:	42a3      	cmp	r3, r4
 800ccae:	f105 0601 	add.w	r6, r5, #1
 800ccb2:	d106      	bne.n	800ccc2 <strncmp+0x24>
 800ccb4:	f06f 0401 	mvn.w	r4, #1
 800ccb8:	1b64      	subs	r4, r4, r5
 800ccba:	4414      	add	r4, r2
 800ccbc:	42e0      	cmn	r0, r4
 800ccbe:	d102      	bne.n	800ccc6 <strncmp+0x28>
 800ccc0:	461c      	mov	r4, r3
 800ccc2:	1b18      	subs	r0, r3, r4
 800ccc4:	bd70      	pop	{r4, r5, r6, pc}
 800ccc6:	4635      	mov	r5, r6
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d1ec      	bne.n	800cca6 <strncmp+0x8>
 800cccc:	e7f8      	b.n	800ccc0 <strncmp+0x22>
 800ccce:	4610      	mov	r0, r2
 800ccd0:	bd70      	pop	{r4, r5, r6, pc}

0800ccd2 <match>:
 800ccd2:	b530      	push	{r4, r5, lr}
 800ccd4:	6803      	ldr	r3, [r0, #0]
 800ccd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccda:	3301      	adds	r3, #1
 800ccdc:	b14c      	cbz	r4, 800ccf2 <match+0x20>
 800ccde:	781a      	ldrb	r2, [r3, #0]
 800cce0:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cce4:	2d19      	cmp	r5, #25
 800cce6:	bf98      	it	ls
 800cce8:	3220      	addls	r2, #32
 800ccea:	42a2      	cmp	r2, r4
 800ccec:	d0f3      	beq.n	800ccd6 <match+0x4>
 800ccee:	2000      	movs	r0, #0
 800ccf0:	bd30      	pop	{r4, r5, pc}
 800ccf2:	6003      	str	r3, [r0, #0]
 800ccf4:	2001      	movs	r0, #1
 800ccf6:	bd30      	pop	{r4, r5, pc}

0800ccf8 <sulp>:
 800ccf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccfc:	460f      	mov	r7, r1
 800ccfe:	4690      	mov	r8, r2
 800cd00:	f002 fc42 	bl	800f588 <__ulp>
 800cd04:	4604      	mov	r4, r0
 800cd06:	460d      	mov	r5, r1
 800cd08:	f1b8 0f00 	cmp.w	r8, #0
 800cd0c:	d011      	beq.n	800cd32 <sulp+0x3a>
 800cd0e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800cd12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	dd0b      	ble.n	800cd32 <sulp+0x3a>
 800cd1a:	051b      	lsls	r3, r3, #20
 800cd1c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cd20:	2400      	movs	r4, #0
 800cd22:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cd26:	4622      	mov	r2, r4
 800cd28:	462b      	mov	r3, r5
 800cd2a:	f003 f8bf 	bl	800feac <__aeabi_dmul>
 800cd2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd32:	4620      	mov	r0, r4
 800cd34:	4629      	mov	r1, r5
 800cd36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd3a:	0000      	movs	r0, r0
 800cd3c:	0000      	movs	r0, r0
	...

0800cd40 <_strtod_r>:
 800cd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd44:	b09f      	sub	sp, #124	; 0x7c
 800cd46:	2300      	movs	r3, #0
 800cd48:	4683      	mov	fp, r0
 800cd4a:	468a      	mov	sl, r1
 800cd4c:	9216      	str	r2, [sp, #88]	; 0x58
 800cd4e:	931a      	str	r3, [sp, #104]	; 0x68
 800cd50:	f04f 0800 	mov.w	r8, #0
 800cd54:	f04f 0900 	mov.w	r9, #0
 800cd58:	9119      	str	r1, [sp, #100]	; 0x64
 800cd5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd5c:	781a      	ldrb	r2, [r3, #0]
 800cd5e:	2a0d      	cmp	r2, #13
 800cd60:	d805      	bhi.n	800cd6e <_strtod_r+0x2e>
 800cd62:	2a09      	cmp	r2, #9
 800cd64:	d213      	bcs.n	800cd8e <_strtod_r+0x4e>
 800cd66:	2a00      	cmp	r2, #0
 800cd68:	f000 81be 	beq.w	800d0e8 <_strtod_r+0x3a8>
 800cd6c:	e012      	b.n	800cd94 <_strtod_r+0x54>
 800cd6e:	2a2b      	cmp	r2, #43	; 0x2b
 800cd70:	d006      	beq.n	800cd80 <_strtod_r+0x40>
 800cd72:	2a2d      	cmp	r2, #45	; 0x2d
 800cd74:	d002      	beq.n	800cd7c <_strtod_r+0x3c>
 800cd76:	2a20      	cmp	r2, #32
 800cd78:	d10c      	bne.n	800cd94 <_strtod_r+0x54>
 800cd7a:	e008      	b.n	800cd8e <_strtod_r+0x4e>
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	e000      	b.n	800cd82 <_strtod_r+0x42>
 800cd80:	2200      	movs	r2, #0
 800cd82:	9209      	str	r2, [sp, #36]	; 0x24
 800cd84:	1c5a      	adds	r2, r3, #1
 800cd86:	9219      	str	r2, [sp, #100]	; 0x64
 800cd88:	785b      	ldrb	r3, [r3, #1]
 800cd8a:	b92b      	cbnz	r3, 800cd98 <_strtod_r+0x58>
 800cd8c:	e1ac      	b.n	800d0e8 <_strtod_r+0x3a8>
 800cd8e:	3301      	adds	r3, #1
 800cd90:	9319      	str	r3, [sp, #100]	; 0x64
 800cd92:	e7e2      	b.n	800cd5a <_strtod_r+0x1a>
 800cd94:	2300      	movs	r3, #0
 800cd96:	9309      	str	r3, [sp, #36]	; 0x24
 800cd98:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800cd9a:	7823      	ldrb	r3, [r4, #0]
 800cd9c:	2b30      	cmp	r3, #48	; 0x30
 800cd9e:	d15c      	bne.n	800ce5a <_strtod_r+0x11a>
 800cda0:	7863      	ldrb	r3, [r4, #1]
 800cda2:	2b58      	cmp	r3, #88	; 0x58
 800cda4:	d001      	beq.n	800cdaa <_strtod_r+0x6a>
 800cda6:	2b78      	cmp	r3, #120	; 0x78
 800cda8:	d14c      	bne.n	800ce44 <_strtod_r+0x104>
 800cdaa:	ab1a      	add	r3, sp, #104	; 0x68
 800cdac:	9300      	str	r3, [sp, #0]
 800cdae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdb0:	9301      	str	r3, [sp, #4]
 800cdb2:	4658      	mov	r0, fp
 800cdb4:	a919      	add	r1, sp, #100	; 0x64
 800cdb6:	4ab1      	ldr	r2, [pc, #708]	; (800d07c <_strtod_r+0x33c>)
 800cdb8:	ab1b      	add	r3, sp, #108	; 0x6c
 800cdba:	f001 fdd8 	bl	800e96e <__gethex>
 800cdbe:	f010 0607 	ands.w	r6, r0, #7
 800cdc2:	4605      	mov	r5, r0
 800cdc4:	f000 859b 	beq.w	800d8fe <_strtod_r+0xbbe>
 800cdc8:	2e06      	cmp	r6, #6
 800cdca:	d105      	bne.n	800cdd8 <_strtod_r+0x98>
 800cdcc:	3401      	adds	r4, #1
 800cdce:	2300      	movs	r3, #0
 800cdd0:	9419      	str	r4, [sp, #100]	; 0x64
 800cdd2:	9309      	str	r3, [sp, #36]	; 0x24
 800cdd4:	f000 bd93 	b.w	800d8fe <_strtod_r+0xbbe>
 800cdd8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cdda:	b13a      	cbz	r2, 800cdec <_strtod_r+0xac>
 800cddc:	a81c      	add	r0, sp, #112	; 0x70
 800cdde:	2135      	movs	r1, #53	; 0x35
 800cde0:	f002 fcc0 	bl	800f764 <__copybits>
 800cde4:	4658      	mov	r0, fp
 800cde6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cde8:	f002 f936 	bl	800f058 <_Bfree>
 800cdec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800cdee:	2e06      	cmp	r6, #6
 800cdf0:	d821      	bhi.n	800ce36 <_strtod_r+0xf6>
 800cdf2:	e8df f006 	tbb	[pc, r6]
 800cdf6:	0d04      	.short	0x0d04
 800cdf8:	0d1c1708 	.word	0x0d1c1708
 800cdfc:	04          	.byte	0x04
 800cdfd:	00          	.byte	0x00
 800cdfe:	f04f 0900 	mov.w	r9, #0
 800ce02:	46c8      	mov	r8, r9
 800ce04:	e017      	b.n	800ce36 <_strtod_r+0xf6>
 800ce06:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800ce0a:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 800ce0e:	e012      	b.n	800ce36 <_strtod_r+0xf6>
 800ce10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ce12:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800ce16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ce1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ce1e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ce22:	e008      	b.n	800ce36 <_strtod_r+0xf6>
 800ce24:	f8df 9258 	ldr.w	r9, [pc, #600]	; 800d080 <_strtod_r+0x340>
 800ce28:	f04f 0800 	mov.w	r8, #0
 800ce2c:	e003      	b.n	800ce36 <_strtod_r+0xf6>
 800ce2e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ce32:	f04f 38ff 	mov.w	r8, #4294967295
 800ce36:	0729      	lsls	r1, r5, #28
 800ce38:	f140 8561 	bpl.w	800d8fe <_strtod_r+0xbbe>
 800ce3c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800ce40:	f000 bd5d 	b.w	800d8fe <_strtod_r+0xbbe>
 800ce44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ce46:	1c5a      	adds	r2, r3, #1
 800ce48:	9219      	str	r2, [sp, #100]	; 0x64
 800ce4a:	785b      	ldrb	r3, [r3, #1]
 800ce4c:	2b30      	cmp	r3, #48	; 0x30
 800ce4e:	d0f9      	beq.n	800ce44 <_strtod_r+0x104>
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	f000 8554 	beq.w	800d8fe <_strtod_r+0xbbe>
 800ce56:	2301      	movs	r3, #1
 800ce58:	e000      	b.n	800ce5c <_strtod_r+0x11c>
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	2600      	movs	r6, #0
 800ce5e:	9304      	str	r3, [sp, #16]
 800ce60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ce62:	9305      	str	r3, [sp, #20]
 800ce64:	9603      	str	r6, [sp, #12]
 800ce66:	4635      	mov	r5, r6
 800ce68:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800ce6a:	7827      	ldrb	r7, [r4, #0]
 800ce6c:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800ce70:	b2da      	uxtb	r2, r3
 800ce72:	2a09      	cmp	r2, #9
 800ce74:	d810      	bhi.n	800ce98 <_strtod_r+0x158>
 800ce76:	2d08      	cmp	r5, #8
 800ce78:	bfd8      	it	le
 800ce7a:	9903      	ldrle	r1, [sp, #12]
 800ce7c:	f04f 020a 	mov.w	r2, #10
 800ce80:	bfd8      	it	le
 800ce82:	fb02 3301 	mlale	r3, r2, r1, r3
 800ce86:	f104 0401 	add.w	r4, r4, #1
 800ce8a:	bfd4      	ite	le
 800ce8c:	9303      	strle	r3, [sp, #12]
 800ce8e:	fb02 3606 	mlagt	r6, r2, r6, r3
 800ce92:	3501      	adds	r5, #1
 800ce94:	9419      	str	r4, [sp, #100]	; 0x64
 800ce96:	e7e7      	b.n	800ce68 <_strtod_r+0x128>
 800ce98:	4658      	mov	r0, fp
 800ce9a:	f002 f829 	bl	800eef0 <_localeconv_r>
 800ce9e:	6801      	ldr	r1, [r0, #0]
 800cea0:	9102      	str	r1, [sp, #8]
 800cea2:	4658      	mov	r0, fp
 800cea4:	f002 f824 	bl	800eef0 <_localeconv_r>
 800cea8:	6800      	ldr	r0, [r0, #0]
 800ceaa:	f7ff fef0 	bl	800cc8e <strlen>
 800ceae:	9902      	ldr	r1, [sp, #8]
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f7ff fef3 	bl	800cc9e <strncmp>
 800ceb8:	b128      	cbz	r0, 800cec6 <_strtod_r+0x186>
 800ceba:	2000      	movs	r0, #0
 800cebc:	463b      	mov	r3, r7
 800cebe:	462c      	mov	r4, r5
 800cec0:	9002      	str	r0, [sp, #8]
 800cec2:	4607      	mov	r7, r0
 800cec4:	e05d      	b.n	800cf82 <_strtod_r+0x242>
 800cec6:	9002      	str	r0, [sp, #8]
 800cec8:	4658      	mov	r0, fp
 800ceca:	f002 f811 	bl	800eef0 <_localeconv_r>
 800cece:	6800      	ldr	r0, [r0, #0]
 800ced0:	f7ff fedd 	bl	800cc8e <strlen>
 800ced4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ced6:	9902      	ldr	r1, [sp, #8]
 800ced8:	181a      	adds	r2, r3, r0
 800ceda:	9219      	str	r2, [sp, #100]	; 0x64
 800cedc:	5c1b      	ldrb	r3, [r3, r0]
 800cede:	2d00      	cmp	r5, #0
 800cee0:	d147      	bne.n	800cf72 <_strtod_r+0x232>
 800cee2:	4628      	mov	r0, r5
 800cee4:	2b30      	cmp	r3, #48	; 0x30
 800cee6:	d105      	bne.n	800cef4 <_strtod_r+0x1b4>
 800cee8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ceea:	1c5a      	adds	r2, r3, #1
 800ceec:	9219      	str	r2, [sp, #100]	; 0x64
 800ceee:	3001      	adds	r0, #1
 800cef0:	785b      	ldrb	r3, [r3, #1]
 800cef2:	e7f7      	b.n	800cee4 <_strtod_r+0x1a4>
 800cef4:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800cef8:	2a08      	cmp	r2, #8
 800cefa:	d848      	bhi.n	800cf8e <_strtod_r+0x24e>
 800cefc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cefe:	9002      	str	r0, [sp, #8]
 800cf00:	2000      	movs	r0, #0
 800cf02:	9205      	str	r2, [sp, #20]
 800cf04:	4604      	mov	r4, r0
 800cf06:	3b30      	subs	r3, #48	; 0x30
 800cf08:	f100 0101 	add.w	r1, r0, #1
 800cf0c:	d02b      	beq.n	800cf66 <_strtod_r+0x226>
 800cf0e:	9a02      	ldr	r2, [sp, #8]
 800cf10:	440a      	add	r2, r1
 800cf12:	9202      	str	r2, [sp, #8]
 800cf14:	1907      	adds	r7, r0, r4
 800cf16:	4621      	mov	r1, r4
 800cf18:	42b9      	cmp	r1, r7
 800cf1a:	d013      	beq.n	800cf44 <_strtod_r+0x204>
 800cf1c:	3101      	adds	r1, #1
 800cf1e:	f101 3eff 	add.w	lr, r1, #4294967295
 800cf22:	f1be 0f08 	cmp.w	lr, #8
 800cf26:	dc06      	bgt.n	800cf36 <_strtod_r+0x1f6>
 800cf28:	9a03      	ldr	r2, [sp, #12]
 800cf2a:	f04f 0e0a 	mov.w	lr, #10
 800cf2e:	fb0e f202 	mul.w	r2, lr, r2
 800cf32:	9203      	str	r2, [sp, #12]
 800cf34:	e7f0      	b.n	800cf18 <_strtod_r+0x1d8>
 800cf36:	2910      	cmp	r1, #16
 800cf38:	bfdc      	itt	le
 800cf3a:	f04f 0e0a 	movle.w	lr, #10
 800cf3e:	fb0e f606 	mulle.w	r6, lr, r6
 800cf42:	e7e9      	b.n	800cf18 <_strtod_r+0x1d8>
 800cf44:	4420      	add	r0, r4
 800cf46:	2808      	cmp	r0, #8
 800cf48:	f100 0401 	add.w	r4, r0, #1
 800cf4c:	dc05      	bgt.n	800cf5a <_strtod_r+0x21a>
 800cf4e:	9a03      	ldr	r2, [sp, #12]
 800cf50:	210a      	movs	r1, #10
 800cf52:	fb01 3302 	mla	r3, r1, r2, r3
 800cf56:	9303      	str	r3, [sp, #12]
 800cf58:	e004      	b.n	800cf64 <_strtod_r+0x224>
 800cf5a:	2c10      	cmp	r4, #16
 800cf5c:	bfdc      	itt	le
 800cf5e:	210a      	movle	r1, #10
 800cf60:	fb01 3606 	mlale	r6, r1, r6, r3
 800cf64:	2100      	movs	r1, #0
 800cf66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf68:	1c58      	adds	r0, r3, #1
 800cf6a:	9019      	str	r0, [sp, #100]	; 0x64
 800cf6c:	785b      	ldrb	r3, [r3, #1]
 800cf6e:	4608      	mov	r0, r1
 800cf70:	e002      	b.n	800cf78 <_strtod_r+0x238>
 800cf72:	462c      	mov	r4, r5
 800cf74:	4608      	mov	r0, r1
 800cf76:	9102      	str	r1, [sp, #8]
 800cf78:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cf7c:	2909      	cmp	r1, #9
 800cf7e:	d9c2      	bls.n	800cf06 <_strtod_r+0x1c6>
 800cf80:	2701      	movs	r7, #1
 800cf82:	2b65      	cmp	r3, #101	; 0x65
 800cf84:	d001      	beq.n	800cf8a <_strtod_r+0x24a>
 800cf86:	2b45      	cmp	r3, #69	; 0x45
 800cf88:	d160      	bne.n	800d04c <_strtod_r+0x30c>
 800cf8a:	b974      	cbnz	r4, 800cfaa <_strtod_r+0x26a>
 800cf8c:	e005      	b.n	800cf9a <_strtod_r+0x25a>
 800cf8e:	2b65      	cmp	r3, #101	; 0x65
 800cf90:	f040 84c3 	bne.w	800d91a <_strtod_r+0xbda>
 800cf94:	2300      	movs	r3, #0
 800cf96:	9302      	str	r3, [sp, #8]
 800cf98:	2701      	movs	r7, #1
 800cf9a:	b928      	cbnz	r0, 800cfa8 <_strtod_r+0x268>
 800cf9c:	9b04      	ldr	r3, [sp, #16]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f000 80a2 	beq.w	800d0e8 <_strtod_r+0x3a8>
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	e000      	b.n	800cfaa <_strtod_r+0x26a>
 800cfa8:	2400      	movs	r4, #0
 800cfaa:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800cfae:	f10a 0301 	add.w	r3, sl, #1
 800cfb2:	9319      	str	r3, [sp, #100]	; 0x64
 800cfb4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800cfb8:	2b2b      	cmp	r3, #43	; 0x2b
 800cfba:	d007      	beq.n	800cfcc <_strtod_r+0x28c>
 800cfbc:	2b2d      	cmp	r3, #45	; 0x2d
 800cfbe:	d002      	beq.n	800cfc6 <_strtod_r+0x286>
 800cfc0:	f04f 0c00 	mov.w	ip, #0
 800cfc4:	e009      	b.n	800cfda <_strtod_r+0x29a>
 800cfc6:	f04f 0c01 	mov.w	ip, #1
 800cfca:	e001      	b.n	800cfd0 <_strtod_r+0x290>
 800cfcc:	f04f 0c00 	mov.w	ip, #0
 800cfd0:	f10a 0302 	add.w	r3, sl, #2
 800cfd4:	9319      	str	r3, [sp, #100]	; 0x64
 800cfd6:	f89a 3002 	ldrb.w	r3, [sl, #2]
 800cfda:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cfde:	2909      	cmp	r1, #9
 800cfe0:	d832      	bhi.n	800d048 <_strtod_r+0x308>
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	2930      	cmp	r1, #48	; 0x30
 800cfe6:	d104      	bne.n	800cff2 <_strtod_r+0x2b2>
 800cfe8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cfea:	1c59      	adds	r1, r3, #1
 800cfec:	9119      	str	r1, [sp, #100]	; 0x64
 800cfee:	7859      	ldrb	r1, [r3, #1]
 800cff0:	e7f8      	b.n	800cfe4 <_strtod_r+0x2a4>
 800cff2:	f1a1 0e31 	sub.w	lr, r1, #49	; 0x31
 800cff6:	f1be 0f08 	cmp.w	lr, #8
 800cffa:	460b      	mov	r3, r1
 800cffc:	d826      	bhi.n	800d04c <_strtod_r+0x30c>
 800cffe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d000:	9306      	str	r3, [sp, #24]
 800d002:	3930      	subs	r1, #48	; 0x30
 800d004:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d006:	f103 0e01 	add.w	lr, r3, #1
 800d00a:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 800d00e:	785b      	ldrb	r3, [r3, #1]
 800d010:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d014:	2a09      	cmp	r2, #9
 800d016:	d805      	bhi.n	800d024 <_strtod_r+0x2e4>
 800d018:	f04f 0e0a 	mov.w	lr, #10
 800d01c:	fb0e 3101 	mla	r1, lr, r1, r3
 800d020:	3930      	subs	r1, #48	; 0x30
 800d022:	e7ef      	b.n	800d004 <_strtod_r+0x2c4>
 800d024:	9a06      	ldr	r2, [sp, #24]
 800d026:	ebc2 0e0e 	rsb	lr, r2, lr
 800d02a:	f1be 0f08 	cmp.w	lr, #8
 800d02e:	f644 6e1f 	movw	lr, #19999	; 0x4e1f
 800d032:	dc03      	bgt.n	800d03c <_strtod_r+0x2fc>
 800d034:	4571      	cmp	r1, lr
 800d036:	bfa8      	it	ge
 800d038:	4671      	movge	r1, lr
 800d03a:	e000      	b.n	800d03e <_strtod_r+0x2fe>
 800d03c:	4671      	mov	r1, lr
 800d03e:	f1bc 0f00 	cmp.w	ip, #0
 800d042:	d004      	beq.n	800d04e <_strtod_r+0x30e>
 800d044:	4249      	negs	r1, r1
 800d046:	e002      	b.n	800d04e <_strtod_r+0x30e>
 800d048:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 800d04c:	2100      	movs	r1, #0
 800d04e:	2c00      	cmp	r4, #0
 800d050:	d154      	bne.n	800d0fc <_strtod_r+0x3bc>
 800d052:	2800      	cmp	r0, #0
 800d054:	f040 8453 	bne.w	800d8fe <_strtod_r+0xbbe>
 800d058:	9a04      	ldr	r2, [sp, #16]
 800d05a:	2a00      	cmp	r2, #0
 800d05c:	f040 844f 	bne.w	800d8fe <_strtod_r+0xbbe>
 800d060:	2f00      	cmp	r7, #0
 800d062:	d141      	bne.n	800d0e8 <_strtod_r+0x3a8>
 800d064:	2b4e      	cmp	r3, #78	; 0x4e
 800d066:	d020      	beq.n	800d0aa <_strtod_r+0x36a>
 800d068:	dc02      	bgt.n	800d070 <_strtod_r+0x330>
 800d06a:	2b49      	cmp	r3, #73	; 0x49
 800d06c:	d00a      	beq.n	800d084 <_strtod_r+0x344>
 800d06e:	e03b      	b.n	800d0e8 <_strtod_r+0x3a8>
 800d070:	2b69      	cmp	r3, #105	; 0x69
 800d072:	d007      	beq.n	800d084 <_strtod_r+0x344>
 800d074:	2b6e      	cmp	r3, #110	; 0x6e
 800d076:	d018      	beq.n	800d0aa <_strtod_r+0x36a>
 800d078:	e036      	b.n	800d0e8 <_strtod_r+0x3a8>
 800d07a:	bf00      	nop
 800d07c:	0801c758 	.word	0x0801c758
 800d080:	7ff00000 	.word	0x7ff00000
 800d084:	a819      	add	r0, sp, #100	; 0x64
 800d086:	49a6      	ldr	r1, [pc, #664]	; (800d320 <_strtod_r+0x5e0>)
 800d088:	f7ff fe23 	bl	800ccd2 <match>
 800d08c:	b360      	cbz	r0, 800d0e8 <_strtod_r+0x3a8>
 800d08e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d090:	49a4      	ldr	r1, [pc, #656]	; (800d324 <_strtod_r+0x5e4>)
 800d092:	3b01      	subs	r3, #1
 800d094:	a819      	add	r0, sp, #100	; 0x64
 800d096:	9319      	str	r3, [sp, #100]	; 0x64
 800d098:	f7ff fe1b 	bl	800ccd2 <match>
 800d09c:	b910      	cbnz	r0, 800d0a4 <_strtod_r+0x364>
 800d09e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	9319      	str	r3, [sp, #100]	; 0x64
 800d0a4:	f8df 9294 	ldr.w	r9, [pc, #660]	; 800d33c <_strtod_r+0x5fc>
 800d0a8:	e01a      	b.n	800d0e0 <_strtod_r+0x3a0>
 800d0aa:	a819      	add	r0, sp, #100	; 0x64
 800d0ac:	499e      	ldr	r1, [pc, #632]	; (800d328 <_strtod_r+0x5e8>)
 800d0ae:	f7ff fe10 	bl	800ccd2 <match>
 800d0b2:	b1c8      	cbz	r0, 800d0e8 <_strtod_r+0x3a8>
 800d0b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	2b28      	cmp	r3, #40	; 0x28
 800d0ba:	d10f      	bne.n	800d0dc <_strtod_r+0x39c>
 800d0bc:	a819      	add	r0, sp, #100	; 0x64
 800d0be:	499b      	ldr	r1, [pc, #620]	; (800d32c <_strtod_r+0x5ec>)
 800d0c0:	aa1c      	add	r2, sp, #112	; 0x70
 800d0c2:	f001 fe8b 	bl	800eddc <__hexnan>
 800d0c6:	2805      	cmp	r0, #5
 800d0c8:	d108      	bne.n	800d0dc <_strtod_r+0x39c>
 800d0ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d0cc:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800d0d0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800d0d4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800d0d8:	f000 bc11 	b.w	800d8fe <_strtod_r+0xbbe>
 800d0dc:	f8df 9260 	ldr.w	r9, [pc, #608]	; 800d340 <_strtod_r+0x600>
 800d0e0:	f04f 0800 	mov.w	r8, #0
 800d0e4:	f000 bc0b 	b.w	800d8fe <_strtod_r+0xbbe>
 800d0e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d0ea:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	f000 8410 	beq.w	800d914 <_strtod_r+0xbd4>
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	9309      	str	r3, [sp, #36]	; 0x24
 800d0f8:	f000 bc03 	b.w	800d902 <_strtod_r+0xbc2>
 800d0fc:	9b02      	ldr	r3, [sp, #8]
 800d0fe:	9803      	ldr	r0, [sp, #12]
 800d100:	1acb      	subs	r3, r1, r3
 800d102:	2d00      	cmp	r5, #0
 800d104:	bf14      	ite	ne
 800d106:	46aa      	movne	sl, r5
 800d108:	46a2      	moveq	sl, r4
 800d10a:	2c10      	cmp	r4, #16
 800d10c:	4625      	mov	r5, r4
 800d10e:	9304      	str	r3, [sp, #16]
 800d110:	bfa8      	it	ge
 800d112:	2510      	movge	r5, #16
 800d114:	f002 fe54 	bl	800fdc0 <__aeabi_ui2d>
 800d118:	2d09      	cmp	r5, #9
 800d11a:	4680      	mov	r8, r0
 800d11c:	4689      	mov	r9, r1
 800d11e:	dd13      	ble.n	800d148 <_strtod_r+0x408>
 800d120:	4b83      	ldr	r3, [pc, #524]	; (800d330 <_strtod_r+0x5f0>)
 800d122:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d126:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d12a:	f002 febf 	bl	800feac <__aeabi_dmul>
 800d12e:	4680      	mov	r8, r0
 800d130:	4630      	mov	r0, r6
 800d132:	4689      	mov	r9, r1
 800d134:	f002 fe44 	bl	800fdc0 <__aeabi_ui2d>
 800d138:	4602      	mov	r2, r0
 800d13a:	460b      	mov	r3, r1
 800d13c:	4640      	mov	r0, r8
 800d13e:	4649      	mov	r1, r9
 800d140:	f002 fd02 	bl	800fb48 <__adddf3>
 800d144:	4680      	mov	r8, r0
 800d146:	4689      	mov	r9, r1
 800d148:	2c0f      	cmp	r4, #15
 800d14a:	dc37      	bgt.n	800d1bc <_strtod_r+0x47c>
 800d14c:	9b04      	ldr	r3, [sp, #16]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	f000 83d5 	beq.w	800d8fe <_strtod_r+0xbbe>
 800d154:	dd24      	ble.n	800d1a0 <_strtod_r+0x460>
 800d156:	2b16      	cmp	r3, #22
 800d158:	dc07      	bgt.n	800d16a <_strtod_r+0x42a>
 800d15a:	4a75      	ldr	r2, [pc, #468]	; (800d330 <_strtod_r+0x5f0>)
 800d15c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d160:	e9d2 0100 	ldrd	r0, r1, [r2]
 800d164:	464b      	mov	r3, r9
 800d166:	4642      	mov	r2, r8
 800d168:	e015      	b.n	800d196 <_strtod_r+0x456>
 800d16a:	9a04      	ldr	r2, [sp, #16]
 800d16c:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d170:	429a      	cmp	r2, r3
 800d172:	dc23      	bgt.n	800d1bc <_strtod_r+0x47c>
 800d174:	4d6e      	ldr	r5, [pc, #440]	; (800d330 <_strtod_r+0x5f0>)
 800d176:	f1c4 040f 	rsb	r4, r4, #15
 800d17a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800d17e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d182:	4642      	mov	r2, r8
 800d184:	464b      	mov	r3, r9
 800d186:	f002 fe91 	bl	800feac <__aeabi_dmul>
 800d18a:	9b04      	ldr	r3, [sp, #16]
 800d18c:	1b1c      	subs	r4, r3, r4
 800d18e:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d192:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d196:	f002 fe89 	bl	800feac <__aeabi_dmul>
 800d19a:	4680      	mov	r8, r0
 800d19c:	4689      	mov	r9, r1
 800d19e:	e3ae      	b.n	800d8fe <_strtod_r+0xbbe>
 800d1a0:	9b04      	ldr	r3, [sp, #16]
 800d1a2:	f113 0f16 	cmn.w	r3, #22
 800d1a6:	db09      	blt.n	800d1bc <_strtod_r+0x47c>
 800d1a8:	4a61      	ldr	r2, [pc, #388]	; (800d330 <_strtod_r+0x5f0>)
 800d1aa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800d1ae:	4640      	mov	r0, r8
 800d1b0:	4649      	mov	r1, r9
 800d1b2:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d1b6:	f002 ffa3 	bl	8010100 <__aeabi_ddiv>
 800d1ba:	e7ee      	b.n	800d19a <_strtod_r+0x45a>
 800d1bc:	9b04      	ldr	r3, [sp, #16]
 800d1be:	1b65      	subs	r5, r4, r5
 800d1c0:	441d      	add	r5, r3
 800d1c2:	2d00      	cmp	r5, #0
 800d1c4:	dd54      	ble.n	800d270 <_strtod_r+0x530>
 800d1c6:	f015 020f 	ands.w	r2, r5, #15
 800d1ca:	d00a      	beq.n	800d1e2 <_strtod_r+0x4a2>
 800d1cc:	4b58      	ldr	r3, [pc, #352]	; (800d330 <_strtod_r+0x5f0>)
 800d1ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d1d6:	4642      	mov	r2, r8
 800d1d8:	464b      	mov	r3, r9
 800d1da:	f002 fe67 	bl	800feac <__aeabi_dmul>
 800d1de:	4680      	mov	r8, r0
 800d1e0:	4689      	mov	r9, r1
 800d1e2:	f035 050f 	bics.w	r5, r5, #15
 800d1e6:	f000 80b1 	beq.w	800d34c <_strtod_r+0x60c>
 800d1ea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800d1ee:	dd0b      	ble.n	800d208 <_strtod_r+0x4c8>
 800d1f0:	2400      	movs	r4, #0
 800d1f2:	46a2      	mov	sl, r4
 800d1f4:	9405      	str	r4, [sp, #20]
 800d1f6:	9403      	str	r4, [sp, #12]
 800d1f8:	2322      	movs	r3, #34	; 0x22
 800d1fa:	f8cb 3000 	str.w	r3, [fp]
 800d1fe:	f8df 913c 	ldr.w	r9, [pc, #316]	; 800d33c <_strtod_r+0x5fc>
 800d202:	f04f 0800 	mov.w	r8, #0
 800d206:	e180      	b.n	800d50a <_strtod_r+0x7ca>
 800d208:	4649      	mov	r1, r9
 800d20a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800d344 <_strtod_r+0x604>
 800d20e:	112d      	asrs	r5, r5, #4
 800d210:	4640      	mov	r0, r8
 800d212:	2700      	movs	r7, #0
 800d214:	464e      	mov	r6, r9
 800d216:	2d01      	cmp	r5, #1
 800d218:	dd0a      	ble.n	800d230 <_strtod_r+0x4f0>
 800d21a:	07ea      	lsls	r2, r5, #31
 800d21c:	d503      	bpl.n	800d226 <_strtod_r+0x4e6>
 800d21e:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d222:	f002 fe43 	bl	800feac <__aeabi_dmul>
 800d226:	3701      	adds	r7, #1
 800d228:	106d      	asrs	r5, r5, #1
 800d22a:	f109 0908 	add.w	r9, r9, #8
 800d22e:	e7f2      	b.n	800d216 <_strtod_r+0x4d6>
 800d230:	4680      	mov	r8, r0
 800d232:	f1a1 7954 	sub.w	r9, r1, #55574528	; 0x3500000
 800d236:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 800d23a:	4642      	mov	r2, r8
 800d23c:	464b      	mov	r3, r9
 800d23e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d242:	f002 fe33 	bl	800feac <__aeabi_dmul>
 800d246:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d24a:	4689      	mov	r9, r1
 800d24c:	460a      	mov	r2, r1
 800d24e:	0d1b      	lsrs	r3, r3, #20
 800d250:	4938      	ldr	r1, [pc, #224]	; (800d334 <_strtod_r+0x5f4>)
 800d252:	051b      	lsls	r3, r3, #20
 800d254:	428b      	cmp	r3, r1
 800d256:	4680      	mov	r8, r0
 800d258:	d8ca      	bhi.n	800d1f0 <_strtod_r+0x4b0>
 800d25a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d25e:	428b      	cmp	r3, r1
 800d260:	bf86      	itte	hi
 800d262:	f8df 90e4 	ldrhi.w	r9, [pc, #228]	; 800d348 <_strtod_r+0x608>
 800d266:	f04f 38ff 	movhi.w	r8, #4294967295
 800d26a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d26e:	e06d      	b.n	800d34c <_strtod_r+0x60c>
 800d270:	d06c      	beq.n	800d34c <_strtod_r+0x60c>
 800d272:	426d      	negs	r5, r5
 800d274:	f015 020f 	ands.w	r2, r5, #15
 800d278:	d00a      	beq.n	800d290 <_strtod_r+0x550>
 800d27a:	4b2d      	ldr	r3, [pc, #180]	; (800d330 <_strtod_r+0x5f0>)
 800d27c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d280:	4640      	mov	r0, r8
 800d282:	4649      	mov	r1, r9
 800d284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d288:	f002 ff3a 	bl	8010100 <__aeabi_ddiv>
 800d28c:	4680      	mov	r8, r0
 800d28e:	4689      	mov	r9, r1
 800d290:	112d      	asrs	r5, r5, #4
 800d292:	d05b      	beq.n	800d34c <_strtod_r+0x60c>
 800d294:	2d1f      	cmp	r5, #31
 800d296:	dd04      	ble.n	800d2a2 <_strtod_r+0x562>
 800d298:	2400      	movs	r4, #0
 800d29a:	46a2      	mov	sl, r4
 800d29c:	9405      	str	r4, [sp, #20]
 800d29e:	9403      	str	r4, [sp, #12]
 800d2a0:	e12c      	b.n	800d4fc <_strtod_r+0x7bc>
 800d2a2:	f015 0f10 	tst.w	r5, #16
 800d2a6:	bf0c      	ite	eq
 800d2a8:	2300      	moveq	r3, #0
 800d2aa:	236a      	movne	r3, #106	; 0x6a
 800d2ac:	4e22      	ldr	r6, [pc, #136]	; (800d338 <_strtod_r+0x5f8>)
 800d2ae:	9302      	str	r3, [sp, #8]
 800d2b0:	4640      	mov	r0, r8
 800d2b2:	4649      	mov	r1, r9
 800d2b4:	2d00      	cmp	r5, #0
 800d2b6:	dd08      	ble.n	800d2ca <_strtod_r+0x58a>
 800d2b8:	07eb      	lsls	r3, r5, #31
 800d2ba:	d503      	bpl.n	800d2c4 <_strtod_r+0x584>
 800d2bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d2c0:	f002 fdf4 	bl	800feac <__aeabi_dmul>
 800d2c4:	106d      	asrs	r5, r5, #1
 800d2c6:	3608      	adds	r6, #8
 800d2c8:	e7f4      	b.n	800d2b4 <_strtod_r+0x574>
 800d2ca:	9b02      	ldr	r3, [sp, #8]
 800d2cc:	4680      	mov	r8, r0
 800d2ce:	4689      	mov	r9, r1
 800d2d0:	b1eb      	cbz	r3, 800d30e <_strtod_r+0x5ce>
 800d2d2:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d2d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	460a      	mov	r2, r1
 800d2de:	dd16      	ble.n	800d30e <_strtod_r+0x5ce>
 800d2e0:	2b1f      	cmp	r3, #31
 800d2e2:	dd0e      	ble.n	800d302 <_strtod_r+0x5c2>
 800d2e4:	2b34      	cmp	r3, #52	; 0x34
 800d2e6:	bfde      	ittt	le
 800d2e8:	3b20      	suble	r3, #32
 800d2ea:	f04f 31ff 	movle.w	r1, #4294967295
 800d2ee:	fa01 f303 	lslle.w	r3, r1, r3
 800d2f2:	f04f 0800 	mov.w	r8, #0
 800d2f6:	bfcc      	ite	gt
 800d2f8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d2fc:	ea03 0902 	andle.w	r9, r3, r2
 800d300:	e005      	b.n	800d30e <_strtod_r+0x5ce>
 800d302:	f04f 32ff 	mov.w	r2, #4294967295
 800d306:	fa02 f303 	lsl.w	r3, r2, r3
 800d30a:	ea03 0800 	and.w	r8, r3, r0
 800d30e:	4640      	mov	r0, r8
 800d310:	4649      	mov	r1, r9
 800d312:	2200      	movs	r2, #0
 800d314:	2300      	movs	r3, #0
 800d316:	f003 f831 	bl	801037c <__aeabi_dcmpeq>
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d1bc      	bne.n	800d298 <_strtod_r+0x558>
 800d31e:	e017      	b.n	800d350 <_strtod_r+0x610>
 800d320:	0801c6e6 	.word	0x0801c6e6
 800d324:	0801c870 	.word	0x0801c870
 800d328:	0801c6ee 	.word	0x0801c6ee
 800d32c:	0801c71c 	.word	0x0801c71c
 800d330:	0801c888 	.word	0x0801c888
 800d334:	7ca00000 	.word	0x7ca00000
 800d338:	0801c730 	.word	0x0801c730
 800d33c:	7ff00000 	.word	0x7ff00000
 800d340:	fff80000 	.word	0xfff80000
 800d344:	0801c950 	.word	0x0801c950
 800d348:	7fefffff 	.word	0x7fefffff
 800d34c:	2300      	movs	r3, #0
 800d34e:	9302      	str	r3, [sp, #8]
 800d350:	9b03      	ldr	r3, [sp, #12]
 800d352:	9300      	str	r3, [sp, #0]
 800d354:	4658      	mov	r0, fp
 800d356:	9905      	ldr	r1, [sp, #20]
 800d358:	4652      	mov	r2, sl
 800d35a:	4623      	mov	r3, r4
 800d35c:	f001 fed1 	bl	800f102 <__s2b>
 800d360:	9005      	str	r0, [sp, #20]
 800d362:	2800      	cmp	r0, #0
 800d364:	f43f af44 	beq.w	800d1f0 <_strtod_r+0x4b0>
 800d368:	9a04      	ldr	r2, [sp, #16]
 800d36a:	9b04      	ldr	r3, [sp, #16]
 800d36c:	2a00      	cmp	r2, #0
 800d36e:	f1c3 0300 	rsb	r3, r3, #0
 800d372:	f04f 0400 	mov.w	r4, #0
 800d376:	bfa8      	it	ge
 800d378:	2300      	movge	r3, #0
 800d37a:	9312      	str	r3, [sp, #72]	; 0x48
 800d37c:	46a2      	mov	sl, r4
 800d37e:	9b05      	ldr	r3, [sp, #20]
 800d380:	4658      	mov	r0, fp
 800d382:	6859      	ldr	r1, [r3, #4]
 800d384:	f001 fe33 	bl	800efee <_Balloc>
 800d388:	9003      	str	r0, [sp, #12]
 800d38a:	2800      	cmp	r0, #0
 800d38c:	f43f af34 	beq.w	800d1f8 <_strtod_r+0x4b8>
 800d390:	9b05      	ldr	r3, [sp, #20]
 800d392:	691a      	ldr	r2, [r3, #16]
 800d394:	9b05      	ldr	r3, [sp, #20]
 800d396:	3202      	adds	r2, #2
 800d398:	f103 010c 	add.w	r1, r3, #12
 800d39c:	0092      	lsls	r2, r2, #2
 800d39e:	300c      	adds	r0, #12
 800d3a0:	f7fe fb0f 	bl	800b9c2 <memcpy>
 800d3a4:	ab1b      	add	r3, sp, #108	; 0x6c
 800d3a6:	9300      	str	r3, [sp, #0]
 800d3a8:	ab1c      	add	r3, sp, #112	; 0x70
 800d3aa:	9301      	str	r3, [sp, #4]
 800d3ac:	4658      	mov	r0, fp
 800d3ae:	4642      	mov	r2, r8
 800d3b0:	464b      	mov	r3, r9
 800d3b2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800d3b6:	f002 f95a 	bl	800f66e <__d2b>
 800d3ba:	901a      	str	r0, [sp, #104]	; 0x68
 800d3bc:	2800      	cmp	r0, #0
 800d3be:	f43f af1b 	beq.w	800d1f8 <_strtod_r+0x4b8>
 800d3c2:	4658      	mov	r0, fp
 800d3c4:	2101      	movs	r1, #1
 800d3c6:	f001 ff29 	bl	800f21c <__i2b>
 800d3ca:	4682      	mov	sl, r0
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	f43f af13 	beq.w	800d1f8 <_strtod_r+0x4b8>
 800d3d2:	9b04      	ldr	r3, [sp, #16]
 800d3d4:	9902      	ldr	r1, [sp, #8]
 800d3d6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800d3d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d3dc:	9308      	str	r3, [sp, #32]
 800d3de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	bfad      	iteet	ge
 800d3e4:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 800d3e6:	9a08      	ldrlt	r2, [sp, #32]
 800d3e8:	9e12      	ldrlt	r6, [sp, #72]	; 0x48
 800d3ea:	18d6      	addge	r6, r2, r3
 800d3ec:	bfb8      	it	lt
 800d3ee:	1ad2      	sublt	r2, r2, r3
 800d3f0:	eba3 0301 	sub.w	r3, r3, r1
 800d3f4:	442b      	add	r3, r5
 800d3f6:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
 800d3fa:	bfa8      	it	ge
 800d3fc:	9a08      	ldrge	r2, [sp, #32]
 800d3fe:	428b      	cmp	r3, r1
 800d400:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
 800d404:	f280 8086 	bge.w	800d514 <_strtod_r+0x7d4>
 800d408:	1ac9      	subs	r1, r1, r3
 800d40a:	291f      	cmp	r1, #31
 800d40c:	eba5 0501 	sub.w	r5, r5, r1
 800d410:	bfc8      	it	gt
 800d412:	49b3      	ldrgt	r1, [pc, #716]	; (800d6e0 <_strtod_r+0x9a0>)
 800d414:	f04f 0001 	mov.w	r0, #1
 800d418:	bfd5      	itete	le
 800d41a:	fa00 f301 	lslle.w	r3, r0, r1
 800d41e:	1ac9      	subgt	r1, r1, r3
 800d420:	9313      	strle	r3, [sp, #76]	; 0x4c
 800d422:	fa00 f301 	lslgt.w	r3, r0, r1
 800d426:	bfd9      	ittee	le
 800d428:	2300      	movle	r3, #0
 800d42a:	9306      	strle	r3, [sp, #24]
 800d42c:	9306      	strgt	r3, [sp, #24]
 800d42e:	9013      	strgt	r0, [sp, #76]	; 0x4c
 800d430:	1977      	adds	r7, r6, r5
 800d432:	9b02      	ldr	r3, [sp, #8]
 800d434:	42b7      	cmp	r7, r6
 800d436:	4415      	add	r5, r2
 800d438:	441d      	add	r5, r3
 800d43a:	463b      	mov	r3, r7
 800d43c:	bfa8      	it	ge
 800d43e:	4633      	movge	r3, r6
 800d440:	42ab      	cmp	r3, r5
 800d442:	bfa8      	it	ge
 800d444:	462b      	movge	r3, r5
 800d446:	2b00      	cmp	r3, #0
 800d448:	bfc2      	ittt	gt
 800d44a:	1aff      	subgt	r7, r7, r3
 800d44c:	1aed      	subgt	r5, r5, r3
 800d44e:	1af6      	subgt	r6, r6, r3
 800d450:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d452:	2b00      	cmp	r3, #0
 800d454:	d163      	bne.n	800d51e <_strtod_r+0x7de>
 800d456:	2f00      	cmp	r7, #0
 800d458:	dc7a      	bgt.n	800d550 <_strtod_r+0x810>
 800d45a:	9b08      	ldr	r3, [sp, #32]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	f040 8081 	bne.w	800d564 <_strtod_r+0x824>
 800d462:	2d00      	cmp	r5, #0
 800d464:	f300 8088 	bgt.w	800d578 <_strtod_r+0x838>
 800d468:	2e00      	cmp	r6, #0
 800d46a:	f300 808f 	bgt.w	800d58c <_strtod_r+0x84c>
 800d46e:	4658      	mov	r0, fp
 800d470:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d472:	9a03      	ldr	r2, [sp, #12]
 800d474:	f002 f829 	bl	800f4ca <__mdiff>
 800d478:	4604      	mov	r4, r0
 800d47a:	2800      	cmp	r0, #0
 800d47c:	f43f aebc 	beq.w	800d1f8 <_strtod_r+0x4b8>
 800d480:	68c3      	ldr	r3, [r0, #12]
 800d482:	9308      	str	r3, [sp, #32]
 800d484:	2300      	movs	r3, #0
 800d486:	60c3      	str	r3, [r0, #12]
 800d488:	4651      	mov	r1, sl
 800d48a:	f002 f802 	bl	800f492 <__mcmp>
 800d48e:	2800      	cmp	r0, #0
 800d490:	f280 808a 	bge.w	800d5a8 <_strtod_r+0x868>
 800d494:	9b08      	ldr	r3, [sp, #32]
 800d496:	2b00      	cmp	r3, #0
 800d498:	f040 820a 	bne.w	800d8b0 <_strtod_r+0xb70>
 800d49c:	f1b8 0f00 	cmp.w	r8, #0
 800d4a0:	f040 8206 	bne.w	800d8b0 <_strtod_r+0xb70>
 800d4a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	f040 8201 	bne.w	800d8b0 <_strtod_r+0xb70>
 800d4ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d4b2:	0d1b      	lsrs	r3, r3, #20
 800d4b4:	051b      	lsls	r3, r3, #20
 800d4b6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d4ba:	f240 81f9 	bls.w	800d8b0 <_strtod_r+0xb70>
 800d4be:	6963      	ldr	r3, [r4, #20]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d06d      	beq.n	800d5a0 <_strtod_r+0x860>
 800d4c4:	4621      	mov	r1, r4
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	4658      	mov	r0, fp
 800d4ca:	f001 ff8f 	bl	800f3ec <__lshift>
 800d4ce:	4651      	mov	r1, sl
 800d4d0:	4604      	mov	r4, r0
 800d4d2:	f001 ffde 	bl	800f492 <__mcmp>
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	f340 81ea 	ble.w	800d8b0 <_strtod_r+0xb70>
 800d4dc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d4e0:	9a02      	ldr	r2, [sp, #8]
 800d4e2:	0d1b      	lsrs	r3, r3, #20
 800d4e4:	051b      	lsls	r3, r3, #20
 800d4e6:	2a00      	cmp	r2, #0
 800d4e8:	f000 808d 	beq.w	800d606 <_strtod_r+0x8c6>
 800d4ec:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d4f0:	f300 8089 	bgt.w	800d606 <_strtod_r+0x8c6>
 800d4f4:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 800d4f8:	f300 81dc 	bgt.w	800d8b4 <_strtod_r+0xb74>
 800d4fc:	2322      	movs	r3, #34	; 0x22
 800d4fe:	f04f 0800 	mov.w	r8, #0
 800d502:	f04f 0900 	mov.w	r9, #0
 800d506:	f8cb 3000 	str.w	r3, [fp]
 800d50a:	9b05      	ldr	r3, [sp, #20]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	f040 81e2 	bne.w	800d8d6 <_strtod_r+0xb96>
 800d512:	e1f4      	b.n	800d8fe <_strtod_r+0xbbe>
 800d514:	2300      	movs	r3, #0
 800d516:	9306      	str	r3, [sp, #24]
 800d518:	2301      	movs	r3, #1
 800d51a:	9313      	str	r3, [sp, #76]	; 0x4c
 800d51c:	e788      	b.n	800d430 <_strtod_r+0x6f0>
 800d51e:	4651      	mov	r1, sl
 800d520:	4658      	mov	r0, fp
 800d522:	461a      	mov	r2, r3
 800d524:	f001 ff14 	bl	800f350 <__pow5mult>
 800d528:	4682      	mov	sl, r0
 800d52a:	2800      	cmp	r0, #0
 800d52c:	f43f ae64 	beq.w	800d1f8 <_strtod_r+0x4b8>
 800d530:	4658      	mov	r0, fp
 800d532:	4651      	mov	r1, sl
 800d534:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d536:	f001 fe7a 	bl	800f22e <__multiply>
 800d53a:	9017      	str	r0, [sp, #92]	; 0x5c
 800d53c:	2800      	cmp	r0, #0
 800d53e:	f43f ae5b 	beq.w	800d1f8 <_strtod_r+0x4b8>
 800d542:	4658      	mov	r0, fp
 800d544:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d546:	f001 fd87 	bl	800f058 <_Bfree>
 800d54a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d54c:	931a      	str	r3, [sp, #104]	; 0x68
 800d54e:	e782      	b.n	800d456 <_strtod_r+0x716>
 800d550:	4658      	mov	r0, fp
 800d552:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d554:	463a      	mov	r2, r7
 800d556:	f001 ff49 	bl	800f3ec <__lshift>
 800d55a:	901a      	str	r0, [sp, #104]	; 0x68
 800d55c:	2800      	cmp	r0, #0
 800d55e:	f47f af7c 	bne.w	800d45a <_strtod_r+0x71a>
 800d562:	e649      	b.n	800d1f8 <_strtod_r+0x4b8>
 800d564:	4658      	mov	r0, fp
 800d566:	9903      	ldr	r1, [sp, #12]
 800d568:	9a08      	ldr	r2, [sp, #32]
 800d56a:	f001 fef1 	bl	800f350 <__pow5mult>
 800d56e:	9003      	str	r0, [sp, #12]
 800d570:	2800      	cmp	r0, #0
 800d572:	f47f af76 	bne.w	800d462 <_strtod_r+0x722>
 800d576:	e63f      	b.n	800d1f8 <_strtod_r+0x4b8>
 800d578:	4658      	mov	r0, fp
 800d57a:	9903      	ldr	r1, [sp, #12]
 800d57c:	462a      	mov	r2, r5
 800d57e:	f001 ff35 	bl	800f3ec <__lshift>
 800d582:	9003      	str	r0, [sp, #12]
 800d584:	2800      	cmp	r0, #0
 800d586:	f47f af6f 	bne.w	800d468 <_strtod_r+0x728>
 800d58a:	e635      	b.n	800d1f8 <_strtod_r+0x4b8>
 800d58c:	4651      	mov	r1, sl
 800d58e:	4658      	mov	r0, fp
 800d590:	4632      	mov	r2, r6
 800d592:	f001 ff2b 	bl	800f3ec <__lshift>
 800d596:	4682      	mov	sl, r0
 800d598:	2800      	cmp	r0, #0
 800d59a:	f47f af68 	bne.w	800d46e <_strtod_r+0x72e>
 800d59e:	e62b      	b.n	800d1f8 <_strtod_r+0x4b8>
 800d5a0:	6923      	ldr	r3, [r4, #16]
 800d5a2:	2b01      	cmp	r3, #1
 800d5a4:	dc8e      	bgt.n	800d4c4 <_strtod_r+0x784>
 800d5a6:	e183      	b.n	800d8b0 <_strtod_r+0xb70>
 800d5a8:	d162      	bne.n	800d670 <_strtod_r+0x930>
 800d5aa:	9a08      	ldr	r2, [sp, #32]
 800d5ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d5b0:	b322      	cbz	r2, 800d5fc <_strtod_r+0x8bc>
 800d5b2:	494c      	ldr	r1, [pc, #304]	; (800d6e4 <_strtod_r+0x9a4>)
 800d5b4:	428b      	cmp	r3, r1
 800d5b6:	464a      	mov	r2, r9
 800d5b8:	d12e      	bne.n	800d618 <_strtod_r+0x8d8>
 800d5ba:	9b02      	ldr	r3, [sp, #8]
 800d5bc:	4641      	mov	r1, r8
 800d5be:	b163      	cbz	r3, 800d5da <_strtod_r+0x89a>
 800d5c0:	4b49      	ldr	r3, [pc, #292]	; (800d6e8 <_strtod_r+0x9a8>)
 800d5c2:	4013      	ands	r3, r2
 800d5c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d5c8:	d807      	bhi.n	800d5da <_strtod_r+0x89a>
 800d5ca:	0d1b      	lsrs	r3, r3, #20
 800d5cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d4:	fa00 f303 	lsl.w	r3, r0, r3
 800d5d8:	e001      	b.n	800d5de <_strtod_r+0x89e>
 800d5da:	f04f 33ff 	mov.w	r3, #4294967295
 800d5de:	4299      	cmp	r1, r3
 800d5e0:	d11a      	bne.n	800d618 <_strtod_r+0x8d8>
 800d5e2:	4b42      	ldr	r3, [pc, #264]	; (800d6ec <_strtod_r+0x9ac>)
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d102      	bne.n	800d5ee <_strtod_r+0x8ae>
 800d5e8:	3101      	adds	r1, #1
 800d5ea:	f43f ae05 	beq.w	800d1f8 <_strtod_r+0x4b8>
 800d5ee:	4b3e      	ldr	r3, [pc, #248]	; (800d6e8 <_strtod_r+0x9a8>)
 800d5f0:	4013      	ands	r3, r2
 800d5f2:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d5f6:	f04f 0800 	mov.w	r8, #0
 800d5fa:	e159      	b.n	800d8b0 <_strtod_r+0xb70>
 800d5fc:	b963      	cbnz	r3, 800d618 <_strtod_r+0x8d8>
 800d5fe:	f1b8 0f00 	cmp.w	r8, #0
 800d602:	d109      	bne.n	800d618 <_strtod_r+0x8d8>
 800d604:	e76a      	b.n	800d4dc <_strtod_r+0x79c>
 800d606:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d60a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d60e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d612:	f04f 38ff 	mov.w	r8, #4294967295
 800d616:	e14b      	b.n	800d8b0 <_strtod_r+0xb70>
 800d618:	9b06      	ldr	r3, [sp, #24]
 800d61a:	b113      	cbz	r3, 800d622 <_strtod_r+0x8e2>
 800d61c:	ea13 0f09 	tst.w	r3, r9
 800d620:	e002      	b.n	800d628 <_strtod_r+0x8e8>
 800d622:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d624:	ea13 0f08 	tst.w	r3, r8
 800d628:	f000 8142 	beq.w	800d8b0 <_strtod_r+0xb70>
 800d62c:	9b08      	ldr	r3, [sp, #32]
 800d62e:	9a02      	ldr	r2, [sp, #8]
 800d630:	4640      	mov	r0, r8
 800d632:	4649      	mov	r1, r9
 800d634:	b153      	cbz	r3, 800d64c <_strtod_r+0x90c>
 800d636:	f7ff fb5f 	bl	800ccf8 <sulp>
 800d63a:	4602      	mov	r2, r0
 800d63c:	460b      	mov	r3, r1
 800d63e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d642:	f002 fa81 	bl	800fb48 <__adddf3>
 800d646:	4680      	mov	r8, r0
 800d648:	4689      	mov	r9, r1
 800d64a:	e131      	b.n	800d8b0 <_strtod_r+0xb70>
 800d64c:	f7ff fb54 	bl	800ccf8 <sulp>
 800d650:	4602      	mov	r2, r0
 800d652:	460b      	mov	r3, r1
 800d654:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d658:	f002 fa74 	bl	800fb44 <__aeabi_dsub>
 800d65c:	2200      	movs	r2, #0
 800d65e:	2300      	movs	r3, #0
 800d660:	4680      	mov	r8, r0
 800d662:	4689      	mov	r9, r1
 800d664:	f002 fe8a 	bl	801037c <__aeabi_dcmpeq>
 800d668:	2800      	cmp	r0, #0
 800d66a:	f47f af47 	bne.w	800d4fc <_strtod_r+0x7bc>
 800d66e:	e11f      	b.n	800d8b0 <_strtod_r+0xb70>
 800d670:	4620      	mov	r0, r4
 800d672:	4651      	mov	r1, sl
 800d674:	f002 f84d 	bl	800f712 <__ratio>
 800d678:	2200      	movs	r2, #0
 800d67a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d67e:	4606      	mov	r6, r0
 800d680:	460f      	mov	r7, r1
 800d682:	f002 fe8f 	bl	80103a4 <__aeabi_dcmple>
 800d686:	2800      	cmp	r0, #0
 800d688:	d041      	beq.n	800d70e <_strtod_r+0x9ce>
 800d68a:	9b08      	ldr	r3, [sp, #32]
 800d68c:	b113      	cbz	r3, 800d694 <_strtod_r+0x954>
 800d68e:	2200      	movs	r2, #0
 800d690:	4b17      	ldr	r3, [pc, #92]	; (800d6f0 <_strtod_r+0x9b0>)
 800d692:	e00f      	b.n	800d6b4 <_strtod_r+0x974>
 800d694:	f1b8 0f00 	cmp.w	r8, #0
 800d698:	d103      	bne.n	800d6a2 <_strtod_r+0x962>
 800d69a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d69e:	b93b      	cbnz	r3, 800d6b0 <_strtod_r+0x970>
 800d6a0:	e00d      	b.n	800d6be <_strtod_r+0x97e>
 800d6a2:	f1b8 0f01 	cmp.w	r8, #1
 800d6a6:	d103      	bne.n	800d6b0 <_strtod_r+0x970>
 800d6a8:	f1b9 0f00 	cmp.w	r9, #0
 800d6ac:	f43f af26 	beq.w	800d4fc <_strtod_r+0x7bc>
 800d6b0:	4b10      	ldr	r3, [pc, #64]	; (800d6f4 <_strtod_r+0x9b4>)
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d6b8:	2600      	movs	r6, #0
 800d6ba:	4f0d      	ldr	r7, [pc, #52]	; (800d6f0 <_strtod_r+0x9b0>)
 800d6bc:	e03c      	b.n	800d738 <_strtod_r+0x9f8>
 800d6be:	4630      	mov	r0, r6
 800d6c0:	4639      	mov	r1, r7
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	4b0a      	ldr	r3, [pc, #40]	; (800d6f0 <_strtod_r+0x9b0>)
 800d6c6:	f002 fe63 	bl	8010390 <__aeabi_dcmplt>
 800d6ca:	b9b8      	cbnz	r0, 800d6fc <_strtod_r+0x9bc>
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	4639      	mov	r1, r7
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	4b09      	ldr	r3, [pc, #36]	; (800d6f8 <_strtod_r+0x9b8>)
 800d6d4:	f002 fbea 	bl	800feac <__aeabi_dmul>
 800d6d8:	4606      	mov	r6, r0
 800d6da:	460f      	mov	r7, r1
 800d6dc:	e010      	b.n	800d700 <_strtod_r+0x9c0>
 800d6de:	bf00      	nop
 800d6e0:	fffffbe3 	.word	0xfffffbe3
 800d6e4:	000fffff 	.word	0x000fffff
 800d6e8:	7ff00000 	.word	0x7ff00000
 800d6ec:	7fefffff 	.word	0x7fefffff
 800d6f0:	3ff00000 	.word	0x3ff00000
 800d6f4:	bff00000 	.word	0xbff00000
 800d6f8:	3fe00000 	.word	0x3fe00000
 800d6fc:	4f94      	ldr	r7, [pc, #592]	; (800d950 <_strtod_r+0xc10>)
 800d6fe:	2600      	movs	r6, #0
 800d700:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d704:	9614      	str	r6, [sp, #80]	; 0x50
 800d706:	9315      	str	r3, [sp, #84]	; 0x54
 800d708:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d70c:	e012      	b.n	800d734 <_strtod_r+0x9f4>
 800d70e:	4630      	mov	r0, r6
 800d710:	4639      	mov	r1, r7
 800d712:	4b8f      	ldr	r3, [pc, #572]	; (800d950 <_strtod_r+0xc10>)
 800d714:	2200      	movs	r2, #0
 800d716:	f002 fbc9 	bl	800feac <__aeabi_dmul>
 800d71a:	9b08      	ldr	r3, [sp, #32]
 800d71c:	4606      	mov	r6, r0
 800d71e:	460f      	mov	r7, r1
 800d720:	b923      	cbnz	r3, 800d72c <_strtod_r+0x9ec>
 800d722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d726:	900e      	str	r0, [sp, #56]	; 0x38
 800d728:	930f      	str	r3, [sp, #60]	; 0x3c
 800d72a:	e001      	b.n	800d730 <_strtod_r+0x9f0>
 800d72c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 800d730:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d734:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d738:	f029 4500 	bic.w	r5, r9, #2147483648	; 0x80000000
 800d73c:	0d2d      	lsrs	r5, r5, #20
 800d73e:	4b85      	ldr	r3, [pc, #532]	; (800d954 <_strtod_r+0xc14>)
 800d740:	052d      	lsls	r5, r5, #20
 800d742:	429d      	cmp	r5, r3
 800d744:	d12d      	bne.n	800d7a2 <_strtod_r+0xa62>
 800d746:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d74a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d74e:	4640      	mov	r0, r8
 800d750:	4649      	mov	r1, r9
 800d752:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d756:	f001 ff17 	bl	800f588 <__ulp>
 800d75a:	4602      	mov	r2, r0
 800d75c:	460b      	mov	r3, r1
 800d75e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d762:	f002 fba3 	bl	800feac <__aeabi_dmul>
 800d766:	4602      	mov	r2, r0
 800d768:	460b      	mov	r3, r1
 800d76a:	4640      	mov	r0, r8
 800d76c:	4649      	mov	r1, r9
 800d76e:	f002 f9eb 	bl	800fb48 <__adddf3>
 800d772:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d776:	0d1b      	lsrs	r3, r3, #20
 800d778:	4a77      	ldr	r2, [pc, #476]	; (800d958 <_strtod_r+0xc18>)
 800d77a:	051b      	lsls	r3, r3, #20
 800d77c:	4293      	cmp	r3, r2
 800d77e:	4680      	mov	r8, r0
 800d780:	d90c      	bls.n	800d79c <_strtod_r+0xa5c>
 800d782:	4b76      	ldr	r3, [pc, #472]	; (800d95c <_strtod_r+0xc1c>)
 800d784:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d786:	429a      	cmp	r2, r3
 800d788:	d103      	bne.n	800d792 <_strtod_r+0xa52>
 800d78a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d78c:	3301      	adds	r3, #1
 800d78e:	f43f ad33 	beq.w	800d1f8 <_strtod_r+0x4b8>
 800d792:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 800d95c <_strtod_r+0xc1c>
 800d796:	f04f 38ff 	mov.w	r8, #4294967295
 800d79a:	e078      	b.n	800d88e <_strtod_r+0xb4e>
 800d79c:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800d7a0:	e03d      	b.n	800d81e <_strtod_r+0xade>
 800d7a2:	9b02      	ldr	r3, [sp, #8]
 800d7a4:	b33b      	cbz	r3, 800d7f6 <_strtod_r+0xab6>
 800d7a6:	f1b5 6fd4 	cmp.w	r5, #111149056	; 0x6a00000
 800d7aa:	d824      	bhi.n	800d7f6 <_strtod_r+0xab6>
 800d7ac:	4630      	mov	r0, r6
 800d7ae:	4639      	mov	r1, r7
 800d7b0:	a35f      	add	r3, pc, #380	; (adr r3, 800d930 <_strtod_r+0xbf0>)
 800d7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b6:	f002 fdf5 	bl	80103a4 <__aeabi_dcmple>
 800d7ba:	b1b8      	cbz	r0, 800d7ec <_strtod_r+0xaac>
 800d7bc:	4639      	mov	r1, r7
 800d7be:	4630      	mov	r0, r6
 800d7c0:	f002 fe36 	bl	8010430 <__aeabi_d2uiz>
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	bf08      	it	eq
 800d7c8:	2001      	moveq	r0, #1
 800d7ca:	f002 faf9 	bl	800fdc0 <__aeabi_ui2d>
 800d7ce:	9b08      	ldr	r3, [sp, #32]
 800d7d0:	4606      	mov	r6, r0
 800d7d2:	460f      	mov	r7, r1
 800d7d4:	b923      	cbnz	r3, 800d7e0 <_strtod_r+0xaa0>
 800d7d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7da:	9010      	str	r0, [sp, #64]	; 0x40
 800d7dc:	9311      	str	r3, [sp, #68]	; 0x44
 800d7de:	e001      	b.n	800d7e4 <_strtod_r+0xaa4>
 800d7e0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d7e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d7e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d7ec:	9b07      	ldr	r3, [sp, #28]
 800d7ee:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d7f2:	1b5b      	subs	r3, r3, r5
 800d7f4:	9307      	str	r3, [sp, #28]
 800d7f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d7fa:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800d7fe:	f001 fec3 	bl	800f588 <__ulp>
 800d802:	4602      	mov	r2, r0
 800d804:	460b      	mov	r3, r1
 800d806:	4640      	mov	r0, r8
 800d808:	4649      	mov	r1, r9
 800d80a:	f002 fb4f 	bl	800feac <__aeabi_dmul>
 800d80e:	4602      	mov	r2, r0
 800d810:	460b      	mov	r3, r1
 800d812:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d816:	f002 f997 	bl	800fb48 <__adddf3>
 800d81a:	4680      	mov	r8, r0
 800d81c:	4689      	mov	r9, r1
 800d81e:	9b02      	ldr	r3, [sp, #8]
 800d820:	bbab      	cbnz	r3, 800d88e <_strtod_r+0xb4e>
 800d822:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d826:	0d1b      	lsrs	r3, r3, #20
 800d828:	051b      	lsls	r3, r3, #20
 800d82a:	429d      	cmp	r5, r3
 800d82c:	d12f      	bne.n	800d88e <_strtod_r+0xb4e>
 800d82e:	4639      	mov	r1, r7
 800d830:	4630      	mov	r0, r6
 800d832:	f8cd 9018 	str.w	r9, [sp, #24]
 800d836:	f002 fdd3 	bl	80103e0 <__aeabi_d2iz>
 800d83a:	f002 fad1 	bl	800fde0 <__aeabi_i2d>
 800d83e:	460b      	mov	r3, r1
 800d840:	4602      	mov	r2, r0
 800d842:	4639      	mov	r1, r7
 800d844:	4630      	mov	r0, r6
 800d846:	f002 f97d 	bl	800fb44 <__aeabi_dsub>
 800d84a:	9b08      	ldr	r3, [sp, #32]
 800d84c:	f8dd c018 	ldr.w	ip, [sp, #24]
 800d850:	4606      	mov	r6, r0
 800d852:	460f      	mov	r7, r1
 800d854:	b92b      	cbnz	r3, 800d862 <_strtod_r+0xb22>
 800d856:	f1b8 0f00 	cmp.w	r8, #0
 800d85a:	d102      	bne.n	800d862 <_strtod_r+0xb22>
 800d85c:	f3cc 0313 	ubfx	r3, ip, #0, #20
 800d860:	b17b      	cbz	r3, 800d882 <_strtod_r+0xb42>
 800d862:	4630      	mov	r0, r6
 800d864:	4639      	mov	r1, r7
 800d866:	a334      	add	r3, pc, #208	; (adr r3, 800d938 <_strtod_r+0xbf8>)
 800d868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86c:	f002 fd90 	bl	8010390 <__aeabi_dcmplt>
 800d870:	bb88      	cbnz	r0, 800d8d6 <_strtod_r+0xb96>
 800d872:	4630      	mov	r0, r6
 800d874:	4639      	mov	r1, r7
 800d876:	a332      	add	r3, pc, #200	; (adr r3, 800d940 <_strtod_r+0xc00>)
 800d878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87c:	f002 fda6 	bl	80103cc <__aeabi_dcmpgt>
 800d880:	e004      	b.n	800d88c <_strtod_r+0xb4c>
 800d882:	a331      	add	r3, pc, #196	; (adr r3, 800d948 <_strtod_r+0xc08>)
 800d884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d888:	f002 fd82 	bl	8010390 <__aeabi_dcmplt>
 800d88c:	bb18      	cbnz	r0, 800d8d6 <_strtod_r+0xb96>
 800d88e:	4658      	mov	r0, fp
 800d890:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d892:	f001 fbe1 	bl	800f058 <_Bfree>
 800d896:	4658      	mov	r0, fp
 800d898:	9903      	ldr	r1, [sp, #12]
 800d89a:	f001 fbdd 	bl	800f058 <_Bfree>
 800d89e:	4658      	mov	r0, fp
 800d8a0:	4651      	mov	r1, sl
 800d8a2:	f001 fbd9 	bl	800f058 <_Bfree>
 800d8a6:	4658      	mov	r0, fp
 800d8a8:	4621      	mov	r1, r4
 800d8aa:	f001 fbd5 	bl	800f058 <_Bfree>
 800d8ae:	e566      	b.n	800d37e <_strtod_r+0x63e>
 800d8b0:	9b02      	ldr	r3, [sp, #8]
 800d8b2:	b183      	cbz	r3, 800d8d6 <_strtod_r+0xb96>
 800d8b4:	4b2a      	ldr	r3, [pc, #168]	; (800d960 <_strtod_r+0xc20>)
 800d8b6:	930d      	str	r3, [sp, #52]	; 0x34
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	930c      	str	r3, [sp, #48]	; 0x30
 800d8bc:	4640      	mov	r0, r8
 800d8be:	4649      	mov	r1, r9
 800d8c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d8c4:	f002 faf2 	bl	800feac <__aeabi_dmul>
 800d8c8:	4680      	mov	r8, r0
 800d8ca:	4689      	mov	r9, r1
 800d8cc:	b919      	cbnz	r1, 800d8d6 <_strtod_r+0xb96>
 800d8ce:	b910      	cbnz	r0, 800d8d6 <_strtod_r+0xb96>
 800d8d0:	2322      	movs	r3, #34	; 0x22
 800d8d2:	f8cb 3000 	str.w	r3, [fp]
 800d8d6:	4658      	mov	r0, fp
 800d8d8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d8da:	f001 fbbd 	bl	800f058 <_Bfree>
 800d8de:	4658      	mov	r0, fp
 800d8e0:	9903      	ldr	r1, [sp, #12]
 800d8e2:	f001 fbb9 	bl	800f058 <_Bfree>
 800d8e6:	4658      	mov	r0, fp
 800d8e8:	4651      	mov	r1, sl
 800d8ea:	f001 fbb5 	bl	800f058 <_Bfree>
 800d8ee:	4658      	mov	r0, fp
 800d8f0:	9905      	ldr	r1, [sp, #20]
 800d8f2:	f001 fbb1 	bl	800f058 <_Bfree>
 800d8f6:	4658      	mov	r0, fp
 800d8f8:	4621      	mov	r1, r4
 800d8fa:	f001 fbad 	bl	800f058 <_Bfree>
 800d8fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d900:	b113      	cbz	r3, 800d908 <_strtod_r+0xbc8>
 800d902:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d904:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d906:	6013      	str	r3, [r2, #0]
 800d908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d90a:	b11b      	cbz	r3, 800d914 <_strtod_r+0xbd4>
 800d90c:	4640      	mov	r0, r8
 800d90e:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
 800d912:	e007      	b.n	800d924 <_strtod_r+0xbe4>
 800d914:	4640      	mov	r0, r8
 800d916:	4649      	mov	r1, r9
 800d918:	e004      	b.n	800d924 <_strtod_r+0xbe4>
 800d91a:	2400      	movs	r4, #0
 800d91c:	9402      	str	r4, [sp, #8]
 800d91e:	2701      	movs	r7, #1
 800d920:	f7ff bb31 	b.w	800cf86 <_strtod_r+0x246>
 800d924:	b01f      	add	sp, #124	; 0x7c
 800d926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d92a:	bf00      	nop
 800d92c:	f3af 8000 	nop.w
 800d930:	ffc00000 	.word	0xffc00000
 800d934:	41dfffff 	.word	0x41dfffff
 800d938:	94a03595 	.word	0x94a03595
 800d93c:	3fdfffff 	.word	0x3fdfffff
 800d940:	35afe535 	.word	0x35afe535
 800d944:	3fe00000 	.word	0x3fe00000
 800d948:	94a03595 	.word	0x94a03595
 800d94c:	3fcfffff 	.word	0x3fcfffff
 800d950:	3fe00000 	.word	0x3fe00000
 800d954:	7fe00000 	.word	0x7fe00000
 800d958:	7c9fffff 	.word	0x7c9fffff
 800d95c:	7fefffff 	.word	0x7fefffff
 800d960:	39500000 	.word	0x39500000

0800d964 <_strtol_r>:
 800d964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d968:	4c40      	ldr	r4, [pc, #256]	; (800da6c <_strtol_r+0x108>)
 800d96a:	f8d4 9000 	ldr.w	r9, [r4]
 800d96e:	460f      	mov	r7, r1
 800d970:	463d      	mov	r5, r7
 800d972:	f815 eb01 	ldrb.w	lr, [r5], #1
 800d976:	eb09 040e 	add.w	r4, r9, lr
 800d97a:	7866      	ldrb	r6, [r4, #1]
 800d97c:	f006 0408 	and.w	r4, r6, #8
 800d980:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 800d984:	b10c      	cbz	r4, 800d98a <_strtol_r+0x26>
 800d986:	462f      	mov	r7, r5
 800d988:	e7f2      	b.n	800d970 <_strtol_r+0xc>
 800d98a:	4674      	mov	r4, lr
 800d98c:	2c2d      	cmp	r4, #45	; 0x2d
 800d98e:	d103      	bne.n	800d998 <_strtol_r+0x34>
 800d990:	1cbd      	adds	r5, r7, #2
 800d992:	787c      	ldrb	r4, [r7, #1]
 800d994:	2601      	movs	r6, #1
 800d996:	e003      	b.n	800d9a0 <_strtol_r+0x3c>
 800d998:	2c2b      	cmp	r4, #43	; 0x2b
 800d99a:	bf04      	itt	eq
 800d99c:	787c      	ldrbeq	r4, [r7, #1]
 800d99e:	1cbd      	addeq	r5, r7, #2
 800d9a0:	b113      	cbz	r3, 800d9a8 <_strtol_r+0x44>
 800d9a2:	2b10      	cmp	r3, #16
 800d9a4:	d10a      	bne.n	800d9bc <_strtol_r+0x58>
 800d9a6:	e05a      	b.n	800da5e <_strtol_r+0xfa>
 800d9a8:	2c30      	cmp	r4, #48	; 0x30
 800d9aa:	d156      	bne.n	800da5a <_strtol_r+0xf6>
 800d9ac:	782c      	ldrb	r4, [r5, #0]
 800d9ae:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d9b2:	2c58      	cmp	r4, #88	; 0x58
 800d9b4:	d14c      	bne.n	800da50 <_strtol_r+0xec>
 800d9b6:	786c      	ldrb	r4, [r5, #1]
 800d9b8:	2310      	movs	r3, #16
 800d9ba:	3502      	adds	r5, #2
 800d9bc:	2e00      	cmp	r6, #0
 800d9be:	bf14      	ite	ne
 800d9c0:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
 800d9c4:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
 800d9c8:	2700      	movs	r7, #0
 800d9ca:	fbb8 faf3 	udiv	sl, r8, r3
 800d9ce:	46be      	mov	lr, r7
 800d9d0:	fb03 881a 	mls	r8, r3, sl, r8
 800d9d4:	eb09 0c04 	add.w	ip, r9, r4
 800d9d8:	f89c c001 	ldrb.w	ip, [ip, #1]
 800d9dc:	f01c 0f04 	tst.w	ip, #4
 800d9e0:	d001      	beq.n	800d9e6 <_strtol_r+0x82>
 800d9e2:	3c30      	subs	r4, #48	; 0x30
 800d9e4:	e00b      	b.n	800d9fe <_strtol_r+0x9a>
 800d9e6:	f01c 0c03 	ands.w	ip, ip, #3
 800d9ea:	d01b      	beq.n	800da24 <_strtol_r+0xc0>
 800d9ec:	f1bc 0f01 	cmp.w	ip, #1
 800d9f0:	bf0c      	ite	eq
 800d9f2:	f04f 0c37 	moveq.w	ip, #55	; 0x37
 800d9f6:	f04f 0c57 	movne.w	ip, #87	; 0x57
 800d9fa:	ebcc 0404 	rsb	r4, ip, r4
 800d9fe:	429c      	cmp	r4, r3
 800da00:	da10      	bge.n	800da24 <_strtol_r+0xc0>
 800da02:	f1b7 3fff 	cmp.w	r7, #4294967295
 800da06:	d00a      	beq.n	800da1e <_strtol_r+0xba>
 800da08:	45d6      	cmp	lr, sl
 800da0a:	d806      	bhi.n	800da1a <_strtol_r+0xb6>
 800da0c:	d101      	bne.n	800da12 <_strtol_r+0xae>
 800da0e:	4544      	cmp	r4, r8
 800da10:	dc03      	bgt.n	800da1a <_strtol_r+0xb6>
 800da12:	fb03 4e0e 	mla	lr, r3, lr, r4
 800da16:	2701      	movs	r7, #1
 800da18:	e001      	b.n	800da1e <_strtol_r+0xba>
 800da1a:	f04f 37ff 	mov.w	r7, #4294967295
 800da1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da22:	e7d7      	b.n	800d9d4 <_strtol_r+0x70>
 800da24:	1c7c      	adds	r4, r7, #1
 800da26:	4673      	mov	r3, lr
 800da28:	d10a      	bne.n	800da40 <_strtol_r+0xdc>
 800da2a:	2e00      	cmp	r6, #0
 800da2c:	f04f 0122 	mov.w	r1, #34	; 0x22
 800da30:	bf14      	ite	ne
 800da32:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
 800da36:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 800da3a:	6001      	str	r1, [r0, #0]
 800da3c:	b92a      	cbnz	r2, 800da4a <_strtol_r+0xe6>
 800da3e:	e011      	b.n	800da64 <_strtol_r+0x100>
 800da40:	b10e      	cbz	r6, 800da46 <_strtol_r+0xe2>
 800da42:	f1ce 0300 	rsb	r3, lr, #0
 800da46:	b16a      	cbz	r2, 800da64 <_strtol_r+0x100>
 800da48:	b107      	cbz	r7, 800da4c <_strtol_r+0xe8>
 800da4a:	1e69      	subs	r1, r5, #1
 800da4c:	6011      	str	r1, [r2, #0]
 800da4e:	e009      	b.n	800da64 <_strtol_r+0x100>
 800da50:	2430      	movs	r4, #48	; 0x30
 800da52:	2b00      	cmp	r3, #0
 800da54:	d1b2      	bne.n	800d9bc <_strtol_r+0x58>
 800da56:	2308      	movs	r3, #8
 800da58:	e7b0      	b.n	800d9bc <_strtol_r+0x58>
 800da5a:	230a      	movs	r3, #10
 800da5c:	e7ae      	b.n	800d9bc <_strtol_r+0x58>
 800da5e:	2c30      	cmp	r4, #48	; 0x30
 800da60:	d1ac      	bne.n	800d9bc <_strtol_r+0x58>
 800da62:	e7a3      	b.n	800d9ac <_strtol_r+0x48>
 800da64:	4618      	mov	r0, r3
 800da66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da6a:	bf00      	nop
 800da6c:	20000ac4 	.word	0x20000ac4

0800da70 <__swbuf_r>:
 800da70:	b570      	push	{r4, r5, r6, lr}
 800da72:	460d      	mov	r5, r1
 800da74:	4614      	mov	r4, r2
 800da76:	4606      	mov	r6, r0
 800da78:	b118      	cbz	r0, 800da82 <__swbuf_r+0x12>
 800da7a:	6983      	ldr	r3, [r0, #24]
 800da7c:	b90b      	cbnz	r3, 800da82 <__swbuf_r+0x12>
 800da7e:	f7fd fedb 	bl	800b838 <__sinit>
 800da82:	4b22      	ldr	r3, [pc, #136]	; (800db0c <__swbuf_r+0x9c>)
 800da84:	429c      	cmp	r4, r3
 800da86:	d101      	bne.n	800da8c <__swbuf_r+0x1c>
 800da88:	6874      	ldr	r4, [r6, #4]
 800da8a:	e008      	b.n	800da9e <__swbuf_r+0x2e>
 800da8c:	4b20      	ldr	r3, [pc, #128]	; (800db10 <__swbuf_r+0xa0>)
 800da8e:	429c      	cmp	r4, r3
 800da90:	d101      	bne.n	800da96 <__swbuf_r+0x26>
 800da92:	68b4      	ldr	r4, [r6, #8]
 800da94:	e003      	b.n	800da9e <__swbuf_r+0x2e>
 800da96:	4b1f      	ldr	r3, [pc, #124]	; (800db14 <__swbuf_r+0xa4>)
 800da98:	429c      	cmp	r4, r3
 800da9a:	bf08      	it	eq
 800da9c:	68f4      	ldreq	r4, [r6, #12]
 800da9e:	69a3      	ldr	r3, [r4, #24]
 800daa0:	60a3      	str	r3, [r4, #8]
 800daa2:	89a3      	ldrh	r3, [r4, #12]
 800daa4:	071a      	lsls	r2, r3, #28
 800daa6:	d509      	bpl.n	800dabc <__swbuf_r+0x4c>
 800daa8:	6923      	ldr	r3, [r4, #16]
 800daaa:	b13b      	cbz	r3, 800dabc <__swbuf_r+0x4c>
 800daac:	6823      	ldr	r3, [r4, #0]
 800daae:	6920      	ldr	r0, [r4, #16]
 800dab0:	1a18      	subs	r0, r3, r0
 800dab2:	6963      	ldr	r3, [r4, #20]
 800dab4:	4298      	cmp	r0, r3
 800dab6:	b2ed      	uxtb	r5, r5
 800dab8:	db0f      	blt.n	800dada <__swbuf_r+0x6a>
 800daba:	e008      	b.n	800dace <__swbuf_r+0x5e>
 800dabc:	4630      	mov	r0, r6
 800dabe:	4621      	mov	r1, r4
 800dac0:	f000 f83c 	bl	800db3c <__swsetup_r>
 800dac4:	2800      	cmp	r0, #0
 800dac6:	d0f1      	beq.n	800daac <__swbuf_r+0x3c>
 800dac8:	f04f 30ff 	mov.w	r0, #4294967295
 800dacc:	bd70      	pop	{r4, r5, r6, pc}
 800dace:	4630      	mov	r0, r6
 800dad0:	4621      	mov	r1, r4
 800dad2:	f7fd fe35 	bl	800b740 <_fflush_r>
 800dad6:	2800      	cmp	r0, #0
 800dad8:	d1f6      	bne.n	800dac8 <__swbuf_r+0x58>
 800dada:	68a3      	ldr	r3, [r4, #8]
 800dadc:	3b01      	subs	r3, #1
 800dade:	60a3      	str	r3, [r4, #8]
 800dae0:	6823      	ldr	r3, [r4, #0]
 800dae2:	1c5a      	adds	r2, r3, #1
 800dae4:	6022      	str	r2, [r4, #0]
 800dae6:	701d      	strb	r5, [r3, #0]
 800dae8:	6963      	ldr	r3, [r4, #20]
 800daea:	3001      	adds	r0, #1
 800daec:	4298      	cmp	r0, r3
 800daee:	d004      	beq.n	800dafa <__swbuf_r+0x8a>
 800daf0:	89a3      	ldrh	r3, [r4, #12]
 800daf2:	07db      	lsls	r3, r3, #31
 800daf4:	d507      	bpl.n	800db06 <__swbuf_r+0x96>
 800daf6:	2d0a      	cmp	r5, #10
 800daf8:	d105      	bne.n	800db06 <__swbuf_r+0x96>
 800dafa:	4630      	mov	r0, r6
 800dafc:	4621      	mov	r1, r4
 800dafe:	f7fd fe1f 	bl	800b740 <_fflush_r>
 800db02:	2800      	cmp	r0, #0
 800db04:	d1e0      	bne.n	800dac8 <__swbuf_r+0x58>
 800db06:	4628      	mov	r0, r5
 800db08:	bd70      	pop	{r4, r5, r6, pc}
 800db0a:	bf00      	nop
 800db0c:	0801c668 	.word	0x0801c668
 800db10:	0801c688 	.word	0x0801c688
 800db14:	0801c6a8 	.word	0x0801c6a8

0800db18 <_write_r>:
 800db18:	b538      	push	{r3, r4, r5, lr}
 800db1a:	4c07      	ldr	r4, [pc, #28]	; (800db38 <_write_r+0x20>)
 800db1c:	4605      	mov	r5, r0
 800db1e:	2000      	movs	r0, #0
 800db20:	6020      	str	r0, [r4, #0]
 800db22:	4608      	mov	r0, r1
 800db24:	4611      	mov	r1, r2
 800db26:	461a      	mov	r2, r3
 800db28:	f7fc f986 	bl	8009e38 <_write>
 800db2c:	1c43      	adds	r3, r0, #1
 800db2e:	d102      	bne.n	800db36 <_write_r+0x1e>
 800db30:	6823      	ldr	r3, [r4, #0]
 800db32:	b103      	cbz	r3, 800db36 <_write_r+0x1e>
 800db34:	602b      	str	r3, [r5, #0]
 800db36:	bd38      	pop	{r3, r4, r5, pc}
 800db38:	20000dbc 	.word	0x20000dbc

0800db3c <__swsetup_r>:
 800db3c:	4b31      	ldr	r3, [pc, #196]	; (800dc04 <__swsetup_r+0xc8>)
 800db3e:	b570      	push	{r4, r5, r6, lr}
 800db40:	681d      	ldr	r5, [r3, #0]
 800db42:	4606      	mov	r6, r0
 800db44:	460c      	mov	r4, r1
 800db46:	b125      	cbz	r5, 800db52 <__swsetup_r+0x16>
 800db48:	69ab      	ldr	r3, [r5, #24]
 800db4a:	b913      	cbnz	r3, 800db52 <__swsetup_r+0x16>
 800db4c:	4628      	mov	r0, r5
 800db4e:	f7fd fe73 	bl	800b838 <__sinit>
 800db52:	4b2d      	ldr	r3, [pc, #180]	; (800dc08 <__swsetup_r+0xcc>)
 800db54:	429c      	cmp	r4, r3
 800db56:	d101      	bne.n	800db5c <__swsetup_r+0x20>
 800db58:	686c      	ldr	r4, [r5, #4]
 800db5a:	e008      	b.n	800db6e <__swsetup_r+0x32>
 800db5c:	4b2b      	ldr	r3, [pc, #172]	; (800dc0c <__swsetup_r+0xd0>)
 800db5e:	429c      	cmp	r4, r3
 800db60:	d101      	bne.n	800db66 <__swsetup_r+0x2a>
 800db62:	68ac      	ldr	r4, [r5, #8]
 800db64:	e003      	b.n	800db6e <__swsetup_r+0x32>
 800db66:	4b2a      	ldr	r3, [pc, #168]	; (800dc10 <__swsetup_r+0xd4>)
 800db68:	429c      	cmp	r4, r3
 800db6a:	bf08      	it	eq
 800db6c:	68ec      	ldreq	r4, [r5, #12]
 800db6e:	89a3      	ldrh	r3, [r4, #12]
 800db70:	b29a      	uxth	r2, r3
 800db72:	0711      	lsls	r1, r2, #28
 800db74:	d41d      	bmi.n	800dbb2 <__swsetup_r+0x76>
 800db76:	06d5      	lsls	r5, r2, #27
 800db78:	d402      	bmi.n	800db80 <__swsetup_r+0x44>
 800db7a:	2209      	movs	r2, #9
 800db7c:	6032      	str	r2, [r6, #0]
 800db7e:	e038      	b.n	800dbf2 <__swsetup_r+0xb6>
 800db80:	0750      	lsls	r0, r2, #29
 800db82:	d512      	bpl.n	800dbaa <__swsetup_r+0x6e>
 800db84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db86:	b141      	cbz	r1, 800db9a <__swsetup_r+0x5e>
 800db88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db8c:	4299      	cmp	r1, r3
 800db8e:	d002      	beq.n	800db96 <__swsetup_r+0x5a>
 800db90:	4630      	mov	r0, r6
 800db92:	f7fd ff37 	bl	800ba04 <_free_r>
 800db96:	2300      	movs	r3, #0
 800db98:	6363      	str	r3, [r4, #52]	; 0x34
 800db9a:	89a3      	ldrh	r3, [r4, #12]
 800db9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dba0:	81a3      	strh	r3, [r4, #12]
 800dba2:	2300      	movs	r3, #0
 800dba4:	6063      	str	r3, [r4, #4]
 800dba6:	6923      	ldr	r3, [r4, #16]
 800dba8:	6023      	str	r3, [r4, #0]
 800dbaa:	89a3      	ldrh	r3, [r4, #12]
 800dbac:	f043 0308 	orr.w	r3, r3, #8
 800dbb0:	81a3      	strh	r3, [r4, #12]
 800dbb2:	6923      	ldr	r3, [r4, #16]
 800dbb4:	b94b      	cbnz	r3, 800dbca <__swsetup_r+0x8e>
 800dbb6:	89a3      	ldrh	r3, [r4, #12]
 800dbb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dbbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbc0:	d003      	beq.n	800dbca <__swsetup_r+0x8e>
 800dbc2:	4630      	mov	r0, r6
 800dbc4:	4621      	mov	r1, r4
 800dbc6:	f001 f9a9 	bl	800ef1c <__smakebuf_r>
 800dbca:	89a3      	ldrh	r3, [r4, #12]
 800dbcc:	f013 0201 	ands.w	r2, r3, #1
 800dbd0:	d005      	beq.n	800dbde <__swsetup_r+0xa2>
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	60a2      	str	r2, [r4, #8]
 800dbd6:	6962      	ldr	r2, [r4, #20]
 800dbd8:	4252      	negs	r2, r2
 800dbda:	61a2      	str	r2, [r4, #24]
 800dbdc:	e003      	b.n	800dbe6 <__swsetup_r+0xaa>
 800dbde:	0799      	lsls	r1, r3, #30
 800dbe0:	bf58      	it	pl
 800dbe2:	6962      	ldrpl	r2, [r4, #20]
 800dbe4:	60a2      	str	r2, [r4, #8]
 800dbe6:	6922      	ldr	r2, [r4, #16]
 800dbe8:	b94a      	cbnz	r2, 800dbfe <__swsetup_r+0xc2>
 800dbea:	f003 0080 	and.w	r0, r3, #128	; 0x80
 800dbee:	b280      	uxth	r0, r0
 800dbf0:	b130      	cbz	r0, 800dc00 <__swsetup_r+0xc4>
 800dbf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbf6:	81a3      	strh	r3, [r4, #12]
 800dbf8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbfc:	bd70      	pop	{r4, r5, r6, pc}
 800dbfe:	2000      	movs	r0, #0
 800dc00:	bd70      	pop	{r4, r5, r6, pc}
 800dc02:	bf00      	nop
 800dc04:	20000ac0 	.word	0x20000ac0
 800dc08:	0801c668 	.word	0x0801c668
 800dc0c:	0801c688 	.word	0x0801c688
 800dc10:	0801c6a8 	.word	0x0801c6a8

0800dc14 <_close_r>:
 800dc14:	b538      	push	{r3, r4, r5, lr}
 800dc16:	4c06      	ldr	r4, [pc, #24]	; (800dc30 <_close_r+0x1c>)
 800dc18:	2300      	movs	r3, #0
 800dc1a:	4605      	mov	r5, r0
 800dc1c:	4608      	mov	r0, r1
 800dc1e:	6023      	str	r3, [r4, #0]
 800dc20:	f7fc f8f6 	bl	8009e10 <_close>
 800dc24:	1c43      	adds	r3, r0, #1
 800dc26:	d102      	bne.n	800dc2e <_close_r+0x1a>
 800dc28:	6823      	ldr	r3, [r4, #0]
 800dc2a:	b103      	cbz	r3, 800dc2e <_close_r+0x1a>
 800dc2c:	602b      	str	r3, [r5, #0]
 800dc2e:	bd38      	pop	{r3, r4, r5, pc}
 800dc30:	20000dbc 	.word	0x20000dbc

0800dc34 <quorem>:
 800dc34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc38:	6903      	ldr	r3, [r0, #16]
 800dc3a:	690c      	ldr	r4, [r1, #16]
 800dc3c:	42a3      	cmp	r3, r4
 800dc3e:	4680      	mov	r8, r0
 800dc40:	f2c0 8081 	blt.w	800dd46 <quorem+0x112>
 800dc44:	3c01      	subs	r4, #1
 800dc46:	f101 0714 	add.w	r7, r1, #20
 800dc4a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800dc4e:	f100 0614 	add.w	r6, r0, #20
 800dc52:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800dc56:	eb06 030e 	add.w	r3, r6, lr
 800dc5a:	9301      	str	r3, [sp, #4]
 800dc5c:	3501      	adds	r5, #1
 800dc5e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800dc62:	fbb3 f5f5 	udiv	r5, r3, r5
 800dc66:	eb07 090e 	add.w	r9, r7, lr
 800dc6a:	b3c5      	cbz	r5, 800dcde <quorem+0xaa>
 800dc6c:	f04f 0a00 	mov.w	sl, #0
 800dc70:	4638      	mov	r0, r7
 800dc72:	46b4      	mov	ip, r6
 800dc74:	46d3      	mov	fp, sl
 800dc76:	f850 3b04 	ldr.w	r3, [r0], #4
 800dc7a:	b29a      	uxth	r2, r3
 800dc7c:	0c1b      	lsrs	r3, r3, #16
 800dc7e:	fb02 a205 	mla	r2, r2, r5, sl
 800dc82:	436b      	muls	r3, r5
 800dc84:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800dc88:	b292      	uxth	r2, r2
 800dc8a:	ebc2 020b 	rsb	r2, r2, fp
 800dc8e:	f8bc b000 	ldrh.w	fp, [ip]
 800dc92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc96:	fa12 f28b 	uxtah	r2, r2, fp
 800dc9a:	fa1f fb83 	uxth.w	fp, r3
 800dc9e:	f8dc 3000 	ldr.w	r3, [ip]
 800dca2:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 800dca6:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800dcaa:	b292      	uxth	r2, r2
 800dcac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dcb0:	4548      	cmp	r0, r9
 800dcb2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dcb6:	f84c 2b04 	str.w	r2, [ip], #4
 800dcba:	d9dc      	bls.n	800dc76 <quorem+0x42>
 800dcbc:	f856 300e 	ldr.w	r3, [r6, lr]
 800dcc0:	b96b      	cbnz	r3, 800dcde <quorem+0xaa>
 800dcc2:	9b01      	ldr	r3, [sp, #4]
 800dcc4:	3b04      	subs	r3, #4
 800dcc6:	42b3      	cmp	r3, r6
 800dcc8:	461a      	mov	r2, r3
 800dcca:	d802      	bhi.n	800dcd2 <quorem+0x9e>
 800dccc:	f8c8 4010 	str.w	r4, [r8, #16]
 800dcd0:	e005      	b.n	800dcde <quorem+0xaa>
 800dcd2:	6812      	ldr	r2, [r2, #0]
 800dcd4:	3b04      	subs	r3, #4
 800dcd6:	2a00      	cmp	r2, #0
 800dcd8:	d1f8      	bne.n	800dccc <quorem+0x98>
 800dcda:	3c01      	subs	r4, #1
 800dcdc:	e7f3      	b.n	800dcc6 <quorem+0x92>
 800dcde:	4640      	mov	r0, r8
 800dce0:	f001 fbd7 	bl	800f492 <__mcmp>
 800dce4:	2800      	cmp	r0, #0
 800dce6:	db2c      	blt.n	800dd42 <quorem+0x10e>
 800dce8:	3501      	adds	r5, #1
 800dcea:	4630      	mov	r0, r6
 800dcec:	f04f 0e00 	mov.w	lr, #0
 800dcf0:	f857 1b04 	ldr.w	r1, [r7], #4
 800dcf4:	f8d0 c000 	ldr.w	ip, [r0]
 800dcf8:	b28a      	uxth	r2, r1
 800dcfa:	ebc2 030e 	rsb	r3, r2, lr
 800dcfe:	0c09      	lsrs	r1, r1, #16
 800dd00:	fa13 f38c 	uxtah	r3, r3, ip
 800dd04:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 800dd08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd12:	454f      	cmp	r7, r9
 800dd14:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800dd18:	f840 3b04 	str.w	r3, [r0], #4
 800dd1c:	d9e8      	bls.n	800dcf0 <quorem+0xbc>
 800dd1e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800dd22:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800dd26:	b962      	cbnz	r2, 800dd42 <quorem+0x10e>
 800dd28:	3b04      	subs	r3, #4
 800dd2a:	42b3      	cmp	r3, r6
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	d802      	bhi.n	800dd36 <quorem+0x102>
 800dd30:	f8c8 4010 	str.w	r4, [r8, #16]
 800dd34:	e005      	b.n	800dd42 <quorem+0x10e>
 800dd36:	6812      	ldr	r2, [r2, #0]
 800dd38:	3b04      	subs	r3, #4
 800dd3a:	2a00      	cmp	r2, #0
 800dd3c:	d1f8      	bne.n	800dd30 <quorem+0xfc>
 800dd3e:	3c01      	subs	r4, #1
 800dd40:	e7f3      	b.n	800dd2a <quorem+0xf6>
 800dd42:	4628      	mov	r0, r5
 800dd44:	e000      	b.n	800dd48 <quorem+0x114>
 800dd46:	2000      	movs	r0, #0
 800dd48:	b003      	add	sp, #12
 800dd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800dd50 <_dtoa_r>:
 800dd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd54:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dd56:	b097      	sub	sp, #92	; 0x5c
 800dd58:	4682      	mov	sl, r0
 800dd5a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800dd5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dd60:	b945      	cbnz	r5, 800dd74 <_dtoa_r+0x24>
 800dd62:	2010      	movs	r0, #16
 800dd64:	f7fd fe16 	bl	800b994 <malloc>
 800dd68:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 800dd6c:	6045      	str	r5, [r0, #4]
 800dd6e:	6085      	str	r5, [r0, #8]
 800dd70:	6005      	str	r5, [r0, #0]
 800dd72:	60c5      	str	r5, [r0, #12]
 800dd74:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800dd78:	6819      	ldr	r1, [r3, #0]
 800dd7a:	b159      	cbz	r1, 800dd94 <_dtoa_r+0x44>
 800dd7c:	685a      	ldr	r2, [r3, #4]
 800dd7e:	604a      	str	r2, [r1, #4]
 800dd80:	2301      	movs	r3, #1
 800dd82:	4093      	lsls	r3, r2
 800dd84:	608b      	str	r3, [r1, #8]
 800dd86:	4650      	mov	r0, sl
 800dd88:	f001 f966 	bl	800f058 <_Bfree>
 800dd8c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800dd90:	2200      	movs	r2, #0
 800dd92:	601a      	str	r2, [r3, #0]
 800dd94:	9b03      	ldr	r3, [sp, #12]
 800dd96:	4aa2      	ldr	r2, [pc, #648]	; (800e020 <_dtoa_r+0x2d0>)
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	bfbf      	itttt	lt
 800dd9c:	2301      	movlt	r3, #1
 800dd9e:	6023      	strlt	r3, [r4, #0]
 800dda0:	9b03      	ldrlt	r3, [sp, #12]
 800dda2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dda6:	bfb8      	it	lt
 800dda8:	9303      	strlt	r3, [sp, #12]
 800ddaa:	9f03      	ldr	r7, [sp, #12]
 800ddac:	bfa4      	itt	ge
 800ddae:	2300      	movge	r3, #0
 800ddb0:	6023      	strge	r3, [r4, #0]
 800ddb2:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 800ddb6:	0d1b      	lsrs	r3, r3, #20
 800ddb8:	051b      	lsls	r3, r3, #20
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d11d      	bne.n	800ddfa <_dtoa_r+0xaa>
 800ddbe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ddc0:	f242 730f 	movw	r3, #9999	; 0x270f
 800ddc4:	6013      	str	r3, [r2, #0]
 800ddc6:	9b02      	ldr	r3, [sp, #8]
 800ddc8:	b943      	cbnz	r3, 800dddc <_dtoa_r+0x8c>
 800ddca:	4a96      	ldr	r2, [pc, #600]	; (800e024 <_dtoa_r+0x2d4>)
 800ddcc:	4b96      	ldr	r3, [pc, #600]	; (800e028 <_dtoa_r+0x2d8>)
 800ddce:	f3c7 0013 	ubfx	r0, r7, #0, #20
 800ddd2:	2800      	cmp	r0, #0
 800ddd4:	bf14      	ite	ne
 800ddd6:	4618      	movne	r0, r3
 800ddd8:	4610      	moveq	r0, r2
 800ddda:	e000      	b.n	800ddde <_dtoa_r+0x8e>
 800dddc:	4892      	ldr	r0, [pc, #584]	; (800e028 <_dtoa_r+0x2d8>)
 800ddde:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	f000 8573 	beq.w	800e8cc <_dtoa_r+0xb7c>
 800dde6:	78c3      	ldrb	r3, [r0, #3]
 800dde8:	b113      	cbz	r3, 800ddf0 <_dtoa_r+0xa0>
 800ddea:	f100 0308 	add.w	r3, r0, #8
 800ddee:	e000      	b.n	800ddf2 <_dtoa_r+0xa2>
 800ddf0:	1cc3      	adds	r3, r0, #3
 800ddf2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ddf4:	6013      	str	r3, [r2, #0]
 800ddf6:	f000 bd69 	b.w	800e8cc <_dtoa_r+0xb7c>
 800ddfa:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ddfe:	2200      	movs	r2, #0
 800de00:	4620      	mov	r0, r4
 800de02:	4629      	mov	r1, r5
 800de04:	2300      	movs	r3, #0
 800de06:	f002 fab9 	bl	801037c <__aeabi_dcmpeq>
 800de0a:	4680      	mov	r8, r0
 800de0c:	b158      	cbz	r0, 800de26 <_dtoa_r+0xd6>
 800de0e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800de10:	2301      	movs	r3, #1
 800de12:	6013      	str	r3, [r2, #0]
 800de14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800de16:	2b00      	cmp	r3, #0
 800de18:	f000 8546 	beq.w	800e8a8 <_dtoa_r+0xb58>
 800de1c:	4883      	ldr	r0, [pc, #524]	; (800e02c <_dtoa_r+0x2dc>)
 800de1e:	6018      	str	r0, [r3, #0]
 800de20:	3801      	subs	r0, #1
 800de22:	f000 bd53 	b.w	800e8cc <_dtoa_r+0xb7c>
 800de26:	ab15      	add	r3, sp, #84	; 0x54
 800de28:	9300      	str	r3, [sp, #0]
 800de2a:	ab14      	add	r3, sp, #80	; 0x50
 800de2c:	9301      	str	r3, [sp, #4]
 800de2e:	4650      	mov	r0, sl
 800de30:	4622      	mov	r2, r4
 800de32:	462b      	mov	r3, r5
 800de34:	f001 fc1b 	bl	800f66e <__d2b>
 800de38:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800de3c:	9007      	str	r0, [sp, #28]
 800de3e:	b15e      	cbz	r6, 800de58 <_dtoa_r+0x108>
 800de40:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800de44:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800de48:	4620      	mov	r0, r4
 800de4a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800de4e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800de52:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800de56:	e01d      	b.n	800de94 <_dtoa_r+0x144>
 800de58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de5a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800de5c:	441e      	add	r6, r3
 800de5e:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800de62:	429e      	cmp	r6, r3
 800de64:	bfad      	iteet	ge
 800de66:	9a02      	ldrge	r2, [sp, #8]
 800de68:	4b71      	ldrlt	r3, [pc, #452]	; (800e030 <_dtoa_r+0x2e0>)
 800de6a:	9a02      	ldrlt	r2, [sp, #8]
 800de6c:	f206 4312 	addwge	r3, r6, #1042	; 0x412
 800de70:	bfa3      	ittte	ge
 800de72:	fa22 f003 	lsrge.w	r0, r2, r3
 800de76:	4b6f      	ldrge	r3, [pc, #444]	; (800e034 <_dtoa_r+0x2e4>)
 800de78:	1b9b      	subge	r3, r3, r6
 800de7a:	1b9b      	sublt	r3, r3, r6
 800de7c:	bfaa      	itet	ge
 800de7e:	409f      	lslge	r7, r3
 800de80:	fa02 f003 	lsllt.w	r0, r2, r3
 800de84:	4338      	orrge	r0, r7
 800de86:	f001 ff9b 	bl	800fdc0 <__aeabi_ui2d>
 800de8a:	2301      	movs	r3, #1
 800de8c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800de90:	3e01      	subs	r6, #1
 800de92:	9313      	str	r3, [sp, #76]	; 0x4c
 800de94:	2200      	movs	r2, #0
 800de96:	4b68      	ldr	r3, [pc, #416]	; (800e038 <_dtoa_r+0x2e8>)
 800de98:	f001 fe54 	bl	800fb44 <__aeabi_dsub>
 800de9c:	a35a      	add	r3, pc, #360	; (adr r3, 800e008 <_dtoa_r+0x2b8>)
 800de9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea2:	f002 f803 	bl	800feac <__aeabi_dmul>
 800dea6:	a35a      	add	r3, pc, #360	; (adr r3, 800e010 <_dtoa_r+0x2c0>)
 800dea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deac:	f001 fe4c 	bl	800fb48 <__adddf3>
 800deb0:	4604      	mov	r4, r0
 800deb2:	4630      	mov	r0, r6
 800deb4:	460d      	mov	r5, r1
 800deb6:	f001 ff93 	bl	800fde0 <__aeabi_i2d>
 800deba:	a357      	add	r3, pc, #348	; (adr r3, 800e018 <_dtoa_r+0x2c8>)
 800debc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec0:	f001 fff4 	bl	800feac <__aeabi_dmul>
 800dec4:	4602      	mov	r2, r0
 800dec6:	460b      	mov	r3, r1
 800dec8:	4620      	mov	r0, r4
 800deca:	4629      	mov	r1, r5
 800decc:	f001 fe3c 	bl	800fb48 <__adddf3>
 800ded0:	4604      	mov	r4, r0
 800ded2:	460d      	mov	r5, r1
 800ded4:	f002 fa84 	bl	80103e0 <__aeabi_d2iz>
 800ded8:	4629      	mov	r1, r5
 800deda:	4683      	mov	fp, r0
 800dedc:	2200      	movs	r2, #0
 800dede:	4620      	mov	r0, r4
 800dee0:	2300      	movs	r3, #0
 800dee2:	f002 fa55 	bl	8010390 <__aeabi_dcmplt>
 800dee6:	b158      	cbz	r0, 800df00 <_dtoa_r+0x1b0>
 800dee8:	4658      	mov	r0, fp
 800deea:	f001 ff79 	bl	800fde0 <__aeabi_i2d>
 800deee:	4602      	mov	r2, r0
 800def0:	460b      	mov	r3, r1
 800def2:	4620      	mov	r0, r4
 800def4:	4629      	mov	r1, r5
 800def6:	f002 fa41 	bl	801037c <__aeabi_dcmpeq>
 800defa:	b908      	cbnz	r0, 800df00 <_dtoa_r+0x1b0>
 800defc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df00:	f1bb 0f16 	cmp.w	fp, #22
 800df04:	d80d      	bhi.n	800df22 <_dtoa_r+0x1d2>
 800df06:	4b4d      	ldr	r3, [pc, #308]	; (800e03c <_dtoa_r+0x2ec>)
 800df08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800df0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df14:	f002 fa5a 	bl	80103cc <__aeabi_dcmpgt>
 800df18:	b130      	cbz	r0, 800df28 <_dtoa_r+0x1d8>
 800df1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df1e:	2300      	movs	r3, #0
 800df20:	e000      	b.n	800df24 <_dtoa_r+0x1d4>
 800df22:	2301      	movs	r3, #1
 800df24:	9312      	str	r3, [sp, #72]	; 0x48
 800df26:	e000      	b.n	800df2a <_dtoa_r+0x1da>
 800df28:	9012      	str	r0, [sp, #72]	; 0x48
 800df2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df2c:	1b9e      	subs	r6, r3, r6
 800df2e:	1e73      	subs	r3, r6, #1
 800df30:	930a      	str	r3, [sp, #40]	; 0x28
 800df32:	bf45      	ittet	mi
 800df34:	425b      	negmi	r3, r3
 800df36:	9309      	strmi	r3, [sp, #36]	; 0x24
 800df38:	2300      	movpl	r3, #0
 800df3a:	2300      	movmi	r3, #0
 800df3c:	bf4c      	ite	mi
 800df3e:	930a      	strmi	r3, [sp, #40]	; 0x28
 800df40:	9309      	strpl	r3, [sp, #36]	; 0x24
 800df42:	f1bb 0f00 	cmp.w	fp, #0
 800df46:	db07      	blt.n	800df58 <_dtoa_r+0x208>
 800df48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df4a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800df4e:	445b      	add	r3, fp
 800df50:	930a      	str	r3, [sp, #40]	; 0x28
 800df52:	2300      	movs	r3, #0
 800df54:	930b      	str	r3, [sp, #44]	; 0x2c
 800df56:	e008      	b.n	800df6a <_dtoa_r+0x21a>
 800df58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df5a:	ebcb 0303 	rsb	r3, fp, r3
 800df5e:	9309      	str	r3, [sp, #36]	; 0x24
 800df60:	f1cb 0300 	rsb	r3, fp, #0
 800df64:	930b      	str	r3, [sp, #44]	; 0x2c
 800df66:	2300      	movs	r3, #0
 800df68:	930d      	str	r3, [sp, #52]	; 0x34
 800df6a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800df6c:	2b09      	cmp	r3, #9
 800df6e:	d828      	bhi.n	800dfc2 <_dtoa_r+0x272>
 800df70:	2b05      	cmp	r3, #5
 800df72:	bfc4      	itt	gt
 800df74:	3b04      	subgt	r3, #4
 800df76:	9320      	strgt	r3, [sp, #128]	; 0x80
 800df78:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800df7a:	f1a3 0302 	sub.w	r3, r3, #2
 800df7e:	bfcc      	ite	gt
 800df80:	2500      	movgt	r5, #0
 800df82:	2501      	movle	r5, #1
 800df84:	2b03      	cmp	r3, #3
 800df86:	d821      	bhi.n	800dfcc <_dtoa_r+0x27c>
 800df88:	e8df f003 	tbb	[pc, r3]
 800df8c:	10040e02 	.word	0x10040e02
 800df90:	2300      	movs	r3, #0
 800df92:	e000      	b.n	800df96 <_dtoa_r+0x246>
 800df94:	2301      	movs	r3, #1
 800df96:	930c      	str	r3, [sp, #48]	; 0x30
 800df98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	dc20      	bgt.n	800dfe0 <_dtoa_r+0x290>
 800df9e:	2301      	movs	r3, #1
 800dfa0:	9306      	str	r3, [sp, #24]
 800dfa2:	9305      	str	r3, [sp, #20]
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	e019      	b.n	800dfdc <_dtoa_r+0x28c>
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	e000      	b.n	800dfae <_dtoa_r+0x25e>
 800dfac:	2301      	movs	r3, #1
 800dfae:	930c      	str	r3, [sp, #48]	; 0x30
 800dfb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dfb2:	445b      	add	r3, fp
 800dfb4:	9306      	str	r3, [sp, #24]
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	9305      	str	r3, [sp, #20]
 800dfbc:	bfb8      	it	lt
 800dfbe:	2301      	movlt	r3, #1
 800dfc0:	e011      	b.n	800dfe6 <_dtoa_r+0x296>
 800dfc2:	2501      	movs	r5, #1
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	9320      	str	r3, [sp, #128]	; 0x80
 800dfc8:	950c      	str	r5, [sp, #48]	; 0x30
 800dfca:	e001      	b.n	800dfd0 <_dtoa_r+0x280>
 800dfcc:	2301      	movs	r3, #1
 800dfce:	930c      	str	r3, [sp, #48]	; 0x30
 800dfd0:	f04f 33ff 	mov.w	r3, #4294967295
 800dfd4:	9306      	str	r3, [sp, #24]
 800dfd6:	9305      	str	r3, [sp, #20]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	2312      	movs	r3, #18
 800dfdc:	9221      	str	r2, [sp, #132]	; 0x84
 800dfde:	e002      	b.n	800dfe6 <_dtoa_r+0x296>
 800dfe0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dfe2:	9306      	str	r3, [sp, #24]
 800dfe4:	9305      	str	r3, [sp, #20]
 800dfe6:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 800dfea:	2200      	movs	r2, #0
 800dfec:	6062      	str	r2, [r4, #4]
 800dfee:	2104      	movs	r1, #4
 800dff0:	f101 0214 	add.w	r2, r1, #20
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d823      	bhi.n	800e040 <_dtoa_r+0x2f0>
 800dff8:	6862      	ldr	r2, [r4, #4]
 800dffa:	3201      	adds	r2, #1
 800dffc:	6062      	str	r2, [r4, #4]
 800dffe:	0049      	lsls	r1, r1, #1
 800e000:	e7f6      	b.n	800dff0 <_dtoa_r+0x2a0>
 800e002:	bf00      	nop
 800e004:	f3af 8000 	nop.w
 800e008:	636f4361 	.word	0x636f4361
 800e00c:	3fd287a7 	.word	0x3fd287a7
 800e010:	8b60c8b3 	.word	0x8b60c8b3
 800e014:	3fc68a28 	.word	0x3fc68a28
 800e018:	509f79fb 	.word	0x509f79fb
 800e01c:	3fd34413 	.word	0x3fd34413
 800e020:	7ff00000 	.word	0x7ff00000
 800e024:	0801c86d 	.word	0x0801c86d
 800e028:	0801c876 	.word	0x0801c876
 800e02c:	0801c6f2 	.word	0x0801c6f2
 800e030:	fffffbee 	.word	0xfffffbee
 800e034:	fffffc0e 	.word	0xfffffc0e
 800e038:	3ff80000 	.word	0x3ff80000
 800e03c:	0801c888 	.word	0x0801c888
 800e040:	4650      	mov	r0, sl
 800e042:	6861      	ldr	r1, [r4, #4]
 800e044:	f000 ffd3 	bl	800efee <_Balloc>
 800e048:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800e04c:	6020      	str	r0, [r4, #0]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	9308      	str	r3, [sp, #32]
 800e052:	9b05      	ldr	r3, [sp, #20]
 800e054:	2b0e      	cmp	r3, #14
 800e056:	f200 814b 	bhi.w	800e2f0 <_dtoa_r+0x5a0>
 800e05a:	2d00      	cmp	r5, #0
 800e05c:	f000 8148 	beq.w	800e2f0 <_dtoa_r+0x5a0>
 800e060:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e064:	f1bb 0f00 	cmp.w	fp, #0
 800e068:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e06c:	dd31      	ble.n	800e0d2 <_dtoa_r+0x382>
 800e06e:	4ab3      	ldr	r2, [pc, #716]	; (800e33c <_dtoa_r+0x5ec>)
 800e070:	f00b 030f 	and.w	r3, fp, #15
 800e074:	ea4f 172b 	mov.w	r7, fp, asr #4
 800e078:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e07c:	06f8      	lsls	r0, r7, #27
 800e07e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e082:	d50c      	bpl.n	800e09e <_dtoa_r+0x34e>
 800e084:	4bae      	ldr	r3, [pc, #696]	; (800e340 <_dtoa_r+0x5f0>)
 800e086:	ec51 0b17 	vmov	r0, r1, d7
 800e08a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e08e:	f002 f837 	bl	8010100 <__aeabi_ddiv>
 800e092:	f007 070f 	and.w	r7, r7, #15
 800e096:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e09a:	2603      	movs	r6, #3
 800e09c:	e000      	b.n	800e0a0 <_dtoa_r+0x350>
 800e09e:	2602      	movs	r6, #2
 800e0a0:	f8df 829c 	ldr.w	r8, [pc, #668]	; 800e340 <_dtoa_r+0x5f0>
 800e0a4:	b177      	cbz	r7, 800e0c4 <_dtoa_r+0x374>
 800e0a6:	07f9      	lsls	r1, r7, #31
 800e0a8:	d508      	bpl.n	800e0bc <_dtoa_r+0x36c>
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	4629      	mov	r1, r5
 800e0ae:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e0b2:	f001 fefb 	bl	800feac <__aeabi_dmul>
 800e0b6:	3601      	adds	r6, #1
 800e0b8:	4604      	mov	r4, r0
 800e0ba:	460d      	mov	r5, r1
 800e0bc:	107f      	asrs	r7, r7, #1
 800e0be:	f108 0808 	add.w	r8, r8, #8
 800e0c2:	e7ef      	b.n	800e0a4 <_dtoa_r+0x354>
 800e0c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0c8:	4622      	mov	r2, r4
 800e0ca:	462b      	mov	r3, r5
 800e0cc:	f002 f818 	bl	8010100 <__aeabi_ddiv>
 800e0d0:	e01b      	b.n	800e10a <_dtoa_r+0x3ba>
 800e0d2:	f1cb 0400 	rsb	r4, fp, #0
 800e0d6:	b1dc      	cbz	r4, 800e110 <_dtoa_r+0x3c0>
 800e0d8:	4b98      	ldr	r3, [pc, #608]	; (800e33c <_dtoa_r+0x5ec>)
 800e0da:	4d99      	ldr	r5, [pc, #612]	; (800e340 <_dtoa_r+0x5f0>)
 800e0dc:	f004 020f 	and.w	r2, r4, #15
 800e0e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ec:	f001 fede 	bl	800feac <__aeabi_dmul>
 800e0f0:	1124      	asrs	r4, r4, #4
 800e0f2:	2602      	movs	r6, #2
 800e0f4:	b14c      	cbz	r4, 800e10a <_dtoa_r+0x3ba>
 800e0f6:	07e2      	lsls	r2, r4, #31
 800e0f8:	d504      	bpl.n	800e104 <_dtoa_r+0x3b4>
 800e0fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e0fe:	3601      	adds	r6, #1
 800e100:	f001 fed4 	bl	800feac <__aeabi_dmul>
 800e104:	1064      	asrs	r4, r4, #1
 800e106:	3508      	adds	r5, #8
 800e108:	e7f4      	b.n	800e0f4 <_dtoa_r+0x3a4>
 800e10a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e10e:	e000      	b.n	800e112 <_dtoa_r+0x3c2>
 800e110:	2602      	movs	r6, #2
 800e112:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e114:	b1db      	cbz	r3, 800e14e <_dtoa_r+0x3fe>
 800e116:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e11a:	2200      	movs	r2, #0
 800e11c:	4620      	mov	r0, r4
 800e11e:	4629      	mov	r1, r5
 800e120:	4b88      	ldr	r3, [pc, #544]	; (800e344 <_dtoa_r+0x5f4>)
 800e122:	f002 f935 	bl	8010390 <__aeabi_dcmplt>
 800e126:	b190      	cbz	r0, 800e14e <_dtoa_r+0x3fe>
 800e128:	9b05      	ldr	r3, [sp, #20]
 800e12a:	b183      	cbz	r3, 800e14e <_dtoa_r+0x3fe>
 800e12c:	9b06      	ldr	r3, [sp, #24]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	f340 80da 	ble.w	800e2e8 <_dtoa_r+0x598>
 800e134:	4629      	mov	r1, r5
 800e136:	4620      	mov	r0, r4
 800e138:	2200      	movs	r2, #0
 800e13a:	4b83      	ldr	r3, [pc, #524]	; (800e348 <_dtoa_r+0x5f8>)
 800e13c:	f001 feb6 	bl	800feac <__aeabi_dmul>
 800e140:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e148:	3601      	adds	r6, #1
 800e14a:	9d06      	ldr	r5, [sp, #24]
 800e14c:	e001      	b.n	800e152 <_dtoa_r+0x402>
 800e14e:	9d05      	ldr	r5, [sp, #20]
 800e150:	465f      	mov	r7, fp
 800e152:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e156:	4630      	mov	r0, r6
 800e158:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800e15c:	f001 fe40 	bl	800fde0 <__aeabi_i2d>
 800e160:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e164:	f001 fea2 	bl	800feac <__aeabi_dmul>
 800e168:	2200      	movs	r2, #0
 800e16a:	4b78      	ldr	r3, [pc, #480]	; (800e34c <_dtoa_r+0x5fc>)
 800e16c:	f001 fcec 	bl	800fb48 <__adddf3>
 800e170:	4680      	mov	r8, r0
 800e172:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800e176:	b9cd      	cbnz	r5, 800e1ac <_dtoa_r+0x45c>
 800e178:	2200      	movs	r2, #0
 800e17a:	4b75      	ldr	r3, [pc, #468]	; (800e350 <_dtoa_r+0x600>)
 800e17c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e180:	f001 fce0 	bl	800fb44 <__aeabi_dsub>
 800e184:	4642      	mov	r2, r8
 800e186:	464b      	mov	r3, r9
 800e188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e18c:	f002 f91e 	bl	80103cc <__aeabi_dcmpgt>
 800e190:	2800      	cmp	r0, #0
 800e192:	f040 8246 	bne.w	800e622 <_dtoa_r+0x8d2>
 800e196:	4642      	mov	r2, r8
 800e198:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e19c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1a0:	f002 f8f6 	bl	8010390 <__aeabi_dcmplt>
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	f040 8236 	bne.w	800e616 <_dtoa_r+0x8c6>
 800e1aa:	e09d      	b.n	800e2e8 <_dtoa_r+0x598>
 800e1ac:	4b63      	ldr	r3, [pc, #396]	; (800e33c <_dtoa_r+0x5ec>)
 800e1ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e1b0:	1e6a      	subs	r2, r5, #1
 800e1b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e1b6:	2900      	cmp	r1, #0
 800e1b8:	d049      	beq.n	800e24e <_dtoa_r+0x4fe>
 800e1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1be:	2000      	movs	r0, #0
 800e1c0:	4964      	ldr	r1, [pc, #400]	; (800e354 <_dtoa_r+0x604>)
 800e1c2:	f001 ff9d 	bl	8010100 <__aeabi_ddiv>
 800e1c6:	4642      	mov	r2, r8
 800e1c8:	464b      	mov	r3, r9
 800e1ca:	f001 fcbb 	bl	800fb44 <__aeabi_dsub>
 800e1ce:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800e1d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1d6:	9c08      	ldr	r4, [sp, #32]
 800e1d8:	4649      	mov	r1, r9
 800e1da:	4640      	mov	r0, r8
 800e1dc:	f002 f900 	bl	80103e0 <__aeabi_d2iz>
 800e1e0:	4606      	mov	r6, r0
 800e1e2:	f001 fdfd 	bl	800fde0 <__aeabi_i2d>
 800e1e6:	4602      	mov	r2, r0
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	4640      	mov	r0, r8
 800e1ec:	4649      	mov	r1, r9
 800e1ee:	f001 fca9 	bl	800fb44 <__aeabi_dsub>
 800e1f2:	3630      	adds	r6, #48	; 0x30
 800e1f4:	f804 6b01 	strb.w	r6, [r4], #1
 800e1f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e1fc:	4680      	mov	r8, r0
 800e1fe:	4689      	mov	r9, r1
 800e200:	f002 f8c6 	bl	8010390 <__aeabi_dcmplt>
 800e204:	2800      	cmp	r0, #0
 800e206:	f040 8340 	bne.w	800e88a <_dtoa_r+0xb3a>
 800e20a:	4642      	mov	r2, r8
 800e20c:	464b      	mov	r3, r9
 800e20e:	2000      	movs	r0, #0
 800e210:	494c      	ldr	r1, [pc, #304]	; (800e344 <_dtoa_r+0x5f4>)
 800e212:	f001 fc97 	bl	800fb44 <__aeabi_dsub>
 800e216:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e21a:	f002 f8b9 	bl	8010390 <__aeabi_dcmplt>
 800e21e:	2800      	cmp	r0, #0
 800e220:	f040 80d3 	bne.w	800e3ca <_dtoa_r+0x67a>
 800e224:	9b08      	ldr	r3, [sp, #32]
 800e226:	1ae3      	subs	r3, r4, r3
 800e228:	42ab      	cmp	r3, r5
 800e22a:	da5d      	bge.n	800e2e8 <_dtoa_r+0x598>
 800e22c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e230:	2200      	movs	r2, #0
 800e232:	4b45      	ldr	r3, [pc, #276]	; (800e348 <_dtoa_r+0x5f8>)
 800e234:	f001 fe3a 	bl	800feac <__aeabi_dmul>
 800e238:	2200      	movs	r2, #0
 800e23a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e23e:	4b42      	ldr	r3, [pc, #264]	; (800e348 <_dtoa_r+0x5f8>)
 800e240:	4640      	mov	r0, r8
 800e242:	4649      	mov	r1, r9
 800e244:	f001 fe32 	bl	800feac <__aeabi_dmul>
 800e248:	4680      	mov	r8, r0
 800e24a:	4689      	mov	r9, r1
 800e24c:	e7c4      	b.n	800e1d8 <_dtoa_r+0x488>
 800e24e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e252:	4642      	mov	r2, r8
 800e254:	464b      	mov	r3, r9
 800e256:	f001 fe29 	bl	800feac <__aeabi_dmul>
 800e25a:	9b08      	ldr	r3, [sp, #32]
 800e25c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e260:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800e264:	195c      	adds	r4, r3, r5
 800e266:	461d      	mov	r5, r3
 800e268:	4649      	mov	r1, r9
 800e26a:	4640      	mov	r0, r8
 800e26c:	f002 f8b8 	bl	80103e0 <__aeabi_d2iz>
 800e270:	4606      	mov	r6, r0
 800e272:	f001 fdb5 	bl	800fde0 <__aeabi_i2d>
 800e276:	3630      	adds	r6, #48	; 0x30
 800e278:	4602      	mov	r2, r0
 800e27a:	460b      	mov	r3, r1
 800e27c:	4640      	mov	r0, r8
 800e27e:	4649      	mov	r1, r9
 800e280:	f001 fc60 	bl	800fb44 <__aeabi_dsub>
 800e284:	f805 6b01 	strb.w	r6, [r5], #1
 800e288:	42a5      	cmp	r5, r4
 800e28a:	4680      	mov	r8, r0
 800e28c:	4689      	mov	r9, r1
 800e28e:	d124      	bne.n	800e2da <_dtoa_r+0x58a>
 800e290:	2200      	movs	r2, #0
 800e292:	4b30      	ldr	r3, [pc, #192]	; (800e354 <_dtoa_r+0x604>)
 800e294:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e298:	f001 fc56 	bl	800fb48 <__adddf3>
 800e29c:	4602      	mov	r2, r0
 800e29e:	460b      	mov	r3, r1
 800e2a0:	4640      	mov	r0, r8
 800e2a2:	4649      	mov	r1, r9
 800e2a4:	f002 f892 	bl	80103cc <__aeabi_dcmpgt>
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	f040 808e 	bne.w	800e3ca <_dtoa_r+0x67a>
 800e2ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2b2:	2000      	movs	r0, #0
 800e2b4:	4927      	ldr	r1, [pc, #156]	; (800e354 <_dtoa_r+0x604>)
 800e2b6:	f001 fc45 	bl	800fb44 <__aeabi_dsub>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	460b      	mov	r3, r1
 800e2be:	4640      	mov	r0, r8
 800e2c0:	4649      	mov	r1, r9
 800e2c2:	f002 f865 	bl	8010390 <__aeabi_dcmplt>
 800e2c6:	b178      	cbz	r0, 800e2e8 <_dtoa_r+0x598>
 800e2c8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800e2cc:	2b30      	cmp	r3, #48	; 0x30
 800e2ce:	f104 32ff 	add.w	r2, r4, #4294967295
 800e2d2:	f040 82da 	bne.w	800e88a <_dtoa_r+0xb3a>
 800e2d6:	4614      	mov	r4, r2
 800e2d8:	e7f6      	b.n	800e2c8 <_dtoa_r+0x578>
 800e2da:	2200      	movs	r2, #0
 800e2dc:	4b1a      	ldr	r3, [pc, #104]	; (800e348 <_dtoa_r+0x5f8>)
 800e2de:	f001 fde5 	bl	800feac <__aeabi_dmul>
 800e2e2:	4680      	mov	r8, r0
 800e2e4:	4689      	mov	r9, r1
 800e2e6:	e7bf      	b.n	800e268 <_dtoa_r+0x518>
 800e2e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e2ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e2f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	f2c0 808b 	blt.w	800e40e <_dtoa_r+0x6be>
 800e2f8:	f1bb 0f0e 	cmp.w	fp, #14
 800e2fc:	f300 8087 	bgt.w	800e40e <_dtoa_r+0x6be>
 800e300:	4b0e      	ldr	r3, [pc, #56]	; (800e33c <_dtoa_r+0x5ec>)
 800e302:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e306:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e30a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	da23      	bge.n	800e358 <_dtoa_r+0x608>
 800e310:	9b05      	ldr	r3, [sp, #20]
 800e312:	2b00      	cmp	r3, #0
 800e314:	dc20      	bgt.n	800e358 <_dtoa_r+0x608>
 800e316:	f040 817d 	bne.w	800e614 <_dtoa_r+0x8c4>
 800e31a:	4630      	mov	r0, r6
 800e31c:	2200      	movs	r2, #0
 800e31e:	4b0c      	ldr	r3, [pc, #48]	; (800e350 <_dtoa_r+0x600>)
 800e320:	4639      	mov	r1, r7
 800e322:	f001 fdc3 	bl	800feac <__aeabi_dmul>
 800e326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e32a:	f002 f845 	bl	80103b8 <__aeabi_dcmpge>
 800e32e:	9d05      	ldr	r5, [sp, #20]
 800e330:	462e      	mov	r6, r5
 800e332:	2800      	cmp	r0, #0
 800e334:	f040 8170 	bne.w	800e618 <_dtoa_r+0x8c8>
 800e338:	e175      	b.n	800e626 <_dtoa_r+0x8d6>
 800e33a:	bf00      	nop
 800e33c:	0801c888 	.word	0x0801c888
 800e340:	0801c950 	.word	0x0801c950
 800e344:	3ff00000 	.word	0x3ff00000
 800e348:	40240000 	.word	0x40240000
 800e34c:	401c0000 	.word	0x401c0000
 800e350:	40140000 	.word	0x40140000
 800e354:	3fe00000 	.word	0x3fe00000
 800e358:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e35c:	9c08      	ldr	r4, [sp, #32]
 800e35e:	4632      	mov	r2, r6
 800e360:	463b      	mov	r3, r7
 800e362:	4640      	mov	r0, r8
 800e364:	4649      	mov	r1, r9
 800e366:	f001 fecb 	bl	8010100 <__aeabi_ddiv>
 800e36a:	f002 f839 	bl	80103e0 <__aeabi_d2iz>
 800e36e:	4605      	mov	r5, r0
 800e370:	f001 fd36 	bl	800fde0 <__aeabi_i2d>
 800e374:	4632      	mov	r2, r6
 800e376:	463b      	mov	r3, r7
 800e378:	f001 fd98 	bl	800feac <__aeabi_dmul>
 800e37c:	460b      	mov	r3, r1
 800e37e:	4602      	mov	r2, r0
 800e380:	4649      	mov	r1, r9
 800e382:	4640      	mov	r0, r8
 800e384:	f001 fbde 	bl	800fb44 <__aeabi_dsub>
 800e388:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800e38c:	9b08      	ldr	r3, [sp, #32]
 800e38e:	f804 eb01 	strb.w	lr, [r4], #1
 800e392:	ebc3 0e04 	rsb	lr, r3, r4
 800e396:	9b05      	ldr	r3, [sp, #20]
 800e398:	459e      	cmp	lr, r3
 800e39a:	d12b      	bne.n	800e3f4 <_dtoa_r+0x6a4>
 800e39c:	4602      	mov	r2, r0
 800e39e:	460b      	mov	r3, r1
 800e3a0:	f001 fbd2 	bl	800fb48 <__adddf3>
 800e3a4:	4632      	mov	r2, r6
 800e3a6:	463b      	mov	r3, r7
 800e3a8:	4680      	mov	r8, r0
 800e3aa:	4689      	mov	r9, r1
 800e3ac:	f002 f80e 	bl	80103cc <__aeabi_dcmpgt>
 800e3b0:	b970      	cbnz	r0, 800e3d0 <_dtoa_r+0x680>
 800e3b2:	4640      	mov	r0, r8
 800e3b4:	4649      	mov	r1, r9
 800e3b6:	4632      	mov	r2, r6
 800e3b8:	463b      	mov	r3, r7
 800e3ba:	f001 ffdf 	bl	801037c <__aeabi_dcmpeq>
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	f000 8264 	beq.w	800e88c <_dtoa_r+0xb3c>
 800e3c4:	07eb      	lsls	r3, r5, #31
 800e3c6:	d403      	bmi.n	800e3d0 <_dtoa_r+0x680>
 800e3c8:	e260      	b.n	800e88c <_dtoa_r+0xb3c>
 800e3ca:	46bb      	mov	fp, r7
 800e3cc:	e000      	b.n	800e3d0 <_dtoa_r+0x680>
 800e3ce:	461c      	mov	r4, r3
 800e3d0:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800e3d4:	2a39      	cmp	r2, #57	; 0x39
 800e3d6:	f104 33ff 	add.w	r3, r4, #4294967295
 800e3da:	d107      	bne.n	800e3ec <_dtoa_r+0x69c>
 800e3dc:	9a08      	ldr	r2, [sp, #32]
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d1f5      	bne.n	800e3ce <_dtoa_r+0x67e>
 800e3e2:	2330      	movs	r3, #48	; 0x30
 800e3e4:	7013      	strb	r3, [r2, #0]
 800e3e6:	f10b 0b01 	add.w	fp, fp, #1
 800e3ea:	4613      	mov	r3, r2
 800e3ec:	781a      	ldrb	r2, [r3, #0]
 800e3ee:	3201      	adds	r2, #1
 800e3f0:	701a      	strb	r2, [r3, #0]
 800e3f2:	e24b      	b.n	800e88c <_dtoa_r+0xb3c>
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	4ba4      	ldr	r3, [pc, #656]	; (800e688 <_dtoa_r+0x938>)
 800e3f8:	f001 fd58 	bl	800feac <__aeabi_dmul>
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	2300      	movs	r3, #0
 800e400:	4680      	mov	r8, r0
 800e402:	4689      	mov	r9, r1
 800e404:	f001 ffba 	bl	801037c <__aeabi_dcmpeq>
 800e408:	2800      	cmp	r0, #0
 800e40a:	d0a8      	beq.n	800e35e <_dtoa_r+0x60e>
 800e40c:	e23e      	b.n	800e88c <_dtoa_r+0xb3c>
 800e40e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e410:	2a00      	cmp	r2, #0
 800e412:	d032      	beq.n	800e47a <_dtoa_r+0x72a>
 800e414:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e416:	2a01      	cmp	r2, #1
 800e418:	dc0a      	bgt.n	800e430 <_dtoa_r+0x6e0>
 800e41a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e41c:	b112      	cbz	r2, 800e424 <_dtoa_r+0x6d4>
 800e41e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e422:	e002      	b.n	800e42a <_dtoa_r+0x6da>
 800e424:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e426:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e42a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e42c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e42e:	e018      	b.n	800e462 <_dtoa_r+0x712>
 800e430:	9b05      	ldr	r3, [sp, #20]
 800e432:	1e5d      	subs	r5, r3, #1
 800e434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e436:	42ab      	cmp	r3, r5
 800e438:	bfbf      	itttt	lt
 800e43a:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800e43c:	950b      	strlt	r5, [sp, #44]	; 0x2c
 800e43e:	1aea      	sublt	r2, r5, r3
 800e440:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e442:	bfb6      	itet	lt
 800e444:	189b      	addlt	r3, r3, r2
 800e446:	1b5d      	subge	r5, r3, r5
 800e448:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e44a:	9b05      	ldr	r3, [sp, #20]
 800e44c:	bfb8      	it	lt
 800e44e:	2500      	movlt	r5, #0
 800e450:	2b00      	cmp	r3, #0
 800e452:	bfb9      	ittee	lt
 800e454:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 800e456:	9a05      	ldrlt	r2, [sp, #20]
 800e458:	9c09      	ldrge	r4, [sp, #36]	; 0x24
 800e45a:	9b05      	ldrge	r3, [sp, #20]
 800e45c:	bfbc      	itt	lt
 800e45e:	1a9c      	sublt	r4, r3, r2
 800e460:	2300      	movlt	r3, #0
 800e462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e464:	441a      	add	r2, r3
 800e466:	9209      	str	r2, [sp, #36]	; 0x24
 800e468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e46a:	4650      	mov	r0, sl
 800e46c:	441a      	add	r2, r3
 800e46e:	2101      	movs	r1, #1
 800e470:	920a      	str	r2, [sp, #40]	; 0x28
 800e472:	f000 fed3 	bl	800f21c <__i2b>
 800e476:	4606      	mov	r6, r0
 800e478:	e002      	b.n	800e480 <_dtoa_r+0x730>
 800e47a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e47c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e47e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e480:	b164      	cbz	r4, 800e49c <_dtoa_r+0x74c>
 800e482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e484:	2b00      	cmp	r3, #0
 800e486:	dd09      	ble.n	800e49c <_dtoa_r+0x74c>
 800e488:	42a3      	cmp	r3, r4
 800e48a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e48c:	bfa8      	it	ge
 800e48e:	4623      	movge	r3, r4
 800e490:	1ad2      	subs	r2, r2, r3
 800e492:	9209      	str	r2, [sp, #36]	; 0x24
 800e494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e496:	1ae4      	subs	r4, r4, r3
 800e498:	1ad3      	subs	r3, r2, r3
 800e49a:	930a      	str	r3, [sp, #40]	; 0x28
 800e49c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	dd20      	ble.n	800e4e4 <_dtoa_r+0x794>
 800e4a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4a4:	b1c3      	cbz	r3, 800e4d8 <_dtoa_r+0x788>
 800e4a6:	2d00      	cmp	r5, #0
 800e4a8:	dd10      	ble.n	800e4cc <_dtoa_r+0x77c>
 800e4aa:	4631      	mov	r1, r6
 800e4ac:	462a      	mov	r2, r5
 800e4ae:	4650      	mov	r0, sl
 800e4b0:	f000 ff4e 	bl	800f350 <__pow5mult>
 800e4b4:	4606      	mov	r6, r0
 800e4b6:	4631      	mov	r1, r6
 800e4b8:	9a07      	ldr	r2, [sp, #28]
 800e4ba:	4650      	mov	r0, sl
 800e4bc:	f000 feb7 	bl	800f22e <__multiply>
 800e4c0:	9907      	ldr	r1, [sp, #28]
 800e4c2:	4607      	mov	r7, r0
 800e4c4:	4650      	mov	r0, sl
 800e4c6:	f000 fdc7 	bl	800f058 <_Bfree>
 800e4ca:	9707      	str	r7, [sp, #28]
 800e4cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4ce:	1b5a      	subs	r2, r3, r5
 800e4d0:	d008      	beq.n	800e4e4 <_dtoa_r+0x794>
 800e4d2:	4650      	mov	r0, sl
 800e4d4:	9907      	ldr	r1, [sp, #28]
 800e4d6:	e002      	b.n	800e4de <_dtoa_r+0x78e>
 800e4d8:	9907      	ldr	r1, [sp, #28]
 800e4da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e4dc:	4650      	mov	r0, sl
 800e4de:	f000 ff37 	bl	800f350 <__pow5mult>
 800e4e2:	9007      	str	r0, [sp, #28]
 800e4e4:	4650      	mov	r0, sl
 800e4e6:	2101      	movs	r1, #1
 800e4e8:	f000 fe98 	bl	800f21c <__i2b>
 800e4ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	4605      	mov	r5, r0
 800e4f2:	dd0a      	ble.n	800e50a <_dtoa_r+0x7ba>
 800e4f4:	4629      	mov	r1, r5
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	4650      	mov	r0, sl
 800e4fa:	f000 ff29 	bl	800f350 <__pow5mult>
 800e4fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e500:	2b01      	cmp	r3, #1
 800e502:	4605      	mov	r5, r0
 800e504:	dd04      	ble.n	800e510 <_dtoa_r+0x7c0>
 800e506:	2700      	movs	r7, #0
 800e508:	e01b      	b.n	800e542 <_dtoa_r+0x7f2>
 800e50a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	dc13      	bgt.n	800e538 <_dtoa_r+0x7e8>
 800e510:	9b02      	ldr	r3, [sp, #8]
 800e512:	b98b      	cbnz	r3, 800e538 <_dtoa_r+0x7e8>
 800e514:	9b03      	ldr	r3, [sp, #12]
 800e516:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e51a:	b97b      	cbnz	r3, 800e53c <_dtoa_r+0x7ec>
 800e51c:	9b03      	ldr	r3, [sp, #12]
 800e51e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800e522:	0d3f      	lsrs	r7, r7, #20
 800e524:	053f      	lsls	r7, r7, #20
 800e526:	b157      	cbz	r7, 800e53e <_dtoa_r+0x7ee>
 800e528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e52a:	3301      	adds	r3, #1
 800e52c:	9309      	str	r3, [sp, #36]	; 0x24
 800e52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e530:	3301      	adds	r3, #1
 800e532:	930a      	str	r3, [sp, #40]	; 0x28
 800e534:	2701      	movs	r7, #1
 800e536:	e002      	b.n	800e53e <_dtoa_r+0x7ee>
 800e538:	2700      	movs	r7, #0
 800e53a:	e000      	b.n	800e53e <_dtoa_r+0x7ee>
 800e53c:	9f02      	ldr	r7, [sp, #8]
 800e53e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e540:	b143      	cbz	r3, 800e554 <_dtoa_r+0x804>
 800e542:	692b      	ldr	r3, [r5, #16]
 800e544:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e548:	6918      	ldr	r0, [r3, #16]
 800e54a:	f000 fe1a 	bl	800f182 <__hi0bits>
 800e54e:	f1c0 0020 	rsb	r0, r0, #32
 800e552:	e000      	b.n	800e556 <_dtoa_r+0x806>
 800e554:	2001      	movs	r0, #1
 800e556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e558:	4418      	add	r0, r3
 800e55a:	f010 001f 	ands.w	r0, r0, #31
 800e55e:	d008      	beq.n	800e572 <_dtoa_r+0x822>
 800e560:	f1c0 0320 	rsb	r3, r0, #32
 800e564:	2b04      	cmp	r3, #4
 800e566:	dd02      	ble.n	800e56e <_dtoa_r+0x81e>
 800e568:	f1c0 001c 	rsb	r0, r0, #28
 800e56c:	e002      	b.n	800e574 <_dtoa_r+0x824>
 800e56e:	d008      	beq.n	800e582 <_dtoa_r+0x832>
 800e570:	4618      	mov	r0, r3
 800e572:	301c      	adds	r0, #28
 800e574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e576:	4403      	add	r3, r0
 800e578:	9309      	str	r3, [sp, #36]	; 0x24
 800e57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e57c:	4403      	add	r3, r0
 800e57e:	4404      	add	r4, r0
 800e580:	930a      	str	r3, [sp, #40]	; 0x28
 800e582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e584:	2b00      	cmp	r3, #0
 800e586:	dd05      	ble.n	800e594 <_dtoa_r+0x844>
 800e588:	4650      	mov	r0, sl
 800e58a:	9907      	ldr	r1, [sp, #28]
 800e58c:	461a      	mov	r2, r3
 800e58e:	f000 ff2d 	bl	800f3ec <__lshift>
 800e592:	9007      	str	r0, [sp, #28]
 800e594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e596:	2b00      	cmp	r3, #0
 800e598:	dd05      	ble.n	800e5a6 <_dtoa_r+0x856>
 800e59a:	4629      	mov	r1, r5
 800e59c:	4650      	mov	r0, sl
 800e59e:	461a      	mov	r2, r3
 800e5a0:	f000 ff24 	bl	800f3ec <__lshift>
 800e5a4:	4605      	mov	r5, r0
 800e5a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e5a8:	b1eb      	cbz	r3, 800e5e6 <_dtoa_r+0x896>
 800e5aa:	9807      	ldr	r0, [sp, #28]
 800e5ac:	4629      	mov	r1, r5
 800e5ae:	f000 ff70 	bl	800f492 <__mcmp>
 800e5b2:	2800      	cmp	r0, #0
 800e5b4:	da17      	bge.n	800e5e6 <_dtoa_r+0x896>
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	4650      	mov	r0, sl
 800e5ba:	9907      	ldr	r1, [sp, #28]
 800e5bc:	220a      	movs	r2, #10
 800e5be:	f000 fd62 	bl	800f086 <__multadd>
 800e5c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5c4:	9007      	str	r0, [sp, #28]
 800e5c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	f000 8170 	beq.w	800e8b0 <_dtoa_r+0xb60>
 800e5d0:	4631      	mov	r1, r6
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	4650      	mov	r0, sl
 800e5d6:	220a      	movs	r2, #10
 800e5d8:	f000 fd55 	bl	800f086 <__multadd>
 800e5dc:	9b06      	ldr	r3, [sp, #24]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	4606      	mov	r6, r0
 800e5e2:	dc33      	bgt.n	800e64c <_dtoa_r+0x8fc>
 800e5e4:	e16d      	b.n	800e8c2 <_dtoa_r+0xb72>
 800e5e6:	9b05      	ldr	r3, [sp, #20]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	dc26      	bgt.n	800e63a <_dtoa_r+0x8ea>
 800e5ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e5ee:	2b02      	cmp	r3, #2
 800e5f0:	dd23      	ble.n	800e63a <_dtoa_r+0x8ea>
 800e5f2:	9b05      	ldr	r3, [sp, #20]
 800e5f4:	9306      	str	r3, [sp, #24]
 800e5f6:	9b06      	ldr	r3, [sp, #24]
 800e5f8:	b973      	cbnz	r3, 800e618 <_dtoa_r+0x8c8>
 800e5fa:	4629      	mov	r1, r5
 800e5fc:	2205      	movs	r2, #5
 800e5fe:	4650      	mov	r0, sl
 800e600:	f000 fd41 	bl	800f086 <__multadd>
 800e604:	4605      	mov	r5, r0
 800e606:	4629      	mov	r1, r5
 800e608:	9807      	ldr	r0, [sp, #28]
 800e60a:	f000 ff42 	bl	800f492 <__mcmp>
 800e60e:	2800      	cmp	r0, #0
 800e610:	dc09      	bgt.n	800e626 <_dtoa_r+0x8d6>
 800e612:	e001      	b.n	800e618 <_dtoa_r+0x8c8>
 800e614:	2500      	movs	r5, #0
 800e616:	462e      	mov	r6, r5
 800e618:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e61a:	9c08      	ldr	r4, [sp, #32]
 800e61c:	ea6f 0b03 	mvn.w	fp, r3
 800e620:	e008      	b.n	800e634 <_dtoa_r+0x8e4>
 800e622:	46bb      	mov	fp, r7
 800e624:	462e      	mov	r6, r5
 800e626:	9b08      	ldr	r3, [sp, #32]
 800e628:	9a08      	ldr	r2, [sp, #32]
 800e62a:	1c5c      	adds	r4, r3, #1
 800e62c:	2331      	movs	r3, #49	; 0x31
 800e62e:	7013      	strb	r3, [r2, #0]
 800e630:	f10b 0b01 	add.w	fp, fp, #1
 800e634:	46b1      	mov	r9, r6
 800e636:	2600      	movs	r6, #0
 800e638:	e114      	b.n	800e864 <_dtoa_r+0xb14>
 800e63a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e63c:	b923      	cbnz	r3, 800e648 <_dtoa_r+0x8f8>
 800e63e:	9b05      	ldr	r3, [sp, #20]
 800e640:	9306      	str	r3, [sp, #24]
 800e642:	9f08      	ldr	r7, [sp, #32]
 800e644:	9c07      	ldr	r4, [sp, #28]
 800e646:	e0cc      	b.n	800e7e2 <_dtoa_r+0xa92>
 800e648:	9b05      	ldr	r3, [sp, #20]
 800e64a:	9306      	str	r3, [sp, #24]
 800e64c:	2c00      	cmp	r4, #0
 800e64e:	dd05      	ble.n	800e65c <_dtoa_r+0x90c>
 800e650:	4631      	mov	r1, r6
 800e652:	4650      	mov	r0, sl
 800e654:	4622      	mov	r2, r4
 800e656:	f000 fec9 	bl	800f3ec <__lshift>
 800e65a:	4606      	mov	r6, r0
 800e65c:	b1b7      	cbz	r7, 800e68c <_dtoa_r+0x93c>
 800e65e:	6871      	ldr	r1, [r6, #4]
 800e660:	4650      	mov	r0, sl
 800e662:	f000 fcc4 	bl	800efee <_Balloc>
 800e666:	6932      	ldr	r2, [r6, #16]
 800e668:	3202      	adds	r2, #2
 800e66a:	4604      	mov	r4, r0
 800e66c:	f106 010c 	add.w	r1, r6, #12
 800e670:	0092      	lsls	r2, r2, #2
 800e672:	300c      	adds	r0, #12
 800e674:	f7fd f9a5 	bl	800b9c2 <memcpy>
 800e678:	4650      	mov	r0, sl
 800e67a:	4621      	mov	r1, r4
 800e67c:	2201      	movs	r2, #1
 800e67e:	f000 feb5 	bl	800f3ec <__lshift>
 800e682:	4681      	mov	r9, r0
 800e684:	e003      	b.n	800e68e <_dtoa_r+0x93e>
 800e686:	bf00      	nop
 800e688:	40240000 	.word	0x40240000
 800e68c:	46b1      	mov	r9, r6
 800e68e:	9f08      	ldr	r7, [sp, #32]
 800e690:	9c07      	ldr	r4, [sp, #28]
 800e692:	4629      	mov	r1, r5
 800e694:	4620      	mov	r0, r4
 800e696:	f7ff facd 	bl	800dc34 <quorem>
 800e69a:	4631      	mov	r1, r6
 800e69c:	9009      	str	r0, [sp, #36]	; 0x24
 800e69e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	f000 fef5 	bl	800f492 <__mcmp>
 800e6a8:	464a      	mov	r2, r9
 800e6aa:	9005      	str	r0, [sp, #20]
 800e6ac:	4629      	mov	r1, r5
 800e6ae:	4650      	mov	r0, sl
 800e6b0:	f000 ff0b 	bl	800f4ca <__mdiff>
 800e6b4:	68c2      	ldr	r2, [r0, #12]
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	b93a      	cbnz	r2, 800e6ca <_dtoa_r+0x97a>
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	4620      	mov	r0, r4
 800e6be:	9307      	str	r3, [sp, #28]
 800e6c0:	f000 fee7 	bl	800f492 <__mcmp>
 800e6c4:	9b07      	ldr	r3, [sp, #28]
 800e6c6:	4602      	mov	r2, r0
 800e6c8:	e000      	b.n	800e6cc <_dtoa_r+0x97c>
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	4650      	mov	r0, sl
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	9207      	str	r2, [sp, #28]
 800e6d2:	f000 fcc1 	bl	800f058 <_Bfree>
 800e6d6:	9a07      	ldr	r2, [sp, #28]
 800e6d8:	b9a2      	cbnz	r2, 800e704 <_dtoa_r+0x9b4>
 800e6da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e6dc:	b993      	cbnz	r3, 800e704 <_dtoa_r+0x9b4>
 800e6de:	9b02      	ldr	r3, [sp, #8]
 800e6e0:	f003 0301 	and.w	r3, r3, #1
 800e6e4:	b973      	cbnz	r3, 800e704 <_dtoa_r+0x9b4>
 800e6e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e6ea:	463b      	mov	r3, r7
 800e6ec:	9407      	str	r4, [sp, #28]
 800e6ee:	d040      	beq.n	800e772 <_dtoa_r+0xa22>
 800e6f0:	9b05      	ldr	r3, [sp, #20]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	bfc8      	it	gt
 800e6f6:	9b09      	ldrgt	r3, [sp, #36]	; 0x24
 800e6f8:	f107 0401 	add.w	r4, r7, #1
 800e6fc:	bfc8      	it	gt
 800e6fe:	f103 0831 	addgt.w	r8, r3, #49	; 0x31
 800e702:	e03d      	b.n	800e780 <_dtoa_r+0xa30>
 800e704:	9b05      	ldr	r3, [sp, #20]
 800e706:	2b00      	cmp	r3, #0
 800e708:	da04      	bge.n	800e714 <_dtoa_r+0x9c4>
 800e70a:	2a00      	cmp	r2, #0
 800e70c:	46c4      	mov	ip, r8
 800e70e:	9407      	str	r4, [sp, #28]
 800e710:	dc08      	bgt.n	800e724 <_dtoa_r+0x9d4>
 800e712:	e021      	b.n	800e758 <_dtoa_r+0xa08>
 800e714:	d124      	bne.n	800e760 <_dtoa_r+0xa10>
 800e716:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e718:	bb13      	cbnz	r3, 800e760 <_dtoa_r+0xa10>
 800e71a:	9b02      	ldr	r3, [sp, #8]
 800e71c:	f003 0301 	and.w	r3, r3, #1
 800e720:	b9f3      	cbnz	r3, 800e760 <_dtoa_r+0xa10>
 800e722:	e7f2      	b.n	800e70a <_dtoa_r+0x9ba>
 800e724:	4621      	mov	r1, r4
 800e726:	2201      	movs	r2, #1
 800e728:	4650      	mov	r0, sl
 800e72a:	9705      	str	r7, [sp, #20]
 800e72c:	f8cd 8008 	str.w	r8, [sp, #8]
 800e730:	f000 fe5c 	bl	800f3ec <__lshift>
 800e734:	4629      	mov	r1, r5
 800e736:	9007      	str	r0, [sp, #28]
 800e738:	f000 feab 	bl	800f492 <__mcmp>
 800e73c:	2800      	cmp	r0, #0
 800e73e:	f8dd c008 	ldr.w	ip, [sp, #8]
 800e742:	9b05      	ldr	r3, [sp, #20]
 800e744:	dc03      	bgt.n	800e74e <_dtoa_r+0x9fe>
 800e746:	d107      	bne.n	800e758 <_dtoa_r+0xa08>
 800e748:	f018 0f01 	tst.w	r8, #1
 800e74c:	d004      	beq.n	800e758 <_dtoa_r+0xa08>
 800e74e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e752:	d00e      	beq.n	800e772 <_dtoa_r+0xa22>
 800e754:	f108 0c01 	add.w	ip, r8, #1
 800e758:	1c7c      	adds	r4, r7, #1
 800e75a:	f887 c000 	strb.w	ip, [r7]
 800e75e:	e081      	b.n	800e864 <_dtoa_r+0xb14>
 800e760:	2a00      	cmp	r2, #0
 800e762:	f107 0201 	add.w	r2, r7, #1
 800e766:	dd0e      	ble.n	800e786 <_dtoa_r+0xa36>
 800e768:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e76c:	463b      	mov	r3, r7
 800e76e:	9407      	str	r4, [sp, #28]
 800e770:	d103      	bne.n	800e77a <_dtoa_r+0xa2a>
 800e772:	2239      	movs	r2, #57	; 0x39
 800e774:	3701      	adds	r7, #1
 800e776:	701a      	strb	r2, [r3, #0]
 800e778:	e057      	b.n	800e82a <_dtoa_r+0xada>
 800e77a:	4614      	mov	r4, r2
 800e77c:	f108 0801 	add.w	r8, r8, #1
 800e780:	f887 8000 	strb.w	r8, [r7]
 800e784:	e06e      	b.n	800e864 <_dtoa_r+0xb14>
 800e786:	9b08      	ldr	r3, [sp, #32]
 800e788:	f802 8c01 	strb.w	r8, [r2, #-1]
 800e78c:	1ad3      	subs	r3, r2, r3
 800e78e:	4617      	mov	r7, r2
 800e790:	9a06      	ldr	r2, [sp, #24]
 800e792:	4293      	cmp	r3, r2
 800e794:	d03a      	beq.n	800e80c <_dtoa_r+0xabc>
 800e796:	4621      	mov	r1, r4
 800e798:	220a      	movs	r2, #10
 800e79a:	2300      	movs	r3, #0
 800e79c:	4650      	mov	r0, sl
 800e79e:	f000 fc72 	bl	800f086 <__multadd>
 800e7a2:	454e      	cmp	r6, r9
 800e7a4:	4604      	mov	r4, r0
 800e7a6:	4631      	mov	r1, r6
 800e7a8:	4650      	mov	r0, sl
 800e7aa:	f04f 020a 	mov.w	r2, #10
 800e7ae:	f04f 0300 	mov.w	r3, #0
 800e7b2:	d104      	bne.n	800e7be <_dtoa_r+0xa6e>
 800e7b4:	f000 fc67 	bl	800f086 <__multadd>
 800e7b8:	4606      	mov	r6, r0
 800e7ba:	4681      	mov	r9, r0
 800e7bc:	e769      	b.n	800e692 <_dtoa_r+0x942>
 800e7be:	f000 fc62 	bl	800f086 <__multadd>
 800e7c2:	4649      	mov	r1, r9
 800e7c4:	4606      	mov	r6, r0
 800e7c6:	220a      	movs	r2, #10
 800e7c8:	4650      	mov	r0, sl
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	f000 fc5b 	bl	800f086 <__multadd>
 800e7d0:	4681      	mov	r9, r0
 800e7d2:	e75e      	b.n	800e692 <_dtoa_r+0x942>
 800e7d4:	4621      	mov	r1, r4
 800e7d6:	4650      	mov	r0, sl
 800e7d8:	220a      	movs	r2, #10
 800e7da:	2300      	movs	r3, #0
 800e7dc:	f000 fc53 	bl	800f086 <__multadd>
 800e7e0:	4604      	mov	r4, r0
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	4629      	mov	r1, r5
 800e7e6:	f7ff fa25 	bl	800dc34 <quorem>
 800e7ea:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e7ee:	f807 8b01 	strb.w	r8, [r7], #1
 800e7f2:	9b08      	ldr	r3, [sp, #32]
 800e7f4:	9a06      	ldr	r2, [sp, #24]
 800e7f6:	1afb      	subs	r3, r7, r3
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	dbeb      	blt.n	800e7d4 <_dtoa_r+0xa84>
 800e7fc:	9b08      	ldr	r3, [sp, #32]
 800e7fe:	2a01      	cmp	r2, #1
 800e800:	bfac      	ite	ge
 800e802:	189b      	addge	r3, r3, r2
 800e804:	3301      	addlt	r3, #1
 800e806:	46b1      	mov	r9, r6
 800e808:	461f      	mov	r7, r3
 800e80a:	2600      	movs	r6, #0
 800e80c:	4621      	mov	r1, r4
 800e80e:	2201      	movs	r2, #1
 800e810:	4650      	mov	r0, sl
 800e812:	f000 fdeb 	bl	800f3ec <__lshift>
 800e816:	4629      	mov	r1, r5
 800e818:	9007      	str	r0, [sp, #28]
 800e81a:	f000 fe3a 	bl	800f492 <__mcmp>
 800e81e:	2800      	cmp	r0, #0
 800e820:	dc03      	bgt.n	800e82a <_dtoa_r+0xada>
 800e822:	d116      	bne.n	800e852 <_dtoa_r+0xb02>
 800e824:	f018 0f01 	tst.w	r8, #1
 800e828:	d013      	beq.n	800e852 <_dtoa_r+0xb02>
 800e82a:	463c      	mov	r4, r7
 800e82c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800e830:	2b39      	cmp	r3, #57	; 0x39
 800e832:	f104 32ff 	add.w	r2, r4, #4294967295
 800e836:	d109      	bne.n	800e84c <_dtoa_r+0xafc>
 800e838:	9b08      	ldr	r3, [sp, #32]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d104      	bne.n	800e848 <_dtoa_r+0xaf8>
 800e83e:	f10b 0b01 	add.w	fp, fp, #1
 800e842:	2331      	movs	r3, #49	; 0x31
 800e844:	9a08      	ldr	r2, [sp, #32]
 800e846:	e002      	b.n	800e84e <_dtoa_r+0xafe>
 800e848:	4614      	mov	r4, r2
 800e84a:	e7ef      	b.n	800e82c <_dtoa_r+0xadc>
 800e84c:	3301      	adds	r3, #1
 800e84e:	7013      	strb	r3, [r2, #0]
 800e850:	e008      	b.n	800e864 <_dtoa_r+0xb14>
 800e852:	463c      	mov	r4, r7
 800e854:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800e858:	2b30      	cmp	r3, #48	; 0x30
 800e85a:	f104 32ff 	add.w	r2, r4, #4294967295
 800e85e:	d101      	bne.n	800e864 <_dtoa_r+0xb14>
 800e860:	4614      	mov	r4, r2
 800e862:	e7f7      	b.n	800e854 <_dtoa_r+0xb04>
 800e864:	4650      	mov	r0, sl
 800e866:	4629      	mov	r1, r5
 800e868:	f000 fbf6 	bl	800f058 <_Bfree>
 800e86c:	f1b9 0f00 	cmp.w	r9, #0
 800e870:	d00c      	beq.n	800e88c <_dtoa_r+0xb3c>
 800e872:	b12e      	cbz	r6, 800e880 <_dtoa_r+0xb30>
 800e874:	454e      	cmp	r6, r9
 800e876:	d003      	beq.n	800e880 <_dtoa_r+0xb30>
 800e878:	4650      	mov	r0, sl
 800e87a:	4631      	mov	r1, r6
 800e87c:	f000 fbec 	bl	800f058 <_Bfree>
 800e880:	4650      	mov	r0, sl
 800e882:	4649      	mov	r1, r9
 800e884:	f000 fbe8 	bl	800f058 <_Bfree>
 800e888:	e000      	b.n	800e88c <_dtoa_r+0xb3c>
 800e88a:	46bb      	mov	fp, r7
 800e88c:	4650      	mov	r0, sl
 800e88e:	9907      	ldr	r1, [sp, #28]
 800e890:	f000 fbe2 	bl	800f058 <_Bfree>
 800e894:	2300      	movs	r3, #0
 800e896:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e898:	7023      	strb	r3, [r4, #0]
 800e89a:	f10b 0301 	add.w	r3, fp, #1
 800e89e:	6013      	str	r3, [r2, #0]
 800e8a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e8a2:	b11b      	cbz	r3, 800e8ac <_dtoa_r+0xb5c>
 800e8a4:	601c      	str	r4, [r3, #0]
 800e8a6:	e001      	b.n	800e8ac <_dtoa_r+0xb5c>
 800e8a8:	480a      	ldr	r0, [pc, #40]	; (800e8d4 <_dtoa_r+0xb84>)
 800e8aa:	e00f      	b.n	800e8cc <_dtoa_r+0xb7c>
 800e8ac:	9808      	ldr	r0, [sp, #32]
 800e8ae:	e00d      	b.n	800e8cc <_dtoa_r+0xb7c>
 800e8b0:	9b06      	ldr	r3, [sp, #24]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	f73f aec5 	bgt.w	800e642 <_dtoa_r+0x8f2>
 800e8b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e8ba:	2b02      	cmp	r3, #2
 800e8bc:	f73f ae9b 	bgt.w	800e5f6 <_dtoa_r+0x8a6>
 800e8c0:	e6bf      	b.n	800e642 <_dtoa_r+0x8f2>
 800e8c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e8c4:	2b02      	cmp	r3, #2
 800e8c6:	f73f ae96 	bgt.w	800e5f6 <_dtoa_r+0x8a6>
 800e8ca:	e6bf      	b.n	800e64c <_dtoa_r+0x8fc>
 800e8cc:	b017      	add	sp, #92	; 0x5c
 800e8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8d2:	bf00      	nop
 800e8d4:	0801c6f1 	.word	0x0801c6f1

0800e8d8 <rshift>:
 800e8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8da:	6906      	ldr	r6, [r0, #16]
 800e8dc:	114b      	asrs	r3, r1, #5
 800e8de:	42b3      	cmp	r3, r6
 800e8e0:	f100 0514 	add.w	r5, r0, #20
 800e8e4:	da27      	bge.n	800e936 <rshift+0x5e>
 800e8e6:	f011 011f 	ands.w	r1, r1, #31
 800e8ea:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800e8ee:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800e8f2:	d101      	bne.n	800e8f8 <rshift+0x20>
 800e8f4:	4629      	mov	r1, r5
 800e8f6:	e016      	b.n	800e926 <rshift+0x4e>
 800e8f8:	1d14      	adds	r4, r2, #4
 800e8fa:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 800e8fe:	f1c1 0e20 	rsb	lr, r1, #32
 800e902:	40ca      	lsrs	r2, r1
 800e904:	462b      	mov	r3, r5
 800e906:	42b4      	cmp	r4, r6
 800e908:	d209      	bcs.n	800e91e <rshift+0x46>
 800e90a:	6827      	ldr	r7, [r4, #0]
 800e90c:	fa07 f70e 	lsl.w	r7, r7, lr
 800e910:	433a      	orrs	r2, r7
 800e912:	f843 2b04 	str.w	r2, [r3], #4
 800e916:	f854 2b04 	ldr.w	r2, [r4], #4
 800e91a:	40ca      	lsrs	r2, r1
 800e91c:	e7f3      	b.n	800e906 <rshift+0x2e>
 800e91e:	601a      	str	r2, [r3, #0]
 800e920:	b152      	cbz	r2, 800e938 <rshift+0x60>
 800e922:	3304      	adds	r3, #4
 800e924:	e008      	b.n	800e938 <rshift+0x60>
 800e926:	42b2      	cmp	r2, r6
 800e928:	460b      	mov	r3, r1
 800e92a:	d205      	bcs.n	800e938 <rshift+0x60>
 800e92c:	f852 3b04 	ldr.w	r3, [r2], #4
 800e930:	f841 3b04 	str.w	r3, [r1], #4
 800e934:	e7f7      	b.n	800e926 <rshift+0x4e>
 800e936:	462b      	mov	r3, r5
 800e938:	1b5b      	subs	r3, r3, r5
 800e93a:	109b      	asrs	r3, r3, #2
 800e93c:	6103      	str	r3, [r0, #16]
 800e93e:	b903      	cbnz	r3, 800e942 <rshift+0x6a>
 800e940:	6143      	str	r3, [r0, #20]
 800e942:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e944 <__hexdig_fun>:
 800e944:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e948:	2b09      	cmp	r3, #9
 800e94a:	d801      	bhi.n	800e950 <__hexdig_fun+0xc>
 800e94c:	3820      	subs	r0, #32
 800e94e:	e00a      	b.n	800e966 <__hexdig_fun+0x22>
 800e950:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e954:	2b05      	cmp	r3, #5
 800e956:	d801      	bhi.n	800e95c <__hexdig_fun+0x18>
 800e958:	3847      	subs	r0, #71	; 0x47
 800e95a:	e004      	b.n	800e966 <__hexdig_fun+0x22>
 800e95c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e960:	2b05      	cmp	r3, #5
 800e962:	d802      	bhi.n	800e96a <__hexdig_fun+0x26>
 800e964:	3827      	subs	r0, #39	; 0x27
 800e966:	b2c0      	uxtb	r0, r0
 800e968:	4770      	bx	lr
 800e96a:	2000      	movs	r0, #0
 800e96c:	4770      	bx	lr

0800e96e <__gethex>:
 800e96e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e972:	b089      	sub	sp, #36	; 0x24
 800e974:	468a      	mov	sl, r1
 800e976:	4691      	mov	r9, r2
 800e978:	9304      	str	r3, [sp, #16]
 800e97a:	9001      	str	r0, [sp, #4]
 800e97c:	f000 fab8 	bl	800eef0 <_localeconv_r>
 800e980:	6803      	ldr	r3, [r0, #0]
 800e982:	9302      	str	r3, [sp, #8]
 800e984:	4618      	mov	r0, r3
 800e986:	f7fe f982 	bl	800cc8e <strlen>
 800e98a:	9b02      	ldr	r3, [sp, #8]
 800e98c:	9000      	str	r0, [sp, #0]
 800e98e:	4403      	add	r3, r0
 800e990:	2600      	movs	r6, #0
 800e992:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e996:	9305      	str	r3, [sp, #20]
 800e998:	f8da 3000 	ldr.w	r3, [sl]
 800e99c:	3302      	adds	r3, #2
 800e99e:	4698      	mov	r8, r3
 800e9a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e9a4:	2830      	cmp	r0, #48	; 0x30
 800e9a6:	d101      	bne.n	800e9ac <__gethex+0x3e>
 800e9a8:	3601      	adds	r6, #1
 800e9aa:	e7f8      	b.n	800e99e <__gethex+0x30>
 800e9ac:	f7ff ffca 	bl	800e944 <__hexdig_fun>
 800e9b0:	4604      	mov	r4, r0
 800e9b2:	b9e8      	cbnz	r0, 800e9f0 <__gethex+0x82>
 800e9b4:	4640      	mov	r0, r8
 800e9b6:	9902      	ldr	r1, [sp, #8]
 800e9b8:	9a00      	ldr	r2, [sp, #0]
 800e9ba:	f7fe f970 	bl	800cc9e <strncmp>
 800e9be:	2800      	cmp	r0, #0
 800e9c0:	d137      	bne.n	800ea32 <__gethex+0xc4>
 800e9c2:	9b00      	ldr	r3, [sp, #0]
 800e9c4:	f818 0003 	ldrb.w	r0, [r8, r3]
 800e9c8:	eb08 0703 	add.w	r7, r8, r3
 800e9cc:	f7ff ffba 	bl	800e944 <__hexdig_fun>
 800e9d0:	b388      	cbz	r0, 800ea36 <__gethex+0xc8>
 800e9d2:	463b      	mov	r3, r7
 800e9d4:	7818      	ldrb	r0, [r3, #0]
 800e9d6:	2830      	cmp	r0, #48	; 0x30
 800e9d8:	4698      	mov	r8, r3
 800e9da:	f103 0301 	add.w	r3, r3, #1
 800e9de:	d0f9      	beq.n	800e9d4 <__gethex+0x66>
 800e9e0:	f7ff ffb0 	bl	800e944 <__hexdig_fun>
 800e9e4:	463c      	mov	r4, r7
 800e9e6:	fab0 f580 	clz	r5, r0
 800e9ea:	2601      	movs	r6, #1
 800e9ec:	096d      	lsrs	r5, r5, #5
 800e9ee:	e001      	b.n	800e9f4 <__gethex+0x86>
 800e9f0:	2500      	movs	r5, #0
 800e9f2:	462c      	mov	r4, r5
 800e9f4:	46c3      	mov	fp, r8
 800e9f6:	465f      	mov	r7, fp
 800e9f8:	f10b 0b01 	add.w	fp, fp, #1
 800e9fc:	7838      	ldrb	r0, [r7, #0]
 800e9fe:	f7ff ffa1 	bl	800e944 <__hexdig_fun>
 800ea02:	2800      	cmp	r0, #0
 800ea04:	d1f7      	bne.n	800e9f6 <__gethex+0x88>
 800ea06:	4638      	mov	r0, r7
 800ea08:	9902      	ldr	r1, [sp, #8]
 800ea0a:	9a00      	ldr	r2, [sp, #0]
 800ea0c:	f7fe f947 	bl	800cc9e <strncmp>
 800ea10:	b958      	cbnz	r0, 800ea2a <__gethex+0xbc>
 800ea12:	b95c      	cbnz	r4, 800ea2c <__gethex+0xbe>
 800ea14:	9b00      	ldr	r3, [sp, #0]
 800ea16:	18fc      	adds	r4, r7, r3
 800ea18:	46a3      	mov	fp, r4
 800ea1a:	465f      	mov	r7, fp
 800ea1c:	f10b 0b01 	add.w	fp, fp, #1
 800ea20:	7838      	ldrb	r0, [r7, #0]
 800ea22:	f7ff ff8f 	bl	800e944 <__hexdig_fun>
 800ea26:	2800      	cmp	r0, #0
 800ea28:	d1f7      	bne.n	800ea1a <__gethex+0xac>
 800ea2a:	b134      	cbz	r4, 800ea3a <__gethex+0xcc>
 800ea2c:	1be4      	subs	r4, r4, r7
 800ea2e:	00a4      	lsls	r4, r4, #2
 800ea30:	e003      	b.n	800ea3a <__gethex+0xcc>
 800ea32:	4647      	mov	r7, r8
 800ea34:	e000      	b.n	800ea38 <__gethex+0xca>
 800ea36:	4604      	mov	r4, r0
 800ea38:	2501      	movs	r5, #1
 800ea3a:	783b      	ldrb	r3, [r7, #0]
 800ea3c:	2b50      	cmp	r3, #80	; 0x50
 800ea3e:	d001      	beq.n	800ea44 <__gethex+0xd6>
 800ea40:	2b70      	cmp	r3, #112	; 0x70
 800ea42:	d130      	bne.n	800eaa6 <__gethex+0x138>
 800ea44:	787b      	ldrb	r3, [r7, #1]
 800ea46:	2b2b      	cmp	r3, #43	; 0x2b
 800ea48:	d006      	beq.n	800ea58 <__gethex+0xea>
 800ea4a:	2b2d      	cmp	r3, #45	; 0x2d
 800ea4c:	d002      	beq.n	800ea54 <__gethex+0xe6>
 800ea4e:	1c7a      	adds	r2, r7, #1
 800ea50:	2300      	movs	r3, #0
 800ea52:	e003      	b.n	800ea5c <__gethex+0xee>
 800ea54:	2301      	movs	r3, #1
 800ea56:	e000      	b.n	800ea5a <__gethex+0xec>
 800ea58:	2300      	movs	r3, #0
 800ea5a:	1cba      	adds	r2, r7, #2
 800ea5c:	7810      	ldrb	r0, [r2, #0]
 800ea5e:	9306      	str	r3, [sp, #24]
 800ea60:	9203      	str	r2, [sp, #12]
 800ea62:	f7ff ff6f 	bl	800e944 <__hexdig_fun>
 800ea66:	1e41      	subs	r1, r0, #1
 800ea68:	b2c9      	uxtb	r1, r1
 800ea6a:	2918      	cmp	r1, #24
 800ea6c:	9a03      	ldr	r2, [sp, #12]
 800ea6e:	9b06      	ldr	r3, [sp, #24]
 800ea70:	d819      	bhi.n	800eaa6 <__gethex+0x138>
 800ea72:	f1a0 0b10 	sub.w	fp, r0, #16
 800ea76:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800ea7a:	9306      	str	r3, [sp, #24]
 800ea7c:	9203      	str	r2, [sp, #12]
 800ea7e:	9207      	str	r2, [sp, #28]
 800ea80:	f7ff ff60 	bl	800e944 <__hexdig_fun>
 800ea84:	1e41      	subs	r1, r0, #1
 800ea86:	b2c9      	uxtb	r1, r1
 800ea88:	2918      	cmp	r1, #24
 800ea8a:	9a03      	ldr	r2, [sp, #12]
 800ea8c:	9b06      	ldr	r3, [sp, #24]
 800ea8e:	d805      	bhi.n	800ea9c <__gethex+0x12e>
 800ea90:	210a      	movs	r1, #10
 800ea92:	fb01 0b0b 	mla	fp, r1, fp, r0
 800ea96:	f1ab 0b10 	sub.w	fp, fp, #16
 800ea9a:	e7ec      	b.n	800ea76 <__gethex+0x108>
 800ea9c:	b10b      	cbz	r3, 800eaa2 <__gethex+0x134>
 800ea9e:	f1cb 0b00 	rsb	fp, fp, #0
 800eaa2:	445c      	add	r4, fp
 800eaa4:	e000      	b.n	800eaa8 <__gethex+0x13a>
 800eaa6:	463a      	mov	r2, r7
 800eaa8:	f8ca 2000 	str.w	r2, [sl]
 800eaac:	b125      	cbz	r5, 800eab8 <__gethex+0x14a>
 800eaae:	2e00      	cmp	r6, #0
 800eab0:	bf14      	ite	ne
 800eab2:	2000      	movne	r0, #0
 800eab4:	2006      	moveq	r0, #6
 800eab6:	e17c      	b.n	800edb2 <__gethex+0x444>
 800eab8:	ebc8 0307 	rsb	r3, r8, r7
 800eabc:	3b01      	subs	r3, #1
 800eabe:	4629      	mov	r1, r5
 800eac0:	2b07      	cmp	r3, #7
 800eac2:	dd02      	ble.n	800eaca <__gethex+0x15c>
 800eac4:	3101      	adds	r1, #1
 800eac6:	105b      	asrs	r3, r3, #1
 800eac8:	e7fa      	b.n	800eac0 <__gethex+0x152>
 800eaca:	9801      	ldr	r0, [sp, #4]
 800eacc:	f000 fa8f 	bl	800efee <_Balloc>
 800ead0:	f04f 0a00 	mov.w	sl, #0
 800ead4:	f100 0b14 	add.w	fp, r0, #20
 800ead8:	4605      	mov	r5, r0
 800eada:	465e      	mov	r6, fp
 800eadc:	46d4      	mov	ip, sl
 800eade:	4547      	cmp	r7, r8
 800eae0:	d937      	bls.n	800eb52 <__gethex+0x1e4>
 800eae2:	1e7b      	subs	r3, r7, #1
 800eae4:	9303      	str	r3, [sp, #12]
 800eae6:	9a05      	ldr	r2, [sp, #20]
 800eae8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800eaec:	4293      	cmp	r3, r2
 800eaee:	d009      	beq.n	800eb04 <__gethex+0x196>
 800eaf0:	f1bc 0f20 	cmp.w	ip, #32
 800eaf4:	d11a      	bne.n	800eb2c <__gethex+0x1be>
 800eaf6:	f8c6 a000 	str.w	sl, [r6]
 800eafa:	f04f 0a00 	mov.w	sl, #0
 800eafe:	3604      	adds	r6, #4
 800eb00:	46d4      	mov	ip, sl
 800eb02:	e013      	b.n	800eb2c <__gethex+0x1be>
 800eb04:	9b00      	ldr	r3, [sp, #0]
 800eb06:	9a03      	ldr	r2, [sp, #12]
 800eb08:	f1c3 0301 	rsb	r3, r3, #1
 800eb0c:	4413      	add	r3, r2
 800eb0e:	4543      	cmp	r3, r8
 800eb10:	d3ee      	bcc.n	800eaf0 <__gethex+0x182>
 800eb12:	4618      	mov	r0, r3
 800eb14:	9902      	ldr	r1, [sp, #8]
 800eb16:	9a00      	ldr	r2, [sp, #0]
 800eb18:	f8cd c01c 	str.w	ip, [sp, #28]
 800eb1c:	9306      	str	r3, [sp, #24]
 800eb1e:	f7fe f8be 	bl	800cc9e <strncmp>
 800eb22:	9b06      	ldr	r3, [sp, #24]
 800eb24:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800eb28:	b188      	cbz	r0, 800eb4e <__gethex+0x1e0>
 800eb2a:	e7e1      	b.n	800eaf0 <__gethex+0x182>
 800eb2c:	f817 0c01 	ldrb.w	r0, [r7, #-1]
 800eb30:	f8cd c018 	str.w	ip, [sp, #24]
 800eb34:	f7ff ff06 	bl	800e944 <__hexdig_fun>
 800eb38:	f8dd c018 	ldr.w	ip, [sp, #24]
 800eb3c:	9b03      	ldr	r3, [sp, #12]
 800eb3e:	f000 000f 	and.w	r0, r0, #15
 800eb42:	fa00 f00c 	lsl.w	r0, r0, ip
 800eb46:	ea4a 0a00 	orr.w	sl, sl, r0
 800eb4a:	f10c 0c04 	add.w	ip, ip, #4
 800eb4e:	461f      	mov	r7, r3
 800eb50:	e7c5      	b.n	800eade <__gethex+0x170>
 800eb52:	f846 ab04 	str.w	sl, [r6], #4
 800eb56:	ebcb 0606 	rsb	r6, fp, r6
 800eb5a:	10b0      	asrs	r0, r6, #2
 800eb5c:	6128      	str	r0, [r5, #16]
 800eb5e:	0147      	lsls	r7, r0, #5
 800eb60:	4650      	mov	r0, sl
 800eb62:	f000 fb0e 	bl	800f182 <__hi0bits>
 800eb66:	f8d9 6000 	ldr.w	r6, [r9]
 800eb6a:	1a38      	subs	r0, r7, r0
 800eb6c:	42b0      	cmp	r0, r6
 800eb6e:	dd26      	ble.n	800ebbe <__gethex+0x250>
 800eb70:	1b87      	subs	r7, r0, r6
 800eb72:	4639      	mov	r1, r7
 800eb74:	4628      	mov	r0, r5
 800eb76:	f000 fe0f 	bl	800f798 <__any_on>
 800eb7a:	b1c8      	cbz	r0, 800ebb0 <__gethex+0x242>
 800eb7c:	1e7b      	subs	r3, r7, #1
 800eb7e:	115a      	asrs	r2, r3, #5
 800eb80:	f003 011f 	and.w	r1, r3, #31
 800eb84:	f04f 0801 	mov.w	r8, #1
 800eb88:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 800eb8c:	fa08 f101 	lsl.w	r1, r8, r1
 800eb90:	4211      	tst	r1, r2
 800eb92:	d00e      	beq.n	800ebb2 <__gethex+0x244>
 800eb94:	4543      	cmp	r3, r8
 800eb96:	dc02      	bgt.n	800eb9e <__gethex+0x230>
 800eb98:	f04f 0802 	mov.w	r8, #2
 800eb9c:	e009      	b.n	800ebb2 <__gethex+0x244>
 800eb9e:	4628      	mov	r0, r5
 800eba0:	1eb9      	subs	r1, r7, #2
 800eba2:	f000 fdf9 	bl	800f798 <__any_on>
 800eba6:	2800      	cmp	r0, #0
 800eba8:	d0f6      	beq.n	800eb98 <__gethex+0x22a>
 800ebaa:	f04f 0803 	mov.w	r8, #3
 800ebae:	e000      	b.n	800ebb2 <__gethex+0x244>
 800ebb0:	4680      	mov	r8, r0
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	4639      	mov	r1, r7
 800ebb6:	f7ff fe8f 	bl	800e8d8 <rshift>
 800ebba:	443c      	add	r4, r7
 800ebbc:	e00c      	b.n	800ebd8 <__gethex+0x26a>
 800ebbe:	da09      	bge.n	800ebd4 <__gethex+0x266>
 800ebc0:	1a37      	subs	r7, r6, r0
 800ebc2:	4629      	mov	r1, r5
 800ebc4:	9801      	ldr	r0, [sp, #4]
 800ebc6:	463a      	mov	r2, r7
 800ebc8:	f000 fc10 	bl	800f3ec <__lshift>
 800ebcc:	1be4      	subs	r4, r4, r7
 800ebce:	4605      	mov	r5, r0
 800ebd0:	f100 0b14 	add.w	fp, r0, #20
 800ebd4:	f04f 0800 	mov.w	r8, #0
 800ebd8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ebdc:	429c      	cmp	r4, r3
 800ebde:	dd08      	ble.n	800ebf2 <__gethex+0x284>
 800ebe0:	9801      	ldr	r0, [sp, #4]
 800ebe2:	4629      	mov	r1, r5
 800ebe4:	f000 fa38 	bl	800f058 <_Bfree>
 800ebe8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ebea:	2300      	movs	r3, #0
 800ebec:	6013      	str	r3, [r2, #0]
 800ebee:	20a3      	movs	r0, #163	; 0xa3
 800ebf0:	e0df      	b.n	800edb2 <__gethex+0x444>
 800ebf2:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800ebf6:	4284      	cmp	r4, r0
 800ebf8:	da53      	bge.n	800eca2 <__gethex+0x334>
 800ebfa:	1b04      	subs	r4, r0, r4
 800ebfc:	42b4      	cmp	r4, r6
 800ebfe:	db2e      	blt.n	800ec5e <__gethex+0x2f0>
 800ec00:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ec04:	2b02      	cmp	r3, #2
 800ec06:	d01a      	beq.n	800ec3e <__gethex+0x2d0>
 800ec08:	2b03      	cmp	r3, #3
 800ec0a:	d01c      	beq.n	800ec46 <__gethex+0x2d8>
 800ec0c:	2b01      	cmp	r3, #1
 800ec0e:	d11d      	bne.n	800ec4c <__gethex+0x2de>
 800ec10:	42b4      	cmp	r4, r6
 800ec12:	d11b      	bne.n	800ec4c <__gethex+0x2de>
 800ec14:	2e01      	cmp	r6, #1
 800ec16:	dc0b      	bgt.n	800ec30 <__gethex+0x2c2>
 800ec18:	9a04      	ldr	r2, [sp, #16]
 800ec1a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ec1e:	6013      	str	r3, [r2, #0]
 800ec20:	2301      	movs	r3, #1
 800ec22:	612b      	str	r3, [r5, #16]
 800ec24:	f8cb 3000 	str.w	r3, [fp]
 800ec28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ec2a:	2062      	movs	r0, #98	; 0x62
 800ec2c:	601d      	str	r5, [r3, #0]
 800ec2e:	e0c0      	b.n	800edb2 <__gethex+0x444>
 800ec30:	4628      	mov	r0, r5
 800ec32:	1e71      	subs	r1, r6, #1
 800ec34:	f000 fdb0 	bl	800f798 <__any_on>
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	d1ed      	bne.n	800ec18 <__gethex+0x2aa>
 800ec3c:	e006      	b.n	800ec4c <__gethex+0x2de>
 800ec3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d0e9      	beq.n	800ec18 <__gethex+0x2aa>
 800ec44:	e002      	b.n	800ec4c <__gethex+0x2de>
 800ec46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d1e5      	bne.n	800ec18 <__gethex+0x2aa>
 800ec4c:	9801      	ldr	r0, [sp, #4]
 800ec4e:	4629      	mov	r1, r5
 800ec50:	f000 fa02 	bl	800f058 <_Bfree>
 800ec54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ec56:	2300      	movs	r3, #0
 800ec58:	6013      	str	r3, [r2, #0]
 800ec5a:	2050      	movs	r0, #80	; 0x50
 800ec5c:	e0a9      	b.n	800edb2 <__gethex+0x444>
 800ec5e:	1e67      	subs	r7, r4, #1
 800ec60:	f1b8 0f00 	cmp.w	r8, #0
 800ec64:	d107      	bne.n	800ec76 <__gethex+0x308>
 800ec66:	2f00      	cmp	r7, #0
 800ec68:	dd07      	ble.n	800ec7a <__gethex+0x30c>
 800ec6a:	4628      	mov	r0, r5
 800ec6c:	4639      	mov	r1, r7
 800ec6e:	f000 fd93 	bl	800f798 <__any_on>
 800ec72:	4680      	mov	r8, r0
 800ec74:	e001      	b.n	800ec7a <__gethex+0x30c>
 800ec76:	f04f 0801 	mov.w	r8, #1
 800ec7a:	117a      	asrs	r2, r7, #5
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	f007 071f 	and.w	r7, r7, #31
 800ec82:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 800ec86:	40bb      	lsls	r3, r7
 800ec88:	4213      	tst	r3, r2
 800ec8a:	4621      	mov	r1, r4
 800ec8c:	4628      	mov	r0, r5
 800ec8e:	bf18      	it	ne
 800ec90:	f048 0802 	orrne.w	r8, r8, #2
 800ec94:	1b36      	subs	r6, r6, r4
 800ec96:	f7ff fe1f 	bl	800e8d8 <rshift>
 800ec9a:	2702      	movs	r7, #2
 800ec9c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800eca0:	e000      	b.n	800eca4 <__gethex+0x336>
 800eca2:	2701      	movs	r7, #1
 800eca4:	f1b8 0f00 	cmp.w	r8, #0
 800eca8:	d07e      	beq.n	800eda8 <__gethex+0x43a>
 800ecaa:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ecae:	2b02      	cmp	r3, #2
 800ecb0:	d00e      	beq.n	800ecd0 <__gethex+0x362>
 800ecb2:	2b03      	cmp	r3, #3
 800ecb4:	d010      	beq.n	800ecd8 <__gethex+0x36a>
 800ecb6:	2b01      	cmp	r3, #1
 800ecb8:	d174      	bne.n	800eda4 <__gethex+0x436>
 800ecba:	f018 0f02 	tst.w	r8, #2
 800ecbe:	d071      	beq.n	800eda4 <__gethex+0x436>
 800ecc0:	f8db 0000 	ldr.w	r0, [fp]
 800ecc4:	ea48 0800 	orr.w	r8, r8, r0
 800ecc8:	f018 0f01 	tst.w	r8, #1
 800eccc:	d107      	bne.n	800ecde <__gethex+0x370>
 800ecce:	e069      	b.n	800eda4 <__gethex+0x436>
 800ecd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ecd2:	f1c3 0301 	rsb	r3, r3, #1
 800ecd6:	9313      	str	r3, [sp, #76]	; 0x4c
 800ecd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d062      	beq.n	800eda4 <__gethex+0x436>
 800ecde:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ece2:	f105 0314 	add.w	r3, r5, #20
 800ece6:	ea4f 088a 	mov.w	r8, sl, lsl #2
 800ecea:	eb03 0108 	add.w	r1, r3, r8
 800ecee:	681a      	ldr	r2, [r3, #0]
 800ecf0:	1c50      	adds	r0, r2, #1
 800ecf2:	d002      	beq.n	800ecfa <__gethex+0x38c>
 800ecf4:	3201      	adds	r2, #1
 800ecf6:	601a      	str	r2, [r3, #0]
 800ecf8:	e021      	b.n	800ed3e <__gethex+0x3d0>
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	f843 2b04 	str.w	r2, [r3], #4
 800ed00:	428b      	cmp	r3, r1
 800ed02:	d3f4      	bcc.n	800ecee <__gethex+0x380>
 800ed04:	68ab      	ldr	r3, [r5, #8]
 800ed06:	459a      	cmp	sl, r3
 800ed08:	db12      	blt.n	800ed30 <__gethex+0x3c2>
 800ed0a:	6869      	ldr	r1, [r5, #4]
 800ed0c:	9801      	ldr	r0, [sp, #4]
 800ed0e:	3101      	adds	r1, #1
 800ed10:	f000 f96d 	bl	800efee <_Balloc>
 800ed14:	692a      	ldr	r2, [r5, #16]
 800ed16:	3202      	adds	r2, #2
 800ed18:	f105 010c 	add.w	r1, r5, #12
 800ed1c:	4683      	mov	fp, r0
 800ed1e:	0092      	lsls	r2, r2, #2
 800ed20:	300c      	adds	r0, #12
 800ed22:	f7fc fe4e 	bl	800b9c2 <memcpy>
 800ed26:	4629      	mov	r1, r5
 800ed28:	9801      	ldr	r0, [sp, #4]
 800ed2a:	f000 f995 	bl	800f058 <_Bfree>
 800ed2e:	465d      	mov	r5, fp
 800ed30:	692b      	ldr	r3, [r5, #16]
 800ed32:	1c5a      	adds	r2, r3, #1
 800ed34:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ed38:	612a      	str	r2, [r5, #16]
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	615a      	str	r2, [r3, #20]
 800ed3e:	2f02      	cmp	r7, #2
 800ed40:	f105 0214 	add.w	r2, r5, #20
 800ed44:	d110      	bne.n	800ed68 <__gethex+0x3fa>
 800ed46:	f8d9 3000 	ldr.w	r3, [r9]
 800ed4a:	3b01      	subs	r3, #1
 800ed4c:	429e      	cmp	r6, r3
 800ed4e:	d126      	bne.n	800ed9e <__gethex+0x430>
 800ed50:	1171      	asrs	r1, r6, #5
 800ed52:	2301      	movs	r3, #1
 800ed54:	f006 061f 	and.w	r6, r6, #31
 800ed58:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ed5c:	40b3      	lsls	r3, r6
 800ed5e:	4213      	tst	r3, r2
 800ed60:	bf0c      	ite	eq
 800ed62:	2702      	moveq	r7, #2
 800ed64:	2701      	movne	r7, #1
 800ed66:	e01a      	b.n	800ed9e <__gethex+0x430>
 800ed68:	692b      	ldr	r3, [r5, #16]
 800ed6a:	4553      	cmp	r3, sl
 800ed6c:	dd0a      	ble.n	800ed84 <__gethex+0x416>
 800ed6e:	4628      	mov	r0, r5
 800ed70:	2101      	movs	r1, #1
 800ed72:	f7ff fdb1 	bl	800e8d8 <rshift>
 800ed76:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ed7a:	3401      	adds	r4, #1
 800ed7c:	429c      	cmp	r4, r3
 800ed7e:	f73f af2f 	bgt.w	800ebe0 <__gethex+0x272>
 800ed82:	e00b      	b.n	800ed9c <__gethex+0x42e>
 800ed84:	f016 061f 	ands.w	r6, r6, #31
 800ed88:	d008      	beq.n	800ed9c <__gethex+0x42e>
 800ed8a:	4490      	add	r8, r2
 800ed8c:	f1c6 0620 	rsb	r6, r6, #32
 800ed90:	f858 0c04 	ldr.w	r0, [r8, #-4]
 800ed94:	f000 f9f5 	bl	800f182 <__hi0bits>
 800ed98:	42b0      	cmp	r0, r6
 800ed9a:	dbe8      	blt.n	800ed6e <__gethex+0x400>
 800ed9c:	2701      	movs	r7, #1
 800ed9e:	f047 0720 	orr.w	r7, r7, #32
 800eda2:	e001      	b.n	800eda8 <__gethex+0x43a>
 800eda4:	f047 0710 	orr.w	r7, r7, #16
 800eda8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800edaa:	601d      	str	r5, [r3, #0]
 800edac:	9b04      	ldr	r3, [sp, #16]
 800edae:	4638      	mov	r0, r7
 800edb0:	601c      	str	r4, [r3, #0]
 800edb2:	b009      	add	sp, #36	; 0x24
 800edb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800edb8 <L_shift>:
 800edb8:	f1c2 0208 	rsb	r2, r2, #8
 800edbc:	0092      	lsls	r2, r2, #2
 800edbe:	b570      	push	{r4, r5, r6, lr}
 800edc0:	f1c2 0620 	rsb	r6, r2, #32
 800edc4:	6843      	ldr	r3, [r0, #4]
 800edc6:	6805      	ldr	r5, [r0, #0]
 800edc8:	fa03 f406 	lsl.w	r4, r3, r6
 800edcc:	432c      	orrs	r4, r5
 800edce:	40d3      	lsrs	r3, r2
 800edd0:	6004      	str	r4, [r0, #0]
 800edd2:	f840 3f04 	str.w	r3, [r0, #4]!
 800edd6:	4288      	cmp	r0, r1
 800edd8:	d3f4      	bcc.n	800edc4 <L_shift+0xc>
 800edda:	bd70      	pop	{r4, r5, r6, pc}

0800eddc <__hexnan>:
 800eddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede0:	680e      	ldr	r6, [r1, #0]
 800ede2:	f8d0 a000 	ldr.w	sl, [r0]
 800ede6:	1175      	asrs	r5, r6, #5
 800ede8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800edec:	f016 031f 	ands.w	r3, r6, #31
 800edf0:	b085      	sub	sp, #20
 800edf2:	bf18      	it	ne
 800edf4:	3504      	addne	r5, #4
 800edf6:	f1a5 0904 	sub.w	r9, r5, #4
 800edfa:	4617      	mov	r7, r2
 800edfc:	2200      	movs	r2, #0
 800edfe:	4683      	mov	fp, r0
 800ee00:	9301      	str	r3, [sp, #4]
 800ee02:	f845 2c04 	str.w	r2, [r5, #-4]
 800ee06:	46c8      	mov	r8, r9
 800ee08:	464c      	mov	r4, r9
 800ee0a:	9200      	str	r2, [sp, #0]
 800ee0c:	4616      	mov	r6, r2
 800ee0e:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 800ee12:	2900      	cmp	r1, #0
 800ee14:	d03a      	beq.n	800ee8c <__hexnan+0xb0>
 800ee16:	4608      	mov	r0, r1
 800ee18:	9203      	str	r2, [sp, #12]
 800ee1a:	9102      	str	r1, [sp, #8]
 800ee1c:	f7ff fd92 	bl	800e944 <__hexdig_fun>
 800ee20:	9902      	ldr	r1, [sp, #8]
 800ee22:	9a03      	ldr	r2, [sp, #12]
 800ee24:	b9e8      	cbnz	r0, 800ee62 <__hexnan+0x86>
 800ee26:	2920      	cmp	r1, #32
 800ee28:	d814      	bhi.n	800ee54 <__hexnan+0x78>
 800ee2a:	9b00      	ldr	r3, [sp, #0]
 800ee2c:	42b3      	cmp	r3, r6
 800ee2e:	daee      	bge.n	800ee0e <__hexnan+0x32>
 800ee30:	4544      	cmp	r4, r8
 800ee32:	d205      	bcs.n	800ee40 <__hexnan+0x64>
 800ee34:	2a07      	cmp	r2, #7
 800ee36:	dc03      	bgt.n	800ee40 <__hexnan+0x64>
 800ee38:	4620      	mov	r0, r4
 800ee3a:	4641      	mov	r1, r8
 800ee3c:	f7ff ffbc 	bl	800edb8 <L_shift>
 800ee40:	42bc      	cmp	r4, r7
 800ee42:	d921      	bls.n	800ee88 <__hexnan+0xac>
 800ee44:	f1a4 0804 	sub.w	r8, r4, #4
 800ee48:	2200      	movs	r2, #0
 800ee4a:	f844 2c04 	str.w	r2, [r4, #-4]
 800ee4e:	9600      	str	r6, [sp, #0]
 800ee50:	4644      	mov	r4, r8
 800ee52:	e7dc      	b.n	800ee0e <__hexnan+0x32>
 800ee54:	2929      	cmp	r1, #41	; 0x29
 800ee56:	d145      	bne.n	800eee4 <__hexnan+0x108>
 800ee58:	f10a 0301 	add.w	r3, sl, #1
 800ee5c:	f8cb 3000 	str.w	r3, [fp]
 800ee60:	e014      	b.n	800ee8c <__hexnan+0xb0>
 800ee62:	3201      	adds	r2, #1
 800ee64:	2a08      	cmp	r2, #8
 800ee66:	f106 0601 	add.w	r6, r6, #1
 800ee6a:	dd06      	ble.n	800ee7a <__hexnan+0x9e>
 800ee6c:	42bc      	cmp	r4, r7
 800ee6e:	d9ce      	bls.n	800ee0e <__hexnan+0x32>
 800ee70:	2200      	movs	r2, #0
 800ee72:	f844 2c04 	str.w	r2, [r4, #-4]
 800ee76:	3c04      	subs	r4, #4
 800ee78:	2201      	movs	r2, #1
 800ee7a:	6821      	ldr	r1, [r4, #0]
 800ee7c:	f000 000f 	and.w	r0, r0, #15
 800ee80:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 800ee84:	6020      	str	r0, [r4, #0]
 800ee86:	e7c2      	b.n	800ee0e <__hexnan+0x32>
 800ee88:	2208      	movs	r2, #8
 800ee8a:	e7c0      	b.n	800ee0e <__hexnan+0x32>
 800ee8c:	b356      	cbz	r6, 800eee4 <__hexnan+0x108>
 800ee8e:	4544      	cmp	r4, r8
 800ee90:	d205      	bcs.n	800ee9e <__hexnan+0xc2>
 800ee92:	2a07      	cmp	r2, #7
 800ee94:	dc03      	bgt.n	800ee9e <__hexnan+0xc2>
 800ee96:	4620      	mov	r0, r4
 800ee98:	4641      	mov	r1, r8
 800ee9a:	f7ff ff8d 	bl	800edb8 <L_shift>
 800ee9e:	42bc      	cmp	r4, r7
 800eea0:	d90c      	bls.n	800eebc <__hexnan+0xe0>
 800eea2:	463b      	mov	r3, r7
 800eea4:	f854 2b04 	ldr.w	r2, [r4], #4
 800eea8:	f843 2b04 	str.w	r2, [r3], #4
 800eeac:	454c      	cmp	r4, r9
 800eeae:	d9f9      	bls.n	800eea4 <__hexnan+0xc8>
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	f843 2b04 	str.w	r2, [r3], #4
 800eeb6:	454b      	cmp	r3, r9
 800eeb8:	d9fa      	bls.n	800eeb0 <__hexnan+0xd4>
 800eeba:	e00b      	b.n	800eed4 <__hexnan+0xf8>
 800eebc:	9b01      	ldr	r3, [sp, #4]
 800eebe:	b14b      	cbz	r3, 800eed4 <__hexnan+0xf8>
 800eec0:	f1c3 0620 	rsb	r6, r3, #32
 800eec4:	f855 2c04 	ldr.w	r2, [r5, #-4]
 800eec8:	f04f 33ff 	mov.w	r3, #4294967295
 800eecc:	40f3      	lsrs	r3, r6
 800eece:	4013      	ands	r3, r2
 800eed0:	f845 3c04 	str.w	r3, [r5, #-4]
 800eed4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800eed8:	b933      	cbnz	r3, 800eee8 <__hexnan+0x10c>
 800eeda:	42bd      	cmp	r5, r7
 800eedc:	d1fa      	bne.n	800eed4 <__hexnan+0xf8>
 800eede:	2301      	movs	r3, #1
 800eee0:	602b      	str	r3, [r5, #0]
 800eee2:	e001      	b.n	800eee8 <__hexnan+0x10c>
 800eee4:	2004      	movs	r0, #4
 800eee6:	e000      	b.n	800eeea <__hexnan+0x10e>
 800eee8:	2005      	movs	r0, #5
 800eeea:	b005      	add	sp, #20
 800eeec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eef0 <_localeconv_r>:
 800eef0:	4800      	ldr	r0, [pc, #0]	; (800eef4 <_localeconv_r+0x4>)
 800eef2:	4770      	bx	lr
 800eef4:	20000ac8 	.word	0x20000ac8

0800eef8 <_lseek_r>:
 800eef8:	b538      	push	{r3, r4, r5, lr}
 800eefa:	4c07      	ldr	r4, [pc, #28]	; (800ef18 <_lseek_r+0x20>)
 800eefc:	4605      	mov	r5, r0
 800eefe:	2000      	movs	r0, #0
 800ef00:	6020      	str	r0, [r4, #0]
 800ef02:	4608      	mov	r0, r1
 800ef04:	4611      	mov	r1, r2
 800ef06:	461a      	mov	r2, r3
 800ef08:	f7fa fff0 	bl	8009eec <_lseek>
 800ef0c:	1c43      	adds	r3, r0, #1
 800ef0e:	d102      	bne.n	800ef16 <_lseek_r+0x1e>
 800ef10:	6823      	ldr	r3, [r4, #0]
 800ef12:	b103      	cbz	r3, 800ef16 <_lseek_r+0x1e>
 800ef14:	602b      	str	r3, [r5, #0]
 800ef16:	bd38      	pop	{r3, r4, r5, pc}
 800ef18:	20000dbc 	.word	0x20000dbc

0800ef1c <__smakebuf_r>:
 800ef1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef1e:	898b      	ldrh	r3, [r1, #12]
 800ef20:	079d      	lsls	r5, r3, #30
 800ef22:	b091      	sub	sp, #68	; 0x44
 800ef24:	4606      	mov	r6, r0
 800ef26:	460c      	mov	r4, r1
 800ef28:	d426      	bmi.n	800ef78 <__smakebuf_r+0x5c>
 800ef2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef2e:	2900      	cmp	r1, #0
 800ef30:	da09      	bge.n	800ef46 <__smakebuf_r+0x2a>
 800ef32:	89a3      	ldrh	r3, [r4, #12]
 800ef34:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ef38:	f04f 0500 	mov.w	r5, #0
 800ef3c:	bf14      	ite	ne
 800ef3e:	2740      	movne	r7, #64	; 0x40
 800ef40:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 800ef44:	e00d      	b.n	800ef62 <__smakebuf_r+0x46>
 800ef46:	aa01      	add	r2, sp, #4
 800ef48:	f000 fdcc 	bl	800fae4 <_fstat_r>
 800ef4c:	2800      	cmp	r0, #0
 800ef4e:	dbf0      	blt.n	800ef32 <__smakebuf_r+0x16>
 800ef50:	9d02      	ldr	r5, [sp, #8]
 800ef52:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800ef56:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 800ef5a:	424d      	negs	r5, r1
 800ef5c:	414d      	adcs	r5, r1
 800ef5e:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800ef62:	4630      	mov	r0, r6
 800ef64:	4639      	mov	r1, r7
 800ef66:	f7fc fd91 	bl	800ba8c <_malloc_r>
 800ef6a:	b960      	cbnz	r0, 800ef86 <__smakebuf_r+0x6a>
 800ef6c:	89a3      	ldrh	r3, [r4, #12]
 800ef6e:	059a      	lsls	r2, r3, #22
 800ef70:	d41d      	bmi.n	800efae <__smakebuf_r+0x92>
 800ef72:	f043 0302 	orr.w	r3, r3, #2
 800ef76:	81a3      	strh	r3, [r4, #12]
 800ef78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef7c:	6023      	str	r3, [r4, #0]
 800ef7e:	6123      	str	r3, [r4, #16]
 800ef80:	2301      	movs	r3, #1
 800ef82:	6163      	str	r3, [r4, #20]
 800ef84:	e013      	b.n	800efae <__smakebuf_r+0x92>
 800ef86:	4b0b      	ldr	r3, [pc, #44]	; (800efb4 <__smakebuf_r+0x98>)
 800ef88:	62b3      	str	r3, [r6, #40]	; 0x28
 800ef8a:	89a3      	ldrh	r3, [r4, #12]
 800ef8c:	6020      	str	r0, [r4, #0]
 800ef8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef92:	81a3      	strh	r3, [r4, #12]
 800ef94:	6120      	str	r0, [r4, #16]
 800ef96:	6167      	str	r7, [r4, #20]
 800ef98:	b14d      	cbz	r5, 800efae <__smakebuf_r+0x92>
 800ef9a:	4630      	mov	r0, r6
 800ef9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efa0:	f000 fdb2 	bl	800fb08 <_isatty_r>
 800efa4:	b118      	cbz	r0, 800efae <__smakebuf_r+0x92>
 800efa6:	89a3      	ldrh	r3, [r4, #12]
 800efa8:	f043 0301 	orr.w	r3, r3, #1
 800efac:	81a3      	strh	r3, [r4, #12]
 800efae:	b011      	add	sp, #68	; 0x44
 800efb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efb2:	bf00      	nop
 800efb4:	0800b7b9 	.word	0x0800b7b9

0800efb8 <memmove>:
 800efb8:	4281      	cmp	r1, r0
 800efba:	b510      	push	{r4, lr}
 800efbc:	eb01 0302 	add.w	r3, r1, r2
 800efc0:	d301      	bcc.n	800efc6 <memmove+0xe>
 800efc2:	1e42      	subs	r2, r0, #1
 800efc4:	e00b      	b.n	800efde <memmove+0x26>
 800efc6:	4298      	cmp	r0, r3
 800efc8:	d2fb      	bcs.n	800efc2 <memmove+0xa>
 800efca:	1881      	adds	r1, r0, r2
 800efcc:	1ad2      	subs	r2, r2, r3
 800efce:	42d3      	cmn	r3, r2
 800efd0:	d004      	beq.n	800efdc <memmove+0x24>
 800efd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efd6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800efda:	e7f8      	b.n	800efce <memmove+0x16>
 800efdc:	bd10      	pop	{r4, pc}
 800efde:	4299      	cmp	r1, r3
 800efe0:	d004      	beq.n	800efec <memmove+0x34>
 800efe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efe6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800efea:	e7f8      	b.n	800efde <memmove+0x26>
 800efec:	bd10      	pop	{r4, pc}

0800efee <_Balloc>:
 800efee:	b570      	push	{r4, r5, r6, lr}
 800eff0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eff2:	4604      	mov	r4, r0
 800eff4:	460e      	mov	r6, r1
 800eff6:	b93d      	cbnz	r5, 800f008 <_Balloc+0x1a>
 800eff8:	2010      	movs	r0, #16
 800effa:	f7fc fccb 	bl	800b994 <malloc>
 800effe:	6260      	str	r0, [r4, #36]	; 0x24
 800f000:	6045      	str	r5, [r0, #4]
 800f002:	6085      	str	r5, [r0, #8]
 800f004:	6005      	str	r5, [r0, #0]
 800f006:	60c5      	str	r5, [r0, #12]
 800f008:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f00a:	68eb      	ldr	r3, [r5, #12]
 800f00c:	b143      	cbz	r3, 800f020 <_Balloc+0x32>
 800f00e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f010:	68db      	ldr	r3, [r3, #12]
 800f012:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f016:	b178      	cbz	r0, 800f038 <_Balloc+0x4a>
 800f018:	6802      	ldr	r2, [r0, #0]
 800f01a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f01e:	e017      	b.n	800f050 <_Balloc+0x62>
 800f020:	4620      	mov	r0, r4
 800f022:	2104      	movs	r1, #4
 800f024:	2221      	movs	r2, #33	; 0x21
 800f026:	f7fc fcdf 	bl	800b9e8 <_calloc_r>
 800f02a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f02c:	60e8      	str	r0, [r5, #12]
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d1ec      	bne.n	800f00e <_Balloc+0x20>
 800f034:	2000      	movs	r0, #0
 800f036:	bd70      	pop	{r4, r5, r6, pc}
 800f038:	2101      	movs	r1, #1
 800f03a:	fa01 f506 	lsl.w	r5, r1, r6
 800f03e:	1d6a      	adds	r2, r5, #5
 800f040:	4620      	mov	r0, r4
 800f042:	0092      	lsls	r2, r2, #2
 800f044:	f7fc fcd0 	bl	800b9e8 <_calloc_r>
 800f048:	2800      	cmp	r0, #0
 800f04a:	d0f3      	beq.n	800f034 <_Balloc+0x46>
 800f04c:	6046      	str	r6, [r0, #4]
 800f04e:	6085      	str	r5, [r0, #8]
 800f050:	2300      	movs	r3, #0
 800f052:	6103      	str	r3, [r0, #16]
 800f054:	60c3      	str	r3, [r0, #12]
 800f056:	bd70      	pop	{r4, r5, r6, pc}

0800f058 <_Bfree>:
 800f058:	b570      	push	{r4, r5, r6, lr}
 800f05a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f05c:	4606      	mov	r6, r0
 800f05e:	460d      	mov	r5, r1
 800f060:	b93c      	cbnz	r4, 800f072 <_Bfree+0x1a>
 800f062:	2010      	movs	r0, #16
 800f064:	f7fc fc96 	bl	800b994 <malloc>
 800f068:	6270      	str	r0, [r6, #36]	; 0x24
 800f06a:	6044      	str	r4, [r0, #4]
 800f06c:	6084      	str	r4, [r0, #8]
 800f06e:	6004      	str	r4, [r0, #0]
 800f070:	60c4      	str	r4, [r0, #12]
 800f072:	b13d      	cbz	r5, 800f084 <_Bfree+0x2c>
 800f074:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f076:	686a      	ldr	r2, [r5, #4]
 800f078:	68db      	ldr	r3, [r3, #12]
 800f07a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f07e:	6029      	str	r1, [r5, #0]
 800f080:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f084:	bd70      	pop	{r4, r5, r6, pc}

0800f086 <__multadd>:
 800f086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f08a:	690f      	ldr	r7, [r1, #16]
 800f08c:	4698      	mov	r8, r3
 800f08e:	4606      	mov	r6, r0
 800f090:	460c      	mov	r4, r1
 800f092:	f101 0e14 	add.w	lr, r1, #20
 800f096:	2300      	movs	r3, #0
 800f098:	f8de 0000 	ldr.w	r0, [lr]
 800f09c:	b285      	uxth	r5, r0
 800f09e:	0c01      	lsrs	r1, r0, #16
 800f0a0:	fb02 8505 	mla	r5, r2, r5, r8
 800f0a4:	4351      	muls	r1, r2
 800f0a6:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	b2ad      	uxth	r5, r5
 800f0ae:	ea4f 4811 	mov.w	r8, r1, lsr #16
 800f0b2:	42bb      	cmp	r3, r7
 800f0b4:	eb05 4101 	add.w	r1, r5, r1, lsl #16
 800f0b8:	f84e 1b04 	str.w	r1, [lr], #4
 800f0bc:	dbec      	blt.n	800f098 <__multadd+0x12>
 800f0be:	f1b8 0f00 	cmp.w	r8, #0
 800f0c2:	d01b      	beq.n	800f0fc <__multadd+0x76>
 800f0c4:	68a3      	ldr	r3, [r4, #8]
 800f0c6:	429f      	cmp	r7, r3
 800f0c8:	db12      	blt.n	800f0f0 <__multadd+0x6a>
 800f0ca:	6861      	ldr	r1, [r4, #4]
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	3101      	adds	r1, #1
 800f0d0:	f7ff ff8d 	bl	800efee <_Balloc>
 800f0d4:	6922      	ldr	r2, [r4, #16]
 800f0d6:	3202      	adds	r2, #2
 800f0d8:	f104 010c 	add.w	r1, r4, #12
 800f0dc:	4605      	mov	r5, r0
 800f0de:	0092      	lsls	r2, r2, #2
 800f0e0:	300c      	adds	r0, #12
 800f0e2:	f7fc fc6e 	bl	800b9c2 <memcpy>
 800f0e6:	4621      	mov	r1, r4
 800f0e8:	4630      	mov	r0, r6
 800f0ea:	f7ff ffb5 	bl	800f058 <_Bfree>
 800f0ee:	462c      	mov	r4, r5
 800f0f0:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 800f0f4:	3701      	adds	r7, #1
 800f0f6:	f8c3 8014 	str.w	r8, [r3, #20]
 800f0fa:	6127      	str	r7, [r4, #16]
 800f0fc:	4620      	mov	r0, r4
 800f0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f102 <__s2b>:
 800f102:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f106:	460c      	mov	r4, r1
 800f108:	4615      	mov	r5, r2
 800f10a:	4698      	mov	r8, r3
 800f10c:	2209      	movs	r2, #9
 800f10e:	3308      	adds	r3, #8
 800f110:	4607      	mov	r7, r0
 800f112:	fb93 f2f2 	sdiv	r2, r3, r2
 800f116:	2100      	movs	r1, #0
 800f118:	2301      	movs	r3, #1
 800f11a:	429a      	cmp	r2, r3
 800f11c:	dd02      	ble.n	800f124 <__s2b+0x22>
 800f11e:	005b      	lsls	r3, r3, #1
 800f120:	3101      	adds	r1, #1
 800f122:	e7fa      	b.n	800f11a <__s2b+0x18>
 800f124:	4638      	mov	r0, r7
 800f126:	f7ff ff62 	bl	800efee <_Balloc>
 800f12a:	9b08      	ldr	r3, [sp, #32]
 800f12c:	6143      	str	r3, [r0, #20]
 800f12e:	2d09      	cmp	r5, #9
 800f130:	f04f 0301 	mov.w	r3, #1
 800f134:	4601      	mov	r1, r0
 800f136:	6103      	str	r3, [r0, #16]
 800f138:	dd10      	ble.n	800f15c <__s2b+0x5a>
 800f13a:	f104 0609 	add.w	r6, r4, #9
 800f13e:	46b1      	mov	r9, r6
 800f140:	442c      	add	r4, r5
 800f142:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f146:	4638      	mov	r0, r7
 800f148:	220a      	movs	r2, #10
 800f14a:	3b30      	subs	r3, #48	; 0x30
 800f14c:	f7ff ff9b 	bl	800f086 <__multadd>
 800f150:	45a1      	cmp	r9, r4
 800f152:	4601      	mov	r1, r0
 800f154:	d1f5      	bne.n	800f142 <__s2b+0x40>
 800f156:	1974      	adds	r4, r6, r5
 800f158:	3c08      	subs	r4, #8
 800f15a:	e001      	b.n	800f160 <__s2b+0x5e>
 800f15c:	340a      	adds	r4, #10
 800f15e:	2509      	movs	r5, #9
 800f160:	4626      	mov	r6, r4
 800f162:	1b2b      	subs	r3, r5, r4
 800f164:	4433      	add	r3, r6
 800f166:	4543      	cmp	r3, r8
 800f168:	da08      	bge.n	800f17c <__s2b+0x7a>
 800f16a:	f816 3b01 	ldrb.w	r3, [r6], #1
 800f16e:	4638      	mov	r0, r7
 800f170:	220a      	movs	r2, #10
 800f172:	3b30      	subs	r3, #48	; 0x30
 800f174:	f7ff ff87 	bl	800f086 <__multadd>
 800f178:	4601      	mov	r1, r0
 800f17a:	e7f2      	b.n	800f162 <__s2b+0x60>
 800f17c:	4608      	mov	r0, r1
 800f17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f182 <__hi0bits>:
 800f182:	0c03      	lsrs	r3, r0, #16
 800f184:	041b      	lsls	r3, r3, #16
 800f186:	b913      	cbnz	r3, 800f18e <__hi0bits+0xc>
 800f188:	0400      	lsls	r0, r0, #16
 800f18a:	2310      	movs	r3, #16
 800f18c:	e000      	b.n	800f190 <__hi0bits+0xe>
 800f18e:	2300      	movs	r3, #0
 800f190:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f194:	bf04      	itt	eq
 800f196:	0200      	lsleq	r0, r0, #8
 800f198:	3308      	addeq	r3, #8
 800f19a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f19e:	bf04      	itt	eq
 800f1a0:	0100      	lsleq	r0, r0, #4
 800f1a2:	3304      	addeq	r3, #4
 800f1a4:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f1a8:	bf04      	itt	eq
 800f1aa:	0080      	lsleq	r0, r0, #2
 800f1ac:	3302      	addeq	r3, #2
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	db03      	blt.n	800f1ba <__hi0bits+0x38>
 800f1b2:	0042      	lsls	r2, r0, #1
 800f1b4:	d503      	bpl.n	800f1be <__hi0bits+0x3c>
 800f1b6:	1c58      	adds	r0, r3, #1
 800f1b8:	4770      	bx	lr
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	4770      	bx	lr
 800f1be:	2020      	movs	r0, #32
 800f1c0:	4770      	bx	lr

0800f1c2 <__lo0bits>:
 800f1c2:	6803      	ldr	r3, [r0, #0]
 800f1c4:	f013 0207 	ands.w	r2, r3, #7
 800f1c8:	d00b      	beq.n	800f1e2 <__lo0bits+0x20>
 800f1ca:	07d9      	lsls	r1, r3, #31
 800f1cc:	d422      	bmi.n	800f214 <__lo0bits+0x52>
 800f1ce:	079a      	lsls	r2, r3, #30
 800f1d0:	bf4b      	itete	mi
 800f1d2:	085b      	lsrmi	r3, r3, #1
 800f1d4:	089b      	lsrpl	r3, r3, #2
 800f1d6:	6003      	strmi	r3, [r0, #0]
 800f1d8:	6003      	strpl	r3, [r0, #0]
 800f1da:	bf4c      	ite	mi
 800f1dc:	2001      	movmi	r0, #1
 800f1de:	2002      	movpl	r0, #2
 800f1e0:	4770      	bx	lr
 800f1e2:	b299      	uxth	r1, r3
 800f1e4:	b909      	cbnz	r1, 800f1ea <__lo0bits+0x28>
 800f1e6:	0c1b      	lsrs	r3, r3, #16
 800f1e8:	2210      	movs	r2, #16
 800f1ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f1ee:	bf04      	itt	eq
 800f1f0:	0a1b      	lsreq	r3, r3, #8
 800f1f2:	3208      	addeq	r2, #8
 800f1f4:	0719      	lsls	r1, r3, #28
 800f1f6:	bf04      	itt	eq
 800f1f8:	091b      	lsreq	r3, r3, #4
 800f1fa:	3204      	addeq	r2, #4
 800f1fc:	0799      	lsls	r1, r3, #30
 800f1fe:	bf04      	itt	eq
 800f200:	089b      	lsreq	r3, r3, #2
 800f202:	3202      	addeq	r2, #2
 800f204:	07d9      	lsls	r1, r3, #31
 800f206:	d402      	bmi.n	800f20e <__lo0bits+0x4c>
 800f208:	085b      	lsrs	r3, r3, #1
 800f20a:	d005      	beq.n	800f218 <__lo0bits+0x56>
 800f20c:	3201      	adds	r2, #1
 800f20e:	6003      	str	r3, [r0, #0]
 800f210:	4610      	mov	r0, r2
 800f212:	4770      	bx	lr
 800f214:	2000      	movs	r0, #0
 800f216:	4770      	bx	lr
 800f218:	2020      	movs	r0, #32
 800f21a:	4770      	bx	lr

0800f21c <__i2b>:
 800f21c:	b510      	push	{r4, lr}
 800f21e:	460c      	mov	r4, r1
 800f220:	2101      	movs	r1, #1
 800f222:	f7ff fee4 	bl	800efee <_Balloc>
 800f226:	2201      	movs	r2, #1
 800f228:	6144      	str	r4, [r0, #20]
 800f22a:	6102      	str	r2, [r0, #16]
 800f22c:	bd10      	pop	{r4, pc}

0800f22e <__multiply>:
 800f22e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f232:	4614      	mov	r4, r2
 800f234:	690a      	ldr	r2, [r1, #16]
 800f236:	6923      	ldr	r3, [r4, #16]
 800f238:	429a      	cmp	r2, r3
 800f23a:	bfb8      	it	lt
 800f23c:	460b      	movlt	r3, r1
 800f23e:	4688      	mov	r8, r1
 800f240:	bfbc      	itt	lt
 800f242:	46a0      	movlt	r8, r4
 800f244:	461c      	movlt	r4, r3
 800f246:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f24a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f24e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f252:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f256:	eb07 0609 	add.w	r6, r7, r9
 800f25a:	429e      	cmp	r6, r3
 800f25c:	bfc8      	it	gt
 800f25e:	3101      	addgt	r1, #1
 800f260:	f7ff fec5 	bl	800efee <_Balloc>
 800f264:	f100 0514 	add.w	r5, r0, #20
 800f268:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800f26c:	462b      	mov	r3, r5
 800f26e:	4563      	cmp	r3, ip
 800f270:	d203      	bcs.n	800f27a <__multiply+0x4c>
 800f272:	2200      	movs	r2, #0
 800f274:	f843 2b04 	str.w	r2, [r3], #4
 800f278:	e7f9      	b.n	800f26e <__multiply+0x40>
 800f27a:	f104 0214 	add.w	r2, r4, #20
 800f27e:	f108 0114 	add.w	r1, r8, #20
 800f282:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f286:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f28a:	9300      	str	r3, [sp, #0]
 800f28c:	9b00      	ldr	r3, [sp, #0]
 800f28e:	9201      	str	r2, [sp, #4]
 800f290:	429a      	cmp	r2, r3
 800f292:	d257      	bcs.n	800f344 <__multiply+0x116>
 800f294:	f8b2 b000 	ldrh.w	fp, [r2]
 800f298:	f1bb 0f00 	cmp.w	fp, #0
 800f29c:	d023      	beq.n	800f2e6 <__multiply+0xb8>
 800f29e:	4689      	mov	r9, r1
 800f2a0:	46ae      	mov	lr, r5
 800f2a2:	f04f 0800 	mov.w	r8, #0
 800f2a6:	f859 4b04 	ldr.w	r4, [r9], #4
 800f2aa:	f8be a000 	ldrh.w	sl, [lr]
 800f2ae:	b2a3      	uxth	r3, r4
 800f2b0:	fb0b a303 	mla	r3, fp, r3, sl
 800f2b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f2b8:	f8de 4000 	ldr.w	r4, [lr]
 800f2bc:	4443      	add	r3, r8
 800f2be:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f2c2:	fb0b 840a 	mla	r4, fp, sl, r8
 800f2c6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f2ca:	46f2      	mov	sl, lr
 800f2cc:	b29b      	uxth	r3, r3
 800f2ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f2d2:	454f      	cmp	r7, r9
 800f2d4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f2d8:	f84a 3b04 	str.w	r3, [sl], #4
 800f2dc:	d901      	bls.n	800f2e2 <__multiply+0xb4>
 800f2de:	46d6      	mov	lr, sl
 800f2e0:	e7e1      	b.n	800f2a6 <__multiply+0x78>
 800f2e2:	f8ce 8004 	str.w	r8, [lr, #4]
 800f2e6:	9b01      	ldr	r3, [sp, #4]
 800f2e8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f2ec:	3204      	adds	r2, #4
 800f2ee:	f1ba 0f00 	cmp.w	sl, #0
 800f2f2:	d021      	beq.n	800f338 <__multiply+0x10a>
 800f2f4:	682b      	ldr	r3, [r5, #0]
 800f2f6:	462c      	mov	r4, r5
 800f2f8:	4689      	mov	r9, r1
 800f2fa:	f04f 0800 	mov.w	r8, #0
 800f2fe:	f8b9 e000 	ldrh.w	lr, [r9]
 800f302:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800f306:	fb0a be0e 	mla	lr, sl, lr, fp
 800f30a:	44f0      	add	r8, lr
 800f30c:	46a3      	mov	fp, r4
 800f30e:	b29b      	uxth	r3, r3
 800f310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800f314:	f84b 3b04 	str.w	r3, [fp], #4
 800f318:	f859 3b04 	ldr.w	r3, [r9], #4
 800f31c:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 800f320:	0c1b      	lsrs	r3, r3, #16
 800f322:	fb0a e303 	mla	r3, sl, r3, lr
 800f326:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 800f32a:	45b9      	cmp	r9, r7
 800f32c:	ea4f 4813 	mov.w	r8, r3, lsr #16
 800f330:	d201      	bcs.n	800f336 <__multiply+0x108>
 800f332:	465c      	mov	r4, fp
 800f334:	e7e3      	b.n	800f2fe <__multiply+0xd0>
 800f336:	6063      	str	r3, [r4, #4]
 800f338:	3504      	adds	r5, #4
 800f33a:	e7a7      	b.n	800f28c <__multiply+0x5e>
 800f33c:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 800f340:	b913      	cbnz	r3, 800f348 <__multiply+0x11a>
 800f342:	3e01      	subs	r6, #1
 800f344:	2e00      	cmp	r6, #0
 800f346:	dcf9      	bgt.n	800f33c <__multiply+0x10e>
 800f348:	6106      	str	r6, [r0, #16]
 800f34a:	b003      	add	sp, #12
 800f34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f350 <__pow5mult>:
 800f350:	f012 0303 	ands.w	r3, r2, #3
 800f354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f358:	4606      	mov	r6, r0
 800f35a:	460f      	mov	r7, r1
 800f35c:	4615      	mov	r5, r2
 800f35e:	d007      	beq.n	800f370 <__pow5mult+0x20>
 800f360:	3b01      	subs	r3, #1
 800f362:	4a21      	ldr	r2, [pc, #132]	; (800f3e8 <__pow5mult+0x98>)
 800f364:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f368:	2300      	movs	r3, #0
 800f36a:	f7ff fe8c 	bl	800f086 <__multadd>
 800f36e:	4607      	mov	r7, r0
 800f370:	10ad      	asrs	r5, r5, #2
 800f372:	d035      	beq.n	800f3e0 <__pow5mult+0x90>
 800f374:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f376:	b93c      	cbnz	r4, 800f388 <__pow5mult+0x38>
 800f378:	2010      	movs	r0, #16
 800f37a:	f7fc fb0b 	bl	800b994 <malloc>
 800f37e:	6270      	str	r0, [r6, #36]	; 0x24
 800f380:	6044      	str	r4, [r0, #4]
 800f382:	6084      	str	r4, [r0, #8]
 800f384:	6004      	str	r4, [r0, #0]
 800f386:	60c4      	str	r4, [r0, #12]
 800f388:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f38c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f390:	b97c      	cbnz	r4, 800f3b2 <__pow5mult+0x62>
 800f392:	4630      	mov	r0, r6
 800f394:	f240 2171 	movw	r1, #625	; 0x271
 800f398:	f7ff ff40 	bl	800f21c <__i2b>
 800f39c:	2300      	movs	r3, #0
 800f39e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	6003      	str	r3, [r0, #0]
 800f3a6:	e004      	b.n	800f3b2 <__pow5mult+0x62>
 800f3a8:	106d      	asrs	r5, r5, #1
 800f3aa:	d019      	beq.n	800f3e0 <__pow5mult+0x90>
 800f3ac:	6820      	ldr	r0, [r4, #0]
 800f3ae:	b170      	cbz	r0, 800f3ce <__pow5mult+0x7e>
 800f3b0:	4604      	mov	r4, r0
 800f3b2:	07eb      	lsls	r3, r5, #31
 800f3b4:	d5f8      	bpl.n	800f3a8 <__pow5mult+0x58>
 800f3b6:	4639      	mov	r1, r7
 800f3b8:	4622      	mov	r2, r4
 800f3ba:	4630      	mov	r0, r6
 800f3bc:	f7ff ff37 	bl	800f22e <__multiply>
 800f3c0:	4639      	mov	r1, r7
 800f3c2:	4680      	mov	r8, r0
 800f3c4:	4630      	mov	r0, r6
 800f3c6:	f7ff fe47 	bl	800f058 <_Bfree>
 800f3ca:	4647      	mov	r7, r8
 800f3cc:	e7ec      	b.n	800f3a8 <__pow5mult+0x58>
 800f3ce:	4630      	mov	r0, r6
 800f3d0:	4621      	mov	r1, r4
 800f3d2:	4622      	mov	r2, r4
 800f3d4:	f7ff ff2b 	bl	800f22e <__multiply>
 800f3d8:	2300      	movs	r3, #0
 800f3da:	6020      	str	r0, [r4, #0]
 800f3dc:	6003      	str	r3, [r0, #0]
 800f3de:	e7e7      	b.n	800f3b0 <__pow5mult+0x60>
 800f3e0:	4638      	mov	r0, r7
 800f3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3e6:	bf00      	nop
 800f3e8:	0801c978 	.word	0x0801c978

0800f3ec <__lshift>:
 800f3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3f0:	460c      	mov	r4, r1
 800f3f2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f3f6:	6923      	ldr	r3, [r4, #16]
 800f3f8:	6849      	ldr	r1, [r1, #4]
 800f3fa:	eb0a 0903 	add.w	r9, sl, r3
 800f3fe:	68a3      	ldr	r3, [r4, #8]
 800f400:	4607      	mov	r7, r0
 800f402:	4616      	mov	r6, r2
 800f404:	f109 0501 	add.w	r5, r9, #1
 800f408:	429d      	cmp	r5, r3
 800f40a:	dd02      	ble.n	800f412 <__lshift+0x26>
 800f40c:	3101      	adds	r1, #1
 800f40e:	005b      	lsls	r3, r3, #1
 800f410:	e7fa      	b.n	800f408 <__lshift+0x1c>
 800f412:	4638      	mov	r0, r7
 800f414:	f7ff fdeb 	bl	800efee <_Balloc>
 800f418:	2300      	movs	r3, #0
 800f41a:	4680      	mov	r8, r0
 800f41c:	f100 0114 	add.w	r1, r0, #20
 800f420:	4553      	cmp	r3, sl
 800f422:	da04      	bge.n	800f42e <__lshift+0x42>
 800f424:	2200      	movs	r2, #0
 800f426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f42a:	3301      	adds	r3, #1
 800f42c:	e7f8      	b.n	800f420 <__lshift+0x34>
 800f42e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800f432:	6920      	ldr	r0, [r4, #16]
 800f434:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f438:	f016 021f 	ands.w	r2, r6, #31
 800f43c:	f104 0114 	add.w	r1, r4, #20
 800f440:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800f444:	d014      	beq.n	800f470 <__lshift+0x84>
 800f446:	f1c2 0c20 	rsb	ip, r2, #32
 800f44a:	2000      	movs	r0, #0
 800f44c:	680e      	ldr	r6, [r1, #0]
 800f44e:	4096      	lsls	r6, r2
 800f450:	4330      	orrs	r0, r6
 800f452:	469a      	mov	sl, r3
 800f454:	f843 0b04 	str.w	r0, [r3], #4
 800f458:	f851 0b04 	ldr.w	r0, [r1], #4
 800f45c:	4571      	cmp	r1, lr
 800f45e:	fa20 f00c 	lsr.w	r0, r0, ip
 800f462:	d3f3      	bcc.n	800f44c <__lshift+0x60>
 800f464:	f8ca 0004 	str.w	r0, [sl, #4]
 800f468:	b148      	cbz	r0, 800f47e <__lshift+0x92>
 800f46a:	f109 0502 	add.w	r5, r9, #2
 800f46e:	e006      	b.n	800f47e <__lshift+0x92>
 800f470:	3b04      	subs	r3, #4
 800f472:	f851 2b04 	ldr.w	r2, [r1], #4
 800f476:	f843 2f04 	str.w	r2, [r3, #4]!
 800f47a:	4571      	cmp	r1, lr
 800f47c:	d3f9      	bcc.n	800f472 <__lshift+0x86>
 800f47e:	3d01      	subs	r5, #1
 800f480:	4638      	mov	r0, r7
 800f482:	f8c8 5010 	str.w	r5, [r8, #16]
 800f486:	4621      	mov	r1, r4
 800f488:	f7ff fde6 	bl	800f058 <_Bfree>
 800f48c:	4640      	mov	r0, r8
 800f48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f492 <__mcmp>:
 800f492:	6903      	ldr	r3, [r0, #16]
 800f494:	690a      	ldr	r2, [r1, #16]
 800f496:	1a9b      	subs	r3, r3, r2
 800f498:	b510      	push	{r4, lr}
 800f49a:	d111      	bne.n	800f4c0 <__mcmp+0x2e>
 800f49c:	0092      	lsls	r2, r2, #2
 800f49e:	3014      	adds	r0, #20
 800f4a0:	3114      	adds	r1, #20
 800f4a2:	1883      	adds	r3, r0, r2
 800f4a4:	440a      	add	r2, r1
 800f4a6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800f4aa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f4ae:	428c      	cmp	r4, r1
 800f4b0:	d002      	beq.n	800f4b8 <__mcmp+0x26>
 800f4b2:	d307      	bcc.n	800f4c4 <__mcmp+0x32>
 800f4b4:	2001      	movs	r0, #1
 800f4b6:	bd10      	pop	{r4, pc}
 800f4b8:	4283      	cmp	r3, r0
 800f4ba:	d8f4      	bhi.n	800f4a6 <__mcmp+0x14>
 800f4bc:	2000      	movs	r0, #0
 800f4be:	bd10      	pop	{r4, pc}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	bd10      	pop	{r4, pc}
 800f4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4c8:	bd10      	pop	{r4, pc}

0800f4ca <__mdiff>:
 800f4ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4ce:	4607      	mov	r7, r0
 800f4d0:	460c      	mov	r4, r1
 800f4d2:	4608      	mov	r0, r1
 800f4d4:	4611      	mov	r1, r2
 800f4d6:	4615      	mov	r5, r2
 800f4d8:	f7ff ffdb 	bl	800f492 <__mcmp>
 800f4dc:	1e06      	subs	r6, r0, #0
 800f4de:	d108      	bne.n	800f4f2 <__mdiff+0x28>
 800f4e0:	4638      	mov	r0, r7
 800f4e2:	4631      	mov	r1, r6
 800f4e4:	f7ff fd83 	bl	800efee <_Balloc>
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	6103      	str	r3, [r0, #16]
 800f4ec:	6146      	str	r6, [r0, #20]
 800f4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4f2:	bfbc      	itt	lt
 800f4f4:	4623      	movlt	r3, r4
 800f4f6:	462c      	movlt	r4, r5
 800f4f8:	4638      	mov	r0, r7
 800f4fa:	6861      	ldr	r1, [r4, #4]
 800f4fc:	bfba      	itte	lt
 800f4fe:	461d      	movlt	r5, r3
 800f500:	2601      	movlt	r6, #1
 800f502:	2600      	movge	r6, #0
 800f504:	f7ff fd73 	bl	800efee <_Balloc>
 800f508:	692b      	ldr	r3, [r5, #16]
 800f50a:	60c6      	str	r6, [r0, #12]
 800f50c:	6926      	ldr	r6, [r4, #16]
 800f50e:	f105 0914 	add.w	r9, r5, #20
 800f512:	3414      	adds	r4, #20
 800f514:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 800f518:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f51c:	f100 0514 	add.w	r5, r0, #20
 800f520:	f04f 0c00 	mov.w	ip, #0
 800f524:	f854 3b04 	ldr.w	r3, [r4], #4
 800f528:	f859 2b04 	ldr.w	r2, [r9], #4
 800f52c:	fa1c f183 	uxtah	r1, ip, r3
 800f530:	fa1f fe82 	uxth.w	lr, r2
 800f534:	0c12      	lsrs	r2, r2, #16
 800f536:	ebce 0101 	rsb	r1, lr, r1
 800f53a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 800f53e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f542:	b289      	uxth	r1, r1
 800f544:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800f548:	45c8      	cmp	r8, r9
 800f54a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f54e:	46a6      	mov	lr, r4
 800f550:	f845 3b04 	str.w	r3, [r5], #4
 800f554:	d8e6      	bhi.n	800f524 <__mdiff+0x5a>
 800f556:	45be      	cmp	lr, r7
 800f558:	d20e      	bcs.n	800f578 <__mdiff+0xae>
 800f55a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f55e:	fa1c f482 	uxtah	r4, ip, r2
 800f562:	0c12      	lsrs	r2, r2, #16
 800f564:	eb02 4224 	add.w	r2, r2, r4, asr #16
 800f568:	b2a4      	uxth	r4, r4
 800f56a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f56e:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800f572:	f845 2b04 	str.w	r2, [r5], #4
 800f576:	e7ee      	b.n	800f556 <__mdiff+0x8c>
 800f578:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f57c:	b90b      	cbnz	r3, 800f582 <__mdiff+0xb8>
 800f57e:	3e01      	subs	r6, #1
 800f580:	e7fa      	b.n	800f578 <__mdiff+0xae>
 800f582:	6106      	str	r6, [r0, #16]
 800f584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f588 <__ulp>:
 800f588:	4b10      	ldr	r3, [pc, #64]	; (800f5cc <__ulp+0x44>)
 800f58a:	400b      	ands	r3, r1
 800f58c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f590:	2b00      	cmp	r3, #0
 800f592:	dd02      	ble.n	800f59a <__ulp+0x12>
 800f594:	2000      	movs	r0, #0
 800f596:	4619      	mov	r1, r3
 800f598:	4770      	bx	lr
 800f59a:	425b      	negs	r3, r3
 800f59c:	151b      	asrs	r3, r3, #20
 800f59e:	2b13      	cmp	r3, #19
 800f5a0:	f04f 0000 	mov.w	r0, #0
 800f5a4:	f04f 0100 	mov.w	r1, #0
 800f5a8:	dc04      	bgt.n	800f5b4 <__ulp+0x2c>
 800f5aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f5ae:	fa42 f103 	asr.w	r1, r2, r3
 800f5b2:	4770      	bx	lr
 800f5b4:	2b32      	cmp	r3, #50	; 0x32
 800f5b6:	f04f 0201 	mov.w	r2, #1
 800f5ba:	bfda      	itte	le
 800f5bc:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
 800f5c0:	fa02 f303 	lslle.w	r3, r2, r3
 800f5c4:	4613      	movgt	r3, r2
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	4770      	bx	lr
 800f5ca:	bf00      	nop
 800f5cc:	7ff00000 	.word	0x7ff00000

0800f5d0 <__b2d>:
 800f5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5d4:	6905      	ldr	r5, [r0, #16]
 800f5d6:	f100 0714 	add.w	r7, r0, #20
 800f5da:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f5de:	4688      	mov	r8, r1
 800f5e0:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	f7ff fdcc 	bl	800f182 <__hi0bits>
 800f5ea:	f1c0 0320 	rsb	r3, r0, #32
 800f5ee:	280a      	cmp	r0, #10
 800f5f0:	f1a5 0604 	sub.w	r6, r5, #4
 800f5f4:	f8c8 3000 	str.w	r3, [r8]
 800f5f8:	dc11      	bgt.n	800f61e <__b2d+0x4e>
 800f5fa:	f1c0 0e0b 	rsb	lr, r0, #11
 800f5fe:	fa24 f10e 	lsr.w	r1, r4, lr
 800f602:	42be      	cmp	r6, r7
 800f604:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 800f608:	bf8c      	ite	hi
 800f60a:	f855 1c08 	ldrhi.w	r1, [r5, #-8]
 800f60e:	2100      	movls	r1, #0
 800f610:	3015      	adds	r0, #21
 800f612:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f616:	fa21 f10e 	lsr.w	r1, r1, lr
 800f61a:	4084      	lsls	r4, r0
 800f61c:	e01b      	b.n	800f656 <__b2d+0x86>
 800f61e:	42be      	cmp	r6, r7
 800f620:	bf86      	itte	hi
 800f622:	f1a5 0608 	subhi.w	r6, r5, #8
 800f626:	f855 1c08 	ldrhi.w	r1, [r5, #-8]
 800f62a:	2100      	movls	r1, #0
 800f62c:	f1b0 050b 	subs.w	r5, r0, #11
 800f630:	d014      	beq.n	800f65c <__b2d+0x8c>
 800f632:	40ac      	lsls	r4, r5
 800f634:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 800f638:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800f63c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800f640:	fa21 fe00 	lsr.w	lr, r1, r0
 800f644:	42be      	cmp	r6, r7
 800f646:	ea44 030e 	orr.w	r3, r4, lr
 800f64a:	bf8c      	ite	hi
 800f64c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f650:	2400      	movls	r4, #0
 800f652:	40c4      	lsrs	r4, r0
 800f654:	40a9      	lsls	r1, r5
 800f656:	ea44 0201 	orr.w	r2, r4, r1
 800f65a:	e004      	b.n	800f666 <__b2d+0x96>
 800f65c:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800f660:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f664:	460a      	mov	r2, r1
 800f666:	4610      	mov	r0, r2
 800f668:	4619      	mov	r1, r3
 800f66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f66e <__d2b>:
 800f66e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f672:	2101      	movs	r1, #1
 800f674:	461d      	mov	r5, r3
 800f676:	9f08      	ldr	r7, [sp, #32]
 800f678:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f67a:	4614      	mov	r4, r2
 800f67c:	f7ff fcb7 	bl	800efee <_Balloc>
 800f680:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800f684:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800f688:	4680      	mov	r8, r0
 800f68a:	b10d      	cbz	r5, 800f690 <__d2b+0x22>
 800f68c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f690:	9301      	str	r3, [sp, #4]
 800f692:	b1ec      	cbz	r4, 800f6d0 <__d2b+0x62>
 800f694:	a802      	add	r0, sp, #8
 800f696:	f840 4d08 	str.w	r4, [r0, #-8]!
 800f69a:	f7ff fd92 	bl	800f1c2 <__lo0bits>
 800f69e:	9b00      	ldr	r3, [sp, #0]
 800f6a0:	b150      	cbz	r0, 800f6b8 <__d2b+0x4a>
 800f6a2:	9a01      	ldr	r2, [sp, #4]
 800f6a4:	f1c0 0120 	rsb	r1, r0, #32
 800f6a8:	fa02 f101 	lsl.w	r1, r2, r1
 800f6ac:	430b      	orrs	r3, r1
 800f6ae:	40c2      	lsrs	r2, r0
 800f6b0:	f8c8 3014 	str.w	r3, [r8, #20]
 800f6b4:	9201      	str	r2, [sp, #4]
 800f6b6:	e001      	b.n	800f6bc <__d2b+0x4e>
 800f6b8:	f8c8 3014 	str.w	r3, [r8, #20]
 800f6bc:	9b01      	ldr	r3, [sp, #4]
 800f6be:	f8c8 3018 	str.w	r3, [r8, #24]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	bf14      	ite	ne
 800f6c6:	2402      	movne	r4, #2
 800f6c8:	2401      	moveq	r4, #1
 800f6ca:	f8c8 4010 	str.w	r4, [r8, #16]
 800f6ce:	e009      	b.n	800f6e4 <__d2b+0x76>
 800f6d0:	a801      	add	r0, sp, #4
 800f6d2:	f7ff fd76 	bl	800f1c2 <__lo0bits>
 800f6d6:	2401      	movs	r4, #1
 800f6d8:	9b01      	ldr	r3, [sp, #4]
 800f6da:	f8c8 3014 	str.w	r3, [r8, #20]
 800f6de:	f8c8 4010 	str.w	r4, [r8, #16]
 800f6e2:	3020      	adds	r0, #32
 800f6e4:	b135      	cbz	r5, 800f6f4 <__d2b+0x86>
 800f6e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f6ea:	4405      	add	r5, r0
 800f6ec:	603d      	str	r5, [r7, #0]
 800f6ee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f6f2:	e009      	b.n	800f708 <__d2b+0x9a>
 800f6f4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800f6f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f6fc:	6038      	str	r0, [r7, #0]
 800f6fe:	6918      	ldr	r0, [r3, #16]
 800f700:	f7ff fd3f 	bl	800f182 <__hi0bits>
 800f704:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800f708:	6030      	str	r0, [r6, #0]
 800f70a:	4640      	mov	r0, r8
 800f70c:	b002      	add	sp, #8
 800f70e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f712 <__ratio>:
 800f712:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f716:	4688      	mov	r8, r1
 800f718:	4669      	mov	r1, sp
 800f71a:	4681      	mov	r9, r0
 800f71c:	f7ff ff58 	bl	800f5d0 <__b2d>
 800f720:	460f      	mov	r7, r1
 800f722:	4606      	mov	r6, r0
 800f724:	a901      	add	r1, sp, #4
 800f726:	4640      	mov	r0, r8
 800f728:	f7ff ff52 	bl	800f5d0 <__b2d>
 800f72c:	9a01      	ldr	r2, [sp, #4]
 800f72e:	9b00      	ldr	r3, [sp, #0]
 800f730:	460d      	mov	r5, r1
 800f732:	1a9b      	subs	r3, r3, r2
 800f734:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f738:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f73c:	1a52      	subs	r2, r2, r1
 800f73e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800f742:	2b00      	cmp	r3, #0
 800f744:	bfc8      	it	gt
 800f746:	eb07 5703 	addgt.w	r7, r7, r3, lsl #20
 800f74a:	4604      	mov	r4, r0
 800f74c:	bfd8      	it	le
 800f74e:	eba5 5503 	suble.w	r5, r5, r3, lsl #20
 800f752:	4630      	mov	r0, r6
 800f754:	4639      	mov	r1, r7
 800f756:	4622      	mov	r2, r4
 800f758:	462b      	mov	r3, r5
 800f75a:	f000 fcd1 	bl	8010100 <__aeabi_ddiv>
 800f75e:	b003      	add	sp, #12
 800f760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f764 <__copybits>:
 800f764:	3901      	subs	r1, #1
 800f766:	b510      	push	{r4, lr}
 800f768:	1149      	asrs	r1, r1, #5
 800f76a:	6914      	ldr	r4, [r2, #16]
 800f76c:	3101      	adds	r1, #1
 800f76e:	f102 0314 	add.w	r3, r2, #20
 800f772:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f776:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f77a:	42a3      	cmp	r3, r4
 800f77c:	4602      	mov	r2, r0
 800f77e:	d204      	bcs.n	800f78a <__copybits+0x26>
 800f780:	f853 2b04 	ldr.w	r2, [r3], #4
 800f784:	f840 2b04 	str.w	r2, [r0], #4
 800f788:	e7f7      	b.n	800f77a <__copybits+0x16>
 800f78a:	428a      	cmp	r2, r1
 800f78c:	d203      	bcs.n	800f796 <__copybits+0x32>
 800f78e:	2300      	movs	r3, #0
 800f790:	f842 3b04 	str.w	r3, [r2], #4
 800f794:	e7f9      	b.n	800f78a <__copybits+0x26>
 800f796:	bd10      	pop	{r4, pc}

0800f798 <__any_on>:
 800f798:	f100 0214 	add.w	r2, r0, #20
 800f79c:	6900      	ldr	r0, [r0, #16]
 800f79e:	114b      	asrs	r3, r1, #5
 800f7a0:	4283      	cmp	r3, r0
 800f7a2:	b510      	push	{r4, lr}
 800f7a4:	dc0c      	bgt.n	800f7c0 <__any_on+0x28>
 800f7a6:	da0c      	bge.n	800f7c2 <__any_on+0x2a>
 800f7a8:	f011 011f 	ands.w	r1, r1, #31
 800f7ac:	d009      	beq.n	800f7c2 <__any_on+0x2a>
 800f7ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f7b2:	fa24 f001 	lsr.w	r0, r4, r1
 800f7b6:	fa00 f101 	lsl.w	r1, r0, r1
 800f7ba:	42a1      	cmp	r1, r4
 800f7bc:	d10c      	bne.n	800f7d8 <__any_on+0x40>
 800f7be:	e000      	b.n	800f7c2 <__any_on+0x2a>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f7c6:	4293      	cmp	r3, r2
 800f7c8:	d904      	bls.n	800f7d4 <__any_on+0x3c>
 800f7ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f7ce:	2900      	cmp	r1, #0
 800f7d0:	d0f9      	beq.n	800f7c6 <__any_on+0x2e>
 800f7d2:	e001      	b.n	800f7d8 <__any_on+0x40>
 800f7d4:	2000      	movs	r0, #0
 800f7d6:	bd10      	pop	{r4, pc}
 800f7d8:	2001      	movs	r0, #1
 800f7da:	bd10      	pop	{r4, pc}

0800f7dc <_realloc_r>:
 800f7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7de:	4607      	mov	r7, r0
 800f7e0:	4615      	mov	r5, r2
 800f7e2:	460e      	mov	r6, r1
 800f7e4:	b921      	cbnz	r1, 800f7f0 <_realloc_r+0x14>
 800f7e6:	4611      	mov	r1, r2
 800f7e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f7ec:	f7fc b94e 	b.w	800ba8c <_malloc_r>
 800f7f0:	b91a      	cbnz	r2, 800f7fa <_realloc_r+0x1e>
 800f7f2:	f7fc f907 	bl	800ba04 <_free_r>
 800f7f6:	4628      	mov	r0, r5
 800f7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7fa:	f000 f995 	bl	800fb28 <_malloc_usable_size_r>
 800f7fe:	42a8      	cmp	r0, r5
 800f800:	d20e      	bcs.n	800f820 <_realloc_r+0x44>
 800f802:	4638      	mov	r0, r7
 800f804:	4629      	mov	r1, r5
 800f806:	f7fc f941 	bl	800ba8c <_malloc_r>
 800f80a:	4604      	mov	r4, r0
 800f80c:	b150      	cbz	r0, 800f824 <_realloc_r+0x48>
 800f80e:	4631      	mov	r1, r6
 800f810:	462a      	mov	r2, r5
 800f812:	f7fc f8d6 	bl	800b9c2 <memcpy>
 800f816:	4638      	mov	r0, r7
 800f818:	4631      	mov	r1, r6
 800f81a:	f7fc f8f3 	bl	800ba04 <_free_r>
 800f81e:	e001      	b.n	800f824 <_realloc_r+0x48>
 800f820:	4630      	mov	r0, r6
 800f822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f824:	4620      	mov	r0, r4
 800f826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f828 <__ssputs_r>:
 800f828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f82c:	688e      	ldr	r6, [r1, #8]
 800f82e:	42b3      	cmp	r3, r6
 800f830:	4682      	mov	sl, r0
 800f832:	460c      	mov	r4, r1
 800f834:	4690      	mov	r8, r2
 800f836:	4699      	mov	r9, r3
 800f838:	d340      	bcc.n	800f8bc <__ssputs_r+0x94>
 800f83a:	898a      	ldrh	r2, [r1, #12]
 800f83c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f840:	d03a      	beq.n	800f8b8 <__ssputs_r+0x90>
 800f842:	6825      	ldr	r5, [r4, #0]
 800f844:	6909      	ldr	r1, [r1, #16]
 800f846:	1a6f      	subs	r7, r5, r1
 800f848:	6965      	ldr	r5, [r4, #20]
 800f84a:	2302      	movs	r3, #2
 800f84c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f850:	fb95 f5f3 	sdiv	r5, r5, r3
 800f854:	1c7b      	adds	r3, r7, #1
 800f856:	444b      	add	r3, r9
 800f858:	429d      	cmp	r5, r3
 800f85a:	bf38      	it	cc
 800f85c:	461d      	movcc	r5, r3
 800f85e:	0553      	lsls	r3, r2, #21
 800f860:	d50f      	bpl.n	800f882 <__ssputs_r+0x5a>
 800f862:	4629      	mov	r1, r5
 800f864:	f7fc f912 	bl	800ba8c <_malloc_r>
 800f868:	4606      	mov	r6, r0
 800f86a:	b198      	cbz	r0, 800f894 <__ssputs_r+0x6c>
 800f86c:	6921      	ldr	r1, [r4, #16]
 800f86e:	463a      	mov	r2, r7
 800f870:	f7fc f8a7 	bl	800b9c2 <memcpy>
 800f874:	89a3      	ldrh	r3, [r4, #12]
 800f876:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f87a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f87e:	81a3      	strh	r3, [r4, #12]
 800f880:	e013      	b.n	800f8aa <__ssputs_r+0x82>
 800f882:	462a      	mov	r2, r5
 800f884:	f7ff ffaa 	bl	800f7dc <_realloc_r>
 800f888:	4606      	mov	r6, r0
 800f88a:	b970      	cbnz	r0, 800f8aa <__ssputs_r+0x82>
 800f88c:	4650      	mov	r0, sl
 800f88e:	6921      	ldr	r1, [r4, #16]
 800f890:	f7fc f8b8 	bl	800ba04 <_free_r>
 800f894:	230c      	movs	r3, #12
 800f896:	f8ca 3000 	str.w	r3, [sl]
 800f89a:	89a3      	ldrh	r3, [r4, #12]
 800f89c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8a0:	81a3      	strh	r3, [r4, #12]
 800f8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8aa:	6126      	str	r6, [r4, #16]
 800f8ac:	6165      	str	r5, [r4, #20]
 800f8ae:	443e      	add	r6, r7
 800f8b0:	1bed      	subs	r5, r5, r7
 800f8b2:	6026      	str	r6, [r4, #0]
 800f8b4:	60a5      	str	r5, [r4, #8]
 800f8b6:	464e      	mov	r6, r9
 800f8b8:	45b1      	cmp	r9, r6
 800f8ba:	d200      	bcs.n	800f8be <__ssputs_r+0x96>
 800f8bc:	464e      	mov	r6, r9
 800f8be:	4632      	mov	r2, r6
 800f8c0:	6820      	ldr	r0, [r4, #0]
 800f8c2:	4641      	mov	r1, r8
 800f8c4:	f7ff fb78 	bl	800efb8 <memmove>
 800f8c8:	68a3      	ldr	r3, [r4, #8]
 800f8ca:	1b9b      	subs	r3, r3, r6
 800f8cc:	60a3      	str	r3, [r4, #8]
 800f8ce:	6823      	ldr	r3, [r4, #0]
 800f8d0:	441e      	add	r6, r3
 800f8d2:	6026      	str	r6, [r4, #0]
 800f8d4:	2000      	movs	r0, #0
 800f8d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800f8dc <_svfiprintf_r>:
 800f8dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8e0:	b09d      	sub	sp, #116	; 0x74
 800f8e2:	4606      	mov	r6, r0
 800f8e4:	9303      	str	r3, [sp, #12]
 800f8e6:	898b      	ldrh	r3, [r1, #12]
 800f8e8:	061c      	lsls	r4, r3, #24
 800f8ea:	460d      	mov	r5, r1
 800f8ec:	4690      	mov	r8, r2
 800f8ee:	d50c      	bpl.n	800f90a <_svfiprintf_r+0x2e>
 800f8f0:	690b      	ldr	r3, [r1, #16]
 800f8f2:	b953      	cbnz	r3, 800f90a <_svfiprintf_r+0x2e>
 800f8f4:	2140      	movs	r1, #64	; 0x40
 800f8f6:	f7fc f8c9 	bl	800ba8c <_malloc_r>
 800f8fa:	6028      	str	r0, [r5, #0]
 800f8fc:	6128      	str	r0, [r5, #16]
 800f8fe:	b910      	cbnz	r0, 800f906 <_svfiprintf_r+0x2a>
 800f900:	230c      	movs	r3, #12
 800f902:	6033      	str	r3, [r6, #0]
 800f904:	e0cc      	b.n	800faa0 <_svfiprintf_r+0x1c4>
 800f906:	2340      	movs	r3, #64	; 0x40
 800f908:	616b      	str	r3, [r5, #20]
 800f90a:	2300      	movs	r3, #0
 800f90c:	9309      	str	r3, [sp, #36]	; 0x24
 800f90e:	2320      	movs	r3, #32
 800f910:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f914:	2330      	movs	r3, #48	; 0x30
 800f916:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f91a:	4643      	mov	r3, r8
 800f91c:	461c      	mov	r4, r3
 800f91e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f922:	b91a      	cbnz	r2, 800f92c <_svfiprintf_r+0x50>
 800f924:	ebb4 0908 	subs.w	r9, r4, r8
 800f928:	d00f      	beq.n	800f94a <_svfiprintf_r+0x6e>
 800f92a:	e002      	b.n	800f932 <_svfiprintf_r+0x56>
 800f92c:	2a25      	cmp	r2, #37	; 0x25
 800f92e:	d1f5      	bne.n	800f91c <_svfiprintf_r+0x40>
 800f930:	e7f8      	b.n	800f924 <_svfiprintf_r+0x48>
 800f932:	4630      	mov	r0, r6
 800f934:	4629      	mov	r1, r5
 800f936:	4642      	mov	r2, r8
 800f938:	464b      	mov	r3, r9
 800f93a:	f7ff ff75 	bl	800f828 <__ssputs_r>
 800f93e:	3001      	adds	r0, #1
 800f940:	f000 80a9 	beq.w	800fa96 <_svfiprintf_r+0x1ba>
 800f944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f946:	444b      	add	r3, r9
 800f948:	9309      	str	r3, [sp, #36]	; 0x24
 800f94a:	7823      	ldrb	r3, [r4, #0]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	f000 80a2 	beq.w	800fa96 <_svfiprintf_r+0x1ba>
 800f952:	2300      	movs	r3, #0
 800f954:	f04f 32ff 	mov.w	r2, #4294967295
 800f958:	9304      	str	r3, [sp, #16]
 800f95a:	9307      	str	r3, [sp, #28]
 800f95c:	9205      	str	r2, [sp, #20]
 800f95e:	9306      	str	r3, [sp, #24]
 800f960:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f964:	931a      	str	r3, [sp, #104]	; 0x68
 800f966:	f104 0801 	add.w	r8, r4, #1
 800f96a:	4644      	mov	r4, r8
 800f96c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800fab8 <_svfiprintf_r+0x1dc>
 800f970:	7821      	ldrb	r1, [r4, #0]
 800f972:	4648      	mov	r0, r9
 800f974:	2205      	movs	r2, #5
 800f976:	f7fc f815 	bl	800b9a4 <memchr>
 800f97a:	f108 0801 	add.w	r8, r8, #1
 800f97e:	9b04      	ldr	r3, [sp, #16]
 800f980:	b130      	cbz	r0, 800f990 <_svfiprintf_r+0xb4>
 800f982:	ebc9 0000 	rsb	r0, r9, r0
 800f986:	2201      	movs	r2, #1
 800f988:	4082      	lsls	r2, r0
 800f98a:	4313      	orrs	r3, r2
 800f98c:	9304      	str	r3, [sp, #16]
 800f98e:	e7ec      	b.n	800f96a <_svfiprintf_r+0x8e>
 800f990:	06d8      	lsls	r0, r3, #27
 800f992:	bf44      	itt	mi
 800f994:	2220      	movmi	r2, #32
 800f996:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f99a:	0719      	lsls	r1, r3, #28
 800f99c:	bf44      	itt	mi
 800f99e:	222b      	movmi	r2, #43	; 0x2b
 800f9a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f9a4:	7822      	ldrb	r2, [r4, #0]
 800f9a6:	2a2a      	cmp	r2, #42	; 0x2a
 800f9a8:	d002      	beq.n	800f9b0 <_svfiprintf_r+0xd4>
 800f9aa:	9907      	ldr	r1, [sp, #28]
 800f9ac:	4623      	mov	r3, r4
 800f9ae:	e00e      	b.n	800f9ce <_svfiprintf_r+0xf2>
 800f9b0:	9a03      	ldr	r2, [sp, #12]
 800f9b2:	1d11      	adds	r1, r2, #4
 800f9b4:	6812      	ldr	r2, [r2, #0]
 800f9b6:	9103      	str	r1, [sp, #12]
 800f9b8:	2a00      	cmp	r2, #0
 800f9ba:	bfbb      	ittet	lt
 800f9bc:	4252      	neglt	r2, r2
 800f9be:	f043 0302 	orrlt.w	r3, r3, #2
 800f9c2:	9207      	strge	r2, [sp, #28]
 800f9c4:	9207      	strlt	r2, [sp, #28]
 800f9c6:	bfb8      	it	lt
 800f9c8:	9304      	strlt	r3, [sp, #16]
 800f9ca:	3401      	adds	r4, #1
 800f9cc:	e00a      	b.n	800f9e4 <_svfiprintf_r+0x108>
 800f9ce:	461c      	mov	r4, r3
 800f9d0:	3301      	adds	r3, #1
 800f9d2:	7822      	ldrb	r2, [r4, #0]
 800f9d4:	3a30      	subs	r2, #48	; 0x30
 800f9d6:	2a09      	cmp	r2, #9
 800f9d8:	d803      	bhi.n	800f9e2 <_svfiprintf_r+0x106>
 800f9da:	200a      	movs	r0, #10
 800f9dc:	fb00 2101 	mla	r1, r0, r1, r2
 800f9e0:	e7f5      	b.n	800f9ce <_svfiprintf_r+0xf2>
 800f9e2:	9107      	str	r1, [sp, #28]
 800f9e4:	7823      	ldrb	r3, [r4, #0]
 800f9e6:	2b2e      	cmp	r3, #46	; 0x2e
 800f9e8:	d11a      	bne.n	800fa20 <_svfiprintf_r+0x144>
 800f9ea:	7863      	ldrb	r3, [r4, #1]
 800f9ec:	2b2a      	cmp	r3, #42	; 0x2a
 800f9ee:	d10a      	bne.n	800fa06 <_svfiprintf_r+0x12a>
 800f9f0:	9b03      	ldr	r3, [sp, #12]
 800f9f2:	1d1a      	adds	r2, r3, #4
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	9203      	str	r2, [sp, #12]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	bfb8      	it	lt
 800f9fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa00:	3402      	adds	r4, #2
 800fa02:	9305      	str	r3, [sp, #20]
 800fa04:	e00c      	b.n	800fa20 <_svfiprintf_r+0x144>
 800fa06:	1c61      	adds	r1, r4, #1
 800fa08:	2200      	movs	r2, #0
 800fa0a:	460c      	mov	r4, r1
 800fa0c:	3101      	adds	r1, #1
 800fa0e:	7823      	ldrb	r3, [r4, #0]
 800fa10:	3b30      	subs	r3, #48	; 0x30
 800fa12:	2b09      	cmp	r3, #9
 800fa14:	d803      	bhi.n	800fa1e <_svfiprintf_r+0x142>
 800fa16:	200a      	movs	r0, #10
 800fa18:	fb00 3202 	mla	r2, r0, r2, r3
 800fa1c:	e7f5      	b.n	800fa0a <_svfiprintf_r+0x12e>
 800fa1e:	9205      	str	r2, [sp, #20]
 800fa20:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800fabc <_svfiprintf_r+0x1e0>
 800fa24:	7821      	ldrb	r1, [r4, #0]
 800fa26:	4640      	mov	r0, r8
 800fa28:	2203      	movs	r2, #3
 800fa2a:	f7fb ffbb 	bl	800b9a4 <memchr>
 800fa2e:	b138      	cbz	r0, 800fa40 <_svfiprintf_r+0x164>
 800fa30:	9a04      	ldr	r2, [sp, #16]
 800fa32:	ebc8 0000 	rsb	r0, r8, r0
 800fa36:	2340      	movs	r3, #64	; 0x40
 800fa38:	4083      	lsls	r3, r0
 800fa3a:	4313      	orrs	r3, r2
 800fa3c:	9304      	str	r3, [sp, #16]
 800fa3e:	3401      	adds	r4, #1
 800fa40:	7821      	ldrb	r1, [r4, #0]
 800fa42:	481a      	ldr	r0, [pc, #104]	; (800faac <_svfiprintf_r+0x1d0>)
 800fa44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa48:	2206      	movs	r2, #6
 800fa4a:	f104 0801 	add.w	r8, r4, #1
 800fa4e:	f7fb ffa9 	bl	800b9a4 <memchr>
 800fa52:	b188      	cbz	r0, 800fa78 <_svfiprintf_r+0x19c>
 800fa54:	4b16      	ldr	r3, [pc, #88]	; (800fab0 <_svfiprintf_r+0x1d4>)
 800fa56:	b933      	cbnz	r3, 800fa66 <_svfiprintf_r+0x18a>
 800fa58:	9b03      	ldr	r3, [sp, #12]
 800fa5a:	3307      	adds	r3, #7
 800fa5c:	f023 0307 	bic.w	r3, r3, #7
 800fa60:	3308      	adds	r3, #8
 800fa62:	9303      	str	r3, [sp, #12]
 800fa64:	e013      	b.n	800fa8e <_svfiprintf_r+0x1b2>
 800fa66:	ab03      	add	r3, sp, #12
 800fa68:	9300      	str	r3, [sp, #0]
 800fa6a:	4630      	mov	r0, r6
 800fa6c:	a904      	add	r1, sp, #16
 800fa6e:	462a      	mov	r2, r5
 800fa70:	4b10      	ldr	r3, [pc, #64]	; (800fab4 <_svfiprintf_r+0x1d8>)
 800fa72:	f7fc fa2f 	bl	800bed4 <_printf_float>
 800fa76:	e007      	b.n	800fa88 <_svfiprintf_r+0x1ac>
 800fa78:	ab03      	add	r3, sp, #12
 800fa7a:	9300      	str	r3, [sp, #0]
 800fa7c:	4630      	mov	r0, r6
 800fa7e:	a904      	add	r1, sp, #16
 800fa80:	462a      	mov	r2, r5
 800fa82:	4b0c      	ldr	r3, [pc, #48]	; (800fab4 <_svfiprintf_r+0x1d8>)
 800fa84:	f7fc fce2 	bl	800c44c <_printf_i>
 800fa88:	1c42      	adds	r2, r0, #1
 800fa8a:	4607      	mov	r7, r0
 800fa8c:	d003      	beq.n	800fa96 <_svfiprintf_r+0x1ba>
 800fa8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa90:	443b      	add	r3, r7
 800fa92:	9309      	str	r3, [sp, #36]	; 0x24
 800fa94:	e741      	b.n	800f91a <_svfiprintf_r+0x3e>
 800fa96:	89ab      	ldrh	r3, [r5, #12]
 800fa98:	065b      	lsls	r3, r3, #25
 800fa9a:	d401      	bmi.n	800faa0 <_svfiprintf_r+0x1c4>
 800fa9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa9e:	e001      	b.n	800faa4 <_svfiprintf_r+0x1c8>
 800faa0:	f04f 30ff 	mov.w	r0, #4294967295
 800faa4:	b01d      	add	sp, #116	; 0x74
 800faa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faaa:	bf00      	nop
 800faac:	0801c6da 	.word	0x0801c6da
 800fab0:	0800bed5 	.word	0x0800bed5
 800fab4:	0800f829 	.word	0x0800f829
 800fab8:	0801c6d0 	.word	0x0801c6d0
 800fabc:	0801c6d6 	.word	0x0801c6d6

0800fac0 <_read_r>:
 800fac0:	b538      	push	{r3, r4, r5, lr}
 800fac2:	4c07      	ldr	r4, [pc, #28]	; (800fae0 <_read_r+0x20>)
 800fac4:	4605      	mov	r5, r0
 800fac6:	2000      	movs	r0, #0
 800fac8:	6020      	str	r0, [r4, #0]
 800faca:	4608      	mov	r0, r1
 800facc:	4611      	mov	r1, r2
 800face:	461a      	mov	r2, r3
 800fad0:	f7fa f9d8 	bl	8009e84 <_read>
 800fad4:	1c43      	adds	r3, r0, #1
 800fad6:	d102      	bne.n	800fade <_read_r+0x1e>
 800fad8:	6823      	ldr	r3, [r4, #0]
 800fada:	b103      	cbz	r3, 800fade <_read_r+0x1e>
 800fadc:	602b      	str	r3, [r5, #0]
 800fade:	bd38      	pop	{r3, r4, r5, pc}
 800fae0:	20000dbc 	.word	0x20000dbc

0800fae4 <_fstat_r>:
 800fae4:	b538      	push	{r3, r4, r5, lr}
 800fae6:	4c07      	ldr	r4, [pc, #28]	; (800fb04 <_fstat_r+0x20>)
 800fae8:	2300      	movs	r3, #0
 800faea:	4605      	mov	r5, r0
 800faec:	4608      	mov	r0, r1
 800faee:	4611      	mov	r1, r2
 800faf0:	6023      	str	r3, [r4, #0]
 800faf2:	f7fa fa0d 	bl	8009f10 <_fstat>
 800faf6:	1c43      	adds	r3, r0, #1
 800faf8:	d102      	bne.n	800fb00 <_fstat_r+0x1c>
 800fafa:	6823      	ldr	r3, [r4, #0]
 800fafc:	b103      	cbz	r3, 800fb00 <_fstat_r+0x1c>
 800fafe:	602b      	str	r3, [r5, #0]
 800fb00:	bd38      	pop	{r3, r4, r5, pc}
 800fb02:	bf00      	nop
 800fb04:	20000dbc 	.word	0x20000dbc

0800fb08 <_isatty_r>:
 800fb08:	b538      	push	{r3, r4, r5, lr}
 800fb0a:	4c06      	ldr	r4, [pc, #24]	; (800fb24 <_isatty_r+0x1c>)
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	4605      	mov	r5, r0
 800fb10:	4608      	mov	r0, r1
 800fb12:	6023      	str	r3, [r4, #0]
 800fb14:	f7fa f9d8 	bl	8009ec8 <_isatty>
 800fb18:	1c43      	adds	r3, r0, #1
 800fb1a:	d102      	bne.n	800fb22 <_isatty_r+0x1a>
 800fb1c:	6823      	ldr	r3, [r4, #0]
 800fb1e:	b103      	cbz	r3, 800fb22 <_isatty_r+0x1a>
 800fb20:	602b      	str	r3, [r5, #0]
 800fb22:	bd38      	pop	{r3, r4, r5, pc}
 800fb24:	20000dbc 	.word	0x20000dbc

0800fb28 <_malloc_usable_size_r>:
 800fb28:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800fb2c:	2800      	cmp	r0, #0
 800fb2e:	bfbe      	ittt	lt
 800fb30:	1809      	addlt	r1, r1, r0
 800fb32:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 800fb36:	18c0      	addlt	r0, r0, r3
 800fb38:	3804      	subs	r0, #4
 800fb3a:	4770      	bx	lr

0800fb3c <__aeabi_drsub>:
 800fb3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800fb40:	e002      	b.n	800fb48 <__adddf3>
 800fb42:	bf00      	nop

0800fb44 <__aeabi_dsub>:
 800fb44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800fb48 <__adddf3>:
 800fb48:	b530      	push	{r4, r5, lr}
 800fb4a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800fb4e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800fb52:	ea94 0f05 	teq	r4, r5
 800fb56:	bf08      	it	eq
 800fb58:	ea90 0f02 	teqeq	r0, r2
 800fb5c:	bf1f      	itttt	ne
 800fb5e:	ea54 0c00 	orrsne.w	ip, r4, r0
 800fb62:	ea55 0c02 	orrsne.w	ip, r5, r2
 800fb66:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800fb6a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800fb6e:	f000 80e2 	beq.w	800fd36 <__adddf3+0x1ee>
 800fb72:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800fb76:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800fb7a:	bfb8      	it	lt
 800fb7c:	426d      	neglt	r5, r5
 800fb7e:	dd0c      	ble.n	800fb9a <__adddf3+0x52>
 800fb80:	442c      	add	r4, r5
 800fb82:	ea80 0202 	eor.w	r2, r0, r2
 800fb86:	ea81 0303 	eor.w	r3, r1, r3
 800fb8a:	ea82 0000 	eor.w	r0, r2, r0
 800fb8e:	ea83 0101 	eor.w	r1, r3, r1
 800fb92:	ea80 0202 	eor.w	r2, r0, r2
 800fb96:	ea81 0303 	eor.w	r3, r1, r3
 800fb9a:	2d36      	cmp	r5, #54	; 0x36
 800fb9c:	bf88      	it	hi
 800fb9e:	bd30      	pophi	{r4, r5, pc}
 800fba0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800fba4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800fba8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800fbac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800fbb0:	d002      	beq.n	800fbb8 <__adddf3+0x70>
 800fbb2:	4240      	negs	r0, r0
 800fbb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800fbb8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800fbbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800fbc0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800fbc4:	d002      	beq.n	800fbcc <__adddf3+0x84>
 800fbc6:	4252      	negs	r2, r2
 800fbc8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800fbcc:	ea94 0f05 	teq	r4, r5
 800fbd0:	f000 80a7 	beq.w	800fd22 <__adddf3+0x1da>
 800fbd4:	f1a4 0401 	sub.w	r4, r4, #1
 800fbd8:	f1d5 0e20 	rsbs	lr, r5, #32
 800fbdc:	db0d      	blt.n	800fbfa <__adddf3+0xb2>
 800fbde:	fa02 fc0e 	lsl.w	ip, r2, lr
 800fbe2:	fa22 f205 	lsr.w	r2, r2, r5
 800fbe6:	1880      	adds	r0, r0, r2
 800fbe8:	f141 0100 	adc.w	r1, r1, #0
 800fbec:	fa03 f20e 	lsl.w	r2, r3, lr
 800fbf0:	1880      	adds	r0, r0, r2
 800fbf2:	fa43 f305 	asr.w	r3, r3, r5
 800fbf6:	4159      	adcs	r1, r3
 800fbf8:	e00e      	b.n	800fc18 <__adddf3+0xd0>
 800fbfa:	f1a5 0520 	sub.w	r5, r5, #32
 800fbfe:	f10e 0e20 	add.w	lr, lr, #32
 800fc02:	2a01      	cmp	r2, #1
 800fc04:	fa03 fc0e 	lsl.w	ip, r3, lr
 800fc08:	bf28      	it	cs
 800fc0a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800fc0e:	fa43 f305 	asr.w	r3, r3, r5
 800fc12:	18c0      	adds	r0, r0, r3
 800fc14:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800fc18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800fc1c:	d507      	bpl.n	800fc2e <__adddf3+0xe6>
 800fc1e:	f04f 0e00 	mov.w	lr, #0
 800fc22:	f1dc 0c00 	rsbs	ip, ip, #0
 800fc26:	eb7e 0000 	sbcs.w	r0, lr, r0
 800fc2a:	eb6e 0101 	sbc.w	r1, lr, r1
 800fc2e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800fc32:	d31b      	bcc.n	800fc6c <__adddf3+0x124>
 800fc34:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800fc38:	d30c      	bcc.n	800fc54 <__adddf3+0x10c>
 800fc3a:	0849      	lsrs	r1, r1, #1
 800fc3c:	ea5f 0030 	movs.w	r0, r0, rrx
 800fc40:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800fc44:	f104 0401 	add.w	r4, r4, #1
 800fc48:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800fc4c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800fc50:	f080 809a 	bcs.w	800fd88 <__adddf3+0x240>
 800fc54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800fc58:	bf08      	it	eq
 800fc5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800fc5e:	f150 0000 	adcs.w	r0, r0, #0
 800fc62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800fc66:	ea41 0105 	orr.w	r1, r1, r5
 800fc6a:	bd30      	pop	{r4, r5, pc}
 800fc6c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800fc70:	4140      	adcs	r0, r0
 800fc72:	eb41 0101 	adc.w	r1, r1, r1
 800fc76:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800fc7a:	f1a4 0401 	sub.w	r4, r4, #1
 800fc7e:	d1e9      	bne.n	800fc54 <__adddf3+0x10c>
 800fc80:	f091 0f00 	teq	r1, #0
 800fc84:	bf04      	itt	eq
 800fc86:	4601      	moveq	r1, r0
 800fc88:	2000      	moveq	r0, #0
 800fc8a:	fab1 f381 	clz	r3, r1
 800fc8e:	bf08      	it	eq
 800fc90:	3320      	addeq	r3, #32
 800fc92:	f1a3 030b 	sub.w	r3, r3, #11
 800fc96:	f1b3 0220 	subs.w	r2, r3, #32
 800fc9a:	da0c      	bge.n	800fcb6 <__adddf3+0x16e>
 800fc9c:	320c      	adds	r2, #12
 800fc9e:	dd08      	ble.n	800fcb2 <__adddf3+0x16a>
 800fca0:	f102 0c14 	add.w	ip, r2, #20
 800fca4:	f1c2 020c 	rsb	r2, r2, #12
 800fca8:	fa01 f00c 	lsl.w	r0, r1, ip
 800fcac:	fa21 f102 	lsr.w	r1, r1, r2
 800fcb0:	e00c      	b.n	800fccc <__adddf3+0x184>
 800fcb2:	f102 0214 	add.w	r2, r2, #20
 800fcb6:	bfd8      	it	le
 800fcb8:	f1c2 0c20 	rsble	ip, r2, #32
 800fcbc:	fa01 f102 	lsl.w	r1, r1, r2
 800fcc0:	fa20 fc0c 	lsr.w	ip, r0, ip
 800fcc4:	bfdc      	itt	le
 800fcc6:	ea41 010c 	orrle.w	r1, r1, ip
 800fcca:	4090      	lslle	r0, r2
 800fccc:	1ae4      	subs	r4, r4, r3
 800fcce:	bfa2      	ittt	ge
 800fcd0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800fcd4:	4329      	orrge	r1, r5
 800fcd6:	bd30      	popge	{r4, r5, pc}
 800fcd8:	ea6f 0404 	mvn.w	r4, r4
 800fcdc:	3c1f      	subs	r4, #31
 800fcde:	da1c      	bge.n	800fd1a <__adddf3+0x1d2>
 800fce0:	340c      	adds	r4, #12
 800fce2:	dc0e      	bgt.n	800fd02 <__adddf3+0x1ba>
 800fce4:	f104 0414 	add.w	r4, r4, #20
 800fce8:	f1c4 0220 	rsb	r2, r4, #32
 800fcec:	fa20 f004 	lsr.w	r0, r0, r4
 800fcf0:	fa01 f302 	lsl.w	r3, r1, r2
 800fcf4:	ea40 0003 	orr.w	r0, r0, r3
 800fcf8:	fa21 f304 	lsr.w	r3, r1, r4
 800fcfc:	ea45 0103 	orr.w	r1, r5, r3
 800fd00:	bd30      	pop	{r4, r5, pc}
 800fd02:	f1c4 040c 	rsb	r4, r4, #12
 800fd06:	f1c4 0220 	rsb	r2, r4, #32
 800fd0a:	fa20 f002 	lsr.w	r0, r0, r2
 800fd0e:	fa01 f304 	lsl.w	r3, r1, r4
 800fd12:	ea40 0003 	orr.w	r0, r0, r3
 800fd16:	4629      	mov	r1, r5
 800fd18:	bd30      	pop	{r4, r5, pc}
 800fd1a:	fa21 f004 	lsr.w	r0, r1, r4
 800fd1e:	4629      	mov	r1, r5
 800fd20:	bd30      	pop	{r4, r5, pc}
 800fd22:	f094 0f00 	teq	r4, #0
 800fd26:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800fd2a:	bf06      	itte	eq
 800fd2c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800fd30:	3401      	addeq	r4, #1
 800fd32:	3d01      	subne	r5, #1
 800fd34:	e74e      	b.n	800fbd4 <__adddf3+0x8c>
 800fd36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800fd3a:	bf18      	it	ne
 800fd3c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800fd40:	d029      	beq.n	800fd96 <__adddf3+0x24e>
 800fd42:	ea94 0f05 	teq	r4, r5
 800fd46:	bf08      	it	eq
 800fd48:	ea90 0f02 	teqeq	r0, r2
 800fd4c:	d005      	beq.n	800fd5a <__adddf3+0x212>
 800fd4e:	ea54 0c00 	orrs.w	ip, r4, r0
 800fd52:	bf04      	itt	eq
 800fd54:	4619      	moveq	r1, r3
 800fd56:	4610      	moveq	r0, r2
 800fd58:	bd30      	pop	{r4, r5, pc}
 800fd5a:	ea91 0f03 	teq	r1, r3
 800fd5e:	bf1e      	ittt	ne
 800fd60:	2100      	movne	r1, #0
 800fd62:	2000      	movne	r0, #0
 800fd64:	bd30      	popne	{r4, r5, pc}
 800fd66:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800fd6a:	d105      	bne.n	800fd78 <__adddf3+0x230>
 800fd6c:	0040      	lsls	r0, r0, #1
 800fd6e:	4149      	adcs	r1, r1
 800fd70:	bf28      	it	cs
 800fd72:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800fd76:	bd30      	pop	{r4, r5, pc}
 800fd78:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800fd7c:	bf3c      	itt	cc
 800fd7e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800fd82:	bd30      	popcc	{r4, r5, pc}
 800fd84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800fd88:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800fd8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fd90:	f04f 0000 	mov.w	r0, #0
 800fd94:	bd30      	pop	{r4, r5, pc}
 800fd96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800fd9a:	bf1a      	itte	ne
 800fd9c:	4619      	movne	r1, r3
 800fd9e:	4610      	movne	r0, r2
 800fda0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800fda4:	bf1c      	itt	ne
 800fda6:	460b      	movne	r3, r1
 800fda8:	4602      	movne	r2, r0
 800fdaa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800fdae:	bf06      	itte	eq
 800fdb0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800fdb4:	ea91 0f03 	teqeq	r1, r3
 800fdb8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800fdbc:	bd30      	pop	{r4, r5, pc}
 800fdbe:	bf00      	nop

0800fdc0 <__aeabi_ui2d>:
 800fdc0:	f090 0f00 	teq	r0, #0
 800fdc4:	bf04      	itt	eq
 800fdc6:	2100      	moveq	r1, #0
 800fdc8:	4770      	bxeq	lr
 800fdca:	b530      	push	{r4, r5, lr}
 800fdcc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800fdd0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800fdd4:	f04f 0500 	mov.w	r5, #0
 800fdd8:	f04f 0100 	mov.w	r1, #0
 800fddc:	e750      	b.n	800fc80 <__adddf3+0x138>
 800fdde:	bf00      	nop

0800fde0 <__aeabi_i2d>:
 800fde0:	f090 0f00 	teq	r0, #0
 800fde4:	bf04      	itt	eq
 800fde6:	2100      	moveq	r1, #0
 800fde8:	4770      	bxeq	lr
 800fdea:	b530      	push	{r4, r5, lr}
 800fdec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800fdf0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800fdf4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800fdf8:	bf48      	it	mi
 800fdfa:	4240      	negmi	r0, r0
 800fdfc:	f04f 0100 	mov.w	r1, #0
 800fe00:	e73e      	b.n	800fc80 <__adddf3+0x138>
 800fe02:	bf00      	nop

0800fe04 <__aeabi_f2d>:
 800fe04:	0042      	lsls	r2, r0, #1
 800fe06:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800fe0a:	ea4f 0131 	mov.w	r1, r1, rrx
 800fe0e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800fe12:	bf1f      	itttt	ne
 800fe14:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800fe18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800fe1c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800fe20:	4770      	bxne	lr
 800fe22:	f092 0f00 	teq	r2, #0
 800fe26:	bf14      	ite	ne
 800fe28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800fe2c:	4770      	bxeq	lr
 800fe2e:	b530      	push	{r4, r5, lr}
 800fe30:	f44f 7460 	mov.w	r4, #896	; 0x380
 800fe34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800fe38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800fe3c:	e720      	b.n	800fc80 <__adddf3+0x138>
 800fe3e:	bf00      	nop

0800fe40 <__aeabi_ul2d>:
 800fe40:	ea50 0201 	orrs.w	r2, r0, r1
 800fe44:	bf08      	it	eq
 800fe46:	4770      	bxeq	lr
 800fe48:	b530      	push	{r4, r5, lr}
 800fe4a:	f04f 0500 	mov.w	r5, #0
 800fe4e:	e00a      	b.n	800fe66 <__aeabi_l2d+0x16>

0800fe50 <__aeabi_l2d>:
 800fe50:	ea50 0201 	orrs.w	r2, r0, r1
 800fe54:	bf08      	it	eq
 800fe56:	4770      	bxeq	lr
 800fe58:	b530      	push	{r4, r5, lr}
 800fe5a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800fe5e:	d502      	bpl.n	800fe66 <__aeabi_l2d+0x16>
 800fe60:	4240      	negs	r0, r0
 800fe62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800fe66:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800fe6a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800fe6e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800fe72:	f43f aedc 	beq.w	800fc2e <__adddf3+0xe6>
 800fe76:	f04f 0203 	mov.w	r2, #3
 800fe7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800fe7e:	bf18      	it	ne
 800fe80:	3203      	addne	r2, #3
 800fe82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800fe86:	bf18      	it	ne
 800fe88:	3203      	addne	r2, #3
 800fe8a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800fe8e:	f1c2 0320 	rsb	r3, r2, #32
 800fe92:	fa00 fc03 	lsl.w	ip, r0, r3
 800fe96:	fa20 f002 	lsr.w	r0, r0, r2
 800fe9a:	fa01 fe03 	lsl.w	lr, r1, r3
 800fe9e:	ea40 000e 	orr.w	r0, r0, lr
 800fea2:	fa21 f102 	lsr.w	r1, r1, r2
 800fea6:	4414      	add	r4, r2
 800fea8:	e6c1      	b.n	800fc2e <__adddf3+0xe6>
 800feaa:	bf00      	nop

0800feac <__aeabi_dmul>:
 800feac:	b570      	push	{r4, r5, r6, lr}
 800feae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800feb2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800feb6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800feba:	bf1d      	ittte	ne
 800febc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800fec0:	ea94 0f0c 	teqne	r4, ip
 800fec4:	ea95 0f0c 	teqne	r5, ip
 800fec8:	f000 f8de 	bleq	8010088 <__aeabi_dmul+0x1dc>
 800fecc:	442c      	add	r4, r5
 800fece:	ea81 0603 	eor.w	r6, r1, r3
 800fed2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800fed6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800feda:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800fede:	bf18      	it	ne
 800fee0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800fee4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fee8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800feec:	d038      	beq.n	800ff60 <__aeabi_dmul+0xb4>
 800feee:	fba0 ce02 	umull	ip, lr, r0, r2
 800fef2:	f04f 0500 	mov.w	r5, #0
 800fef6:	fbe1 e502 	umlal	lr, r5, r1, r2
 800fefa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800fefe:	fbe0 e503 	umlal	lr, r5, r0, r3
 800ff02:	f04f 0600 	mov.w	r6, #0
 800ff06:	fbe1 5603 	umlal	r5, r6, r1, r3
 800ff0a:	f09c 0f00 	teq	ip, #0
 800ff0e:	bf18      	it	ne
 800ff10:	f04e 0e01 	orrne.w	lr, lr, #1
 800ff14:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800ff18:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800ff1c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800ff20:	d204      	bcs.n	800ff2c <__aeabi_dmul+0x80>
 800ff22:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800ff26:	416d      	adcs	r5, r5
 800ff28:	eb46 0606 	adc.w	r6, r6, r6
 800ff2c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800ff30:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800ff34:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800ff38:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800ff3c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800ff40:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800ff44:	bf88      	it	hi
 800ff46:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800ff4a:	d81e      	bhi.n	800ff8a <__aeabi_dmul+0xde>
 800ff4c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800ff50:	bf08      	it	eq
 800ff52:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800ff56:	f150 0000 	adcs.w	r0, r0, #0
 800ff5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800ff5e:	bd70      	pop	{r4, r5, r6, pc}
 800ff60:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800ff64:	ea46 0101 	orr.w	r1, r6, r1
 800ff68:	ea40 0002 	orr.w	r0, r0, r2
 800ff6c:	ea81 0103 	eor.w	r1, r1, r3
 800ff70:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800ff74:	bfc2      	ittt	gt
 800ff76:	ebd4 050c 	rsbsgt	r5, r4, ip
 800ff7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800ff7e:	bd70      	popgt	{r4, r5, r6, pc}
 800ff80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ff84:	f04f 0e00 	mov.w	lr, #0
 800ff88:	3c01      	subs	r4, #1
 800ff8a:	f300 80ab 	bgt.w	80100e4 <__aeabi_dmul+0x238>
 800ff8e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800ff92:	bfde      	ittt	le
 800ff94:	2000      	movle	r0, #0
 800ff96:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800ff9a:	bd70      	pople	{r4, r5, r6, pc}
 800ff9c:	f1c4 0400 	rsb	r4, r4, #0
 800ffa0:	3c20      	subs	r4, #32
 800ffa2:	da35      	bge.n	8010010 <__aeabi_dmul+0x164>
 800ffa4:	340c      	adds	r4, #12
 800ffa6:	dc1b      	bgt.n	800ffe0 <__aeabi_dmul+0x134>
 800ffa8:	f104 0414 	add.w	r4, r4, #20
 800ffac:	f1c4 0520 	rsb	r5, r4, #32
 800ffb0:	fa00 f305 	lsl.w	r3, r0, r5
 800ffb4:	fa20 f004 	lsr.w	r0, r0, r4
 800ffb8:	fa01 f205 	lsl.w	r2, r1, r5
 800ffbc:	ea40 0002 	orr.w	r0, r0, r2
 800ffc0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800ffc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ffc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800ffcc:	fa21 f604 	lsr.w	r6, r1, r4
 800ffd0:	eb42 0106 	adc.w	r1, r2, r6
 800ffd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800ffd8:	bf08      	it	eq
 800ffda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800ffde:	bd70      	pop	{r4, r5, r6, pc}
 800ffe0:	f1c4 040c 	rsb	r4, r4, #12
 800ffe4:	f1c4 0520 	rsb	r5, r4, #32
 800ffe8:	fa00 f304 	lsl.w	r3, r0, r4
 800ffec:	fa20 f005 	lsr.w	r0, r0, r5
 800fff0:	fa01 f204 	lsl.w	r2, r1, r4
 800fff4:	ea40 0002 	orr.w	r0, r0, r2
 800fff8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800fffc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010000:	f141 0100 	adc.w	r1, r1, #0
 8010004:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010008:	bf08      	it	eq
 801000a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801000e:	bd70      	pop	{r4, r5, r6, pc}
 8010010:	f1c4 0520 	rsb	r5, r4, #32
 8010014:	fa00 f205 	lsl.w	r2, r0, r5
 8010018:	ea4e 0e02 	orr.w	lr, lr, r2
 801001c:	fa20 f304 	lsr.w	r3, r0, r4
 8010020:	fa01 f205 	lsl.w	r2, r1, r5
 8010024:	ea43 0302 	orr.w	r3, r3, r2
 8010028:	fa21 f004 	lsr.w	r0, r1, r4
 801002c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010030:	fa21 f204 	lsr.w	r2, r1, r4
 8010034:	ea20 0002 	bic.w	r0, r0, r2
 8010038:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 801003c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010040:	bf08      	it	eq
 8010042:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010046:	bd70      	pop	{r4, r5, r6, pc}
 8010048:	f094 0f00 	teq	r4, #0
 801004c:	d10f      	bne.n	801006e <__aeabi_dmul+0x1c2>
 801004e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8010052:	0040      	lsls	r0, r0, #1
 8010054:	eb41 0101 	adc.w	r1, r1, r1
 8010058:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 801005c:	bf08      	it	eq
 801005e:	3c01      	subeq	r4, #1
 8010060:	d0f7      	beq.n	8010052 <__aeabi_dmul+0x1a6>
 8010062:	ea41 0106 	orr.w	r1, r1, r6
 8010066:	f095 0f00 	teq	r5, #0
 801006a:	bf18      	it	ne
 801006c:	4770      	bxne	lr
 801006e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8010072:	0052      	lsls	r2, r2, #1
 8010074:	eb43 0303 	adc.w	r3, r3, r3
 8010078:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 801007c:	bf08      	it	eq
 801007e:	3d01      	subeq	r5, #1
 8010080:	d0f7      	beq.n	8010072 <__aeabi_dmul+0x1c6>
 8010082:	ea43 0306 	orr.w	r3, r3, r6
 8010086:	4770      	bx	lr
 8010088:	ea94 0f0c 	teq	r4, ip
 801008c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8010090:	bf18      	it	ne
 8010092:	ea95 0f0c 	teqne	r5, ip
 8010096:	d00c      	beq.n	80100b2 <__aeabi_dmul+0x206>
 8010098:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 801009c:	bf18      	it	ne
 801009e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80100a2:	d1d1      	bne.n	8010048 <__aeabi_dmul+0x19c>
 80100a4:	ea81 0103 	eor.w	r1, r1, r3
 80100a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80100ac:	f04f 0000 	mov.w	r0, #0
 80100b0:	bd70      	pop	{r4, r5, r6, pc}
 80100b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80100b6:	bf06      	itte	eq
 80100b8:	4610      	moveq	r0, r2
 80100ba:	4619      	moveq	r1, r3
 80100bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80100c0:	d019      	beq.n	80100f6 <__aeabi_dmul+0x24a>
 80100c2:	ea94 0f0c 	teq	r4, ip
 80100c6:	d102      	bne.n	80100ce <__aeabi_dmul+0x222>
 80100c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80100cc:	d113      	bne.n	80100f6 <__aeabi_dmul+0x24a>
 80100ce:	ea95 0f0c 	teq	r5, ip
 80100d2:	d105      	bne.n	80100e0 <__aeabi_dmul+0x234>
 80100d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80100d8:	bf1c      	itt	ne
 80100da:	4610      	movne	r0, r2
 80100dc:	4619      	movne	r1, r3
 80100de:	d10a      	bne.n	80100f6 <__aeabi_dmul+0x24a>
 80100e0:	ea81 0103 	eor.w	r1, r1, r3
 80100e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80100e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80100ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80100f0:	f04f 0000 	mov.w	r0, #0
 80100f4:	bd70      	pop	{r4, r5, r6, pc}
 80100f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80100fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80100fe:	bd70      	pop	{r4, r5, r6, pc}

08010100 <__aeabi_ddiv>:
 8010100:	b570      	push	{r4, r5, r6, lr}
 8010102:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010106:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 801010a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801010e:	bf1d      	ittte	ne
 8010110:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010114:	ea94 0f0c 	teqne	r4, ip
 8010118:	ea95 0f0c 	teqne	r5, ip
 801011c:	f000 f8a7 	bleq	801026e <__aeabi_ddiv+0x16e>
 8010120:	eba4 0405 	sub.w	r4, r4, r5
 8010124:	ea81 0e03 	eor.w	lr, r1, r3
 8010128:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 801012c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8010130:	f000 8088 	beq.w	8010244 <__aeabi_ddiv+0x144>
 8010134:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010138:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 801013c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8010140:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8010144:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8010148:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 801014c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8010150:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8010154:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8010158:	429d      	cmp	r5, r3
 801015a:	bf08      	it	eq
 801015c:	4296      	cmpeq	r6, r2
 801015e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8010162:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8010166:	d202      	bcs.n	801016e <__aeabi_ddiv+0x6e>
 8010168:	085b      	lsrs	r3, r3, #1
 801016a:	ea4f 0232 	mov.w	r2, r2, rrx
 801016e:	1ab6      	subs	r6, r6, r2
 8010170:	eb65 0503 	sbc.w	r5, r5, r3
 8010174:	085b      	lsrs	r3, r3, #1
 8010176:	ea4f 0232 	mov.w	r2, r2, rrx
 801017a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801017e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8010182:	ebb6 0e02 	subs.w	lr, r6, r2
 8010186:	eb75 0e03 	sbcs.w	lr, r5, r3
 801018a:	bf22      	ittt	cs
 801018c:	1ab6      	subcs	r6, r6, r2
 801018e:	4675      	movcs	r5, lr
 8010190:	ea40 000c 	orrcs.w	r0, r0, ip
 8010194:	085b      	lsrs	r3, r3, #1
 8010196:	ea4f 0232 	mov.w	r2, r2, rrx
 801019a:	ebb6 0e02 	subs.w	lr, r6, r2
 801019e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80101a2:	bf22      	ittt	cs
 80101a4:	1ab6      	subcs	r6, r6, r2
 80101a6:	4675      	movcs	r5, lr
 80101a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80101ac:	085b      	lsrs	r3, r3, #1
 80101ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80101b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80101b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80101ba:	bf22      	ittt	cs
 80101bc:	1ab6      	subcs	r6, r6, r2
 80101be:	4675      	movcs	r5, lr
 80101c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80101c4:	085b      	lsrs	r3, r3, #1
 80101c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80101ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80101ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80101d2:	bf22      	ittt	cs
 80101d4:	1ab6      	subcs	r6, r6, r2
 80101d6:	4675      	movcs	r5, lr
 80101d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80101dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80101e0:	d018      	beq.n	8010214 <__aeabi_ddiv+0x114>
 80101e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80101e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80101ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80101ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80101f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80101f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80101fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80101fe:	d1c0      	bne.n	8010182 <__aeabi_ddiv+0x82>
 8010200:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010204:	d10b      	bne.n	801021e <__aeabi_ddiv+0x11e>
 8010206:	ea41 0100 	orr.w	r1, r1, r0
 801020a:	f04f 0000 	mov.w	r0, #0
 801020e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8010212:	e7b6      	b.n	8010182 <__aeabi_ddiv+0x82>
 8010214:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010218:	bf04      	itt	eq
 801021a:	4301      	orreq	r1, r0
 801021c:	2000      	moveq	r0, #0
 801021e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8010222:	bf88      	it	hi
 8010224:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8010228:	f63f aeaf 	bhi.w	800ff8a <__aeabi_dmul+0xde>
 801022c:	ebb5 0c03 	subs.w	ip, r5, r3
 8010230:	bf04      	itt	eq
 8010232:	ebb6 0c02 	subseq.w	ip, r6, r2
 8010236:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 801023a:	f150 0000 	adcs.w	r0, r0, #0
 801023e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010242:	bd70      	pop	{r4, r5, r6, pc}
 8010244:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8010248:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 801024c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8010250:	bfc2      	ittt	gt
 8010252:	ebd4 050c 	rsbsgt	r5, r4, ip
 8010256:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 801025a:	bd70      	popgt	{r4, r5, r6, pc}
 801025c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010260:	f04f 0e00 	mov.w	lr, #0
 8010264:	3c01      	subs	r4, #1
 8010266:	e690      	b.n	800ff8a <__aeabi_dmul+0xde>
 8010268:	ea45 0e06 	orr.w	lr, r5, r6
 801026c:	e68d      	b.n	800ff8a <__aeabi_dmul+0xde>
 801026e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8010272:	ea94 0f0c 	teq	r4, ip
 8010276:	bf08      	it	eq
 8010278:	ea95 0f0c 	teqeq	r5, ip
 801027c:	f43f af3b 	beq.w	80100f6 <__aeabi_dmul+0x24a>
 8010280:	ea94 0f0c 	teq	r4, ip
 8010284:	d10a      	bne.n	801029c <__aeabi_ddiv+0x19c>
 8010286:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 801028a:	f47f af34 	bne.w	80100f6 <__aeabi_dmul+0x24a>
 801028e:	ea95 0f0c 	teq	r5, ip
 8010292:	f47f af25 	bne.w	80100e0 <__aeabi_dmul+0x234>
 8010296:	4610      	mov	r0, r2
 8010298:	4619      	mov	r1, r3
 801029a:	e72c      	b.n	80100f6 <__aeabi_dmul+0x24a>
 801029c:	ea95 0f0c 	teq	r5, ip
 80102a0:	d106      	bne.n	80102b0 <__aeabi_ddiv+0x1b0>
 80102a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80102a6:	f43f aefd 	beq.w	80100a4 <__aeabi_dmul+0x1f8>
 80102aa:	4610      	mov	r0, r2
 80102ac:	4619      	mov	r1, r3
 80102ae:	e722      	b.n	80100f6 <__aeabi_dmul+0x24a>
 80102b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80102b4:	bf18      	it	ne
 80102b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80102ba:	f47f aec5 	bne.w	8010048 <__aeabi_dmul+0x19c>
 80102be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80102c2:	f47f af0d 	bne.w	80100e0 <__aeabi_dmul+0x234>
 80102c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80102ca:	f47f aeeb 	bne.w	80100a4 <__aeabi_dmul+0x1f8>
 80102ce:	e712      	b.n	80100f6 <__aeabi_dmul+0x24a>

080102d0 <__gedf2>:
 80102d0:	f04f 3cff 	mov.w	ip, #4294967295
 80102d4:	e006      	b.n	80102e4 <__cmpdf2+0x4>
 80102d6:	bf00      	nop

080102d8 <__ledf2>:
 80102d8:	f04f 0c01 	mov.w	ip, #1
 80102dc:	e002      	b.n	80102e4 <__cmpdf2+0x4>
 80102de:	bf00      	nop

080102e0 <__cmpdf2>:
 80102e0:	f04f 0c01 	mov.w	ip, #1
 80102e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80102e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80102ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80102f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80102f4:	bf18      	it	ne
 80102f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80102fa:	d01b      	beq.n	8010334 <__cmpdf2+0x54>
 80102fc:	b001      	add	sp, #4
 80102fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010302:	bf0c      	ite	eq
 8010304:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010308:	ea91 0f03 	teqne	r1, r3
 801030c:	bf02      	ittt	eq
 801030e:	ea90 0f02 	teqeq	r0, r2
 8010312:	2000      	moveq	r0, #0
 8010314:	4770      	bxeq	lr
 8010316:	f110 0f00 	cmn.w	r0, #0
 801031a:	ea91 0f03 	teq	r1, r3
 801031e:	bf58      	it	pl
 8010320:	4299      	cmppl	r1, r3
 8010322:	bf08      	it	eq
 8010324:	4290      	cmpeq	r0, r2
 8010326:	bf2c      	ite	cs
 8010328:	17d8      	asrcs	r0, r3, #31
 801032a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 801032e:	f040 0001 	orr.w	r0, r0, #1
 8010332:	4770      	bx	lr
 8010334:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010338:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801033c:	d102      	bne.n	8010344 <__cmpdf2+0x64>
 801033e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010342:	d107      	bne.n	8010354 <__cmpdf2+0x74>
 8010344:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010348:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801034c:	d1d6      	bne.n	80102fc <__cmpdf2+0x1c>
 801034e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010352:	d0d3      	beq.n	80102fc <__cmpdf2+0x1c>
 8010354:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010358:	4770      	bx	lr
 801035a:	bf00      	nop

0801035c <__aeabi_cdrcmple>:
 801035c:	4684      	mov	ip, r0
 801035e:	4610      	mov	r0, r2
 8010360:	4662      	mov	r2, ip
 8010362:	468c      	mov	ip, r1
 8010364:	4619      	mov	r1, r3
 8010366:	4663      	mov	r3, ip
 8010368:	e000      	b.n	801036c <__aeabi_cdcmpeq>
 801036a:	bf00      	nop

0801036c <__aeabi_cdcmpeq>:
 801036c:	b501      	push	{r0, lr}
 801036e:	f7ff ffb7 	bl	80102e0 <__cmpdf2>
 8010372:	2800      	cmp	r0, #0
 8010374:	bf48      	it	mi
 8010376:	f110 0f00 	cmnmi.w	r0, #0
 801037a:	bd01      	pop	{r0, pc}

0801037c <__aeabi_dcmpeq>:
 801037c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010380:	f7ff fff4 	bl	801036c <__aeabi_cdcmpeq>
 8010384:	bf0c      	ite	eq
 8010386:	2001      	moveq	r0, #1
 8010388:	2000      	movne	r0, #0
 801038a:	f85d fb08 	ldr.w	pc, [sp], #8
 801038e:	bf00      	nop

08010390 <__aeabi_dcmplt>:
 8010390:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010394:	f7ff ffea 	bl	801036c <__aeabi_cdcmpeq>
 8010398:	bf34      	ite	cc
 801039a:	2001      	movcc	r0, #1
 801039c:	2000      	movcs	r0, #0
 801039e:	f85d fb08 	ldr.w	pc, [sp], #8
 80103a2:	bf00      	nop

080103a4 <__aeabi_dcmple>:
 80103a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80103a8:	f7ff ffe0 	bl	801036c <__aeabi_cdcmpeq>
 80103ac:	bf94      	ite	ls
 80103ae:	2001      	movls	r0, #1
 80103b0:	2000      	movhi	r0, #0
 80103b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80103b6:	bf00      	nop

080103b8 <__aeabi_dcmpge>:
 80103b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80103bc:	f7ff ffce 	bl	801035c <__aeabi_cdrcmple>
 80103c0:	bf94      	ite	ls
 80103c2:	2001      	movls	r0, #1
 80103c4:	2000      	movhi	r0, #0
 80103c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80103ca:	bf00      	nop

080103cc <__aeabi_dcmpgt>:
 80103cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80103d0:	f7ff ffc4 	bl	801035c <__aeabi_cdrcmple>
 80103d4:	bf34      	ite	cc
 80103d6:	2001      	movcc	r0, #1
 80103d8:	2000      	movcs	r0, #0
 80103da:	f85d fb08 	ldr.w	pc, [sp], #8
 80103de:	bf00      	nop

080103e0 <__aeabi_d2iz>:
 80103e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80103e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80103e8:	d215      	bcs.n	8010416 <__aeabi_d2iz+0x36>
 80103ea:	d511      	bpl.n	8010410 <__aeabi_d2iz+0x30>
 80103ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80103f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80103f4:	d912      	bls.n	801041c <__aeabi_d2iz+0x3c>
 80103f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80103fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80103fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010402:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010406:	fa23 f002 	lsr.w	r0, r3, r2
 801040a:	bf18      	it	ne
 801040c:	4240      	negne	r0, r0
 801040e:	4770      	bx	lr
 8010410:	f04f 0000 	mov.w	r0, #0
 8010414:	4770      	bx	lr
 8010416:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 801041a:	d105      	bne.n	8010428 <__aeabi_d2iz+0x48>
 801041c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8010420:	bf08      	it	eq
 8010422:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8010426:	4770      	bx	lr
 8010428:	f04f 0000 	mov.w	r0, #0
 801042c:	4770      	bx	lr
 801042e:	bf00      	nop

08010430 <__aeabi_d2uiz>:
 8010430:	004a      	lsls	r2, r1, #1
 8010432:	d211      	bcs.n	8010458 <__aeabi_d2uiz+0x28>
 8010434:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010438:	d211      	bcs.n	801045e <__aeabi_d2uiz+0x2e>
 801043a:	d50d      	bpl.n	8010458 <__aeabi_d2uiz+0x28>
 801043c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010440:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010444:	d40e      	bmi.n	8010464 <__aeabi_d2uiz+0x34>
 8010446:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801044a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801044e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010452:	fa23 f002 	lsr.w	r0, r3, r2
 8010456:	4770      	bx	lr
 8010458:	f04f 0000 	mov.w	r0, #0
 801045c:	4770      	bx	lr
 801045e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010462:	d102      	bne.n	801046a <__aeabi_d2uiz+0x3a>
 8010464:	f04f 30ff 	mov.w	r0, #4294967295
 8010468:	4770      	bx	lr
 801046a:	f04f 0000 	mov.w	r0, #0
 801046e:	4770      	bx	lr

08010470 <__aeabi_d2f>:
 8010470:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010474:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8010478:	bf24      	itt	cs
 801047a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 801047e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8010482:	d90d      	bls.n	80104a0 <__aeabi_d2f+0x30>
 8010484:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8010488:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 801048c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010490:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8010494:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010498:	bf08      	it	eq
 801049a:	f020 0001 	biceq.w	r0, r0, #1
 801049e:	4770      	bx	lr
 80104a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80104a4:	d121      	bne.n	80104ea <__aeabi_d2f+0x7a>
 80104a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80104aa:	bfbc      	itt	lt
 80104ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80104b0:	4770      	bxlt	lr
 80104b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80104b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80104ba:	f1c2 0218 	rsb	r2, r2, #24
 80104be:	f1c2 0c20 	rsb	ip, r2, #32
 80104c2:	fa10 f30c 	lsls.w	r3, r0, ip
 80104c6:	fa20 f002 	lsr.w	r0, r0, r2
 80104ca:	bf18      	it	ne
 80104cc:	f040 0001 	orrne.w	r0, r0, #1
 80104d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80104d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80104d8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80104dc:	ea40 000c 	orr.w	r0, r0, ip
 80104e0:	fa23 f302 	lsr.w	r3, r3, r2
 80104e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80104e8:	e7cc      	b.n	8010484 <__aeabi_d2f+0x14>
 80104ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80104ee:	d107      	bne.n	8010500 <__aeabi_d2f+0x90>
 80104f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80104f4:	bf1e      	ittt	ne
 80104f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80104fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80104fe:	4770      	bxne	lr
 8010500:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8010504:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8010508:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801050c:	4770      	bx	lr
 801050e:	bf00      	nop

08010510 <__aeabi_uldivmod>:
 8010510:	b953      	cbnz	r3, 8010528 <__aeabi_uldivmod+0x18>
 8010512:	b94a      	cbnz	r2, 8010528 <__aeabi_uldivmod+0x18>
 8010514:	2900      	cmp	r1, #0
 8010516:	bf08      	it	eq
 8010518:	2800      	cmpeq	r0, #0
 801051a:	bf1c      	itt	ne
 801051c:	f04f 31ff 	movne.w	r1, #4294967295
 8010520:	f04f 30ff 	movne.w	r0, #4294967295
 8010524:	f000 bff8 	b.w	8011518 <__aeabi_idiv0>
 8010528:	b082      	sub	sp, #8
 801052a:	46ec      	mov	ip, sp
 801052c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8010530:	f000 f81e 	bl	8010570 <__gnu_uldivmod_helper>
 8010534:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010538:	b002      	add	sp, #8
 801053a:	bc0c      	pop	{r2, r3}
 801053c:	4770      	bx	lr
 801053e:	bf00      	nop

08010540 <__gnu_ldivmod_helper>:
 8010540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010544:	9c06      	ldr	r4, [sp, #24]
 8010546:	4615      	mov	r5, r2
 8010548:	4606      	mov	r6, r0
 801054a:	460f      	mov	r7, r1
 801054c:	4698      	mov	r8, r3
 801054e:	f000 ffe5 	bl	801151c <__divdi3>
 8010552:	fb05 f301 	mul.w	r3, r5, r1
 8010556:	fb00 3808 	mla	r8, r0, r8, r3
 801055a:	fba5 2300 	umull	r2, r3, r5, r0
 801055e:	1ab2      	subs	r2, r6, r2
 8010560:	4443      	add	r3, r8
 8010562:	eb67 0303 	sbc.w	r3, r7, r3
 8010566:	e9c4 2300 	strd	r2, r3, [r4]
 801056a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801056e:	bf00      	nop

08010570 <__gnu_uldivmod_helper>:
 8010570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010574:	9c06      	ldr	r4, [sp, #24]
 8010576:	4690      	mov	r8, r2
 8010578:	4606      	mov	r6, r0
 801057a:	460f      	mov	r7, r1
 801057c:	461d      	mov	r5, r3
 801057e:	f001 f91b 	bl	80117b8 <__udivdi3>
 8010582:	fb00 f505 	mul.w	r5, r0, r5
 8010586:	fba0 2308 	umull	r2, r3, r0, r8
 801058a:	fb08 5501 	mla	r5, r8, r1, r5
 801058e:	1ab2      	subs	r2, r6, r2
 8010590:	442b      	add	r3, r5
 8010592:	eb67 0303 	sbc.w	r3, r7, r3
 8010596:	e9c4 2300 	strd	r2, r3, [r4]
 801059a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801059e:	bf00      	nop

080105a0 <selfrel_offset31>:
 80105a0:	6803      	ldr	r3, [r0, #0]
 80105a2:	005a      	lsls	r2, r3, #1
 80105a4:	bf4c      	ite	mi
 80105a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80105aa:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80105ae:	4418      	add	r0, r3
 80105b0:	4770      	bx	lr
 80105b2:	bf00      	nop

080105b4 <search_EIT_table>:
 80105b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b8:	b083      	sub	sp, #12
 80105ba:	b399      	cbz	r1, 8010624 <search_EIT_table+0x70>
 80105bc:	1e4b      	subs	r3, r1, #1
 80105be:	4617      	mov	r7, r2
 80105c0:	4605      	mov	r5, r0
 80105c2:	9301      	str	r3, [sp, #4]
 80105c4:	4698      	mov	r8, r3
 80105c6:	2600      	movs	r6, #0
 80105c8:	eb06 0408 	add.w	r4, r6, r8
 80105cc:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80105d0:	1064      	asrs	r4, r4, #1
 80105d2:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
 80105d6:	eb05 0b0a 	add.w	fp, r5, sl
 80105da:	4658      	mov	r0, fp
 80105dc:	f7ff ffe0 	bl	80105a0 <selfrel_offset31>
 80105e0:	9b01      	ldr	r3, [sp, #4]
 80105e2:	4681      	mov	r9, r0
 80105e4:	42a3      	cmp	r3, r4
 80105e6:	f10a 0008 	add.w	r0, sl, #8
 80105ea:	4428      	add	r0, r5
 80105ec:	d00e      	beq.n	801060c <search_EIT_table+0x58>
 80105ee:	f7ff ffd7 	bl	80105a0 <selfrel_offset31>
 80105f2:	45b9      	cmp	r9, r7
 80105f4:	f100 30ff 	add.w	r0, r0, #4294967295
 80105f8:	d904      	bls.n	8010604 <search_EIT_table+0x50>
 80105fa:	42b4      	cmp	r4, r6
 80105fc:	d00c      	beq.n	8010618 <search_EIT_table+0x64>
 80105fe:	f104 38ff 	add.w	r8, r4, #4294967295
 8010602:	e7e1      	b.n	80105c8 <search_EIT_table+0x14>
 8010604:	42b8      	cmp	r0, r7
 8010606:	d203      	bcs.n	8010610 <search_EIT_table+0x5c>
 8010608:	1c66      	adds	r6, r4, #1
 801060a:	e7dd      	b.n	80105c8 <search_EIT_table+0x14>
 801060c:	45b9      	cmp	r9, r7
 801060e:	d8f4      	bhi.n	80105fa <search_EIT_table+0x46>
 8010610:	4658      	mov	r0, fp
 8010612:	b003      	add	sp, #12
 8010614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010618:	f04f 0b00 	mov.w	fp, #0
 801061c:	4658      	mov	r0, fp
 801061e:	b003      	add	sp, #12
 8010620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010624:	468b      	mov	fp, r1
 8010626:	4658      	mov	r0, fp
 8010628:	b003      	add	sp, #12
 801062a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801062e:	bf00      	nop

08010630 <__gnu_unwind_get_pr_addr>:
 8010630:	2801      	cmp	r0, #1
 8010632:	d007      	beq.n	8010644 <__gnu_unwind_get_pr_addr+0x14>
 8010634:	2802      	cmp	r0, #2
 8010636:	d007      	beq.n	8010648 <__gnu_unwind_get_pr_addr+0x18>
 8010638:	4b04      	ldr	r3, [pc, #16]	; (801064c <__gnu_unwind_get_pr_addr+0x1c>)
 801063a:	2800      	cmp	r0, #0
 801063c:	bf0c      	ite	eq
 801063e:	4618      	moveq	r0, r3
 8010640:	2000      	movne	r0, #0
 8010642:	4770      	bx	lr
 8010644:	4802      	ldr	r0, [pc, #8]	; (8010650 <__gnu_unwind_get_pr_addr+0x20>)
 8010646:	4770      	bx	lr
 8010648:	4802      	ldr	r0, [pc, #8]	; (8010654 <__gnu_unwind_get_pr_addr+0x24>)
 801064a:	4770      	bx	lr
 801064c:	08010d3d 	.word	0x08010d3d
 8010650:	08010d41 	.word	0x08010d41
 8010654:	08010d45 	.word	0x08010d45

08010658 <get_eit_entry>:
 8010658:	b530      	push	{r4, r5, lr}
 801065a:	4b24      	ldr	r3, [pc, #144]	; (80106ec <get_eit_entry+0x94>)
 801065c:	b083      	sub	sp, #12
 801065e:	4604      	mov	r4, r0
 8010660:	1e8d      	subs	r5, r1, #2
 8010662:	b37b      	cbz	r3, 80106c4 <get_eit_entry+0x6c>
 8010664:	4628      	mov	r0, r5
 8010666:	a901      	add	r1, sp, #4
 8010668:	f3af 8000 	nop.w
 801066c:	b320      	cbz	r0, 80106b8 <get_eit_entry+0x60>
 801066e:	9901      	ldr	r1, [sp, #4]
 8010670:	462a      	mov	r2, r5
 8010672:	f7ff ff9f 	bl	80105b4 <search_EIT_table>
 8010676:	4605      	mov	r5, r0
 8010678:	b1f0      	cbz	r0, 80106b8 <get_eit_entry+0x60>
 801067a:	f7ff ff91 	bl	80105a0 <selfrel_offset31>
 801067e:	686b      	ldr	r3, [r5, #4]
 8010680:	64a0      	str	r0, [r4, #72]	; 0x48
 8010682:	2b01      	cmp	r3, #1
 8010684:	d012      	beq.n	80106ac <get_eit_entry+0x54>
 8010686:	2b00      	cmp	r3, #0
 8010688:	f105 0004 	add.w	r0, r5, #4
 801068c:	db20      	blt.n	80106d0 <get_eit_entry+0x78>
 801068e:	f7ff ff87 	bl	80105a0 <selfrel_offset31>
 8010692:	2300      	movs	r3, #0
 8010694:	64e0      	str	r0, [r4, #76]	; 0x4c
 8010696:	6523      	str	r3, [r4, #80]	; 0x50
 8010698:	6803      	ldr	r3, [r0, #0]
 801069a:	2b00      	cmp	r3, #0
 801069c:	db1c      	blt.n	80106d8 <get_eit_entry+0x80>
 801069e:	f7ff ff7f 	bl	80105a0 <selfrel_offset31>
 80106a2:	2300      	movs	r3, #0
 80106a4:	6120      	str	r0, [r4, #16]
 80106a6:	4618      	mov	r0, r3
 80106a8:	b003      	add	sp, #12
 80106aa:	bd30      	pop	{r4, r5, pc}
 80106ac:	2300      	movs	r3, #0
 80106ae:	6123      	str	r3, [r4, #16]
 80106b0:	2305      	movs	r3, #5
 80106b2:	4618      	mov	r0, r3
 80106b4:	b003      	add	sp, #12
 80106b6:	bd30      	pop	{r4, r5, pc}
 80106b8:	2300      	movs	r3, #0
 80106ba:	6123      	str	r3, [r4, #16]
 80106bc:	2309      	movs	r3, #9
 80106be:	4618      	mov	r0, r3
 80106c0:	b003      	add	sp, #12
 80106c2:	bd30      	pop	{r4, r5, pc}
 80106c4:	490a      	ldr	r1, [pc, #40]	; (80106f0 <get_eit_entry+0x98>)
 80106c6:	480b      	ldr	r0, [pc, #44]	; (80106f4 <get_eit_entry+0x9c>)
 80106c8:	1a09      	subs	r1, r1, r0
 80106ca:	10c9      	asrs	r1, r1, #3
 80106cc:	9101      	str	r1, [sp, #4]
 80106ce:	e7cf      	b.n	8010670 <get_eit_entry+0x18>
 80106d0:	2301      	movs	r3, #1
 80106d2:	64e0      	str	r0, [r4, #76]	; 0x4c
 80106d4:	6523      	str	r3, [r4, #80]	; 0x50
 80106d6:	e7df      	b.n	8010698 <get_eit_entry+0x40>
 80106d8:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80106dc:	f7ff ffa8 	bl	8010630 <__gnu_unwind_get_pr_addr>
 80106e0:	2800      	cmp	r0, #0
 80106e2:	6120      	str	r0, [r4, #16]
 80106e4:	bf0c      	ite	eq
 80106e6:	2309      	moveq	r3, #9
 80106e8:	2300      	movne	r3, #0
 80106ea:	e7dc      	b.n	80106a6 <get_eit_entry+0x4e>
 80106ec:	00000000 	.word	0x00000000
 80106f0:	0801ca68 	.word	0x0801ca68
 80106f4:	0801c9a0 	.word	0x0801c9a0

080106f8 <restore_non_core_regs>:
 80106f8:	6803      	ldr	r3, [r0, #0]
 80106fa:	07da      	lsls	r2, r3, #31
 80106fc:	b510      	push	{r4, lr}
 80106fe:	4604      	mov	r4, r0
 8010700:	d406      	bmi.n	8010710 <restore_non_core_regs+0x18>
 8010702:	079b      	lsls	r3, r3, #30
 8010704:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8010708:	d509      	bpl.n	801071e <restore_non_core_regs+0x26>
 801070a:	f000 fc85 	bl	8011018 <__gnu_Unwind_Restore_VFP_D>
 801070e:	6823      	ldr	r3, [r4, #0]
 8010710:	0759      	lsls	r1, r3, #29
 8010712:	d509      	bpl.n	8010728 <restore_non_core_regs+0x30>
 8010714:	071a      	lsls	r2, r3, #28
 8010716:	d50e      	bpl.n	8010736 <restore_non_core_regs+0x3e>
 8010718:	06db      	lsls	r3, r3, #27
 801071a:	d513      	bpl.n	8010744 <restore_non_core_regs+0x4c>
 801071c:	bd10      	pop	{r4, pc}
 801071e:	f000 fc73 	bl	8011008 <__gnu_Unwind_Restore_VFP>
 8010722:	6823      	ldr	r3, [r4, #0]
 8010724:	0759      	lsls	r1, r3, #29
 8010726:	d4f5      	bmi.n	8010714 <restore_non_core_regs+0x1c>
 8010728:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801072c:	f000 fc7c 	bl	8011028 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8010730:	6823      	ldr	r3, [r4, #0]
 8010732:	071a      	lsls	r2, r3, #28
 8010734:	d4f0      	bmi.n	8010718 <restore_non_core_regs+0x20>
 8010736:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 801073a:	f000 fc7d 	bl	8011038 <__gnu_Unwind_Restore_WMMXD>
 801073e:	6823      	ldr	r3, [r4, #0]
 8010740:	06db      	lsls	r3, r3, #27
 8010742:	d4eb      	bmi.n	801071c <restore_non_core_regs+0x24>
 8010744:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8010748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801074c:	f000 bcb8 	b.w	80110c0 <__gnu_Unwind_Restore_WMMXC>

08010750 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8010750:	6803      	ldr	r3, [r0, #0]
 8010752:	b10b      	cbz	r3, 8010758 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 8010754:	4418      	add	r0, r3
 8010756:	4770      	bx	lr
 8010758:	4618      	mov	r0, r3
 801075a:	4770      	bx	lr

0801075c <__gnu_unwind_24bit.isra.1>:
 801075c:	2009      	movs	r0, #9
 801075e:	4770      	bx	lr

08010760 <_Unwind_DebugHook>:
 8010760:	4770      	bx	lr
 8010762:	bf00      	nop

08010764 <unwind_phase2>:
 8010764:	b570      	push	{r4, r5, r6, lr}
 8010766:	4604      	mov	r4, r0
 8010768:	460d      	mov	r5, r1
 801076a:	e008      	b.n	801077e <unwind_phase2+0x1a>
 801076c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 801076e:	6163      	str	r3, [r4, #20]
 8010770:	2001      	movs	r0, #1
 8010772:	6923      	ldr	r3, [r4, #16]
 8010774:	4621      	mov	r1, r4
 8010776:	462a      	mov	r2, r5
 8010778:	4798      	blx	r3
 801077a:	2808      	cmp	r0, #8
 801077c:	d108      	bne.n	8010790 <unwind_phase2+0x2c>
 801077e:	4620      	mov	r0, r4
 8010780:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8010782:	f7ff ff69 	bl	8010658 <get_eit_entry>
 8010786:	4606      	mov	r6, r0
 8010788:	2800      	cmp	r0, #0
 801078a:	d0ef      	beq.n	801076c <unwind_phase2+0x8>
 801078c:	f7fa feab 	bl	800b4e6 <abort>
 8010790:	2807      	cmp	r0, #7
 8010792:	d1fb      	bne.n	801078c <unwind_phase2+0x28>
 8010794:	4630      	mov	r0, r6
 8010796:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8010798:	f7ff ffe2 	bl	8010760 <_Unwind_DebugHook>
 801079c:	1d28      	adds	r0, r5, #4
 801079e:	f000 fc27 	bl	8010ff0 <__restore_core_regs>
 80107a2:	bf00      	nop

080107a4 <unwind_phase2_forced>:
 80107a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107a8:	1d0c      	adds	r4, r1, #4
 80107aa:	4606      	mov	r6, r0
 80107ac:	4617      	mov	r7, r2
 80107ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80107b0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80107b4:	ad03      	add	r5, sp, #12
 80107b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80107b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80107ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80107bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80107be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80107c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80107c4:	ac02      	add	r4, sp, #8
 80107c6:	f04f 0e00 	mov.w	lr, #0
 80107ca:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80107ce:	f8d6 9018 	ldr.w	r9, [r6, #24]
 80107d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80107d6:	4630      	mov	r0, r6
 80107d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80107da:	f8c4 e000 	str.w	lr, [r4]
 80107de:	f7ff ff3b 	bl	8010658 <get_eit_entry>
 80107e2:	2f00      	cmp	r7, #0
 80107e4:	4605      	mov	r5, r0
 80107e6:	bf0c      	ite	eq
 80107e8:	2709      	moveq	r7, #9
 80107ea:	270a      	movne	r7, #10
 80107ec:	b17d      	cbz	r5, 801080e <unwind_phase2_forced+0x6a>
 80107ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80107f0:	f047 0110 	orr.w	r1, r7, #16
 80107f4:	e88d 0210 	stmia.w	sp, {r4, r9}
 80107f8:	2001      	movs	r0, #1
 80107fa:	6463      	str	r3, [r4, #68]	; 0x44
 80107fc:	4632      	mov	r2, r6
 80107fe:	4633      	mov	r3, r6
 8010800:	47c0      	blx	r8
 8010802:	bb78      	cbnz	r0, 8010864 <unwind_phase2_forced+0xc0>
 8010804:	4628      	mov	r0, r5
 8010806:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 801080a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801080e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010810:	6173      	str	r3, [r6, #20]
 8010812:	4621      	mov	r1, r4
 8010814:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010818:	a87a      	add	r0, sp, #488	; 0x1e8
 801081a:	f7fb f8d2 	bl	800b9c2 <memcpy>
 801081e:	6933      	ldr	r3, [r6, #16]
 8010820:	4631      	mov	r1, r6
 8010822:	aa7a      	add	r2, sp, #488	; 0x1e8
 8010824:	4638      	mov	r0, r7
 8010826:	4798      	blx	r3
 8010828:	9b88      	ldr	r3, [sp, #544]	; 0x220
 801082a:	4682      	mov	sl, r0
 801082c:	e88d 0210 	stmia.w	sp, {r4, r9}
 8010830:	4639      	mov	r1, r7
 8010832:	6463      	str	r3, [r4, #68]	; 0x44
 8010834:	2001      	movs	r0, #1
 8010836:	4632      	mov	r2, r6
 8010838:	4633      	mov	r3, r6
 801083a:	47c0      	blx	r8
 801083c:	b990      	cbnz	r0, 8010864 <unwind_phase2_forced+0xc0>
 801083e:	4620      	mov	r0, r4
 8010840:	a97a      	add	r1, sp, #488	; 0x1e8
 8010842:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010846:	f7fb f8bc 	bl	800b9c2 <memcpy>
 801084a:	f1ba 0f08 	cmp.w	sl, #8
 801084e:	d106      	bne.n	801085e <unwind_phase2_forced+0xba>
 8010850:	4630      	mov	r0, r6
 8010852:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010854:	f7ff ff00 	bl	8010658 <get_eit_entry>
 8010858:	2709      	movs	r7, #9
 801085a:	4605      	mov	r5, r0
 801085c:	e7c6      	b.n	80107ec <unwind_phase2_forced+0x48>
 801085e:	f1ba 0f07 	cmp.w	sl, #7
 8010862:	d004      	beq.n	801086e <unwind_phase2_forced+0xca>
 8010864:	2009      	movs	r0, #9
 8010866:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 801086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801086e:	4628      	mov	r0, r5
 8010870:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010872:	f7ff ff75 	bl	8010760 <_Unwind_DebugHook>
 8010876:	a803      	add	r0, sp, #12
 8010878:	f000 fbba 	bl	8010ff0 <__restore_core_regs>

0801087c <_Unwind_GetCFA>:
 801087c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801087e:	4770      	bx	lr

08010880 <__gnu_Unwind_RaiseException>:
 8010880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010882:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8010884:	640b      	str	r3, [r1, #64]	; 0x40
 8010886:	1d0e      	adds	r6, r1, #4
 8010888:	460f      	mov	r7, r1
 801088a:	4604      	mov	r4, r0
 801088c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801088e:	b0f9      	sub	sp, #484	; 0x1e4
 8010890:	ad01      	add	r5, sp, #4
 8010892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010894:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010898:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801089a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801089c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80108a0:	f04f 36ff 	mov.w	r6, #4294967295
 80108a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80108a8:	9600      	str	r6, [sp, #0]
 80108aa:	e006      	b.n	80108ba <__gnu_Unwind_RaiseException+0x3a>
 80108ac:	6923      	ldr	r3, [r4, #16]
 80108ae:	4621      	mov	r1, r4
 80108b0:	466a      	mov	r2, sp
 80108b2:	4798      	blx	r3
 80108b4:	2808      	cmp	r0, #8
 80108b6:	4605      	mov	r5, r0
 80108b8:	d108      	bne.n	80108cc <__gnu_Unwind_RaiseException+0x4c>
 80108ba:	4620      	mov	r0, r4
 80108bc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80108be:	f7ff fecb 	bl	8010658 <get_eit_entry>
 80108c2:	2800      	cmp	r0, #0
 80108c4:	d0f2      	beq.n	80108ac <__gnu_Unwind_RaiseException+0x2c>
 80108c6:	2009      	movs	r0, #9
 80108c8:	b079      	add	sp, #484	; 0x1e4
 80108ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108cc:	4668      	mov	r0, sp
 80108ce:	f7ff ff13 	bl	80106f8 <restore_non_core_regs>
 80108d2:	2d06      	cmp	r5, #6
 80108d4:	d1f7      	bne.n	80108c6 <__gnu_Unwind_RaiseException+0x46>
 80108d6:	4620      	mov	r0, r4
 80108d8:	4639      	mov	r1, r7
 80108da:	f7ff ff43 	bl	8010764 <unwind_phase2>
 80108de:	bf00      	nop

080108e0 <__gnu_Unwind_ForcedUnwind>:
 80108e0:	b430      	push	{r4, r5}
 80108e2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80108e4:	60c1      	str	r1, [r0, #12]
 80108e6:	6182      	str	r2, [r0, #24]
 80108e8:	4619      	mov	r1, r3
 80108ea:	641d      	str	r5, [r3, #64]	; 0x40
 80108ec:	2200      	movs	r2, #0
 80108ee:	bc30      	pop	{r4, r5}
 80108f0:	e758      	b.n	80107a4 <unwind_phase2_forced>
 80108f2:	bf00      	nop

080108f4 <__gnu_Unwind_Resume>:
 80108f4:	b570      	push	{r4, r5, r6, lr}
 80108f6:	68c6      	ldr	r6, [r0, #12]
 80108f8:	6943      	ldr	r3, [r0, #20]
 80108fa:	640b      	str	r3, [r1, #64]	; 0x40
 80108fc:	4604      	mov	r4, r0
 80108fe:	460d      	mov	r5, r1
 8010900:	b126      	cbz	r6, 801090c <__gnu_Unwind_Resume+0x18>
 8010902:	2201      	movs	r2, #1
 8010904:	f7ff ff4e 	bl	80107a4 <unwind_phase2_forced>
 8010908:	f7fa fded 	bl	800b4e6 <abort>
 801090c:	6903      	ldr	r3, [r0, #16]
 801090e:	4621      	mov	r1, r4
 8010910:	2002      	movs	r0, #2
 8010912:	462a      	mov	r2, r5
 8010914:	4798      	blx	r3
 8010916:	2807      	cmp	r0, #7
 8010918:	d007      	beq.n	801092a <__gnu_Unwind_Resume+0x36>
 801091a:	2808      	cmp	r0, #8
 801091c:	d103      	bne.n	8010926 <__gnu_Unwind_Resume+0x32>
 801091e:	4620      	mov	r0, r4
 8010920:	4629      	mov	r1, r5
 8010922:	f7ff ff1f 	bl	8010764 <unwind_phase2>
 8010926:	f7fa fdde 	bl	800b4e6 <abort>
 801092a:	4630      	mov	r0, r6
 801092c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801092e:	f7ff ff17 	bl	8010760 <_Unwind_DebugHook>
 8010932:	1d28      	adds	r0, r5, #4
 8010934:	f000 fb5c 	bl	8010ff0 <__restore_core_regs>

08010938 <__gnu_Unwind_Resume_or_Rethrow>:
 8010938:	68c2      	ldr	r2, [r0, #12]
 801093a:	b11a      	cbz	r2, 8010944 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 801093c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 801093e:	640a      	str	r2, [r1, #64]	; 0x40
 8010940:	2200      	movs	r2, #0
 8010942:	e72f      	b.n	80107a4 <unwind_phase2_forced>
 8010944:	e79c      	b.n	8010880 <__gnu_Unwind_RaiseException>
 8010946:	bf00      	nop

08010948 <_Unwind_Complete>:
 8010948:	4770      	bx	lr
 801094a:	bf00      	nop

0801094c <_Unwind_DeleteException>:
 801094c:	6883      	ldr	r3, [r0, #8]
 801094e:	b113      	cbz	r3, 8010956 <_Unwind_DeleteException+0xa>
 8010950:	4601      	mov	r1, r0
 8010952:	2001      	movs	r0, #1
 8010954:	4718      	bx	r3
 8010956:	4770      	bx	lr

08010958 <_Unwind_VRS_Get>:
 8010958:	b500      	push	{lr}
 801095a:	2904      	cmp	r1, #4
 801095c:	d807      	bhi.n	801096e <_Unwind_VRS_Get+0x16>
 801095e:	e8df f001 	tbb	[pc, r1]
 8010962:	0903      	.short	0x0903
 8010964:	0906      	.short	0x0906
 8010966:	09          	.byte	0x09
 8010967:	00          	.byte	0x00
 8010968:	b90b      	cbnz	r3, 801096e <_Unwind_VRS_Get+0x16>
 801096a:	2a0f      	cmp	r2, #15
 801096c:	d905      	bls.n	801097a <_Unwind_VRS_Get+0x22>
 801096e:	2002      	movs	r0, #2
 8010970:	f85d fb04 	ldr.w	pc, [sp], #4
 8010974:	2001      	movs	r0, #1
 8010976:	f85d fb04 	ldr.w	pc, [sp], #4
 801097a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801097e:	4618      	mov	r0, r3
 8010980:	6853      	ldr	r3, [r2, #4]
 8010982:	9a01      	ldr	r2, [sp, #4]
 8010984:	6013      	str	r3, [r2, #0]
 8010986:	f85d fb04 	ldr.w	pc, [sp], #4
 801098a:	bf00      	nop

0801098c <_Unwind_GetGR>:
 801098c:	b500      	push	{lr}
 801098e:	b085      	sub	sp, #20
 8010990:	460a      	mov	r2, r1
 8010992:	ab03      	add	r3, sp, #12
 8010994:	2100      	movs	r1, #0
 8010996:	9300      	str	r3, [sp, #0]
 8010998:	460b      	mov	r3, r1
 801099a:	f7ff ffdd 	bl	8010958 <_Unwind_VRS_Get>
 801099e:	9803      	ldr	r0, [sp, #12]
 80109a0:	b005      	add	sp, #20
 80109a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80109a6:	bf00      	nop

080109a8 <_Unwind_VRS_Set>:
 80109a8:	b500      	push	{lr}
 80109aa:	2904      	cmp	r1, #4
 80109ac:	d807      	bhi.n	80109be <_Unwind_VRS_Set+0x16>
 80109ae:	e8df f001 	tbb	[pc, r1]
 80109b2:	0903      	.short	0x0903
 80109b4:	0906      	.short	0x0906
 80109b6:	09          	.byte	0x09
 80109b7:	00          	.byte	0x00
 80109b8:	b90b      	cbnz	r3, 80109be <_Unwind_VRS_Set+0x16>
 80109ba:	2a0f      	cmp	r2, #15
 80109bc:	d905      	bls.n	80109ca <_Unwind_VRS_Set+0x22>
 80109be:	2002      	movs	r0, #2
 80109c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80109c4:	2001      	movs	r0, #1
 80109c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80109ca:	9901      	ldr	r1, [sp, #4]
 80109cc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80109d0:	6809      	ldr	r1, [r1, #0]
 80109d2:	6051      	str	r1, [r2, #4]
 80109d4:	4618      	mov	r0, r3
 80109d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80109da:	bf00      	nop

080109dc <_Unwind_SetGR>:
 80109dc:	b510      	push	{r4, lr}
 80109de:	b084      	sub	sp, #16
 80109e0:	ab04      	add	r3, sp, #16
 80109e2:	460c      	mov	r4, r1
 80109e4:	f843 2d04 	str.w	r2, [r3, #-4]!
 80109e8:	2100      	movs	r1, #0
 80109ea:	9300      	str	r3, [sp, #0]
 80109ec:	4622      	mov	r2, r4
 80109ee:	460b      	mov	r3, r1
 80109f0:	f7ff ffda 	bl	80109a8 <_Unwind_VRS_Set>
 80109f4:	b004      	add	sp, #16
 80109f6:	bd10      	pop	{r4, pc}

080109f8 <__gnu_Unwind_Backtrace>:
 80109f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109fa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80109fc:	6413      	str	r3, [r2, #64]	; 0x40
 80109fe:	1d15      	adds	r5, r2, #4
 8010a00:	4607      	mov	r7, r0
 8010a02:	460e      	mov	r6, r1
 8010a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a06:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8010a0a:	ac17      	add	r4, sp, #92	; 0x5c
 8010a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010a1a:	f04f 35ff 	mov.w	r5, #4294967295
 8010a1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010a22:	9516      	str	r5, [sp, #88]	; 0x58
 8010a24:	e010      	b.n	8010a48 <__gnu_Unwind_Backtrace+0x50>
 8010a26:	a816      	add	r0, sp, #88	; 0x58
 8010a28:	f7ff ffd8 	bl	80109dc <_Unwind_SetGR>
 8010a2c:	4631      	mov	r1, r6
 8010a2e:	a816      	add	r0, sp, #88	; 0x58
 8010a30:	47b8      	blx	r7
 8010a32:	4669      	mov	r1, sp
 8010a34:	aa16      	add	r2, sp, #88	; 0x58
 8010a36:	b978      	cbnz	r0, 8010a58 <__gnu_Unwind_Backtrace+0x60>
 8010a38:	9b04      	ldr	r3, [sp, #16]
 8010a3a:	2008      	movs	r0, #8
 8010a3c:	4798      	blx	r3
 8010a3e:	2805      	cmp	r0, #5
 8010a40:	4604      	mov	r4, r0
 8010a42:	d00a      	beq.n	8010a5a <__gnu_Unwind_Backtrace+0x62>
 8010a44:	2809      	cmp	r0, #9
 8010a46:	d007      	beq.n	8010a58 <__gnu_Unwind_Backtrace+0x60>
 8010a48:	9926      	ldr	r1, [sp, #152]	; 0x98
 8010a4a:	4668      	mov	r0, sp
 8010a4c:	f7ff fe04 	bl	8010658 <get_eit_entry>
 8010a50:	466a      	mov	r2, sp
 8010a52:	210c      	movs	r1, #12
 8010a54:	2800      	cmp	r0, #0
 8010a56:	d0e6      	beq.n	8010a26 <__gnu_Unwind_Backtrace+0x2e>
 8010a58:	2409      	movs	r4, #9
 8010a5a:	a816      	add	r0, sp, #88	; 0x58
 8010a5c:	f7ff fe4c 	bl	80106f8 <restore_non_core_regs>
 8010a60:	4620      	mov	r0, r4
 8010a62:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8010a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010a68 <__gnu_unwind_pr_common>:
 8010a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a6c:	460d      	mov	r5, r1
 8010a6e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8010a70:	b08b      	sub	sp, #44	; 0x2c
 8010a72:	1d0c      	adds	r4, r1, #4
 8010a74:	6809      	ldr	r1, [r1, #0]
 8010a76:	9107      	str	r1, [sp, #28]
 8010a78:	4690      	mov	r8, r2
 8010a7a:	9408      	str	r4, [sp, #32]
 8010a7c:	f000 0903 	and.w	r9, r0, #3
 8010a80:	461e      	mov	r6, r3
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d164      	bne.n	8010b50 <__gnu_unwind_pr_common+0xe8>
 8010a86:	0209      	lsls	r1, r1, #8
 8010a88:	2303      	movs	r3, #3
 8010a8a:	9107      	str	r1, [sp, #28]
 8010a8c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8010a90:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010a94:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8010a96:	f1b9 0f02 	cmp.w	r9, #2
 8010a9a:	bf08      	it	eq
 8010a9c:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8010a9e:	f013 0301 	ands.w	r3, r3, #1
 8010aa2:	d143      	bne.n	8010b2c <__gnu_unwind_pr_common+0xc4>
 8010aa4:	f000 0008 	and.w	r0, r0, #8
 8010aa8:	b2c2      	uxtb	r2, r0
 8010aaa:	9203      	str	r2, [sp, #12]
 8010aac:	9301      	str	r3, [sp, #4]
 8010aae:	6827      	ldr	r7, [r4, #0]
 8010ab0:	2f00      	cmp	r7, #0
 8010ab2:	d03d      	beq.n	8010b30 <__gnu_unwind_pr_common+0xc8>
 8010ab4:	2e02      	cmp	r6, #2
 8010ab6:	d047      	beq.n	8010b48 <__gnu_unwind_pr_common+0xe0>
 8010ab8:	8827      	ldrh	r7, [r4, #0]
 8010aba:	f8b4 a002 	ldrh.w	sl, [r4, #2]
 8010abe:	3404      	adds	r4, #4
 8010ac0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8010ac2:	f02a 0b01 	bic.w	fp, sl, #1
 8010ac6:	4640      	mov	r0, r8
 8010ac8:	210f      	movs	r1, #15
 8010aca:	449b      	add	fp, r3
 8010acc:	f7ff ff5e 	bl	801098c <_Unwind_GetGR>
 8010ad0:	4583      	cmp	fp, r0
 8010ad2:	d837      	bhi.n	8010b44 <__gnu_unwind_pr_common+0xdc>
 8010ad4:	f027 0301 	bic.w	r3, r7, #1
 8010ad8:	449b      	add	fp, r3
 8010ada:	4558      	cmp	r0, fp
 8010adc:	bf2c      	ite	cs
 8010ade:	2000      	movcs	r0, #0
 8010ae0:	2001      	movcc	r0, #1
 8010ae2:	f00a 0a01 	and.w	sl, sl, #1
 8010ae6:	f007 0701 	and.w	r7, r7, #1
 8010aea:	ea47 0a4a 	orr.w	sl, r7, sl, lsl #1
 8010aee:	f1ba 0f01 	cmp.w	sl, #1
 8010af2:	d043      	beq.n	8010b7c <__gnu_unwind_pr_common+0x114>
 8010af4:	d33a      	bcc.n	8010b6c <__gnu_unwind_pr_common+0x104>
 8010af6:	f1ba 0f02 	cmp.w	sl, #2
 8010afa:	d11f      	bne.n	8010b3c <__gnu_unwind_pr_common+0xd4>
 8010afc:	6823      	ldr	r3, [r4, #0]
 8010afe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010b02:	9202      	str	r2, [sp, #8]
 8010b04:	f1b9 0f00 	cmp.w	r9, #0
 8010b08:	d17b      	bne.n	8010c02 <__gnu_unwind_pr_common+0x19a>
 8010b0a:	b138      	cbz	r0, 8010b1c <__gnu_unwind_pr_common+0xb4>
 8010b0c:	9a03      	ldr	r2, [sp, #12]
 8010b0e:	2a00      	cmp	r2, #0
 8010b10:	f000 8083 	beq.w	8010c1a <__gnu_unwind_pr_common+0x1b2>
 8010b14:	9a02      	ldr	r2, [sp, #8]
 8010b16:	2a00      	cmp	r2, #0
 8010b18:	f000 80a6 	beq.w	8010c68 <__gnu_unwind_pr_common+0x200>
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	db7a      	blt.n	8010c16 <__gnu_unwind_pr_common+0x1ae>
 8010b20:	9b02      	ldr	r3, [sp, #8]
 8010b22:	f103 0a01 	add.w	sl, r3, #1
 8010b26:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8010b2a:	e7c0      	b.n	8010aae <__gnu_unwind_pr_common+0x46>
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	9301      	str	r3, [sp, #4]
 8010b30:	2e02      	cmp	r6, #2
 8010b32:	dd40      	ble.n	8010bb6 <__gnu_unwind_pr_common+0x14e>
 8010b34:	f7ff fe12 	bl	801075c <__gnu_unwind_24bit.isra.1>
 8010b38:	2800      	cmp	r0, #0
 8010b3a:	d042      	beq.n	8010bc2 <__gnu_unwind_pr_common+0x15a>
 8010b3c:	2009      	movs	r0, #9
 8010b3e:	b00b      	add	sp, #44	; 0x2c
 8010b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b44:	2000      	movs	r0, #0
 8010b46:	e7cc      	b.n	8010ae2 <__gnu_unwind_pr_common+0x7a>
 8010b48:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8010b4c:	3408      	adds	r4, #8
 8010b4e:	e7b7      	b.n	8010ac0 <__gnu_unwind_pr_common+0x58>
 8010b50:	2b02      	cmp	r3, #2
 8010b52:	dc9f      	bgt.n	8010a94 <__gnu_unwind_pr_common+0x2c>
 8010b54:	0c0b      	lsrs	r3, r1, #16
 8010b56:	b2df      	uxtb	r7, r3
 8010b58:	0409      	lsls	r1, r1, #16
 8010b5a:	2202      	movs	r2, #2
 8010b5c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8010b60:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8010b64:	9107      	str	r1, [sp, #28]
 8010b66:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8010b6a:	e793      	b.n	8010a94 <__gnu_unwind_pr_common+0x2c>
 8010b6c:	f1b9 0f00 	cmp.w	r9, #0
 8010b70:	d002      	beq.n	8010b78 <__gnu_unwind_pr_common+0x110>
 8010b72:	2800      	cmp	r0, #0
 8010b74:	f040 80ad 	bne.w	8010cd2 <__gnu_unwind_pr_common+0x26a>
 8010b78:	3404      	adds	r4, #4
 8010b7a:	e798      	b.n	8010aae <__gnu_unwind_pr_common+0x46>
 8010b7c:	f1b9 0f00 	cmp.w	r9, #0
 8010b80:	d126      	bne.n	8010bd0 <__gnu_unwind_pr_common+0x168>
 8010b82:	b1b0      	cbz	r0, 8010bb2 <__gnu_unwind_pr_common+0x14a>
 8010b84:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010b88:	0fd7      	lsrs	r7, r2, #31
 8010b8a:	1c9a      	adds	r2, r3, #2
 8010b8c:	d0d6      	beq.n	8010b3c <__gnu_unwind_pr_common+0xd4>
 8010b8e:	f105 0258 	add.w	r2, r5, #88	; 0x58
 8010b92:	3301      	adds	r3, #1
 8010b94:	9206      	str	r2, [sp, #24]
 8010b96:	f000 8092 	beq.w	8010cbe <__gnu_unwind_pr_common+0x256>
 8010b9a:	1d20      	adds	r0, r4, #4
 8010b9c:	f7ff fdd8 	bl	8010750 <_Unwind_decode_typeinfo_ptr.isra.0>
 8010ba0:	463a      	mov	r2, r7
 8010ba2:	4601      	mov	r1, r0
 8010ba4:	ab06      	add	r3, sp, #24
 8010ba6:	4628      	mov	r0, r5
 8010ba8:	f3af 8000 	nop.w
 8010bac:	2800      	cmp	r0, #0
 8010bae:	f040 80b5 	bne.w	8010d1c <__gnu_unwind_pr_common+0x2b4>
 8010bb2:	3408      	adds	r4, #8
 8010bb4:	e77b      	b.n	8010aae <__gnu_unwind_pr_common+0x46>
 8010bb6:	4640      	mov	r0, r8
 8010bb8:	a907      	add	r1, sp, #28
 8010bba:	f000 fb1b 	bl	80111f4 <__gnu_unwind_execute>
 8010bbe:	2800      	cmp	r0, #0
 8010bc0:	d1bc      	bne.n	8010b3c <__gnu_unwind_pr_common+0xd4>
 8010bc2:	9b01      	ldr	r3, [sp, #4]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d159      	bne.n	8010c7c <__gnu_unwind_pr_common+0x214>
 8010bc8:	2008      	movs	r0, #8
 8010bca:	b00b      	add	sp, #44	; 0x2c
 8010bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bd0:	4640      	mov	r0, r8
 8010bd2:	210d      	movs	r1, #13
 8010bd4:	6a2f      	ldr	r7, [r5, #32]
 8010bd6:	f7ff fed9 	bl	801098c <_Unwind_GetGR>
 8010bda:	4287      	cmp	r7, r0
 8010bdc:	d1e9      	bne.n	8010bb2 <__gnu_unwind_pr_common+0x14a>
 8010bde:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8010be0:	429c      	cmp	r4, r3
 8010be2:	d1e6      	bne.n	8010bb2 <__gnu_unwind_pr_common+0x14a>
 8010be4:	4620      	mov	r0, r4
 8010be6:	f7ff fcdb 	bl	80105a0 <selfrel_offset31>
 8010bea:	210f      	movs	r1, #15
 8010bec:	4602      	mov	r2, r0
 8010bee:	4640      	mov	r0, r8
 8010bf0:	f7ff fef4 	bl	80109dc <_Unwind_SetGR>
 8010bf4:	4640      	mov	r0, r8
 8010bf6:	462a      	mov	r2, r5
 8010bf8:	2100      	movs	r1, #0
 8010bfa:	f7ff feef 	bl	80109dc <_Unwind_SetGR>
 8010bfe:	2007      	movs	r0, #7
 8010c00:	e79d      	b.n	8010b3e <__gnu_unwind_pr_common+0xd6>
 8010c02:	4640      	mov	r0, r8
 8010c04:	210d      	movs	r1, #13
 8010c06:	6a2f      	ldr	r7, [r5, #32]
 8010c08:	f7ff fec0 	bl	801098c <_Unwind_GetGR>
 8010c0c:	4287      	cmp	r7, r0
 8010c0e:	d045      	beq.n	8010c9c <__gnu_unwind_pr_common+0x234>
 8010c10:	6823      	ldr	r3, [r4, #0]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	da84      	bge.n	8010b20 <__gnu_unwind_pr_common+0xb8>
 8010c16:	3404      	adds	r4, #4
 8010c18:	e782      	b.n	8010b20 <__gnu_unwind_pr_common+0xb8>
 8010c1a:	9b02      	ldr	r3, [sp, #8]
 8010c1c:	b323      	cbz	r3, 8010c68 <__gnu_unwind_pr_common+0x200>
 8010c1e:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8010c22:	9605      	str	r6, [sp, #20]
 8010c24:	f104 0a04 	add.w	sl, r4, #4
 8010c28:	9f03      	ldr	r7, [sp, #12]
 8010c2a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010c2e:	f8cd 9010 	str.w	r9, [sp, #16]
 8010c32:	461e      	mov	r6, r3
 8010c34:	e002      	b.n	8010c3c <__gnu_unwind_pr_common+0x1d4>
 8010c36:	45d9      	cmp	r9, fp
 8010c38:	464f      	mov	r7, r9
 8010c3a:	d015      	beq.n	8010c68 <__gnu_unwind_pr_common+0x200>
 8010c3c:	4650      	mov	r0, sl
 8010c3e:	9606      	str	r6, [sp, #24]
 8010c40:	f7ff fd86 	bl	8010750 <_Unwind_decode_typeinfo_ptr.isra.0>
 8010c44:	2200      	movs	r2, #0
 8010c46:	4601      	mov	r1, r0
 8010c48:	ab06      	add	r3, sp, #24
 8010c4a:	4628      	mov	r0, r5
 8010c4c:	f3af 8000 	nop.w
 8010c50:	f107 0901 	add.w	r9, r7, #1
 8010c54:	f10a 0a04 	add.w	sl, sl, #4
 8010c58:	2800      	cmp	r0, #0
 8010c5a:	d0ec      	beq.n	8010c36 <__gnu_unwind_pr_common+0x1ce>
 8010c5c:	9b02      	ldr	r3, [sp, #8]
 8010c5e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8010c62:	9e05      	ldr	r6, [sp, #20]
 8010c64:	429f      	cmp	r7, r3
 8010c66:	d1d3      	bne.n	8010c10 <__gnu_unwind_pr_common+0x1a8>
 8010c68:	4640      	mov	r0, r8
 8010c6a:	210d      	movs	r1, #13
 8010c6c:	f7ff fe8e 	bl	801098c <_Unwind_GetGR>
 8010c70:	9b06      	ldr	r3, [sp, #24]
 8010c72:	6228      	str	r0, [r5, #32]
 8010c74:	62ac      	str	r4, [r5, #40]	; 0x28
 8010c76:	626b      	str	r3, [r5, #36]	; 0x24
 8010c78:	2006      	movs	r0, #6
 8010c7a:	e760      	b.n	8010b3e <__gnu_unwind_pr_common+0xd6>
 8010c7c:	210f      	movs	r1, #15
 8010c7e:	4640      	mov	r0, r8
 8010c80:	f7ff fe84 	bl	801098c <_Unwind_GetGR>
 8010c84:	210e      	movs	r1, #14
 8010c86:	4602      	mov	r2, r0
 8010c88:	4640      	mov	r0, r8
 8010c8a:	f7ff fea7 	bl	80109dc <_Unwind_SetGR>
 8010c8e:	4640      	mov	r0, r8
 8010c90:	210f      	movs	r1, #15
 8010c92:	4a29      	ldr	r2, [pc, #164]	; (8010d38 <__gnu_unwind_pr_common+0x2d0>)
 8010c94:	f7ff fea2 	bl	80109dc <_Unwind_SetGR>
 8010c98:	2007      	movs	r0, #7
 8010c9a:	e750      	b.n	8010b3e <__gnu_unwind_pr_common+0xd6>
 8010c9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8010c9e:	429c      	cmp	r4, r3
 8010ca0:	d1b6      	bne.n	8010c10 <__gnu_unwind_pr_common+0x1a8>
 8010ca2:	2204      	movs	r2, #4
 8010ca4:	2700      	movs	r7, #0
 8010ca6:	18a3      	adds	r3, r4, r2
 8010ca8:	9902      	ldr	r1, [sp, #8]
 8010caa:	62a9      	str	r1, [r5, #40]	; 0x28
 8010cac:	62ef      	str	r7, [r5, #44]	; 0x2c
 8010cae:	632a      	str	r2, [r5, #48]	; 0x30
 8010cb0:	636b      	str	r3, [r5, #52]	; 0x34
 8010cb2:	6823      	ldr	r3, [r4, #0]
 8010cb4:	42bb      	cmp	r3, r7
 8010cb6:	db1f      	blt.n	8010cf8 <__gnu_unwind_pr_common+0x290>
 8010cb8:	2301      	movs	r3, #1
 8010cba:	9301      	str	r3, [sp, #4]
 8010cbc:	e730      	b.n	8010b20 <__gnu_unwind_pr_common+0xb8>
 8010cbe:	4640      	mov	r0, r8
 8010cc0:	210d      	movs	r1, #13
 8010cc2:	f7ff fe63 	bl	801098c <_Unwind_GetGR>
 8010cc6:	6228      	str	r0, [r5, #32]
 8010cc8:	9b06      	ldr	r3, [sp, #24]
 8010cca:	626b      	str	r3, [r5, #36]	; 0x24
 8010ccc:	62ac      	str	r4, [r5, #40]	; 0x28
 8010cce:	2006      	movs	r0, #6
 8010cd0:	e735      	b.n	8010b3e <__gnu_unwind_pr_common+0xd6>
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	f7ff fc64 	bl	80105a0 <selfrel_offset31>
 8010cd8:	3404      	adds	r4, #4
 8010cda:	4606      	mov	r6, r0
 8010cdc:	63ac      	str	r4, [r5, #56]	; 0x38
 8010cde:	4628      	mov	r0, r5
 8010ce0:	f3af 8000 	nop.w
 8010ce4:	2800      	cmp	r0, #0
 8010ce6:	f43f af29 	beq.w	8010b3c <__gnu_unwind_pr_common+0xd4>
 8010cea:	4640      	mov	r0, r8
 8010cec:	4632      	mov	r2, r6
 8010cee:	210f      	movs	r1, #15
 8010cf0:	f7ff fe74 	bl	80109dc <_Unwind_SetGR>
 8010cf4:	2007      	movs	r0, #7
 8010cf6:	e722      	b.n	8010b3e <__gnu_unwind_pr_common+0xd6>
 8010cf8:	4608      	mov	r0, r1
 8010cfa:	3001      	adds	r0, #1
 8010cfc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8010d00:	f7ff fc4e 	bl	80105a0 <selfrel_offset31>
 8010d04:	210f      	movs	r1, #15
 8010d06:	4602      	mov	r2, r0
 8010d08:	4640      	mov	r0, r8
 8010d0a:	f7ff fe67 	bl	80109dc <_Unwind_SetGR>
 8010d0e:	4640      	mov	r0, r8
 8010d10:	4639      	mov	r1, r7
 8010d12:	462a      	mov	r2, r5
 8010d14:	f7ff fe62 	bl	80109dc <_Unwind_SetGR>
 8010d18:	2007      	movs	r0, #7
 8010d1a:	e710      	b.n	8010b3e <__gnu_unwind_pr_common+0xd6>
 8010d1c:	4607      	mov	r7, r0
 8010d1e:	210d      	movs	r1, #13
 8010d20:	4640      	mov	r0, r8
 8010d22:	f7ff fe33 	bl	801098c <_Unwind_GetGR>
 8010d26:	2f02      	cmp	r7, #2
 8010d28:	6228      	str	r0, [r5, #32]
 8010d2a:	d1cd      	bne.n	8010cc8 <__gnu_unwind_pr_common+0x260>
 8010d2c:	462b      	mov	r3, r5
 8010d2e:	9a06      	ldr	r2, [sp, #24]
 8010d30:	f843 2f2c 	str.w	r2, [r3, #44]!
 8010d34:	626b      	str	r3, [r5, #36]	; 0x24
 8010d36:	e7c9      	b.n	8010ccc <__gnu_unwind_pr_common+0x264>
 8010d38:	00000000 	.word	0x00000000

08010d3c <__aeabi_unwind_cpp_pr0>:
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	e693      	b.n	8010a68 <__gnu_unwind_pr_common>

08010d40 <__aeabi_unwind_cpp_pr1>:
 8010d40:	2301      	movs	r3, #1
 8010d42:	e691      	b.n	8010a68 <__gnu_unwind_pr_common>

08010d44 <__aeabi_unwind_cpp_pr2>:
 8010d44:	2302      	movs	r3, #2
 8010d46:	e68f      	b.n	8010a68 <__gnu_unwind_pr_common>

08010d48 <_Unwind_VRS_Pop>:
 8010d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d4a:	4605      	mov	r5, r0
 8010d4c:	b0c5      	sub	sp, #276	; 0x114
 8010d4e:	2904      	cmp	r1, #4
 8010d50:	d80c      	bhi.n	8010d6c <_Unwind_VRS_Pop+0x24>
 8010d52:	e8df f001 	tbb	[pc, r1]
 8010d56:	0356      	.short	0x0356
 8010d58:	300b      	.short	0x300b
 8010d5a:	0e          	.byte	0x0e
 8010d5b:	00          	.byte	0x00
 8010d5c:	2b01      	cmp	r3, #1
 8010d5e:	ea4f 4412 	mov.w	r4, r2, lsr #16
 8010d62:	b296      	uxth	r6, r2
 8010d64:	d065      	beq.n	8010e32 <_Unwind_VRS_Pop+0xea>
 8010d66:	2b05      	cmp	r3, #5
 8010d68:	f000 8084 	beq.w	8010e74 <_Unwind_VRS_Pop+0x12c>
 8010d6c:	2002      	movs	r0, #2
 8010d6e:	b045      	add	sp, #276	; 0x114
 8010d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d1fa      	bne.n	8010d6c <_Unwind_VRS_Pop+0x24>
 8010d76:	2a10      	cmp	r2, #16
 8010d78:	d8f8      	bhi.n	8010d6c <_Unwind_VRS_Pop+0x24>
 8010d7a:	682b      	ldr	r3, [r5, #0]
 8010d7c:	06dc      	lsls	r4, r3, #27
 8010d7e:	f100 80eb 	bmi.w	8010f58 <_Unwind_VRS_Pop+0x210>
 8010d82:	ae22      	add	r6, sp, #136	; 0x88
 8010d84:	4630      	mov	r0, r6
 8010d86:	9201      	str	r2, [sp, #4]
 8010d88:	f000 f9a4 	bl	80110d4 <__gnu_Unwind_Save_WMMXC>
 8010d8c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8010d8e:	9a01      	ldr	r2, [sp, #4]
 8010d90:	2300      	movs	r3, #0
 8010d92:	2401      	movs	r4, #1
 8010d94:	fa04 f103 	lsl.w	r1, r4, r3
 8010d98:	4211      	tst	r1, r2
 8010d9a:	d003      	beq.n	8010da4 <_Unwind_VRS_Pop+0x5c>
 8010d9c:	6801      	ldr	r1, [r0, #0]
 8010d9e:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8010da2:	3004      	adds	r0, #4
 8010da4:	3301      	adds	r3, #1
 8010da6:	2b04      	cmp	r3, #4
 8010da8:	d1f4      	bne.n	8010d94 <_Unwind_VRS_Pop+0x4c>
 8010daa:	63a8      	str	r0, [r5, #56]	; 0x38
 8010dac:	4630      	mov	r0, r6
 8010dae:	f000 f987 	bl	80110c0 <__gnu_Unwind_Restore_WMMXC>
 8010db2:	2000      	movs	r0, #0
 8010db4:	e7db      	b.n	8010d6e <_Unwind_VRS_Pop+0x26>
 8010db6:	2b03      	cmp	r3, #3
 8010db8:	d1d8      	bne.n	8010d6c <_Unwind_VRS_Pop+0x24>
 8010dba:	0c14      	lsrs	r4, r2, #16
 8010dbc:	b297      	uxth	r7, r2
 8010dbe:	193b      	adds	r3, r7, r4
 8010dc0:	2b10      	cmp	r3, #16
 8010dc2:	d8d3      	bhi.n	8010d6c <_Unwind_VRS_Pop+0x24>
 8010dc4:	682b      	ldr	r3, [r5, #0]
 8010dc6:	071e      	lsls	r6, r3, #28
 8010dc8:	f100 80e6 	bmi.w	8010f98 <_Unwind_VRS_Pop+0x250>
 8010dcc:	ae22      	add	r6, sp, #136	; 0x88
 8010dce:	4630      	mov	r0, r6
 8010dd0:	007f      	lsls	r7, r7, #1
 8010dd2:	f000 f953 	bl	801107c <__gnu_Unwind_Save_WMMXD>
 8010dd6:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 8010dda:	1e7b      	subs	r3, r7, #1
 8010ddc:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8010dde:	b157      	cbz	r7, 8010df6 <_Unwind_VRS_Pop+0xae>
 8010de0:	3a04      	subs	r2, #4
 8010de2:	4621      	mov	r1, r4
 8010de4:	f851 0b04 	ldr.w	r0, [r1], #4
 8010de8:	f842 0f04 	str.w	r0, [r2, #4]!
 8010dec:	3b01      	subs	r3, #1
 8010dee:	1c58      	adds	r0, r3, #1
 8010df0:	d1f8      	bne.n	8010de4 <_Unwind_VRS_Pop+0x9c>
 8010df2:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8010df6:	4630      	mov	r0, r6
 8010df8:	63ac      	str	r4, [r5, #56]	; 0x38
 8010dfa:	f000 f91d 	bl	8011038 <__gnu_Unwind_Restore_WMMXD>
 8010dfe:	2000      	movs	r0, #0
 8010e00:	e7b5      	b.n	8010d6e <_Unwind_VRS_Pop+0x26>
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d1b2      	bne.n	8010d6c <_Unwind_VRS_Pop+0x24>
 8010e06:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8010e08:	b297      	uxth	r7, r2
 8010e0a:	1d28      	adds	r0, r5, #4
 8010e0c:	2601      	movs	r6, #1
 8010e0e:	fa06 f103 	lsl.w	r1, r6, r3
 8010e12:	4239      	tst	r1, r7
 8010e14:	f103 0301 	add.w	r3, r3, #1
 8010e18:	d002      	beq.n	8010e20 <_Unwind_VRS_Pop+0xd8>
 8010e1a:	6821      	ldr	r1, [r4, #0]
 8010e1c:	6001      	str	r1, [r0, #0]
 8010e1e:	3404      	adds	r4, #4
 8010e20:	2b10      	cmp	r3, #16
 8010e22:	f100 0004 	add.w	r0, r0, #4
 8010e26:	d1f2      	bne.n	8010e0e <_Unwind_VRS_Pop+0xc6>
 8010e28:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8010e2c:	d120      	bne.n	8010e70 <_Unwind_VRS_Pop+0x128>
 8010e2e:	63ac      	str	r4, [r5, #56]	; 0x38
 8010e30:	e79d      	b.n	8010d6e <_Unwind_VRS_Pop+0x26>
 8010e32:	1932      	adds	r2, r6, r4
 8010e34:	2a10      	cmp	r2, #16
 8010e36:	d899      	bhi.n	8010d6c <_Unwind_VRS_Pop+0x24>
 8010e38:	2c0f      	cmp	r4, #15
 8010e3a:	d897      	bhi.n	8010d6c <_Unwind_VRS_Pop+0x24>
 8010e3c:	6829      	ldr	r1, [r5, #0]
 8010e3e:	07c8      	lsls	r0, r1, #31
 8010e40:	f04f 0700 	mov.w	r7, #0
 8010e44:	d455      	bmi.n	8010ef2 <_Unwind_VRS_Pop+0x1aa>
 8010e46:	a822      	add	r0, sp, #136	; 0x88
 8010e48:	9301      	str	r3, [sp, #4]
 8010e4a:	f000 f8e1 	bl	8011010 <__gnu_Unwind_Save_VFP>
 8010e4e:	9b01      	ldr	r3, [sp, #4]
 8010e50:	e019      	b.n	8010e86 <_Unwind_VRS_Pop+0x13e>
 8010e52:	4608      	mov	r0, r1
 8010e54:	4637      	mov	r7, r6
 8010e56:	2b01      	cmp	r3, #1
 8010e58:	f000 8098 	beq.w	8010f8c <_Unwind_VRS_Pop+0x244>
 8010e5c:	2c0f      	cmp	r4, #15
 8010e5e:	63a8      	str	r0, [r5, #56]	; 0x38
 8010e60:	d802      	bhi.n	8010e68 <_Unwind_VRS_Pop+0x120>
 8010e62:	a822      	add	r0, sp, #136	; 0x88
 8010e64:	f000 f8d8 	bl	8011018 <__gnu_Unwind_Restore_VFP_D>
 8010e68:	b117      	cbz	r7, 8010e70 <_Unwind_VRS_Pop+0x128>
 8010e6a:	a802      	add	r0, sp, #8
 8010e6c:	f000 f8dc 	bl	8011028 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8010e70:	2000      	movs	r0, #0
 8010e72:	e77c      	b.n	8010d6e <_Unwind_VRS_Pop+0x26>
 8010e74:	1937      	adds	r7, r6, r4
 8010e76:	2f20      	cmp	r7, #32
 8010e78:	f63f af78 	bhi.w	8010d6c <_Unwind_VRS_Pop+0x24>
 8010e7c:	2c0f      	cmp	r4, #15
 8010e7e:	d930      	bls.n	8010ee2 <_Unwind_VRS_Pop+0x19a>
 8010e80:	4637      	mov	r7, r6
 8010e82:	2e00      	cmp	r6, #0
 8010e84:	d145      	bne.n	8010f12 <_Unwind_VRS_Pop+0x1ca>
 8010e86:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8010e88:	4632      	mov	r2, r6
 8010e8a:	2e00      	cmp	r6, #0
 8010e8c:	d0e1      	beq.n	8010e52 <_Unwind_VRS_Pop+0x10a>
 8010e8e:	2700      	movs	r7, #0
 8010e90:	a844      	add	r0, sp, #272	; 0x110
 8010e92:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8010e96:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8010e9a:	f10c 32ff 	add.w	r2, ip, #4294967295
 8010e9e:	388c      	subs	r0, #140	; 0x8c
 8010ea0:	468e      	mov	lr, r1
 8010ea2:	f85e 6b04 	ldr.w	r6, [lr], #4
 8010ea6:	f840 6f04 	str.w	r6, [r0, #4]!
 8010eaa:	3a01      	subs	r2, #1
 8010eac:	1c56      	adds	r6, r2, #1
 8010eae:	d1f8      	bne.n	8010ea2 <_Unwind_VRS_Pop+0x15a>
 8010eb0:	eb01 008c 	add.w	r0, r1, ip, lsl #2
 8010eb4:	2f00      	cmp	r7, #0
 8010eb6:	d0ce      	beq.n	8010e56 <_Unwind_VRS_Pop+0x10e>
 8010eb8:	2c10      	cmp	r4, #16
 8010eba:	4622      	mov	r2, r4
 8010ebc:	a944      	add	r1, sp, #272	; 0x110
 8010ebe:	bf38      	it	cc
 8010ec0:	2210      	movcc	r2, #16
 8010ec2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8010ec6:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8010eca:	4601      	mov	r1, r0
 8010ecc:	0078      	lsls	r0, r7, #1
 8010ece:	3a04      	subs	r2, #4
 8010ed0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8010ed4:	f851 6b04 	ldr.w	r6, [r1], #4
 8010ed8:	f842 6f04 	str.w	r6, [r2, #4]!
 8010edc:	4281      	cmp	r1, r0
 8010ede:	d1f9      	bne.n	8010ed4 <_Unwind_VRS_Pop+0x18c>
 8010ee0:	e7b9      	b.n	8010e56 <_Unwind_VRS_Pop+0x10e>
 8010ee2:	2f10      	cmp	r7, #16
 8010ee4:	d942      	bls.n	8010f6c <_Unwind_VRS_Pop+0x224>
 8010ee6:	682a      	ldr	r2, [r5, #0]
 8010ee8:	07d0      	lsls	r0, r2, #31
 8010eea:	f1a7 0710 	sub.w	r7, r7, #16
 8010eee:	4611      	mov	r1, r2
 8010ef0:	d510      	bpl.n	8010f14 <_Unwind_VRS_Pop+0x1cc>
 8010ef2:	f021 0201 	bic.w	r2, r1, #1
 8010ef6:	2b05      	cmp	r3, #5
 8010ef8:	602a      	str	r2, [r5, #0]
 8010efa:	9301      	str	r3, [sp, #4]
 8010efc:	4628      	mov	r0, r5
 8010efe:	d05b      	beq.n	8010fb8 <_Unwind_VRS_Pop+0x270>
 8010f00:	f021 0103 	bic.w	r1, r1, #3
 8010f04:	f840 1b48 	str.w	r1, [r0], #72
 8010f08:	f000 f882 	bl	8011010 <__gnu_Unwind_Save_VFP>
 8010f0c:	9b01      	ldr	r3, [sp, #4]
 8010f0e:	2f00      	cmp	r7, #0
 8010f10:	d04a      	beq.n	8010fa8 <_Unwind_VRS_Pop+0x260>
 8010f12:	682a      	ldr	r2, [r5, #0]
 8010f14:	0751      	lsls	r1, r2, #29
 8010f16:	d45b      	bmi.n	8010fd0 <_Unwind_VRS_Pop+0x288>
 8010f18:	2b01      	cmp	r3, #1
 8010f1a:	d063      	beq.n	8010fe4 <_Unwind_VRS_Pop+0x29c>
 8010f1c:	2c0f      	cmp	r4, #15
 8010f1e:	d804      	bhi.n	8010f2a <_Unwind_VRS_Pop+0x1e2>
 8010f20:	a822      	add	r0, sp, #136	; 0x88
 8010f22:	9301      	str	r3, [sp, #4]
 8010f24:	f000 f87c 	bl	8011020 <__gnu_Unwind_Save_VFP_D>
 8010f28:	9b01      	ldr	r3, [sp, #4]
 8010f2a:	2f00      	cmp	r7, #0
 8010f2c:	d0ab      	beq.n	8010e86 <_Unwind_VRS_Pop+0x13e>
 8010f2e:	a802      	add	r0, sp, #8
 8010f30:	9301      	str	r3, [sp, #4]
 8010f32:	f000 f87d 	bl	8011030 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8010f36:	9b01      	ldr	r3, [sp, #4]
 8010f38:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8010f3a:	f1c4 0210 	rsb	r2, r4, #16
 8010f3e:	2a00      	cmp	r2, #0
 8010f40:	dca6      	bgt.n	8010e90 <_Unwind_VRS_Pop+0x148>
 8010f42:	2c10      	cmp	r4, #16
 8010f44:	4622      	mov	r2, r4
 8010f46:	a844      	add	r0, sp, #272	; 0x110
 8010f48:	bf38      	it	cc
 8010f4a:	2210      	movcc	r2, #16
 8010f4c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8010f50:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8010f54:	0078      	lsls	r0, r7, #1
 8010f56:	e7ba      	b.n	8010ece <_Unwind_VRS_Pop+0x186>
 8010f58:	f023 0310 	bic.w	r3, r3, #16
 8010f5c:	602b      	str	r3, [r5, #0]
 8010f5e:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
 8010f62:	9201      	str	r2, [sp, #4]
 8010f64:	f000 f8b6 	bl	80110d4 <__gnu_Unwind_Save_WMMXC>
 8010f68:	9a01      	ldr	r2, [sp, #4]
 8010f6a:	e70a      	b.n	8010d82 <_Unwind_VRS_Pop+0x3a>
 8010f6c:	6829      	ldr	r1, [r5, #0]
 8010f6e:	07c8      	lsls	r0, r1, #31
 8010f70:	d51d      	bpl.n	8010fae <_Unwind_VRS_Pop+0x266>
 8010f72:	f021 0201 	bic.w	r2, r1, #1
 8010f76:	4628      	mov	r0, r5
 8010f78:	f042 0202 	orr.w	r2, r2, #2
 8010f7c:	f840 2b48 	str.w	r2, [r0], #72
 8010f80:	9301      	str	r3, [sp, #4]
 8010f82:	2700      	movs	r7, #0
 8010f84:	f000 f84c 	bl	8011020 <__gnu_Unwind_Save_VFP_D>
 8010f88:	9b01      	ldr	r3, [sp, #4]
 8010f8a:	e7c9      	b.n	8010f20 <_Unwind_VRS_Pop+0x1d8>
 8010f8c:	3004      	adds	r0, #4
 8010f8e:	63a8      	str	r0, [r5, #56]	; 0x38
 8010f90:	a822      	add	r0, sp, #136	; 0x88
 8010f92:	f000 f839 	bl	8011008 <__gnu_Unwind_Restore_VFP>
 8010f96:	e76b      	b.n	8010e70 <_Unwind_VRS_Pop+0x128>
 8010f98:	f023 0308 	bic.w	r3, r3, #8
 8010f9c:	602b      	str	r3, [r5, #0]
 8010f9e:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 8010fa2:	f000 f86b 	bl	801107c <__gnu_Unwind_Save_WMMXD>
 8010fa6:	e711      	b.n	8010dcc <_Unwind_VRS_Pop+0x84>
 8010fa8:	2b01      	cmp	r3, #1
 8010faa:	f43f af4c 	beq.w	8010e46 <_Unwind_VRS_Pop+0xfe>
 8010fae:	2c0f      	cmp	r4, #15
 8010fb0:	bf98      	it	ls
 8010fb2:	2700      	movls	r7, #0
 8010fb4:	d9b4      	bls.n	8010f20 <_Unwind_VRS_Pop+0x1d8>
 8010fb6:	e766      	b.n	8010e86 <_Unwind_VRS_Pop+0x13e>
 8010fb8:	f042 0202 	orr.w	r2, r2, #2
 8010fbc:	f840 2b48 	str.w	r2, [r0], #72
 8010fc0:	f000 f82e 	bl	8011020 <__gnu_Unwind_Save_VFP_D>
 8010fc4:	9b01      	ldr	r3, [sp, #4]
 8010fc6:	2f00      	cmp	r7, #0
 8010fc8:	d0aa      	beq.n	8010f20 <_Unwind_VRS_Pop+0x1d8>
 8010fca:	682a      	ldr	r2, [r5, #0]
 8010fcc:	0751      	lsls	r1, r2, #29
 8010fce:	d5a5      	bpl.n	8010f1c <_Unwind_VRS_Pop+0x1d4>
 8010fd0:	4628      	mov	r0, r5
 8010fd2:	f022 0204 	bic.w	r2, r2, #4
 8010fd6:	f840 2bd0 	str.w	r2, [r0], #208
 8010fda:	9301      	str	r3, [sp, #4]
 8010fdc:	f000 f828 	bl	8011030 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8010fe0:	9b01      	ldr	r3, [sp, #4]
 8010fe2:	e799      	b.n	8010f18 <_Unwind_VRS_Pop+0x1d0>
 8010fe4:	a822      	add	r0, sp, #136	; 0x88
 8010fe6:	9301      	str	r3, [sp, #4]
 8010fe8:	f000 f812 	bl	8011010 <__gnu_Unwind_Save_VFP>
 8010fec:	9b01      	ldr	r3, [sp, #4]
 8010fee:	e7a3      	b.n	8010f38 <_Unwind_VRS_Pop+0x1f0>

08010ff0 <__restore_core_regs>:
 8010ff0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8010ff4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8010ff8:	469c      	mov	ip, r3
 8010ffa:	46a6      	mov	lr, r4
 8010ffc:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8011000:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8011004:	46e5      	mov	sp, ip
 8011006:	bd00      	pop	{pc}

08011008 <__gnu_Unwind_Restore_VFP>:
 8011008:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 801100c:	4770      	bx	lr
 801100e:	bf00      	nop

08011010 <__gnu_Unwind_Save_VFP>:
 8011010:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8011014:	4770      	bx	lr
 8011016:	bf00      	nop

08011018 <__gnu_Unwind_Restore_VFP_D>:
 8011018:	ec90 0b20 	vldmia	r0, {d0-d15}
 801101c:	4770      	bx	lr
 801101e:	bf00      	nop

08011020 <__gnu_Unwind_Save_VFP_D>:
 8011020:	ec80 0b20 	vstmia	r0, {d0-d15}
 8011024:	4770      	bx	lr
 8011026:	bf00      	nop

08011028 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8011028:	ecd0 0b20 	vldmia	r0, {d16-d31}
 801102c:	4770      	bx	lr
 801102e:	bf00      	nop

08011030 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8011030:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8011034:	4770      	bx	lr
 8011036:	bf00      	nop

08011038 <__gnu_Unwind_Restore_WMMXD>:
 8011038:	ecf0 0102 	ldfe	f0, [r0], #8
 801103c:	ecf0 1102 	ldfe	f1, [r0], #8
 8011040:	ecf0 2102 	ldfe	f2, [r0], #8
 8011044:	ecf0 3102 	ldfe	f3, [r0], #8
 8011048:	ecf0 4102 	ldfe	f4, [r0], #8
 801104c:	ecf0 5102 	ldfe	f5, [r0], #8
 8011050:	ecf0 6102 	ldfe	f6, [r0], #8
 8011054:	ecf0 7102 	ldfe	f7, [r0], #8
 8011058:	ecf0 8102 	ldfp	f0, [r0], #8
 801105c:	ecf0 9102 	ldfp	f1, [r0], #8
 8011060:	ecf0 a102 	ldfp	f2, [r0], #8
 8011064:	ecf0 b102 	ldfp	f3, [r0], #8
 8011068:	ecf0 c102 	ldfp	f4, [r0], #8
 801106c:	ecf0 d102 	ldfp	f5, [r0], #8
 8011070:	ecf0 e102 	ldfp	f6, [r0], #8
 8011074:	ecf0 f102 	ldfp	f7, [r0], #8
 8011078:	4770      	bx	lr
 801107a:	bf00      	nop

0801107c <__gnu_Unwind_Save_WMMXD>:
 801107c:	ece0 0102 	stfe	f0, [r0], #8
 8011080:	ece0 1102 	stfe	f1, [r0], #8
 8011084:	ece0 2102 	stfe	f2, [r0], #8
 8011088:	ece0 3102 	stfe	f3, [r0], #8
 801108c:	ece0 4102 	stfe	f4, [r0], #8
 8011090:	ece0 5102 	stfe	f5, [r0], #8
 8011094:	ece0 6102 	stfe	f6, [r0], #8
 8011098:	ece0 7102 	stfe	f7, [r0], #8
 801109c:	ece0 8102 	stfp	f0, [r0], #8
 80110a0:	ece0 9102 	stfp	f1, [r0], #8
 80110a4:	ece0 a102 	stfp	f2, [r0], #8
 80110a8:	ece0 b102 	stfp	f3, [r0], #8
 80110ac:	ece0 c102 	stfp	f4, [r0], #8
 80110b0:	ece0 d102 	stfp	f5, [r0], #8
 80110b4:	ece0 e102 	stfp	f6, [r0], #8
 80110b8:	ece0 f102 	stfp	f7, [r0], #8
 80110bc:	4770      	bx	lr
 80110be:	bf00      	nop

080110c0 <__gnu_Unwind_Restore_WMMXC>:
 80110c0:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80110c4:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80110c8:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80110cc:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80110d0:	4770      	bx	lr
 80110d2:	bf00      	nop

080110d4 <__gnu_Unwind_Save_WMMXC>:
 80110d4:	fca0 8101 	stc2	1, cr8, [r0], #4
 80110d8:	fca0 9101 	stc2	1, cr9, [r0], #4
 80110dc:	fca0 a101 	stc2	1, cr10, [r0], #4
 80110e0:	fca0 b101 	stc2	1, cr11, [r0], #4
 80110e4:	4770      	bx	lr
 80110e6:	bf00      	nop

080110e8 <_Unwind_RaiseException>:
 80110e8:	46ec      	mov	ip, sp
 80110ea:	b500      	push	{lr}
 80110ec:	e92d 5000 	stmdb	sp!, {ip, lr}
 80110f0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80110f4:	f04f 0300 	mov.w	r3, #0
 80110f8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80110fc:	a901      	add	r1, sp, #4
 80110fe:	f7ff fbbf 	bl	8010880 <__gnu_Unwind_RaiseException>
 8011102:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8011106:	b012      	add	sp, #72	; 0x48
 8011108:	4770      	bx	lr
 801110a:	bf00      	nop

0801110c <_Unwind_Resume>:
 801110c:	46ec      	mov	ip, sp
 801110e:	b500      	push	{lr}
 8011110:	e92d 5000 	stmdb	sp!, {ip, lr}
 8011114:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8011118:	f04f 0300 	mov.w	r3, #0
 801111c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8011120:	a901      	add	r1, sp, #4
 8011122:	f7ff fbe7 	bl	80108f4 <__gnu_Unwind_Resume>
 8011126:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 801112a:	b012      	add	sp, #72	; 0x48
 801112c:	4770      	bx	lr
 801112e:	bf00      	nop

08011130 <_Unwind_Resume_or_Rethrow>:
 8011130:	46ec      	mov	ip, sp
 8011132:	b500      	push	{lr}
 8011134:	e92d 5000 	stmdb	sp!, {ip, lr}
 8011138:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 801113c:	f04f 0300 	mov.w	r3, #0
 8011140:	e92d 000c 	stmdb	sp!, {r2, r3}
 8011144:	a901      	add	r1, sp, #4
 8011146:	f7ff fbf7 	bl	8010938 <__gnu_Unwind_Resume_or_Rethrow>
 801114a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 801114e:	b012      	add	sp, #72	; 0x48
 8011150:	4770      	bx	lr
 8011152:	bf00      	nop

08011154 <_Unwind_ForcedUnwind>:
 8011154:	46ec      	mov	ip, sp
 8011156:	b500      	push	{lr}
 8011158:	e92d 5000 	stmdb	sp!, {ip, lr}
 801115c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8011160:	f04f 0300 	mov.w	r3, #0
 8011164:	e92d 000c 	stmdb	sp!, {r2, r3}
 8011168:	ab01      	add	r3, sp, #4
 801116a:	f7ff fbb9 	bl	80108e0 <__gnu_Unwind_ForcedUnwind>
 801116e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8011172:	b012      	add	sp, #72	; 0x48
 8011174:	4770      	bx	lr
 8011176:	bf00      	nop

08011178 <_Unwind_Backtrace>:
 8011178:	46ec      	mov	ip, sp
 801117a:	b500      	push	{lr}
 801117c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8011180:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8011184:	f04f 0300 	mov.w	r3, #0
 8011188:	e92d 000c 	stmdb	sp!, {r2, r3}
 801118c:	aa01      	add	r2, sp, #4
 801118e:	f7ff fc33 	bl	80109f8 <__gnu_Unwind_Backtrace>
 8011192:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8011196:	b012      	add	sp, #72	; 0x48
 8011198:	4770      	bx	lr
 801119a:	bf00      	nop

0801119c <next_unwind_byte>:
 801119c:	7a03      	ldrb	r3, [r0, #8]
 801119e:	b91b      	cbnz	r3, 80111a8 <next_unwind_byte+0xc>
 80111a0:	7a43      	ldrb	r3, [r0, #9]
 80111a2:	b943      	cbnz	r3, 80111b6 <next_unwind_byte+0x1a>
 80111a4:	20b0      	movs	r0, #176	; 0xb0
 80111a6:	4770      	bx	lr
 80111a8:	1e5a      	subs	r2, r3, #1
 80111aa:	6803      	ldr	r3, [r0, #0]
 80111ac:	7202      	strb	r2, [r0, #8]
 80111ae:	021a      	lsls	r2, r3, #8
 80111b0:	6002      	str	r2, [r0, #0]
 80111b2:	0e18      	lsrs	r0, r3, #24
 80111b4:	4770      	bx	lr
 80111b6:	6842      	ldr	r2, [r0, #4]
 80111b8:	3b01      	subs	r3, #1
 80111ba:	b410      	push	{r4}
 80111bc:	7243      	strb	r3, [r0, #9]
 80111be:	6813      	ldr	r3, [r2, #0]
 80111c0:	2103      	movs	r1, #3
 80111c2:	1d14      	adds	r4, r2, #4
 80111c4:	7201      	strb	r1, [r0, #8]
 80111c6:	021a      	lsls	r2, r3, #8
 80111c8:	6044      	str	r4, [r0, #4]
 80111ca:	6002      	str	r2, [r0, #0]
 80111cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111d0:	0e18      	lsrs	r0, r3, #24
 80111d2:	4770      	bx	lr

080111d4 <_Unwind_GetGR.constprop.0>:
 80111d4:	b500      	push	{lr}
 80111d6:	b085      	sub	sp, #20
 80111d8:	ab03      	add	r3, sp, #12
 80111da:	2100      	movs	r1, #0
 80111dc:	9300      	str	r3, [sp, #0]
 80111de:	220c      	movs	r2, #12
 80111e0:	460b      	mov	r3, r1
 80111e2:	f7ff fbb9 	bl	8010958 <_Unwind_VRS_Get>
 80111e6:	9803      	ldr	r0, [sp, #12]
 80111e8:	b005      	add	sp, #20
 80111ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80111ee:	bf00      	nop

080111f0 <unwind_UCB_from_context>:
 80111f0:	e7f0      	b.n	80111d4 <_Unwind_GetGR.constprop.0>
 80111f2:	bf00      	nop

080111f4 <__gnu_unwind_execute>:
 80111f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111f8:	4606      	mov	r6, r0
 80111fa:	b085      	sub	sp, #20
 80111fc:	460d      	mov	r5, r1
 80111fe:	f04f 0800 	mov.w	r8, #0
 8011202:	4628      	mov	r0, r5
 8011204:	f7ff ffca 	bl	801119c <next_unwind_byte>
 8011208:	28b0      	cmp	r0, #176	; 0xb0
 801120a:	4604      	mov	r4, r0
 801120c:	f000 80b5 	beq.w	801137a <__gnu_unwind_execute+0x186>
 8011210:	f020 017f 	bic.w	r1, r0, #127	; 0x7f
 8011214:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8011218:	d020      	beq.n	801125c <__gnu_unwind_execute+0x68>
 801121a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 801121e:	2b80      	cmp	r3, #128	; 0x80
 8011220:	d07a      	beq.n	8011318 <__gnu_unwind_execute+0x124>
 8011222:	2b90      	cmp	r3, #144	; 0x90
 8011224:	d036      	beq.n	8011294 <__gnu_unwind_execute+0xa0>
 8011226:	2ba0      	cmp	r3, #160	; 0xa0
 8011228:	d049      	beq.n	80112be <__gnu_unwind_execute+0xca>
 801122a:	2bb0      	cmp	r3, #176	; 0xb0
 801122c:	d05c      	beq.n	80112e8 <__gnu_unwind_execute+0xf4>
 801122e:	2bc0      	cmp	r3, #192	; 0xc0
 8011230:	f000 8089 	beq.w	8011346 <__gnu_unwind_execute+0x152>
 8011234:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8011238:	2bd0      	cmp	r3, #208	; 0xd0
 801123a:	d10b      	bne.n	8011254 <__gnu_unwind_execute+0x60>
 801123c:	f000 0207 	and.w	r2, r0, #7
 8011240:	3201      	adds	r2, #1
 8011242:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8011246:	4630      	mov	r0, r6
 8011248:	2101      	movs	r1, #1
 801124a:	2305      	movs	r3, #5
 801124c:	f7ff fd7c 	bl	8010d48 <_Unwind_VRS_Pop>
 8011250:	2800      	cmp	r0, #0
 8011252:	d0d6      	beq.n	8011202 <__gnu_unwind_execute+0xe>
 8011254:	2009      	movs	r0, #9
 8011256:	b005      	add	sp, #20
 8011258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801125c:	f10d 090c 	add.w	r9, sp, #12
 8011260:	460b      	mov	r3, r1
 8011262:	0087      	lsls	r7, r0, #2
 8011264:	f8cd 9000 	str.w	r9, [sp]
 8011268:	4630      	mov	r0, r6
 801126a:	220d      	movs	r2, #13
 801126c:	f7ff fb74 	bl	8010958 <_Unwind_VRS_Get>
 8011270:	b2ff      	uxtb	r7, r7
 8011272:	9b03      	ldr	r3, [sp, #12]
 8011274:	f8cd 9000 	str.w	r9, [sp]
 8011278:	3704      	adds	r7, #4
 801127a:	0660      	lsls	r0, r4, #25
 801127c:	f04f 0100 	mov.w	r1, #0
 8011280:	bf4c      	ite	mi
 8011282:	1bdf      	submi	r7, r3, r7
 8011284:	18ff      	addpl	r7, r7, r3
 8011286:	4630      	mov	r0, r6
 8011288:	460b      	mov	r3, r1
 801128a:	220d      	movs	r2, #13
 801128c:	9703      	str	r7, [sp, #12]
 801128e:	f7ff fb8b 	bl	80109a8 <_Unwind_VRS_Set>
 8011292:	e7b6      	b.n	8011202 <__gnu_unwind_execute+0xe>
 8011294:	f000 030d 	and.w	r3, r0, #13
 8011298:	2b0d      	cmp	r3, #13
 801129a:	d0db      	beq.n	8011254 <__gnu_unwind_execute+0x60>
 801129c:	af03      	add	r7, sp, #12
 801129e:	2100      	movs	r1, #0
 80112a0:	f000 020f 	and.w	r2, r0, #15
 80112a4:	460b      	mov	r3, r1
 80112a6:	9700      	str	r7, [sp, #0]
 80112a8:	4630      	mov	r0, r6
 80112aa:	f7ff fb55 	bl	8010958 <_Unwind_VRS_Get>
 80112ae:	2100      	movs	r1, #0
 80112b0:	9700      	str	r7, [sp, #0]
 80112b2:	460b      	mov	r3, r1
 80112b4:	4630      	mov	r0, r6
 80112b6:	220d      	movs	r2, #13
 80112b8:	f7ff fb76 	bl	80109a8 <_Unwind_VRS_Set>
 80112bc:	e7a1      	b.n	8011202 <__gnu_unwind_execute+0xe>
 80112be:	43c3      	mvns	r3, r0
 80112c0:	f003 0307 	and.w	r3, r3, #7
 80112c4:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80112c8:	411a      	asrs	r2, r3
 80112ca:	0701      	lsls	r1, r0, #28
 80112cc:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80112d0:	f04f 0100 	mov.w	r1, #0
 80112d4:	bf48      	it	mi
 80112d6:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80112da:	460b      	mov	r3, r1
 80112dc:	4630      	mov	r0, r6
 80112de:	f7ff fd33 	bl	8010d48 <_Unwind_VRS_Pop>
 80112e2:	2800      	cmp	r0, #0
 80112e4:	d1b6      	bne.n	8011254 <__gnu_unwind_execute+0x60>
 80112e6:	e78c      	b.n	8011202 <__gnu_unwind_execute+0xe>
 80112e8:	28b1      	cmp	r0, #177	; 0xb1
 80112ea:	d04c      	beq.n	8011386 <__gnu_unwind_execute+0x192>
 80112ec:	28b2      	cmp	r0, #178	; 0xb2
 80112ee:	d05d      	beq.n	80113ac <__gnu_unwind_execute+0x1b8>
 80112f0:	28b3      	cmp	r0, #179	; 0xb3
 80112f2:	f000 808a 	beq.w	801140a <__gnu_unwind_execute+0x216>
 80112f6:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80112fa:	2bb4      	cmp	r3, #180	; 0xb4
 80112fc:	d0aa      	beq.n	8011254 <__gnu_unwind_execute+0x60>
 80112fe:	f000 0207 	and.w	r2, r0, #7
 8011302:	3201      	adds	r2, #1
 8011304:	2101      	movs	r1, #1
 8011306:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 801130a:	460b      	mov	r3, r1
 801130c:	4630      	mov	r0, r6
 801130e:	f7ff fd1b 	bl	8010d48 <_Unwind_VRS_Pop>
 8011312:	2800      	cmp	r0, #0
 8011314:	d19e      	bne.n	8011254 <__gnu_unwind_execute+0x60>
 8011316:	e774      	b.n	8011202 <__gnu_unwind_execute+0xe>
 8011318:	4628      	mov	r0, r5
 801131a:	f7ff ff3f 	bl	801119c <next_unwind_byte>
 801131e:	0224      	lsls	r4, r4, #8
 8011320:	4320      	orrs	r0, r4
 8011322:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8011326:	d095      	beq.n	8011254 <__gnu_unwind_execute+0x60>
 8011328:	0104      	lsls	r4, r0, #4
 801132a:	2100      	movs	r1, #0
 801132c:	b2a2      	uxth	r2, r4
 801132e:	460b      	mov	r3, r1
 8011330:	4630      	mov	r0, r6
 8011332:	f7ff fd09 	bl	8010d48 <_Unwind_VRS_Pop>
 8011336:	2800      	cmp	r0, #0
 8011338:	d18c      	bne.n	8011254 <__gnu_unwind_execute+0x60>
 801133a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 801133e:	bf18      	it	ne
 8011340:	f04f 0801 	movne.w	r8, #1
 8011344:	e75d      	b.n	8011202 <__gnu_unwind_execute+0xe>
 8011346:	28c6      	cmp	r0, #198	; 0xc6
 8011348:	d072      	beq.n	8011430 <__gnu_unwind_execute+0x23c>
 801134a:	28c7      	cmp	r0, #199	; 0xc7
 801134c:	d07a      	beq.n	8011444 <__gnu_unwind_execute+0x250>
 801134e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8011352:	2bc0      	cmp	r3, #192	; 0xc0
 8011354:	f000 8089 	beq.w	801146a <__gnu_unwind_execute+0x276>
 8011358:	28c8      	cmp	r0, #200	; 0xc8
 801135a:	f000 80a5 	beq.w	80114a8 <__gnu_unwind_execute+0x2b4>
 801135e:	28c9      	cmp	r0, #201	; 0xc9
 8011360:	f47f af78 	bne.w	8011254 <__gnu_unwind_execute+0x60>
 8011364:	4628      	mov	r0, r5
 8011366:	f7ff ff19 	bl	801119c <next_unwind_byte>
 801136a:	f000 020f 	and.w	r2, r0, #15
 801136e:	3201      	adds	r2, #1
 8011370:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8011374:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
 8011378:	e765      	b.n	8011246 <__gnu_unwind_execute+0x52>
 801137a:	f1b8 0f00 	cmp.w	r8, #0
 801137e:	f000 8082 	beq.w	8011486 <__gnu_unwind_execute+0x292>
 8011382:	2000      	movs	r0, #0
 8011384:	e767      	b.n	8011256 <__gnu_unwind_execute+0x62>
 8011386:	4628      	mov	r0, r5
 8011388:	f7ff ff08 	bl	801119c <next_unwind_byte>
 801138c:	4602      	mov	r2, r0
 801138e:	2800      	cmp	r0, #0
 8011390:	f43f af60 	beq.w	8011254 <__gnu_unwind_execute+0x60>
 8011394:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
 8011398:	f47f af5c 	bne.w	8011254 <__gnu_unwind_execute+0x60>
 801139c:	4630      	mov	r0, r6
 801139e:	460b      	mov	r3, r1
 80113a0:	f7ff fcd2 	bl	8010d48 <_Unwind_VRS_Pop>
 80113a4:	2800      	cmp	r0, #0
 80113a6:	f47f af55 	bne.w	8011254 <__gnu_unwind_execute+0x60>
 80113aa:	e72a      	b.n	8011202 <__gnu_unwind_execute+0xe>
 80113ac:	2100      	movs	r1, #0
 80113ae:	f10d 090c 	add.w	r9, sp, #12
 80113b2:	220d      	movs	r2, #13
 80113b4:	460b      	mov	r3, r1
 80113b6:	f8cd 9000 	str.w	r9, [sp]
 80113ba:	4630      	mov	r0, r6
 80113bc:	f7ff facc 	bl	8010958 <_Unwind_VRS_Get>
 80113c0:	4628      	mov	r0, r5
 80113c2:	f7ff feeb 	bl	801119c <next_unwind_byte>
 80113c6:	0602      	lsls	r2, r0, #24
 80113c8:	f04f 0402 	mov.w	r4, #2
 80113cc:	d50c      	bpl.n	80113e8 <__gnu_unwind_execute+0x1f4>
 80113ce:	9b03      	ldr	r3, [sp, #12]
 80113d0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80113d4:	40a0      	lsls	r0, r4
 80113d6:	4403      	add	r3, r0
 80113d8:	4628      	mov	r0, r5
 80113da:	9303      	str	r3, [sp, #12]
 80113dc:	f7ff fede 	bl	801119c <next_unwind_byte>
 80113e0:	0603      	lsls	r3, r0, #24
 80113e2:	f104 0407 	add.w	r4, r4, #7
 80113e6:	d4f2      	bmi.n	80113ce <__gnu_unwind_execute+0x1da>
 80113e8:	9b03      	ldr	r3, [sp, #12]
 80113ea:	f8cd 9000 	str.w	r9, [sp]
 80113ee:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80113f2:	40a0      	lsls	r0, r4
 80113f4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80113f8:	2100      	movs	r1, #0
 80113fa:	181c      	adds	r4, r3, r0
 80113fc:	220d      	movs	r2, #13
 80113fe:	460b      	mov	r3, r1
 8011400:	4630      	mov	r0, r6
 8011402:	9403      	str	r4, [sp, #12]
 8011404:	f7ff fad0 	bl	80109a8 <_Unwind_VRS_Set>
 8011408:	e6fb      	b.n	8011202 <__gnu_unwind_execute+0xe>
 801140a:	4628      	mov	r0, r5
 801140c:	f7ff fec6 	bl	801119c <next_unwind_byte>
 8011410:	f000 020f 	and.w	r2, r0, #15
 8011414:	3201      	adds	r2, #1
 8011416:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 801141a:	2101      	movs	r1, #1
 801141c:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
 8011420:	460b      	mov	r3, r1
 8011422:	4630      	mov	r0, r6
 8011424:	f7ff fc90 	bl	8010d48 <_Unwind_VRS_Pop>
 8011428:	2800      	cmp	r0, #0
 801142a:	f47f af13 	bne.w	8011254 <__gnu_unwind_execute+0x60>
 801142e:	e6e8      	b.n	8011202 <__gnu_unwind_execute+0xe>
 8011430:	4628      	mov	r0, r5
 8011432:	f7ff feb3 	bl	801119c <next_unwind_byte>
 8011436:	f000 020f 	and.w	r2, r0, #15
 801143a:	3201      	adds	r2, #1
 801143c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8011440:	2103      	movs	r1, #3
 8011442:	e7eb      	b.n	801141c <__gnu_unwind_execute+0x228>
 8011444:	4628      	mov	r0, r5
 8011446:	f7ff fea9 	bl	801119c <next_unwind_byte>
 801144a:	4602      	mov	r2, r0
 801144c:	2800      	cmp	r0, #0
 801144e:	f43f af01 	beq.w	8011254 <__gnu_unwind_execute+0x60>
 8011452:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8011456:	f47f aefd 	bne.w	8011254 <__gnu_unwind_execute+0x60>
 801145a:	4630      	mov	r0, r6
 801145c:	2104      	movs	r1, #4
 801145e:	f7ff fc73 	bl	8010d48 <_Unwind_VRS_Pop>
 8011462:	2800      	cmp	r0, #0
 8011464:	f47f aef6 	bne.w	8011254 <__gnu_unwind_execute+0x60>
 8011468:	e6cb      	b.n	8011202 <__gnu_unwind_execute+0xe>
 801146a:	f000 020f 	and.w	r2, r0, #15
 801146e:	3201      	adds	r2, #1
 8011470:	2103      	movs	r1, #3
 8011472:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8011476:	460b      	mov	r3, r1
 8011478:	4630      	mov	r0, r6
 801147a:	f7ff fc65 	bl	8010d48 <_Unwind_VRS_Pop>
 801147e:	2800      	cmp	r0, #0
 8011480:	f47f aee8 	bne.w	8011254 <__gnu_unwind_execute+0x60>
 8011484:	e6bd      	b.n	8011202 <__gnu_unwind_execute+0xe>
 8011486:	ac03      	add	r4, sp, #12
 8011488:	4641      	mov	r1, r8
 801148a:	220e      	movs	r2, #14
 801148c:	4643      	mov	r3, r8
 801148e:	9400      	str	r4, [sp, #0]
 8011490:	4630      	mov	r0, r6
 8011492:	f7ff fa61 	bl	8010958 <_Unwind_VRS_Get>
 8011496:	9400      	str	r4, [sp, #0]
 8011498:	4630      	mov	r0, r6
 801149a:	4641      	mov	r1, r8
 801149c:	220f      	movs	r2, #15
 801149e:	4643      	mov	r3, r8
 80114a0:	f7ff fa82 	bl	80109a8 <_Unwind_VRS_Set>
 80114a4:	4640      	mov	r0, r8
 80114a6:	e6d6      	b.n	8011256 <__gnu_unwind_execute+0x62>
 80114a8:	4628      	mov	r0, r5
 80114aa:	f7ff fe77 	bl	801119c <next_unwind_byte>
 80114ae:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80114b2:	f000 030f 	and.w	r3, r0, #15
 80114b6:	3210      	adds	r2, #16
 80114b8:	3301      	adds	r3, #1
 80114ba:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80114be:	e6c2      	b.n	8011246 <__gnu_unwind_execute+0x52>

080114c0 <__gnu_unwind_frame>:
 80114c0:	b510      	push	{r4, lr}
 80114c2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80114c4:	b084      	sub	sp, #16
 80114c6:	685a      	ldr	r2, [r3, #4]
 80114c8:	2003      	movs	r0, #3
 80114ca:	f88d 000c 	strb.w	r0, [sp, #12]
 80114ce:	79dc      	ldrb	r4, [r3, #7]
 80114d0:	f88d 400d 	strb.w	r4, [sp, #13]
 80114d4:	0212      	lsls	r2, r2, #8
 80114d6:	3308      	adds	r3, #8
 80114d8:	4608      	mov	r0, r1
 80114da:	a901      	add	r1, sp, #4
 80114dc:	9201      	str	r2, [sp, #4]
 80114de:	9302      	str	r3, [sp, #8]
 80114e0:	f7ff fe88 	bl	80111f4 <__gnu_unwind_execute>
 80114e4:	b004      	add	sp, #16
 80114e6:	bd10      	pop	{r4, pc}

080114e8 <_Unwind_GetRegionStart>:
 80114e8:	b508      	push	{r3, lr}
 80114ea:	f7ff fe81 	bl	80111f0 <unwind_UCB_from_context>
 80114ee:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80114f0:	bd08      	pop	{r3, pc}
 80114f2:	bf00      	nop

080114f4 <_Unwind_GetLanguageSpecificData>:
 80114f4:	b508      	push	{r3, lr}
 80114f6:	f7ff fe7b 	bl	80111f0 <unwind_UCB_from_context>
 80114fa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80114fc:	79d8      	ldrb	r0, [r3, #7]
 80114fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011502:	3008      	adds	r0, #8
 8011504:	bd08      	pop	{r3, pc}
 8011506:	bf00      	nop

08011508 <_Unwind_GetDataRelBase>:
 8011508:	b508      	push	{r3, lr}
 801150a:	f7f9 ffec 	bl	800b4e6 <abort>
 801150e:	bf00      	nop

08011510 <_Unwind_GetTextRelBase>:
 8011510:	b508      	push	{r3, lr}
 8011512:	f7f9 ffe8 	bl	800b4e6 <abort>
 8011516:	bf00      	nop

08011518 <__aeabi_idiv0>:
 8011518:	4770      	bx	lr
 801151a:	bf00      	nop

0801151c <__divdi3>:
 801151c:	2900      	cmp	r1, #0
 801151e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011522:	f2c0 80a6 	blt.w	8011672 <__divdi3+0x156>
 8011526:	2600      	movs	r6, #0
 8011528:	2b00      	cmp	r3, #0
 801152a:	f2c0 809c 	blt.w	8011666 <__divdi3+0x14a>
 801152e:	4688      	mov	r8, r1
 8011530:	4694      	mov	ip, r2
 8011532:	469e      	mov	lr, r3
 8011534:	4615      	mov	r5, r2
 8011536:	4604      	mov	r4, r0
 8011538:	460f      	mov	r7, r1
 801153a:	2b00      	cmp	r3, #0
 801153c:	d13d      	bne.n	80115ba <__divdi3+0x9e>
 801153e:	428a      	cmp	r2, r1
 8011540:	d959      	bls.n	80115f6 <__divdi3+0xda>
 8011542:	fab2 f382 	clz	r3, r2
 8011546:	b13b      	cbz	r3, 8011558 <__divdi3+0x3c>
 8011548:	f1c3 0220 	rsb	r2, r3, #32
 801154c:	409f      	lsls	r7, r3
 801154e:	fa20 f202 	lsr.w	r2, r0, r2
 8011552:	409d      	lsls	r5, r3
 8011554:	4317      	orrs	r7, r2
 8011556:	409c      	lsls	r4, r3
 8011558:	0c29      	lsrs	r1, r5, #16
 801155a:	0c22      	lsrs	r2, r4, #16
 801155c:	fbb7 fef1 	udiv	lr, r7, r1
 8011560:	b2a8      	uxth	r0, r5
 8011562:	fb01 771e 	mls	r7, r1, lr, r7
 8011566:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 801156a:	fb00 f30e 	mul.w	r3, r0, lr
 801156e:	42bb      	cmp	r3, r7
 8011570:	d90a      	bls.n	8011588 <__divdi3+0x6c>
 8011572:	197f      	adds	r7, r7, r5
 8011574:	f10e 32ff 	add.w	r2, lr, #4294967295
 8011578:	f080 8105 	bcs.w	8011786 <__divdi3+0x26a>
 801157c:	42bb      	cmp	r3, r7
 801157e:	f240 8102 	bls.w	8011786 <__divdi3+0x26a>
 8011582:	f1ae 0e02 	sub.w	lr, lr, #2
 8011586:	442f      	add	r7, r5
 8011588:	1aff      	subs	r7, r7, r3
 801158a:	b2a4      	uxth	r4, r4
 801158c:	fbb7 f3f1 	udiv	r3, r7, r1
 8011590:	fb01 7713 	mls	r7, r1, r3, r7
 8011594:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8011598:	fb00 f003 	mul.w	r0, r0, r3
 801159c:	42b8      	cmp	r0, r7
 801159e:	d908      	bls.n	80115b2 <__divdi3+0x96>
 80115a0:	197f      	adds	r7, r7, r5
 80115a2:	f103 32ff 	add.w	r2, r3, #4294967295
 80115a6:	f080 80f0 	bcs.w	801178a <__divdi3+0x26e>
 80115aa:	42b8      	cmp	r0, r7
 80115ac:	f240 80ed 	bls.w	801178a <__divdi3+0x26e>
 80115b0:	3b02      	subs	r3, #2
 80115b2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80115b6:	2200      	movs	r2, #0
 80115b8:	e003      	b.n	80115c2 <__divdi3+0xa6>
 80115ba:	428b      	cmp	r3, r1
 80115bc:	d90f      	bls.n	80115de <__divdi3+0xc2>
 80115be:	2200      	movs	r2, #0
 80115c0:	4613      	mov	r3, r2
 80115c2:	1c34      	adds	r4, r6, #0
 80115c4:	bf18      	it	ne
 80115c6:	2401      	movne	r4, #1
 80115c8:	4260      	negs	r0, r4
 80115ca:	f04f 0500 	mov.w	r5, #0
 80115ce:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 80115d2:	4058      	eors	r0, r3
 80115d4:	4051      	eors	r1, r2
 80115d6:	1900      	adds	r0, r0, r4
 80115d8:	4169      	adcs	r1, r5
 80115da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115de:	fab3 f283 	clz	r2, r3
 80115e2:	2a00      	cmp	r2, #0
 80115e4:	f040 8086 	bne.w	80116f4 <__divdi3+0x1d8>
 80115e8:	428b      	cmp	r3, r1
 80115ea:	d302      	bcc.n	80115f2 <__divdi3+0xd6>
 80115ec:	4584      	cmp	ip, r0
 80115ee:	f200 80db 	bhi.w	80117a8 <__divdi3+0x28c>
 80115f2:	2301      	movs	r3, #1
 80115f4:	e7e5      	b.n	80115c2 <__divdi3+0xa6>
 80115f6:	b912      	cbnz	r2, 80115fe <__divdi3+0xe2>
 80115f8:	2301      	movs	r3, #1
 80115fa:	fbb3 f5f2 	udiv	r5, r3, r2
 80115fe:	fab5 f085 	clz	r0, r5
 8011602:	2800      	cmp	r0, #0
 8011604:	d13b      	bne.n	801167e <__divdi3+0x162>
 8011606:	1b78      	subs	r0, r7, r5
 8011608:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 801160c:	fa1f fc85 	uxth.w	ip, r5
 8011610:	2201      	movs	r2, #1
 8011612:	fbb0 f8fe 	udiv	r8, r0, lr
 8011616:	0c21      	lsrs	r1, r4, #16
 8011618:	fb0e 0718 	mls	r7, lr, r8, r0
 801161c:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8011620:	fb0c f308 	mul.w	r3, ip, r8
 8011624:	42bb      	cmp	r3, r7
 8011626:	d907      	bls.n	8011638 <__divdi3+0x11c>
 8011628:	197f      	adds	r7, r7, r5
 801162a:	f108 31ff 	add.w	r1, r8, #4294967295
 801162e:	d202      	bcs.n	8011636 <__divdi3+0x11a>
 8011630:	42bb      	cmp	r3, r7
 8011632:	f200 80bd 	bhi.w	80117b0 <__divdi3+0x294>
 8011636:	4688      	mov	r8, r1
 8011638:	1aff      	subs	r7, r7, r3
 801163a:	b2a4      	uxth	r4, r4
 801163c:	fbb7 f3fe 	udiv	r3, r7, lr
 8011640:	fb0e 7713 	mls	r7, lr, r3, r7
 8011644:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8011648:	fb0c fc03 	mul.w	ip, ip, r3
 801164c:	45bc      	cmp	ip, r7
 801164e:	d907      	bls.n	8011660 <__divdi3+0x144>
 8011650:	197f      	adds	r7, r7, r5
 8011652:	f103 31ff 	add.w	r1, r3, #4294967295
 8011656:	d202      	bcs.n	801165e <__divdi3+0x142>
 8011658:	45bc      	cmp	ip, r7
 801165a:	f200 80a7 	bhi.w	80117ac <__divdi3+0x290>
 801165e:	460b      	mov	r3, r1
 8011660:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8011664:	e7ad      	b.n	80115c2 <__divdi3+0xa6>
 8011666:	4252      	negs	r2, r2
 8011668:	ea6f 0606 	mvn.w	r6, r6
 801166c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8011670:	e75d      	b.n	801152e <__divdi3+0x12>
 8011672:	4240      	negs	r0, r0
 8011674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8011678:	f04f 36ff 	mov.w	r6, #4294967295
 801167c:	e754      	b.n	8011528 <__divdi3+0xc>
 801167e:	f1c0 0220 	rsb	r2, r0, #32
 8011682:	fa24 f102 	lsr.w	r1, r4, r2
 8011686:	fa07 f300 	lsl.w	r3, r7, r0
 801168a:	4085      	lsls	r5, r0
 801168c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8011690:	40d7      	lsrs	r7, r2
 8011692:	4319      	orrs	r1, r3
 8011694:	fbb7 f2fe 	udiv	r2, r7, lr
 8011698:	0c0b      	lsrs	r3, r1, #16
 801169a:	fb0e 7712 	mls	r7, lr, r2, r7
 801169e:	fa1f fc85 	uxth.w	ip, r5
 80116a2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80116a6:	fb0c f702 	mul.w	r7, ip, r2
 80116aa:	429f      	cmp	r7, r3
 80116ac:	fa04 f400 	lsl.w	r4, r4, r0
 80116b0:	d907      	bls.n	80116c2 <__divdi3+0x1a6>
 80116b2:	195b      	adds	r3, r3, r5
 80116b4:	f102 30ff 	add.w	r0, r2, #4294967295
 80116b8:	d274      	bcs.n	80117a4 <__divdi3+0x288>
 80116ba:	429f      	cmp	r7, r3
 80116bc:	d972      	bls.n	80117a4 <__divdi3+0x288>
 80116be:	3a02      	subs	r2, #2
 80116c0:	442b      	add	r3, r5
 80116c2:	1bdf      	subs	r7, r3, r7
 80116c4:	b289      	uxth	r1, r1
 80116c6:	fbb7 f8fe 	udiv	r8, r7, lr
 80116ca:	fb0e 7318 	mls	r3, lr, r8, r7
 80116ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80116d2:	fb0c f708 	mul.w	r7, ip, r8
 80116d6:	429f      	cmp	r7, r3
 80116d8:	d908      	bls.n	80116ec <__divdi3+0x1d0>
 80116da:	195b      	adds	r3, r3, r5
 80116dc:	f108 31ff 	add.w	r1, r8, #4294967295
 80116e0:	d25c      	bcs.n	801179c <__divdi3+0x280>
 80116e2:	429f      	cmp	r7, r3
 80116e4:	d95a      	bls.n	801179c <__divdi3+0x280>
 80116e6:	f1a8 0802 	sub.w	r8, r8, #2
 80116ea:	442b      	add	r3, r5
 80116ec:	1bd8      	subs	r0, r3, r7
 80116ee:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 80116f2:	e78e      	b.n	8011612 <__divdi3+0xf6>
 80116f4:	f1c2 0320 	rsb	r3, r2, #32
 80116f8:	fa2c f103 	lsr.w	r1, ip, r3
 80116fc:	fa0e fe02 	lsl.w	lr, lr, r2
 8011700:	fa20 f703 	lsr.w	r7, r0, r3
 8011704:	ea41 0e0e 	orr.w	lr, r1, lr
 8011708:	fa08 f002 	lsl.w	r0, r8, r2
 801170c:	fa28 f103 	lsr.w	r1, r8, r3
 8011710:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8011714:	4338      	orrs	r0, r7
 8011716:	fbb1 f8f5 	udiv	r8, r1, r5
 801171a:	0c03      	lsrs	r3, r0, #16
 801171c:	fb05 1118 	mls	r1, r5, r8, r1
 8011720:	fa1f f78e 	uxth.w	r7, lr
 8011724:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8011728:	fb07 f308 	mul.w	r3, r7, r8
 801172c:	428b      	cmp	r3, r1
 801172e:	fa0c fc02 	lsl.w	ip, ip, r2
 8011732:	d909      	bls.n	8011748 <__divdi3+0x22c>
 8011734:	eb11 010e 	adds.w	r1, r1, lr
 8011738:	f108 39ff 	add.w	r9, r8, #4294967295
 801173c:	d230      	bcs.n	80117a0 <__divdi3+0x284>
 801173e:	428b      	cmp	r3, r1
 8011740:	d92e      	bls.n	80117a0 <__divdi3+0x284>
 8011742:	f1a8 0802 	sub.w	r8, r8, #2
 8011746:	4471      	add	r1, lr
 8011748:	1ac9      	subs	r1, r1, r3
 801174a:	b280      	uxth	r0, r0
 801174c:	fbb1 f3f5 	udiv	r3, r1, r5
 8011750:	fb05 1113 	mls	r1, r5, r3, r1
 8011754:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8011758:	fb07 f703 	mul.w	r7, r7, r3
 801175c:	428f      	cmp	r7, r1
 801175e:	d908      	bls.n	8011772 <__divdi3+0x256>
 8011760:	eb11 010e 	adds.w	r1, r1, lr
 8011764:	f103 30ff 	add.w	r0, r3, #4294967295
 8011768:	d216      	bcs.n	8011798 <__divdi3+0x27c>
 801176a:	428f      	cmp	r7, r1
 801176c:	d914      	bls.n	8011798 <__divdi3+0x27c>
 801176e:	3b02      	subs	r3, #2
 8011770:	4471      	add	r1, lr
 8011772:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8011776:	1bc9      	subs	r1, r1, r7
 8011778:	fba3 890c 	umull	r8, r9, r3, ip
 801177c:	4549      	cmp	r1, r9
 801177e:	d309      	bcc.n	8011794 <__divdi3+0x278>
 8011780:	d005      	beq.n	801178e <__divdi3+0x272>
 8011782:	2200      	movs	r2, #0
 8011784:	e71d      	b.n	80115c2 <__divdi3+0xa6>
 8011786:	4696      	mov	lr, r2
 8011788:	e6fe      	b.n	8011588 <__divdi3+0x6c>
 801178a:	4613      	mov	r3, r2
 801178c:	e711      	b.n	80115b2 <__divdi3+0x96>
 801178e:	4094      	lsls	r4, r2
 8011790:	4544      	cmp	r4, r8
 8011792:	d2f6      	bcs.n	8011782 <__divdi3+0x266>
 8011794:	3b01      	subs	r3, #1
 8011796:	e7f4      	b.n	8011782 <__divdi3+0x266>
 8011798:	4603      	mov	r3, r0
 801179a:	e7ea      	b.n	8011772 <__divdi3+0x256>
 801179c:	4688      	mov	r8, r1
 801179e:	e7a5      	b.n	80116ec <__divdi3+0x1d0>
 80117a0:	46c8      	mov	r8, r9
 80117a2:	e7d1      	b.n	8011748 <__divdi3+0x22c>
 80117a4:	4602      	mov	r2, r0
 80117a6:	e78c      	b.n	80116c2 <__divdi3+0x1a6>
 80117a8:	4613      	mov	r3, r2
 80117aa:	e70a      	b.n	80115c2 <__divdi3+0xa6>
 80117ac:	3b02      	subs	r3, #2
 80117ae:	e757      	b.n	8011660 <__divdi3+0x144>
 80117b0:	f1a8 0802 	sub.w	r8, r8, #2
 80117b4:	442f      	add	r7, r5
 80117b6:	e73f      	b.n	8011638 <__divdi3+0x11c>

080117b8 <__udivdi3>:
 80117b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d144      	bne.n	801184a <__udivdi3+0x92>
 80117c0:	428a      	cmp	r2, r1
 80117c2:	4615      	mov	r5, r2
 80117c4:	4604      	mov	r4, r0
 80117c6:	d94f      	bls.n	8011868 <__udivdi3+0xb0>
 80117c8:	fab2 f782 	clz	r7, r2
 80117cc:	460e      	mov	r6, r1
 80117ce:	b14f      	cbz	r7, 80117e4 <__udivdi3+0x2c>
 80117d0:	f1c7 0320 	rsb	r3, r7, #32
 80117d4:	40b9      	lsls	r1, r7
 80117d6:	fa20 f603 	lsr.w	r6, r0, r3
 80117da:	fa02 f507 	lsl.w	r5, r2, r7
 80117de:	430e      	orrs	r6, r1
 80117e0:	fa00 f407 	lsl.w	r4, r0, r7
 80117e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80117e8:	0c23      	lsrs	r3, r4, #16
 80117ea:	fbb6 f0fe 	udiv	r0, r6, lr
 80117ee:	b2af      	uxth	r7, r5
 80117f0:	fb0e 6110 	mls	r1, lr, r0, r6
 80117f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80117f8:	fb07 f100 	mul.w	r1, r7, r0
 80117fc:	4299      	cmp	r1, r3
 80117fe:	d909      	bls.n	8011814 <__udivdi3+0x5c>
 8011800:	195b      	adds	r3, r3, r5
 8011802:	f100 32ff 	add.w	r2, r0, #4294967295
 8011806:	f080 80ec 	bcs.w	80119e2 <__udivdi3+0x22a>
 801180a:	4299      	cmp	r1, r3
 801180c:	f240 80e9 	bls.w	80119e2 <__udivdi3+0x22a>
 8011810:	3802      	subs	r0, #2
 8011812:	442b      	add	r3, r5
 8011814:	1a5a      	subs	r2, r3, r1
 8011816:	b2a4      	uxth	r4, r4
 8011818:	fbb2 f3fe 	udiv	r3, r2, lr
 801181c:	fb0e 2213 	mls	r2, lr, r3, r2
 8011820:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8011824:	fb07 f703 	mul.w	r7, r7, r3
 8011828:	4297      	cmp	r7, r2
 801182a:	d908      	bls.n	801183e <__udivdi3+0x86>
 801182c:	1952      	adds	r2, r2, r5
 801182e:	f103 31ff 	add.w	r1, r3, #4294967295
 8011832:	f080 80d8 	bcs.w	80119e6 <__udivdi3+0x22e>
 8011836:	4297      	cmp	r7, r2
 8011838:	f240 80d5 	bls.w	80119e6 <__udivdi3+0x22e>
 801183c:	3b02      	subs	r3, #2
 801183e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8011842:	2600      	movs	r6, #0
 8011844:	4631      	mov	r1, r6
 8011846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801184a:	428b      	cmp	r3, r1
 801184c:	d847      	bhi.n	80118de <__udivdi3+0x126>
 801184e:	fab3 f683 	clz	r6, r3
 8011852:	2e00      	cmp	r6, #0
 8011854:	d148      	bne.n	80118e8 <__udivdi3+0x130>
 8011856:	428b      	cmp	r3, r1
 8011858:	d302      	bcc.n	8011860 <__udivdi3+0xa8>
 801185a:	4282      	cmp	r2, r0
 801185c:	f200 80cd 	bhi.w	80119fa <__udivdi3+0x242>
 8011860:	2001      	movs	r0, #1
 8011862:	4631      	mov	r1, r6
 8011864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011868:	b912      	cbnz	r2, 8011870 <__udivdi3+0xb8>
 801186a:	2501      	movs	r5, #1
 801186c:	fbb5 f5f2 	udiv	r5, r5, r2
 8011870:	fab5 f885 	clz	r8, r5
 8011874:	f1b8 0f00 	cmp.w	r8, #0
 8011878:	d177      	bne.n	801196a <__udivdi3+0x1b2>
 801187a:	1b4a      	subs	r2, r1, r5
 801187c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8011880:	b2af      	uxth	r7, r5
 8011882:	2601      	movs	r6, #1
 8011884:	fbb2 f0fe 	udiv	r0, r2, lr
 8011888:	0c23      	lsrs	r3, r4, #16
 801188a:	fb0e 2110 	mls	r1, lr, r0, r2
 801188e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8011892:	fb07 f300 	mul.w	r3, r7, r0
 8011896:	428b      	cmp	r3, r1
 8011898:	d907      	bls.n	80118aa <__udivdi3+0xf2>
 801189a:	1949      	adds	r1, r1, r5
 801189c:	f100 32ff 	add.w	r2, r0, #4294967295
 80118a0:	d202      	bcs.n	80118a8 <__udivdi3+0xf0>
 80118a2:	428b      	cmp	r3, r1
 80118a4:	f200 80ba 	bhi.w	8011a1c <__udivdi3+0x264>
 80118a8:	4610      	mov	r0, r2
 80118aa:	1ac9      	subs	r1, r1, r3
 80118ac:	b2a4      	uxth	r4, r4
 80118ae:	fbb1 f3fe 	udiv	r3, r1, lr
 80118b2:	fb0e 1113 	mls	r1, lr, r3, r1
 80118b6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80118ba:	fb07 f703 	mul.w	r7, r7, r3
 80118be:	42a7      	cmp	r7, r4
 80118c0:	d908      	bls.n	80118d4 <__udivdi3+0x11c>
 80118c2:	1964      	adds	r4, r4, r5
 80118c4:	f103 32ff 	add.w	r2, r3, #4294967295
 80118c8:	f080 808f 	bcs.w	80119ea <__udivdi3+0x232>
 80118cc:	42a7      	cmp	r7, r4
 80118ce:	f240 808c 	bls.w	80119ea <__udivdi3+0x232>
 80118d2:	3b02      	subs	r3, #2
 80118d4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80118d8:	4631      	mov	r1, r6
 80118da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118de:	2600      	movs	r6, #0
 80118e0:	4630      	mov	r0, r6
 80118e2:	4631      	mov	r1, r6
 80118e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118e8:	f1c6 0420 	rsb	r4, r6, #32
 80118ec:	fa22 f504 	lsr.w	r5, r2, r4
 80118f0:	40b3      	lsls	r3, r6
 80118f2:	432b      	orrs	r3, r5
 80118f4:	fa20 fc04 	lsr.w	ip, r0, r4
 80118f8:	fa01 f706 	lsl.w	r7, r1, r6
 80118fc:	fa21 f504 	lsr.w	r5, r1, r4
 8011900:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011904:	ea4c 0707 	orr.w	r7, ip, r7
 8011908:	fbb5 f8fe 	udiv	r8, r5, lr
 801190c:	0c39      	lsrs	r1, r7, #16
 801190e:	fb0e 5518 	mls	r5, lr, r8, r5
 8011912:	fa1f fc83 	uxth.w	ip, r3
 8011916:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 801191a:	fb0c f108 	mul.w	r1, ip, r8
 801191e:	42a9      	cmp	r1, r5
 8011920:	fa02 f206 	lsl.w	r2, r2, r6
 8011924:	d904      	bls.n	8011930 <__udivdi3+0x178>
 8011926:	18ed      	adds	r5, r5, r3
 8011928:	f108 34ff 	add.w	r4, r8, #4294967295
 801192c:	d367      	bcc.n	80119fe <__udivdi3+0x246>
 801192e:	46a0      	mov	r8, r4
 8011930:	1a6d      	subs	r5, r5, r1
 8011932:	b2bf      	uxth	r7, r7
 8011934:	fbb5 f4fe 	udiv	r4, r5, lr
 8011938:	fb0e 5514 	mls	r5, lr, r4, r5
 801193c:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8011940:	fb0c fc04 	mul.w	ip, ip, r4
 8011944:	458c      	cmp	ip, r1
 8011946:	d904      	bls.n	8011952 <__udivdi3+0x19a>
 8011948:	18c9      	adds	r1, r1, r3
 801194a:	f104 35ff 	add.w	r5, r4, #4294967295
 801194e:	d35c      	bcc.n	8011a0a <__udivdi3+0x252>
 8011950:	462c      	mov	r4, r5
 8011952:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8011956:	ebcc 0101 	rsb	r1, ip, r1
 801195a:	fba4 2302 	umull	r2, r3, r4, r2
 801195e:	4299      	cmp	r1, r3
 8011960:	d348      	bcc.n	80119f4 <__udivdi3+0x23c>
 8011962:	d044      	beq.n	80119ee <__udivdi3+0x236>
 8011964:	4620      	mov	r0, r4
 8011966:	2600      	movs	r6, #0
 8011968:	e76c      	b.n	8011844 <__udivdi3+0x8c>
 801196a:	f1c8 0420 	rsb	r4, r8, #32
 801196e:	fa01 f308 	lsl.w	r3, r1, r8
 8011972:	fa05 f508 	lsl.w	r5, r5, r8
 8011976:	fa20 f704 	lsr.w	r7, r0, r4
 801197a:	40e1      	lsrs	r1, r4
 801197c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8011980:	431f      	orrs	r7, r3
 8011982:	fbb1 f6fe 	udiv	r6, r1, lr
 8011986:	0c3a      	lsrs	r2, r7, #16
 8011988:	fb0e 1116 	mls	r1, lr, r6, r1
 801198c:	fa1f fc85 	uxth.w	ip, r5
 8011990:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 8011994:	fb0c f206 	mul.w	r2, ip, r6
 8011998:	429a      	cmp	r2, r3
 801199a:	fa00 f408 	lsl.w	r4, r0, r8
 801199e:	d907      	bls.n	80119b0 <__udivdi3+0x1f8>
 80119a0:	195b      	adds	r3, r3, r5
 80119a2:	f106 31ff 	add.w	r1, r6, #4294967295
 80119a6:	d237      	bcs.n	8011a18 <__udivdi3+0x260>
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d935      	bls.n	8011a18 <__udivdi3+0x260>
 80119ac:	3e02      	subs	r6, #2
 80119ae:	442b      	add	r3, r5
 80119b0:	1a9b      	subs	r3, r3, r2
 80119b2:	b2bf      	uxth	r7, r7
 80119b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80119b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80119bc:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80119c0:	fb0c f100 	mul.w	r1, ip, r0
 80119c4:	4299      	cmp	r1, r3
 80119c6:	d907      	bls.n	80119d8 <__udivdi3+0x220>
 80119c8:	195b      	adds	r3, r3, r5
 80119ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80119ce:	d221      	bcs.n	8011a14 <__udivdi3+0x25c>
 80119d0:	4299      	cmp	r1, r3
 80119d2:	d91f      	bls.n	8011a14 <__udivdi3+0x25c>
 80119d4:	3802      	subs	r0, #2
 80119d6:	442b      	add	r3, r5
 80119d8:	1a5a      	subs	r2, r3, r1
 80119da:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80119de:	4667      	mov	r7, ip
 80119e0:	e750      	b.n	8011884 <__udivdi3+0xcc>
 80119e2:	4610      	mov	r0, r2
 80119e4:	e716      	b.n	8011814 <__udivdi3+0x5c>
 80119e6:	460b      	mov	r3, r1
 80119e8:	e729      	b.n	801183e <__udivdi3+0x86>
 80119ea:	4613      	mov	r3, r2
 80119ec:	e772      	b.n	80118d4 <__udivdi3+0x11c>
 80119ee:	40b0      	lsls	r0, r6
 80119f0:	4290      	cmp	r0, r2
 80119f2:	d2b7      	bcs.n	8011964 <__udivdi3+0x1ac>
 80119f4:	1e60      	subs	r0, r4, #1
 80119f6:	2600      	movs	r6, #0
 80119f8:	e724      	b.n	8011844 <__udivdi3+0x8c>
 80119fa:	4630      	mov	r0, r6
 80119fc:	e722      	b.n	8011844 <__udivdi3+0x8c>
 80119fe:	42a9      	cmp	r1, r5
 8011a00:	d995      	bls.n	801192e <__udivdi3+0x176>
 8011a02:	f1a8 0802 	sub.w	r8, r8, #2
 8011a06:	441d      	add	r5, r3
 8011a08:	e792      	b.n	8011930 <__udivdi3+0x178>
 8011a0a:	458c      	cmp	ip, r1
 8011a0c:	d9a0      	bls.n	8011950 <__udivdi3+0x198>
 8011a0e:	3c02      	subs	r4, #2
 8011a10:	4419      	add	r1, r3
 8011a12:	e79e      	b.n	8011952 <__udivdi3+0x19a>
 8011a14:	4610      	mov	r0, r2
 8011a16:	e7df      	b.n	80119d8 <__udivdi3+0x220>
 8011a18:	460e      	mov	r6, r1
 8011a1a:	e7c9      	b.n	80119b0 <__udivdi3+0x1f8>
 8011a1c:	3802      	subs	r0, #2
 8011a1e:	4429      	add	r1, r5
 8011a20:	e743      	b.n	80118aa <__udivdi3+0xf2>
 8011a22:	bf00      	nop

08011a24 <_getpid>:
 8011a24:	4b02      	ldr	r3, [pc, #8]	; (8011a30 <_getpid+0xc>)
 8011a26:	2258      	movs	r2, #88	; 0x58
 8011a28:	601a      	str	r2, [r3, #0]
 8011a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a2e:	4770      	bx	lr
 8011a30:	20000dbc 	.word	0x20000dbc

08011a34 <_kill>:
 8011a34:	4b02      	ldr	r3, [pc, #8]	; (8011a40 <_kill+0xc>)
 8011a36:	2258      	movs	r2, #88	; 0x58
 8011a38:	601a      	str	r2, [r3, #0]
 8011a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a3e:	4770      	bx	lr
 8011a40:	20000dbc 	.word	0x20000dbc

08011a44 <_init>:
 8011a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a46:	bf00      	nop
 8011a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a4a:	bc08      	pop	{r3}
 8011a4c:	469e      	mov	lr, r3
 8011a4e:	4770      	bx	lr

08011a50 <_fini>:
 8011a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a52:	bf00      	nop
 8011a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a56:	bc08      	pop	{r3}
 8011a58:	469e      	mov	lr, r3
 8011a5a:	4770      	bx	lr
 8011a5c:	0000      	movs	r0, r0
	...

08011a60 <System.String_1>:
 8011a60:	0004 0000 a1d0 0801 000b 0000 000b 0000     ................
 8011a70:	0043 0046 0053 0052 003d 0030 0078 0025     C.F.S.R.=.0.x.%.
 8011a80:	0030 0038 0078 0000 0000 0000 0000 0000     0.8.x...........

08011a90 <System.String_19>:
 8011a90:	0004 0000 a1d0 0801 0019 0000 0019 0000     ................
 8011aa0:	0041 0072 0067 005f 004e 006f 0074 0053     A.r.g._.N.o.t.S.
 8011ab0:	0075 0070 0070 006f 0072 0074 0065 0064     u.p.p.o.r.t.e.d.
 8011ac0:	0045 0078 0063 0065 0070 0074 0069 006f     E.x.c.e.p.t.i.o.
 8011ad0:	006e 0000 0000 0000 0000 0000 0000 0000     n...............

08011ae0 <System.String_28>:
 8011ae0:	0004 0000 a1d0 0801 0011 0000 0011 0000     ................
 8011af0:	0041 0072 0067 005f 0052 0061 006e 006b     A.r.g._.R.a.n.k.
 8011b00:	0045 0078 0063 0065 0070 0074 0069 006f     E.x.c.e.p.t.i.o.
 8011b10:	006e 0000                                   n...

08011b14 <System.String_50>:
 8011b14:	0004 0000 a1d0 0801 0000 0000 0000 0000     ................
	...

08011b30 <System.String_60>:
 8011b30:	0004 0000 a1d0 0801 0018 0000 0018 0000     ................
 8011b40:	0041 0072 0067 005f 0054 0068 0072 0065     A.r.g._.T.h.r.e.
 8011b50:	0061 0064 0053 0074 0061 0074 0065 0045     a.d.S.t.a.t.e.E.
 8011b60:	0078 0063 0065 0070 0074 0069 006f 006e     x.c.e.p.t.i.o.n.

08011b70 <System.String_88>:
 8011b70:	0004 0000 a1d0 0801 002f 0000 002f 0000     ......../.../...
 8011b80:	0052 0065 0071 0075 0065 0073 0074 0020     R.e.q.u.e.s.t. .
 8011b90:	0053 0056 0043 0020 0064 006f 0065 0073     S.V.C. .d.o.e.s.
 8011ba0:	0020 006e 006f 0074 0020 0065 0078 0069      .n.o.t. .e.x.i.
 8011bb0:	0073 0074 0073 0020 006f 0072 0020 0069     s.t.s. .o.r. .i.
 8011bc0:	0073 0020 006e 006f 0074 0020 0073 0075     s. .n.o.t. .s.u.
 8011bd0:	0070 0070 006f 0072 0074 0065 0064 0000     p.p.o.r.t.e.d...

08011be0 <System.String_89>:
 8011be0:	0004 0000 a1d0 0801 000c 0000 000c 0000     ................
 8011bf0:	0043 0046 0053 0052 0020 003d 0030 0078     C.F.S.R. .=.0.x.
 8011c00:	0025 0030 0038 0078 0000 0000 0000 0000     %.0.8.x.........

08011c10 <System.String_90>:
 8011c10:	0004 0000 a1d0 0801 000c 0000 000c 0000     ................
 8011c20:	004d 004d 0046 0041 0052 003d 0030 0078     M.M.F.A.R.=.0.x.
 8011c30:	0025 0030 0038 0078 0000 0000 0000 0000     %.0.8.x.........

08011c40 <System.String_91>:
 8011c40:	0004 0000 a1d0 0801 000c 0000 000c 0000     ................
 8011c50:	0050 0043 0020 0020 0020 003d 0030 0078     P.C. . . .=.0.x.
 8011c60:	0025 0030 0038 0078 0000 0000 0000 0000     %.0.8.x.........

08011c70 <System.String_92>:
 8011c70:	0004 0000 a1d0 0801 000b 0000 000b 0000     ................
 8011c80:	0042 0046 0041 0052 003d 0030 0078 0025     B.F.A.R.=.0.x.%.
 8011c90:	0030 0038 0078 0000 0000 0000 0000 0000     0.8.x...........

08011ca0 <System.String_93>:
 8011ca0:	0004 0000 a1d0 0801 000b 0000 000b 0000     ................
 8011cb0:	0050 0043 0020 0020 003d 0030 0078 0025     P.C. . .=.0.x.%.
 8011cc0:	0030 0038 0078 0000 0000 0000 0000 0000     0.8.x...........

08011cd0 <System.String_94>:
 8011cd0:	0004 0000 a1d0 0801 0035 0000 0035 0000     ........5...5...
 8011ce0:	005b 004c 0061 0073 0074 0020 0041 0063     [.L.a.s.t. .A.c.
 8011cf0:	0074 0069 0076 0065 0020 0046 0072 0061     t.i.v.e. .F.r.a.
 8011d00:	006d 0065 005d 0020 0045 0058 0043 003d     m.e.]. .E.X.C.=.
 8011d10:	0030 0078 0025 0030 0038 0078 002c 0020     0.x.%.0.8.x.,. .
 8011d20:	0050 0053 0052 003d 0030 0078 0025 0030     P.S.R.=.0.x.%.0.
 8011d30:	0038 0078 002c 0020 0050 0043 003d 0030     8.x.,. .P.C.=.0.
 8011d40:	0078 0025 0030 0038 0078 0000 0000 0000     x.%.0.8.x.......

08011d50 <System.String_95>:
 8011d50:	0004 0000 a1d0 0801 004a 0000 004a 0000     ........J...J...
 8011d60:	005b 004c 0061 0073 0074 0020 0041 0063     [.L.a.s.t. .A.c.
 8011d70:	0074 0069 0076 0065 0020 0046 0072 0061     t.i.v.e. .F.r.a.
 8011d80:	006d 0065 005d 0020 0052 0030 003d 0030     m.e.]. .R.0.=.0.
 8011d90:	0078 0025 0030 0038 0078 002c 0020 0052     x.%.0.8.x.,. .R.
 8011da0:	0031 003d 0030 0078 0025 0030 0038 0078     1.=.0.x.%.0.8.x.
 8011db0:	002c 0020 0052 0032 003d 0030 0078 0025     ,. .R.2.=.0.x.%.
 8011dc0:	0030 0038 0078 002c 0020 0052 0033 003d     0.8.x.,. .R.3.=.
 8011dd0:	0030 0078 0025 0030 0038 0078 002c 0020     0.x.%.0.8.x.,. .
 8011de0:	0052 0031 0032 003d 0030 0078 0025 0030     R.1.2.=.0.x.%.0.
 8011df0:	0038 0078 0000 0000 0000 0000 0000 0000     8.x.............

08011e00 <System.String_97>:
 8011e00:	0004 0000 a1d0 0801 004a 0000 004a 0000     ........J...J...
 8011e10:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8011e20:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8011e30:	0052 0075 006e 0074 0069 006d 0065 002e     R.u.n.t.i.m.e...
 8011e40:	0054 0061 0072 0067 0065 0074 0050 006c     T.a.r.g.e.t.P.l.
 8011e50:	0061 0074 0066 006f 0072 006d 002e 0041     a.t.f.o.r.m...A.
 8011e60:	0052 004d 0076 0037 002e 0050 0072 006f     R.M.v.7...P.r.o.
 8011e70:	0063 0065 0073 0073 006f 0072 0041 0052     c.e.s.s.o.r.A.R.
 8011e80:	004d 0076 0037 004d 002e 004d 0065 0074     M.v.7.M...M.e.t.
 8011e90:	0068 006f 0064 0057 0072 0061 0070 0070     h.o.d.W.r.a.p.p.
 8011ea0:	0065 0072 0000 0000 0000 0000 0000 0000     e.r.............

08011eb0 <System.String_98>:
 8011eb0:	0004 0000 a1d0 0801 00b4 0000 00b4 0000     ................
 8011ec0:	0076 006f 0069 0064 0020 004d 0069 0063     v.o.i.d. .M.i.c.
 8011ed0:	0072 006f 0073 006f 0066 0074 002e 005a     r.o.s.o.f.t...Z.
 8011ee0:	0065 006c 0069 0067 002e 0052 0075 006e     e.l.i.g...R.u.n.
 8011ef0:	0074 0069 006d 0065 002e 0054 0061 0072     t.i.m.e...T.a.r.
 8011f00:	0067 0065 0074 0050 006c 0061 0074 0066     g.e.t.P.l.a.t.f.
 8011f10:	006f 0072 006d 002e 0041 0052 004d 0076     o.r.m...A.R.M.v.
 8011f20:	0037 002e 0050 0072 006f 0063 0065 0073     7...P.r.o.c.e.s.
 8011f30:	0073 006f 0072 0041 0052 004d 0076 0037     s.o.r.A.R.M.v.7.
 8011f40:	004d 002e 004d 0065 0074 0068 006f 0064     M...M.e.t.h.o.d.
 8011f50:	0057 0072 0061 0070 0070 0065 0072 003a     W.r.a.p.p.e.r.:.
 8011f60:	003a 0050 0072 006f 006c 006f 0067 0075     :.P.r.o.l.o.g.u.
 8011f70:	0065 0028 0073 0074 0072 0069 006e 0067     e.(.s.t.r.i.n.g.
 8011f80:	002c 0073 0074 0072 0069 006e 0067 002c     ,.s.t.r.i.n.g.,.
 8011f90:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8011fa0:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8011fb0:	0052 0075 006e 0074 0069 006d 0065 002e     R.u.n.t.i.m.e...
 8011fc0:	0054 0079 0070 0065 0053 0079 0073 0074     T.y.p.e.S.y.s.t.
 8011fd0:	0065 006d 002e 004d 0065 0074 0068 006f     e.m...M.e.t.h.o.
 8011fe0:	0064 0052 0065 0070 0072 0065 0073 0065     d.R.e.p.r.e.s.e.
 8011ff0:	006e 0074 0061 0074 0069 006f 006e 002e     n.t.a.t.i.o.n...
 8012000:	0042 0075 0069 006c 0064 0054 0069 006d     B.u.i.l.d.T.i.m.
 8012010:	0065 0041 0074 0074 0072 0069 0062 0075     e.A.t.t.r.i.b.u.
 8012020:	0074 0065 0073 0029 0000 0000 0000 0000     t.e.s.).........

08012030 <System.String_99>:
 8012030:	0004 0000 a1d0 0801 00b4 0000 00b4 0000     ................
 8012040:	0076 006f 0069 0064 0020 004d 0069 0063     v.o.i.d. .M.i.c.
 8012050:	0072 006f 0073 006f 0066 0074 002e 005a     r.o.s.o.f.t...Z.
 8012060:	0065 006c 0069 0067 002e 0052 0075 006e     e.l.i.g...R.u.n.
 8012070:	0074 0069 006d 0065 002e 0054 0061 0072     t.i.m.e...T.a.r.
 8012080:	0067 0065 0074 0050 006c 0061 0074 0066     g.e.t.P.l.a.t.f.
 8012090:	006f 0072 006d 002e 0041 0052 004d 0076     o.r.m...A.R.M.v.
 80120a0:	0037 002e 0050 0072 006f 0063 0065 0073     7...P.r.o.c.e.s.
 80120b0:	0073 006f 0072 0041 0052 004d 0076 0037     s.o.r.A.R.M.v.7.
 80120c0:	004d 002e 004d 0065 0074 0068 006f 0064     M...M.e.t.h.o.d.
 80120d0:	0057 0072 0061 0070 0070 0065 0072 003a     W.r.a.p.p.e.r.:.
 80120e0:	003a 0045 0070 0069 006c 006f 0067 0075     :.E.p.i.l.o.g.u.
 80120f0:	0065 0028 0073 0074 0072 0069 006e 0067     e.(.s.t.r.i.n.g.
 8012100:	002c 0073 0074 0072 0069 006e 0067 002c     ,.s.t.r.i.n.g.,.
 8012110:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8012120:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8012130:	0052 0075 006e 0074 0069 006d 0065 002e     R.u.n.t.i.m.e...
 8012140:	0054 0079 0070 0065 0053 0079 0073 0074     T.y.p.e.S.y.s.t.
 8012150:	0065 006d 002e 004d 0065 0074 0068 006f     e.m...M.e.t.h.o.
 8012160:	0064 0052 0065 0070 0072 0065 0073 0065     d.R.e.p.r.e.s.e.
 8012170:	006e 0074 0061 0074 0069 006f 006e 002e     n.t.a.t.i.o.n...
 8012180:	0042 0075 0069 006c 0064 0054 0069 006d     B.u.i.l.d.T.i.m.
 8012190:	0065 0041 0074 0074 0072 0069 0062 0075     e.A.t.t.r.i.b.u.
 80121a0:	0074 0065 0073 0029 0000 0000 0000 0000     t.e.s.).........

080121b0 <System.String_100>:
 80121b0:	0004 0000 a1d0 0801 0033 0000 0033 0000     ........3...3...
 80121c0:	0046 006f 0075 006e 0064 0020 0061 0072     F.o.u.n.d. .a.r.
 80121d0:	0072 0061 0079 0020 0074 0068 0061 0074     r.a.y. .t.h.a.t.
 80121e0:	0020 0064 006f 0065 0073 0020 006e 006f      .d.o.e.s. .n.o.
 80121f0:	0074 0020 0069 006e 0068 0065 0072 0069     t. .i.n.h.e.r.i.
 8012200:	0074 0020 0066 0072 006f 006d 0020 0053     t. .f.r.o.m. .S.
 8012210:	0079 0073 0074 0065 006d 002e 0041 0072     y.s.t.e.m...A.r.
 8012220:	0072 0061 0079 0000 0000 0000 0000 0000     r.a.y...........

08012230 <System.String_103>:
 8012230:	0004 0000 a1d0 0801 000b 0000 000b 0000     ................
 8012240:	0056 0054 0061 0062 006c 0065 0028 007b     V.T.a.b.l.e.(.{.
 8012250:	0030 007d 0029 0000 0000 0000 0000 0000     0.}.)...........

08012260 <System.String_125>:
 8012260:	0004 0000 a1d0 0801 0041 0000 0041 0000     ........A...A...
 8012270:	0021 0021 0021 0020 0020 0020 0020 0020     !.!.!. . . . . .
 8012280:	0020 0020 0020 0020 0020 0020 0020 0020      . . . . . . . .
 8012290:	0020 0020 0020 0020 0020 0020 0020 0020      . . . . . . . .
 80122a0:	0020 0020 0057 0041 0052 004e 0049 004e      . .W.A.R.N.I.N.
 80122b0:	0047 0020 0020 0020 0020 0020 0020 0020     G. . . . . . . .
 80122c0:	0020 0020 0020 0020 0020 0020 0020 0020      . . . . . . . .
 80122d0:	0020 0020 0020 0020 0020 0020 0020 0020      . . . . . . . .
 80122e0:	0020 0020 0020 0020 0020 0020 0021 0021      . . . . . .!.!.
 80122f0:	0021 0000 0000 0000 0000 0000 0000 0000     !...............

08012300 <System.String_126>:
 8012300:	0004 0000 a1d0 0801 0041 0000 0041 0000     ........A...A...
 8012310:	0021 0021 0021 0020 0054 0068 0072 006f     !.!.!. .T.h.r.o.
 8012320:	0077 0069 006e 0067 0020 0045 0078 0063     w.i.n.g. .E.x.c.
 8012330:	0065 0070 0074 0069 006f 006e 0073 0020     e.p.t.i.o.n.s. .
 8012340:	0069 0073 0020 006e 006f 0074 0020 0079     i.s. .n.o.t. .y.
 8012350:	0065 0074 0020 0073 0075 0070 0070 006f     e.t. .s.u.p.p.o.
 8012360:	0072 0074 0065 0064 0020 0066 006f 0072     r.t.e.d. .f.o.r.
 8012370:	0020 004c 004c 0056 004d 0020 0043 006f      .L.L.V.M. .C.o.
 8012380:	0064 0065 0047 0065 006e 0020 0021 0021     d.e.G.e.n. .!.!.
 8012390:	0021 0000 0000 0000 0000 0000 0000 0000     !...............

080123a0 <System.String_141>:
 80123a0:	0004 0000 a1d0 0801 0016 0000 0016 0000     ................
 80123b0:	0055 006e 0077 0069 006e 0064 0020 006e     U.n.w.i.n.d. .n.
 80123c0:	006f 0074 0020 0069 006d 0070 006c 0065     o.t. .i.m.p.l.e.
 80123d0:	006d 0065 006e 0074 0065 0064 0000 0000     m.e.n.t.e.d.....

080123e0 <System.String_148>:
 80123e0:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 80123f0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............

08012400 <System.String_161>:
 8012400:	0004 0000 a1d0 0801 0003 0000 0003 0000     ................
 8012410:	0023 0020 0025 0000 0000 0000 0000 0000     #. .%...........

08012420 <System.String_162>:
 8012420:	0004 0000 a1d0 0801 0002 0000 0002 0000     ................
 8012430:	0023 0025 0000 0000 0000 0000 0000 0000     #.%.............

08012440 <System.String_163>:
 8012440:	0004 0000 a1d0 0801 0002 0000 0002 0000     ................
 8012450:	0025 0023 0000 0000 0000 0000 0000 0000     %.#.............

08012460 <System.String_164>:
 8012460:	0004 0000 a1d0 0801 0004 0000 0004 0000     ................
 8012470:	002d 0023 0020 0025 0000 0000 0000 0000     -.#. .%.........

08012480 <System.String_165>:
 8012480:	0004 0000 a1d0 0801 0003 0000 0003 0000     ................
 8012490:	002d 0023 0025 0000 0000 0000 0000 0000     -.#.%...........

080124a0 <System.String_166>:
 80124a0:	0004 0000 a1d0 0801 0003 0000 0003 0000     ................
 80124b0:	002d 0025 0023 0000 0000 0000 0000 0000     -.%.#...........

080124c0 <System.String_167>:
 80124c0:	0004 0000 a1d0 0801 0003 0000 0003 0000     ................
 80124d0:	0028 0023 0029 0000 0000 0000 0000 0000     (.#.)...........

080124e0 <System.String_168>:
 80124e0:	0004 0000 a1d0 0801 0002 0000 0002 0000     ................
 80124f0:	002d 0023 0000 0000 0000 0000 0000 0000     -.#.............

08012500 <System.String_169>:
 8012500:	0004 0000 a1d0 0801 0003 0000 0003 0000     ................
 8012510:	002d 0020 0023 0000 0000 0000 0000 0000     -. .#...........

08012520 <System.String_170>:
 8012520:	0004 0000 a1d0 0801 0002 0000 0002 0000     ................
 8012530:	0023 002d 0000 0000 0000 0000 0000 0000     #.-.............

08012540 <System.String_171>:
 8012540:	0004 0000 a1d0 0801 0003 0000 0003 0000     ................
 8012550:	0023 0020 002d 0000 0000 0000 0000 0000     #. .-...........

08012560 <System.String_172>:
 8012560:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 8012570:	0023 0000 0000 0000 0000 0000 0000 0000     #...............

08012580 <System.String_203>:
 8012580:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 8012590:	002b 0000 0000 0000 0000 0000 0000 0000     +...............

080125a0 <System.String_204>:
 80125a0:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 80125b0:	002d 0000 0000 0000 0000 0000 0000 0000     -...............

080125c0 <System.String_205>:
 80125c0:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 80125d0:	002e 0000 0000 0000 0000 0000 0000 0000     ................

080125e0 <System.String_206>:
 80125e0:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 80125f0:	002c 0000 0000 0000 0000 0000 0000 0000     ,...............

08012600 <System.String_207>:
 8012600:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 8012610:	00a4 0000 0000 0000 0000 0000 0000 0000     ................

08012620 <System.String_208>:
 8012620:	0004 0000 a1d0 0801 0003 0000 0003 0000     ................
 8012630:	004e 0061 004e 0000 0000 0000 0000 0000     N.a.N...........

08012640 <System.String_209>:
 8012640:	0004 0000 a1d0 0801 0008 0000 0008 0000     ................
 8012650:	0049 006e 0066 0069 006e 0069 0074 0079     I.n.f.i.n.i.t.y.

08012660 <System.String_210>:
 8012660:	0004 0000 a1d0 0801 0009 0000 0009 0000     ................
 8012670:	002d 0049 006e 0066 0069 006e 0069 0074     -.I.n.f.i.n.i.t.
 8012680:	0079 0000 0000 0000 0000 0000 0000 0000     y...............

08012690 <System.String_211>:
 8012690:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 80126a0:	0025 0000 0000 0000 0000 0000 0000 0000     %...............

080126b0 <System.String_212>:
 80126b0:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 80126c0:	2030 0000 0000 0000 0000 0000 0000 0000     0 ..............

080126d0 <System.String_213>:
 80126d0:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 80126e0:	0030 0000 0000 0000 0000 0000 0000 0000     0...............

080126f0 <System.String_214>:
 80126f0:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 8012700:	0031 0000 0000 0000 0000 0000 0000 0000     1...............

08012710 <System.String_215>:
 8012710:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 8012720:	0032 0000 0000 0000 0000 0000 0000 0000     2...............

08012730 <System.String_216>:
 8012730:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 8012740:	0033 0000 0000 0000 0000 0000 0000 0000     3...............

08012750 <System.String_217>:
 8012750:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 8012760:	0034 0000 0000 0000 0000 0000 0000 0000     4...............

08012770 <System.String_218>:
 8012770:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 8012780:	0035 0000 0000 0000 0000 0000 0000 0000     5...............

08012790 <System.String_219>:
 8012790:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 80127a0:	0036 0000 0000 0000 0000 0000 0000 0000     6...............

080127b0 <System.String_220>:
 80127b0:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 80127c0:	0037 0000 0000 0000 0000 0000 0000 0000     7...............

080127d0 <System.String_221>:
 80127d0:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 80127e0:	0038 0000 0000 0000 0000 0000 0000 0000     8...............

080127f0 <System.String_222>:
 80127f0:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 8012800:	0039 0000 0000 0000 0000 0000 0000 0000     9...............

08012810 <System.String_239>:
 8012810:	0004 0000 a1d0 0801 0008 0000 0008 0000     ................
 8012820:	0067 0065 006e 0065 0072 0069 0063 0020     g.e.n.e.r.i.c. .

08012830 <System.String_241>:
 8012830:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 8012840:	003c 0000 0000 0000 0000 0000 0000 0000     <...............

08012850 <System.String_244>:
 8012850:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 8012860:	0029 0000 0000 0000 0000 0000 0000 0000     )...............

08012870 <System.String_245>:
 8012870:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 8012880:	003e 0000 0000 0000 0000 0000 0000 0000     >...............

08012890 <System.String_247>:
 8012890:	0004 0000 a1d0 0801 0024 0000 0024 0000     ........$...$...
 80128a0:	0041 0062 0073 0074 0072 0061 0063 0074     A.b.s.t.r.a.c.t.
 80128b0:	0052 0065 0066 0065 0072 0065 006e 0063     R.e.f.e.r.e.n.c.
 80128c0:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 80128d0:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 80128e0:	0069 006f 006e 0028 0000 0000 0000 0000     i.o.n.(.........

080128f0 <System.String_250>:
 80128f0:	0004 0000 a1d0 0801 001d 0000 001d 0000     ................
 8012900:	0042 006f 0078 0065 0064 0056 0061 006c     B.o.x.e.d.V.a.l.
 8012910:	0075 0065 0054 0079 0070 0065 0052 0065     u.e.T.y.p.e.R.e.
 8012920:	0070 0072 0065 0073 0065 006e 0074 0061     p.r.e.s.e.n.t.a.
 8012930:	0074 0069 006f 006e 0028 0000 0000 0000     t.i.o.n.(.......

08012940 <System.String_251>:
 8012940:	0004 0000 a1d0 0801 0006 0000 0006 0000     ................
 8012950:	0062 006f 0078 0065 0064 0020 0000 0000     b.o.x.e.d. .....

08012960 <System.String_252>:
 8012960:	0004 0000 a1d0 0801 0024 0000 0024 0000     ........$...$...
 8012970:	0043 006f 006e 0063 0072 0065 0074 0065     C.o.n.c.r.e.t.e.
 8012980:	0052 0065 0066 0065 0072 0065 006e 0063     R.e.f.e.r.e.n.c.
 8012990:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 80129a0:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 80129b0:	0069 006f 006e 0028 0000 0000 0000 0000     i.o.n.(.........

080129c0 <System.String_258>:
 80129c0:	0004 0000 a1d0 0801 001e 0000 001e 0000     ................
 80129d0:	0045 006e 0075 006d 0065 0072 0061 0074     E.n.u.m.e.r.a.t.
 80129e0:	0069 006f 006e 0054 0079 0070 0065 0052     i.o.n.T.y.p.e.R.
 80129f0:	0065 0070 0072 0065 0073 0065 006e 0074     e.p.r.e.s.e.n.t.
 8012a00:	0061 0074 0069 006f 006e 0028 0000 0000     a.t.i.o.n.(.....

08012a10 <System.String_259>:
 8012a10:	0004 0000 a1d0 0801 001c 0000 001c 0000     ................
 8012a20:	0049 006e 0074 0065 0072 0066 0061 0063     I.n.t.e.r.f.a.c.
 8012a30:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 8012a40:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 8012a50:	0069 006f 006e 0028 0000 0000 0000 0000     i.o.n.(.........

08012a60 <System.String_260>:
 8012a60:	0004 0000 a1d0 0801 0021 0000 0021 0000     ........!...!...
 8012a70:	004d 0061 006e 0061 0067 0065 0064 0050     M.a.n.a.g.e.d.P.
 8012a80:	006f 0069 006e 0074 0065 0072 0054 0079     o.i.n.t.e.r.T.y.
 8012a90:	0070 0065 0052 0065 0070 0072 0065 0073     p.e.R.e.p.r.e.s.
 8012aa0:	0065 006e 0074 0061 0074 0069 006f 006e     e.n.t.a.t.i.o.n.
 8012ab0:	0028 0000 0000 0000 0000 0000 0000 0000     (...............

08012ac0 <System.String_261>:
 8012ac0:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 8012ad0:	0026 0000 0000 0000 0000 0000 0000 0000     &...............

08012ae0 <System.String_262>:
 8012ae0:	0004 0000 a1d0 0801 0026 0000 0026 0000     ........&...&...
 8012af0:	004d 0075 006c 0074 0069 0041 0072 0072     M.u.l.t.i.A.r.r.
 8012b00:	0061 0079 0052 0065 0066 0065 0072 0065     a.y.R.e.f.e.r.e.
 8012b10:	006e 0063 0065 0054 0079 0070 0065 0052     n.c.e.T.y.p.e.R.
 8012b20:	0065 0070 0072 0065 0073 0065 006e 0074     e.p.r.e.s.e.n.t.
 8012b30:	0061 0074 0069 006f 006e 0028 0000 0000     a.t.i.o.n.(.....

08012b40 <System.String_263>:
 8012b40:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 8012b50:	005b 0000 0000 0000 0000 0000 0000 0000     [...............

08012b60 <System.String_264>:
 8012b60:	0004 0000 a1d0 0801 0002 0000 0002 0000     ................
 8012b70:	002e 002e 0000 0000 0000 0000 0000 0000     ................

08012b80 <System.String_265>:
 8012b80:	0004 0000 a1d0 0801 0001 0000 0001 0000     ................
 8012b90:	005d 0000 0000 0000 0000 0000 0000 0000     ]...............

08012ba0 <System.String_268>:
 8012ba0:	0004 0000 a1d0 0801 0019 0000 0019 0000     ................
 8012bb0:	0053 0063 0061 006c 0061 0072 0054 0079     S.c.a.l.a.r.T.y.
 8012bc0:	0070 0065 0052 0065 0070 0072 0065 0073     p.e.R.e.p.r.e.s.
 8012bd0:	0065 006e 0074 0061 0074 0069 006f 006e     e.n.t.a.t.i.o.n.
 8012be0:	0028 0000 0000 0000 0000 0000 0000 0000     (...............

08012bf0 <System.String_269>:
 8012bf0:	0004 0000 a1d0 0801 0023 0000 0023 0000     ........#...#...
 8012c00:	0053 007a 0041 0072 0072 0061 0079 0052     S.z.A.r.r.a.y.R.
 8012c10:	0065 0066 0065 0072 0065 006e 0063 0065     e.f.e.r.e.n.c.e.
 8012c20:	0054 0079 0070 0065 0052 0065 0070 0072     T.y.p.e.R.e.p.r.
 8012c30:	0065 0073 0065 006e 0074 0061 0074 0069     e.s.e.n.t.a.t.i.
 8012c40:	006f 006e 0028 0000 0000 0000 0000 0000     o.n.(...........

08012c50 <System.String_270>:
 8012c50:	0004 0000 a1d0 0801 0002 0000 0002 0000     ................
 8012c60:	005b 005d 0000 0000 0000 0000 0000 0000     [.].............

08012c70 <System.String_273>:
 8012c70:	0004 0000 a1d0 0801 002a 0000 002a 0000     ........*...*...
 8012c80:	0046 006f 0075 006e 0064 0020 0074 0077     F.o.u.n.d. .t.w.
 8012c90:	006f 0020 0069 006e 0063 006f 006e 0073     o. .i.n.c.o.n.s.
 8012ca0:	0069 0073 0074 0065 006e 0074 0020 0054     i.s.t.e.n.t. .T.
 8012cb0:	0079 0070 0065 0052 0065 0070 0072 0065     y.p.e.R.e.p.r.e.
 8012cc0:	0073 0065 006e 0074 0061 0074 0069 006f     s.e.n.t.a.t.i.o.
 8012cd0:	006e 0073 0000 0000 0000 0000 0000 0000     n.s.............

08012ce0 <System.String_274>:
 8012ce0:	0004 0000 a1d0 0801 0006 0000 0006 0000     ................
 8012cf0:	006f 0062 006a 0065 0063 0074 0000 0000     o.b.j.e.c.t.....

08012d00 <System.String_275>:
 8012d00:	0004 0000 a1d0 0801 0006 0000 0006 0000     ................
 8012d10:	0073 0074 0072 0069 006e 0067 0000 0000     s.t.r.i.n.g.....

08012d20 <System.String_276>:
 8012d20:	0004 0000 a1d0 0801 0006 0000 0006 0000     ................
 8012d30:	0064 006f 0075 0062 006c 0065 0000 0000     d.o.u.b.l.e.....

08012d40 <System.String_277>:
 8012d40:	0004 0000 a1d0 0801 0005 0000 0005 0000     ................
 8012d50:	0066 006c 006f 0061 0074 0000 0000 0000     f.l.o.a.t.......

08012d60 <System.String_278>:
 8012d60:	0004 0000 a1d0 0801 0005 0000 0005 0000     ................
 8012d70:	0075 006c 006f 006e 0067 0000 0000 0000     u.l.o.n.g.......

08012d80 <System.String_279>:
 8012d80:	0004 0000 a1d0 0801 0004 0000 0004 0000     ................
 8012d90:	006c 006f 006e 0067 0000 0000 0000 0000     l.o.n.g.........

08012da0 <System.String_280>:
 8012da0:	0004 0000 a1d0 0801 0004 0000 0004 0000     ................
 8012db0:	0075 0069 006e 0074 0000 0000 0000 0000     u.i.n.t.........

08012dc0 <System.String_281>:
 8012dc0:	0004 0000 a1d0 0801 0003 0000 0003 0000     ................
 8012dd0:	0069 006e 0074 0000 0000 0000 0000 0000     i.n.t...........

08012de0 <System.String_282>:
 8012de0:	0004 0000 a1d0 0801 0006 0000 0006 0000     ................
 8012df0:	0075 0073 0068 006f 0072 0074 0000 0000     u.s.h.o.r.t.....

08012e00 <System.String_283>:
 8012e00:	0004 0000 a1d0 0801 0005 0000 0005 0000     ................
 8012e10:	0073 0068 006f 0072 0074 0000 0000 0000     s.h.o.r.t.......

08012e20 <System.String_284>:
 8012e20:	0004 0000 a1d0 0801 0004 0000 0004 0000     ................
 8012e30:	0062 0079 0074 0065 0000 0000 0000 0000     b.y.t.e.........

08012e40 <System.String_285>:
 8012e40:	0004 0000 a1d0 0801 0005 0000 0005 0000     ................
 8012e50:	0073 0062 0079 0074 0065 0000 0000 0000     s.b.y.t.e.......

08012e60 <System.String_286>:
 8012e60:	0004 0000 a1d0 0801 0004 0000 0004 0000     ................
 8012e70:	0063 0068 0061 0072 0000 0000 0000 0000     c.h.a.r.........

08012e80 <System.String_287>:
 8012e80:	0004 0000 a1d0 0801 0004 0000 0004 0000     ................
 8012e90:	0062 006f 006f 006c 0000 0000 0000 0000     b.o.o.l.........

08012ea0 <System.String_288>:
 8012ea0:	0004 0000 a1d0 0801 0004 0000 0004 0000     ................
 8012eb0:	0076 006f 0069 0064 0000 0000 0000 0000     v.o.i.d.........

08012ec0 <System.String_289>:
 8012ec0:	0004 0000 a1d0 0801 0008 0000 0008 0000     ................
 8012ed0:	0064 0065 006c 0061 0079 0065 0064 0020     d.e.l.a.y.e.d. .

08012ee0 <System.String_291>:
 8012ee0:	0004 0000 a1d0 0801 0018 0000 0018 0000     ................
 8012ef0:	0056 0061 006c 0075 0065 0054 0079 0070     V.a.l.u.e.T.y.p.
 8012f00:	0065 0052 0065 0070 0072 0065 0073 0065     e.R.e.p.r.e.s.e.
 8012f10:	006e 0074 0061 0074 0069 006f 006e 0028     n.t.a.t.i.o.n.(.

08012f20 <System.String_338>:
 8012f20:	0004 0000 a1d0 0801 001f 0000 001f 0000     ................
 8012f30:	0043 0061 006e 006e 006f 0074 0020 0062     C.a.n.n.o.t. .b.
 8012f40:	006f 006f 0074 0073 0074 0072 0061 0070     o.o.t.s.t.r.a.p.
 8012f50:	0020 0069 006e 0020 0054 0068 0072 0065      .i.n. .T.h.r.e.
 8012f60:	0061 0064 0020 006d 006f 0064 0065 0000     a.d. .m.o.d.e...

08012f70 <System.String_362>:
 8012f70:	0004 0000 a1d0 0801 0015 0000 0015 0000     ................
 8012f80:	0041 0072 0067 0075 006d 0065 006e 0074     A.r.g.u.m.e.n.t.
 8012f90:	004e 0075 006c 006c 0045 0078 0063 0065     N.u.l.l.E.x.c.e.
 8012fa0:	0070 0074 0069 006f 006e 0000 0000 0000     p.t.i.o.n.......

08012fb0 <System.String_363>:
 8012fb0:	0004 0000 a1d0 0801 0006 0000 0006 0000     ................
 8012fc0:	0053 0079 0073 0074 0065 006d 0000 0000     S.y.s.t.e.m.....

08012fd0 <System.String_370>:
 8012fd0:	0004 0000 a1d0 0801 0018 0000 0018 0000     ................
 8012fe0:	0049 006e 0064 0065 0078 004f 0075 0074     I.n.d.e.x.O.u.t.
 8012ff0:	004f 0066 0052 0061 006e 0067 0065 0045     O.f.R.a.n.g.e.E.
 8013000:	0078 0063 0065 0070 0074 0069 006f 006e     x.c.e.p.t.i.o.n.

08013010 <System.String_373>:
 8013010:	0004 0000 a1d0 0801 0015 0000 0015 0000     ................
 8013020:	004e 006f 0074 0053 0075 0070 0070 006f     N.o.t.S.u.p.p.o.
 8013030:	0072 0074 0065 0064 0045 0078 0063 0065     r.t.e.d.E.x.c.e.
 8013040:	0070 0074 0069 006f 006e 0000 0000 0000     p.t.i.o.n.......

08013050 <System.String_376>:
 8013050:	0004 0000 a1d0 0801 0017 0000 0017 0000     ................
 8013060:	004e 006f 0074 0049 006d 0070 006c 0065     N.o.t.I.m.p.l.e.
 8013070:	006d 0065 006e 0074 0065 0064 0045 0078     m.e.n.t.e.d.E.x.
 8013080:	0063 0065 0070 0074 0069 006f 006e 0000     c.e.p.t.i.o.n...

08013090 <System.String_379>:
 8013090:	0004 0000 a1d0 0801 0022 0000 0022 0000     ........"..."...
 80130a0:	0053 007a 0041 0072 0072 0061 0079 0052     S.z.A.r.r.a.y.R.
 80130b0:	0065 0066 0065 0072 0065 006e 0063 0065     e.f.e.r.e.n.c.e.
 80130c0:	0054 0079 0070 0065 0052 0065 0070 0072     T.y.p.e.R.e.p.r.
 80130d0:	0065 0073 0065 006e 0074 0061 0074 0069     e.s.e.n.t.a.t.i.
 80130e0:	006f 006e 0000 0000 0000 0000 0000 0000     o.n.............

080130f0 <System.String_380>:
 80130f0:	0004 0000 a1d0 0801 0022 0000 0022 0000     ........"..."...
 8013100:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8013110:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8013120:	0052 0075 006e 0074 0069 006d 0065 002e     R.u.n.t.i.m.e...
 8013130:	0054 0079 0070 0065 0053 0079 0073 0074     T.y.p.e.S.y.s.t.
 8013140:	0065 006d 0000 0000 0000 0000 0000 0000     e.m.............

08013150 <System.String_383>:
 8013150:	0004 0000 a1d0 0801 0025 0000 0025 0000     ........%...%...
 8013160:	004d 0075 006c 0074 0069 0041 0072 0072     M.u.l.t.i.A.r.r.
 8013170:	0061 0079 0052 0065 0066 0065 0072 0065     a.y.R.e.f.e.r.e.
 8013180:	006e 0063 0065 0054 0079 0070 0065 0052     n.c.e.T.y.p.e.R.
 8013190:	0065 0070 0072 0065 0073 0065 006e 0074     e.p.r.e.s.e.n.t.
 80131a0:	0061 0074 0069 006f 006e 0000 0000 0000     a.t.i.o.n.......

080131b0 <System.String_386>:
 80131b0:	0004 0000 a1d0 0801 000d 0000 000d 0000     ................
 80131c0:	0052 0061 006e 006b 0045 0078 0063 0065     R.a.n.k.E.x.c.e.
 80131d0:	0070 0074 0069 006f 006e 0000 0000 0000     p.t.i.o.n.......

080131e0 <System.String_389>:
 80131e0:	0004 0000 a1d0 0801 001b 0000 001b 0000     ................
 80131f0:	0041 0072 0067 0075 006d 0065 006e 0074     A.r.g.u.m.e.n.t.
 8013200:	004f 0075 0074 004f 0066 0052 0061 006e     O.u.t.O.f.R.a.n.
 8013210:	0067 0065 0045 0078 0063 0065 0070 0074     g.e.E.x.c.e.p.t.
 8013220:	0069 006f 006e 0000 0000 0000 0000 0000     i.o.n...........

08013230 <System.String_398>:
 8013230:	0004 0000 a1d0 0801 0008 0000 0008 0000     ................
 8013240:	0044 0065 006c 0065 0067 0061 0074 0065     D.e.l.e.g.a.t.e.

08013250 <System.String_403>:
 8013250:	0004 0000 a1d0 0801 0011 0000 0011 0000     ................
 8013260:	004d 0075 006c 0074 0069 0063 0061 0073     M.u.l.t.i.c.a.s.
 8013270:	0074 0044 0065 006c 0065 0067 0061 0074     t.D.e.l.e.g.a.t.
 8013280:	0065 0000 0000 0000 0000 0000 0000 0000     e...............

08013290 <System.String_406>:
 8013290:	0004 0000 a1d0 0801 0006 0000 0006 0000     ................
 80132a0:	0053 0074 0072 0069 006e 0067 0000 0000     S.t.r.i.n.g.....

080132b0 <System.String_410>:
 80132b0:	0004 0000 a1d0 0801 000d 0000 000d 0000     ................
 80132c0:	0053 0074 0072 0069 006e 0067 0042 0075     S.t.r.i.n.g.B.u.
 80132d0:	0069 006c 0064 0065 0072 0000 0000 0000     i.l.d.e.r.......

080132e0 <System.String_411>:
 80132e0:	0004 0000 a1d0 0801 000b 0000 000b 0000     ................
 80132f0:	0053 0079 0073 0074 0065 006d 002e 0054     S.y.s.t.e.m...T.
 8013300:	0065 0078 0074 0000 0000 0000 0000 0000     e.x.t...........

08013310 <System.String_420>:
 8013310:	0004 0000 a1d0 0801 0014 0000 0014 0000     ................
 8013320:	0054 0068 0072 0065 0061 0064 0053 0074     T.h.r.e.a.d.S.t.
 8013330:	0061 0074 0065 0045 0078 0063 0065 0070     a.t.e.E.x.c.e.p.
 8013340:	0074 0069 006f 006e 0000 0000 0000 0000     t.i.o.n.........

08013350 <System.String_421>:
 8013350:	0004 0000 a1d0 0801 0010 0000 0010 0000     ................
 8013360:	0053 0079 0073 0074 0065 006d 002e 0054     S.y.s.t.e.m...T.
 8013370:	0068 0072 0065 0061 0064 0069 006e 0067     h.r.e.a.d.i.n.g.

08013380 <System.String_424>:
 8013380:	0004 0000 a1d0 0801 0006 0000 0006 0000     ................
 8013390:	0048 006f 006c 0064 0065 0072 0000 0000     H.o.l.d.e.r.....

080133a0 <System.String_427>:
 80133a0:	0004 0000 a1d0 0801 0007 0000 0007 0000     ................
 80133b0:	0043 006f 006e 0074 0065 0078 0074 0000     C.o.n.t.e.x.t...

080133c0 <System.String_430>:
 80133c0:	0004 0000 a1d0 0801 000c 0000 000c 0000     ................
 80133d0:	004b 0065 0072 006e 0065 006c 004e 006f     K.e.r.n.e.l.N.o.
 80133e0:	0064 0065 0060 0031 0000 0000 0000 0000     d.e.`.1.........

080133f0 <System.String_431>:
 80133f0:	0004 0000 a1d0 0801 0017 0000 0017 0000     ................
 8013400:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8013410:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8013420:	0052 0075 006e 0074 0069 006d 0065 0000     R.u.n.t.i.m.e...

08013430 <System.String_434>:
 8013430:	0004 0000 a1d0 0801 000c 0000 000c 0000     ................
 8013440:	004b 0065 0072 006e 0065 006c 004c 0069     K.e.r.n.e.l.L.i.
 8013450:	0073 0074 0060 0031 0000 0000 0000 0000     s.t.`.1.........

08013460 <System.String_439>:
 8013460:	0004 0000 a1d0 0801 000b 0000 000b 0000     ................
 8013470:	0054 0068 0072 0065 0061 0064 0053 0074     T.h.r.e.a.d.S.t.
 8013480:	0061 0072 0074 0000 0000 0000 0000 0000     a.r.t...........

08013490 <System.String_442>:
 8013490:	0004 0000 a1d0 0801 0016 0000 0016 0000     ................
 80134a0:	004e 0075 006c 006c 0052 0065 0066 0065     N.u.l.l.R.e.f.e.
 80134b0:	0072 0065 006e 0063 0065 0045 0078 0063     r.e.n.c.e.E.x.c.
 80134c0:	0065 0070 0074 0069 006f 006e 0000 0000     e.p.t.i.o.n.....

080134d0 <System.String_448>:
 80134d0:	0004 0000 a1d0 0801 0006 0000 0006 0000     ................
 80134e0:	0054 0068 0072 0065 0061 0064 0000 0000     T.h.r.e.a.d.....

080134f0 <System.String_453>:
 80134f0:	0004 0000 a1d0 0801 000f 0000 000f 0000     ................
 8013500:	0045 0076 0065 006e 0074 0057 0061 0069     E.v.e.n.t.W.a.i.
 8013510:	0074 0048 0061 006e 0064 006c 0065 0000     t.H.a.n.d.l.e...

08013520 <System.String_456>:
 8013520:	0004 0000 a1d0 0801 0011 0000 0011 0000     ................
 8013530:	0041 0072 0067 0075 006d 0065 006e 0074     A.r.g.u.m.e.n.t.
 8013540:	0045 0078 0063 0065 0070 0074 0069 006f     E.x.c.e.p.t.i.o.
 8013550:	006e 0000 0000 0000 0000 0000 0000 0000     n...............

08013560 <System.String_461>:
 8013560:	0004 0000 a1d0 0801 0020 0000 0020 0000     ........ ... ...
 8013570:	0041 0072 0072 0061 0079 0052 0065 0066     A.r.r.a.y.R.e.f.
 8013580:	0065 0072 0065 006e 0063 0065 0054 0079     e.r.e.n.c.e.T.y.
 8013590:	0070 0065 0052 0065 0070 0072 0065 0073     p.e.R.e.p.r.e.s.
 80135a0:	0065 006e 0074 0061 0074 0069 006f 006e     e.n.t.a.t.i.o.n.

080135b0 <System.String_480>:
 80135b0:	0004 0000 a1d0 0801 0009 0000 0009 0000     ................
 80135c0:	0053 0079 006e 0063 0042 006c 006f 0063     S.y.n.c.B.l.o.c.
 80135d0:	006b 0000 0000 0000 0000 0000 0000 0000     k...............

080135e0 <System.String_488>:
 80135e0:	0004 0000 a1d0 0801 0014 0000 0014 0000     ................
 80135f0:	004f 0075 0074 004f 0066 004d 0065 006d     O.u.t.O.f.M.e.m.
 8013600:	006f 0072 0079 0045 0078 0063 0065 0070     o.r.y.E.x.c.e.p.
 8013610:	0074 0069 006f 006e 0000 0000 0000 0000     t.i.o.n.........

08013620 <System.String_491>:
 8013620:	0004 0000 a1d0 0801 0014 0000 0014 0000     ................
 8013630:	0049 006e 0076 0061 006c 0069 0064 0043     I.n.v.a.l.i.d.C.
 8013640:	0061 0073 0074 0045 0078 0063 0065 0070     a.s.t.E.x.c.e.p.
 8013650:	0074 0069 006f 006e 0000 0000 0000 0000     t.i.o.n.........

08013660 <System.String_494>:
 8013660:	0004 0000 a1d0 0801 0009 0000 0009 0000     ................
 8013670:	0045 0078 0063 0065 0070 0074 0069 006f     E.x.c.e.p.t.i.o.
 8013680:	006e 0000 0000 0000 0000 0000 0000 0000     n...............

08013690 <System.String_499>:
 8013690:	0004 0000 a1d0 0801 000d 0000 000d 0000     ................
 80136a0:	0057 0061 0069 0074 0069 006e 0067 0052     W.a.i.t.i.n.g.R.
 80136b0:	0065 0063 006f 0072 0064 0000 0000 0000     e.c.o.r.d.......

080136c0 <System.String_500>:
 80136c0:	0004 0000 a1d0 0801 0027 0000 0027 0000     ........'...'...
 80136d0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 80136e0:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 80136f0:	0052 0075 006e 0074 0069 006d 0065 002e     R.u.n.t.i.m.e...
 8013700:	0053 0079 006e 0063 0068 0072 006f 006e     S.y.n.c.h.r.o.n.
 8013710:	0069 007a 0061 0074 0069 006f 006e 0000     i.z.a.t.i.o.n...

08013720 <System.String_514>:
 8013720:	0004 0000 a1d0 0801 0009 0000 0009 0000     ................
 8013730:	0059 0069 0065 006c 0064 004c 006f 0063     Y.i.e.l.d.L.o.c.
 8013740:	006b 0000 0000 0000 0000 0000 0000 0000     k...............

08013750 <System.String_517>:
 8013750:	0004 0000 a1d0 0801 000f 0000 000f 0000     ................
 8013760:	0043 0072 0069 0074 0069 0063 0061 006c     C.r.i.t.i.c.a.l.
 8013770:	0053 0065 0063 0074 0069 006f 006e 0000     S.e.c.t.i.o.n...

08013780 <System.String_520>:
 8013780:	0004 0000 a1d0 0801 0014 0000 0014 0000     ................
 8013790:	0045 0078 0063 0065 0070 0074 0069 006f     E.x.c.e.p.t.i.o.
 80137a0:	006e 004d 0065 0073 0073 0061 0067 0065     n.M.e.s.s.a.g.e.
 80137b0:	004b 0069 006e 0064 0000 0000 0000 0000     K.i.n.d.........

080137c0 <System.String_523>:
 80137c0:	0004 0000 a1d0 0801 0006 0000 0006 0000     ................
 80137d0:	004e 0075 006d 0062 0065 0072 0000 0000     N.u.m.b.e.r.....

080137e0 <System.String_526>:
 80137e0:	0004 0000 a1d0 0801 000f 0000 000f 0000     ................
 80137f0:	0046 006f 0072 006d 0061 0074 0045 0078     F.o.r.m.a.t.E.x.
 8013800:	0063 0065 0070 0074 0069 006f 006e 0000     c.e.p.t.i.o.n...

08013810 <System.String_533>:
 8013810:	0004 0000 a1d0 0801 000b 0000 000b 0000     ................
 8013820:	0052 0075 006e 0074 0069 006d 0065 0054     R.u.n.t.i.m.e.T.
 8013830:	0079 0070 0065 0000 0000 0000 0000 0000     y.p.e...........

08013840 <System.String_536>:
 8013840:	0004 0000 a1d0 0801 0013 0000 0013 0000     ................
 8013850:	0045 0076 0065 006e 0074 0057 0061 0069     E.v.e.n.t.W.a.i.
 8013860:	0074 0061 0062 006c 0065 004f 0062 006a     t.a.b.l.e.O.b.j.
 8013870:	0065 0063 0074 0000 0000 0000 0000 0000     e.c.t...........

08013880 <System.String_539>:
 8013880:	0004 0000 a1d0 0801 000f 0000 000f 0000     ................
 8013890:	0049 0046 006f 0072 006d 0061 0074 0050     I.F.o.r.m.a.t.P.
 80138a0:	0072 006f 0076 0069 0064 0065 0072 0000     r.o.v.i.d.e.r...

080138b0 <System.String_544>:
 80138b0:	0004 0000 a1d0 0801 000c 0000 000c 0000     ................
 80138c0:	0049 0046 006f 0072 006d 0061 0074 0074     I.F.o.r.m.a.t.t.
 80138d0:	0061 0062 006c 0065 0000 0000 0000 0000     a.b.l.e.........

080138e0 <System.String_547>:
 80138e0:	0004 0000 a1d0 0801 000a 0000 000a 0000     ................
 80138f0:	004d 0065 006d 0062 0065 0072 0049 006e     M.e.m.b.e.r.I.n.
 8013900:	0066 006f 0000 0000 0000 0000 0000 0000     f.o.............

08013910 <System.String_548>:
 8013910:	0004 0000 a1d0 0801 0011 0000 0011 0000     ................
 8013920:	0053 0079 0073 0074 0065 006d 002e 0052     S.y.s.t.e.m...R.
 8013930:	0065 0066 006c 0065 0063 0074 0069 006f     e.f.l.e.c.t.i.o.
 8013940:	006e 0000 0000 0000 0000 0000 0000 0000     n...............

08013950 <System.String_551>:
 8013950:	0004 0000 a1d0 0801 0019 0000 0019 0000     ................
 8013960:	0049 006e 0076 0061 006c 0069 0064 004f     I.n.v.a.l.i.d.O.
 8013970:	0070 0065 0072 0061 0074 0069 006f 006e     p.e.r.a.t.i.o.n.
 8013980:	0045 0078 0063 0065 0070 0074 0069 006f     E.x.c.e.p.t.i.o.
 8013990:	006e 0000 0000 0000 0000 0000 0000 0000     n...............

080139a0 <System.String_554>:
 80139a0:	0004 0000 a1d0 0801 000b 0000 000b 0000     ................
 80139b0:	0043 0075 006c 0074 0075 0072 0065 0049     C.u.l.t.u.r.e.I.
 80139c0:	006e 0066 006f 0000 0000 0000 0000 0000     n.f.o...........

080139d0 <System.String_555>:
 80139d0:	0004 0000 a1d0 0801 0014 0000 0014 0000     ................
 80139e0:	0053 0079 0073 0074 0065 006d 002e 0047     S.y.s.t.e.m...G.
 80139f0:	006c 006f 0062 0061 006c 0069 007a 0061     l.o.b.a.l.i.z.a.
 8013a00:	0074 0069 006f 006e 0000 0000 0000 0000     t.i.o.n.........

08013a10 <System.String_558>:
 8013a10:	0004 0000 a1d0 0801 0010 0000 0010 0000     ................
 8013a20:	004e 0075 006d 0062 0065 0072 0046 006f     N.u.m.b.e.r.F.o.
 8013a30:	0072 006d 0061 0074 0049 006e 0066 006f     r.m.a.t.I.n.f.o.

08013a40 <System.String_562>:
 8013a40:	0004 0000 a1d0 0801 001b 0000 001b 0000     ................
 8013a50:	0041 0073 0073 0065 0072 0074 0069 006f     A.s.s.e.r.t.i.o.
 8013a60:	006e 0056 0069 006f 006c 0061 0074 0069     n.V.i.o.l.a.t.i.
 8013a70:	006f 006e 0045 0078 0063 0065 0070 0074     o.n.E.x.c.e.p.t.
 8013a80:	0069 006f 006e 0000 0000 0000 0000 0000     i.o.n...........

08013a90 <System.String_563>:
 8013a90:	0004 0000 a1d0 0801 000f 0000 000f 0000     ................
 8013aa0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8013ab0:	0074 002e 005a 0065 006c 0069 0067 0000     t...Z.e.l.i.g...

08013ac0 <System.String_568>:
 8013ac0:	0004 0000 a1d0 0801 0009 0000 0009 0000     ................
 8013ad0:	0044 0069 006d 0065 006e 0073 0069 006f     D.i.m.e.n.s.i.o.
 8013ae0:	006e 0000 0000 0000 0000 0000 0000 0000     n...............

08013af0 <System.String_580>:
 8013af0:	0004 0000 a1d0 0801 001c 0000 001c 0000     ................
 8013b00:	0042 006f 0078 0065 0064 0056 0061 006c     B.o.x.e.d.V.a.l.
 8013b10:	0075 0065 0054 0079 0070 0065 0052 0065     u.e.T.y.p.e.R.e.
 8013b20:	0070 0072 0065 0073 0065 006e 0074 0061     p.r.e.s.e.n.t.a.
 8013b30:	0074 0069 006f 006e 0000 0000 0000 0000     t.i.o.n.........

08013b40 <System.String_586>:
 8013b40:	0004 0000 a1d0 0801 0019 0000 0019 0000     ................
 8013b50:	0050 006f 0069 006e 0074 0065 0072 0054     P.o.i.n.t.e.r.T.
 8013b60:	0079 0070 0065 0052 0065 0070 0072 0065     y.p.e.R.e.p.r.e.
 8013b70:	0073 0065 006e 0074 0061 0074 0069 006f     s.e.n.t.a.t.i.o.
 8013b80:	006e 0000 0000 0000 0000 0000 0000 0000     n...............

08013b90 <System.String_589>:
 8013b90:	0004 0000 a1d0 0801 0012 0000 0012 0000     ................
 8013ba0:	0054 0079 0070 0065 0052 0065 0070 0072     T.y.p.e.R.e.p.r.
 8013bb0:	0065 0073 0065 006e 0074 0061 0074 0069     e.s.e.n.t.a.t.i.
 8013bc0:	006f 006e 0000 0000 0000 0000 0000 0000     o.n.............

08013bd0 <System.String_594>:
 8013bd0:	0004 0000 a1d0 0801 0008 0000 0008 0000     ................
 8013be0:	0043 0061 006c 006c 0062 0061 0063 006b     C.a.l.l.b.a.c.k.

08013bf0 <System.String_601>:
 8013bf0:	0004 0000 a1d0 0801 000d 0000 000d 0000     ................
 8013c00:	0054 0069 006d 0065 0072 0043 0061 006c     T.i.m.e.r.C.a.l.
 8013c10:	006c 0062 0061 0063 006b 0000 0000 0000     l.b.a.c.k.......

08013c20 <System.String_602>:
 8013c20:	0004 0000 a1d0 0801 0027 0000 0027 0000     ........'...'...
 8013c30:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8013c40:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8013c50:	004c 006c 0069 006c 0075 006d 004f 0053     L.l.i.l.u.m.O.S.
 8013c60:	0041 0062 0073 0074 0072 0061 0063 0074     A.b.s.t.r.a.c.t.
 8013c70:	0069 006f 006e 002e 0048 0041 004c 0000     i.o.n...H.A.L...

08013c80 <System.String_605>:
 8013c80:	0004 0000 a1d0 0801 0005 0000 0005 0000     ................
 8013c90:	0054 0069 006d 0065 0072 0000 0000 0000     T.i.m.e.r.......

08013ca0 <System.String_618>:
 8013ca0:	0004 0000 a1d0 0801 0016 0000 0016 0000     ................
 8013cb0:	004b 0065 0072 006e 0065 006c 0043 0069     K.e.r.n.e.l.C.i.
 8013cc0:	0072 0063 0075 006c 0061 0072 0042 0075     r.c.u.l.a.r.B.u.
 8013cd0:	0066 0066 0065 0072 0060 0031 0000 0000     f.f.e.r.`.1.....

08013ce0 <System.String_623>:
 8013ce0:	0004 0000 a1d0 0801 0010 0000 0010 0000     ................
 8013cf0:	0054 0069 006d 0065 006f 0075 0074 0045     T.i.m.e.o.u.t.E.
 8013d00:	0078 0063 0065 0070 0074 0069 006f 006e     x.c.e.p.t.i.o.n.

08013d10 <System.String_626>:
 8013d10:	0004 0000 a1d0 0801 0015 0000 0015 0000     ................
 8013d20:	003c 003e 0063 005f 005f 0044 0069 0073     <.>.c._._.D.i.s.
 8013d30:	0070 006c 0061 0079 0043 006c 0061 0073     p.l.a.y.C.l.a.s.
 8013d40:	0073 0031 0032 005f 0030 0000 0000 0000     s.1.2._.0.......

08013d50 <System.String_629>:
 8013d50:	0004 0000 a1d0 0801 0006 0000 0006 0000     ................
 8013d60:	004c 0069 0073 0074 0060 0031 0000 0000     L.i.s.t.`.1.....

08013d70 <System.String_630>:
 8013d70:	0004 0000 a1d0 0801 001a 0000 001a 0000     ................
 8013d80:	0053 0079 0073 0074 0065 006d 002e 0043     S.y.s.t.e.m...C.
 8013d90:	006f 006c 006c 0065 0063 0074 0069 006f     o.l.l.e.c.t.i.o.
 8013da0:	006e 0073 002e 0047 0065 006e 0065 0072     n.s...G.e.n.e.r.
 8013db0:	0069 0063 0000 0000 0000 0000 0000 0000     i.c.............

08013dc0 <System.String_633>:
 8013dc0:	0004 0000 a1d0 0801 000b 0000 000b 0000     ................
 8013dd0:	004c 0077 0069 0070 004d 0061 0069 006c     L.w.i.p.M.a.i.l.
 8013de0:	0062 006f 0078 0000 0000 0000 0000 0000     b.o.x...........

08013df0 <System.String_634>:
 8013df0:	0004 0000 a1d0 0801 002c 0000 002c 0000     ........,...,...
 8013e00:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8013e10:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 8013e20:	004c 006c 0069 006c 0075 006d 004f 0053     L.l.i.l.u.m.O.S.
 8013e30:	0041 0062 0073 0074 0072 0061 0063 0074     A.b.s.t.r.a.c.t.
 8013e40:	0069 006f 006e 002e 0041 0050 0049 002e     i.o.n...A.P.I...
 8013e50:	004c 0057 0049 0050 0000 0000 0000 0000     L.W.I.P.........

08013e60 <System.String_639>:
 8013e60:	0004 0000 a1d0 0801 0009 0000 0009 0000     ................
 8013e70:	0041 0072 0072 0061 0079 004c 0069 0073     A.r.r.a.y.L.i.s.
 8013e80:	0074 0000 0000 0000 0000 0000 0000 0000     t...............

08013e90 <System.String_640>:
 8013e90:	0004 0000 a1d0 0801 0012 0000 0012 0000     ................
 8013ea0:	0053 0079 0073 0074 0065 006d 002e 0043     S.y.s.t.e.m...C.
 8013eb0:	006f 006c 006c 0065 0063 0074 0069 006f     o.l.l.e.c.t.i.o.
 8013ec0:	006e 0073 0000 0000 0000 0000 0000 0000     n.s.............

08013ed0 <System.String_643>:
 8013ed0:	0004 0000 a1d0 0801 0006 0000 0006 0000     ................
 8013ee0:	004f 0062 006a 0065 0063 0074 0000 0000     O.b.j.e.c.t.....

08013ef0 <System.String_646>:
 8013ef0:	0004 0000 a1d0 0801 0009 0000 0009 0000     ................
 8013f00:	004c 0077 0069 0070 004d 0075 0074 0065     L.w.i.p.M.u.t.e.
 8013f10:	0078 0000 0000 0000 0000 0000 0000 0000     x...............

08013f20 <System.String_649>:
 8013f20:	0004 0000 a1d0 0801 000d 0000 000d 0000     ................
 8013f30:	004c 0077 0069 0070 0053 0065 006d 0061     L.w.i.p.S.e.m.a.
 8013f40:	0070 0068 006f 0072 0065 0000 0000 0000     p.h.o.r.e.......

08013f50 <System.String_652>:
 8013f50:	0004 0000 a1d0 0801 000e 0000 000e 0000     ................
 8013f60:	0041 0075 0074 006f 0052 0065 0073 0065     A.u.t.o.R.e.s.e.
 8013f70:	0074 0045 0076 0065 006e 0074 0000 0000     t.E.v.e.n.t.....

08013f80 <System.String_659>:
 8013f80:	0004 0000 a1d0 0801 0010 0000 0010 0000     ................
 8013f90:	004d 0061 006e 0075 0061 006c 0052 0065     M.a.n.u.a.l.R.e.
 8013fa0:	0073 0065 0074 0045 0076 0065 006e 0074     s.e.t.E.v.e.n.t.

08013fb0 <System.String_666>:
 8013fb0:	0004 0000 a1d0 0801 000a 0000 000a 0000     ................
 8013fc0:	0047 006c 006f 0062 0061 006c 0052 006f     G.l.o.b.a.l.R.o.
 8013fd0:	006f 0074 0000 0000 0000 0000 0000 0000     o.t.............

08013fe0 <System.String_671>:
 8013fe0:	0004 0000 a1d0 0801 0011 0000 0011 0000     ................
 8013ff0:	0054 0079 0070 0065 0053 0079 0073 0074     T.y.p.e.S.y.s.t.
 8014000:	0065 006d 004d 0061 006e 0061 0067 0065     e.m.M.a.n.a.g.e.
 8014010:	0072 0000 0000 0000 0000 0000 0000 0000     r...............

08014020 <System.String_672>:
 8014020:	0004 0000 a1d0 0801 0018 0000 0018 0000     ................
 8014030:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8014040:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 8014050:	004d 0033 004f 006e 004d 0042 0045 0044     M.3.O.n.M.B.E.D.

08014060 <System.String_675>:
 8014060:	0004 0000 a1d0 0801 000d 0000 000d 0000     ................
 8014070:	0054 0068 0072 0065 0061 0064 004d 0061     T.h.r.e.a.d.M.a.
 8014080:	006e 0061 0067 0065 0072 0000 0000 0000     n.a.g.e.r.......

08014090 <System.String_676>:
 8014090:	0004 0000 a1d0 0801 001a 0000 001a 0000     ................
 80140a0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 80140b0:	0074 002e 004c 006c 0069 006c 0075 006d     t...L.l.i.l.u.m.
 80140c0:	002e 0053 0054 004d 0033 0032 0046 0034     ..S.T.M.3.2.F.4.
 80140d0:	0031 0031 0000 0000 0000 0000 0000 0000     1.1.............

080140e0 <System.String_679>:
 80140e0:	0004 0000 a1d0 0801 000b 0000 000b 0000     ................
 80140f0:	0050 0065 0072 0069 0070 0068 0065 0072     P.e.r.i.p.h.e.r.
 8014100:	0061 006c 0073 0000 0000 0000 0000 0000     a.l.s...........

08014110 <System.String_682>:
 8014110:	0004 0000 a1d0 0801 0006 0000 0006 0000     ................
 8014120:	0056 0054 0061 0062 006c 0065 0000 0000     V.T.a.b.l.e.....

08014130 <System.String_691>:
 8014130:	0004 0000 a1d0 0801 000f 0000 000f 0000     ................
 8014140:	0053 0079 0073 0074 0065 006d 0045 0078     S.y.s.t.e.m.E.x.
 8014150:	0063 0065 0070 0074 0069 006f 006e 0000     c.e.p.t.i.o.n...

08014160 <System.String_693>:
 8014160:	0004 0000 a1d0 0801 0005 0000 0005 0000     ................
 8014170:	0041 0072 0072 0061 0079 0000 0000 0000     A.r.r.a.y.......

08014180 <System.String_695>:
 8014180:	0004 0000 a1d0 0801 0009 0000 0009 0000     ................
 8014190:	0056 0061 006c 0075 0065 0054 0079 0070     V.a.l.u.e.T.y.p.
 80141a0:	0065 0000 0000 0000 0000 0000 0000 0000     e...............

080141b0 <System.String_697>:
 80141b0:	0004 0000 a1d0 0801 0004 0000 0004 0000     ................
 80141c0:	0042 0079 0074 0065 0000 0000 0000 0000     B.y.t.e.........

080141d0 <System.String_699>:
 80141d0:	0004 0000 a1d0 0801 0004 0000 0004 0000     ................
 80141e0:	0043 0068 0061 0072 0000 0000 0000 0000     C.h.a.r.........

080141f0 <System.String_703>:
 80141f0:	0004 0000 a1d0 0801 0005 0000 0005 0000     ................
 8014200:	0049 006e 0074 0033 0032 0000 0000 0000     I.n.t.3.2.......

08014210 <System.String_705>:
 8014210:	0004 0000 a1d0 0801 0006 0000 0006 0000     ................
 8014220:	0055 0049 006e 0074 0033 0032 0000 0000     U.I.n.t.3.2.....

08014230 <System.String_707>:
 8014230:	0004 0000 a1d0 0801 0007 0000 0007 0000     ................
 8014240:	0055 0049 006e 0074 0050 0074 0072 0000     U.I.n.t.P.t.r...

08014250 <System.String_709>:
 8014250:	0004 0000 a1d0 0801 0009 0000 0009 0000     ................
 8014260:	0050 0072 006f 0063 0065 0073 0073 006f     P.r.o.c.e.s.s.o.
 8014270:	0072 0000 0000 0000 0000 0000 0000 0000     r...............

08014280 <System.String_720>:
 8014280:	0004 0000 a1d0 0801 0017 0000 0017 0000     ................
 8014290:	0043 0072 0069 0074 0069 0063 0061 006c     C.r.i.t.i.c.a.l.
 80142a0:	0046 0069 006e 0061 006c 0069 007a 0065     F.i.n.a.l.i.z.e.
 80142b0:	0072 004f 0062 006a 0065 0063 0074 0000     r.O.b.j.e.c.t...

080142c0 <System.String_721>:
 80142c0:	0004 0000 a1d0 0801 0023 0000 0023 0000     ........#...#...
 80142d0:	0053 0079 0073 0074 0065 006d 002e 0052     S.y.s.t.e.m...R.
 80142e0:	0075 006e 0074 0069 006d 0065 002e 0043     u.n.t.i.m.e...C.
 80142f0:	006f 006e 0073 0074 0072 0061 0069 006e     o.n.s.t.r.a.i.n.
 8014300:	0065 0064 0045 0078 0065 0063 0075 0074     e.d.E.x.e.c.u.t.
 8014310:	0069 006f 006e 0000 0000 0000 0000 0000     i.o.n...........

08014320 <System.String_725>:
 8014320:	0004 0000 a1d0 0801 000a 0000 000a 0000     ................
 8014330:	0057 0061 0069 0074 0048 0061 006e 0064     W.a.i.t.H.a.n.d.
 8014340:	006c 0065 0000 0000 0000 0000 0000 0000     l.e.............

08014350 <System.String_727>:
 8014350:	0004 0000 a1d0 0801 000d 0000 000d 0000     ................
 8014360:	004d 0065 0074 0068 006f 0064 0057 0072     M.e.t.h.o.d.W.r.
 8014370:	0061 0070 0070 0065 0072 0000 0000 0000     a.p.p.e.r.......

08014380 <System.String_730>:
 8014380:	0004 0000 a1d0 0801 001b 0000 001b 0000     ................
 8014390:	0052 0065 0066 0065 0072 0065 006e 0063     R.e.f.e.r.e.n.c.
 80143a0:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 80143b0:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 80143c0:	0069 006f 006e 0000 0000 0000 0000 0000     i.o.n...........

080143d0 <System.String_733>:
 80143d0:	0004 0000 a1d0 0801 000d 0000 000d 0000     ................
 80143e0:	004d 0065 006d 006f 0072 0079 004d 0061     M.e.m.o.r.y.M.a.
 80143f0:	006e 0061 0067 0065 0072 0000 0000 0000     n.a.g.e.r.......

08014400 <System.String_736>:
 8014400:	0004 0000 a1d0 0801 0007 0000 0007 0000     ................
 8014410:	0053 0074 006f 0072 0061 0067 0065 0000     S.t.o.r.a.g.e...

08014420 <System.String_739>:
 8014420:	0004 0000 a1d0 0801 0006 0000 0006 0000     ................
 8014430:	0044 0065 0076 0069 0063 0065 0000 0000     D.e.v.i.c.e.....

08014440 <System.String_742>:
 8014440:	0004 0000 a1d0 0801 0006 0000 0006 0000     ................
 8014450:	004d 0065 006d 006f 0072 0079 0000 0000     M.e.m.o.r.y.....

08014460 <System.String_747>:
 8014460:	0004 0000 a1d0 0801 000e 0000 000e 0000     ................
 8014470:	0053 0079 006e 0063 0042 006c 006f 0063     S.y.n.c.B.l.o.c.
 8014480:	006b 0054 0061 0062 006c 0065 0000 0000     k.T.a.b.l.e.....

08014490 <System.String_750>:
 8014490:	0004 0000 a1d0 0801 000b 0000 000b 0000     ................
 80144a0:	0053 0079 0073 0074 0065 006d 0054 0069     S.y.s.t.e.m.T.i.
 80144b0:	006d 0065 0072 0000 0000 0000 0000 0000     m.e.r...........

080144c0 <System.String_751>:
 80144c0:	0004 0000 a1d0 0801 0022 0000 0022 0000     ........"..."...
 80144d0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 80144e0:	0074 002e 004c 006c 0069 006c 0075 006d     t...L.l.i.l.u.m.
 80144f0:	002e 0053 0054 004d 0033 0032 0046 0034     ..S.T.M.3.2.F.4.
 8014500:	0031 0031 002e 0044 0072 0069 0076 0065     1.1...D.r.i.v.e.
 8014510:	0072 0073 0000 0000 0000 0000 0000 0000     r.s.............

08014520 <System.String_754>:
 8014520:	0004 0000 a1d0 0801 000c 0000 000c 0000     ................
 8014530:	0045 006d 0070 0074 0079 004d 0061 006e     E.m.p.t.y.M.a.n.
 8014540:	0061 0067 0065 0072 0000 0000 0000 0000     a.g.e.r.........

08014550 <System.String_768>:
 8014550:	0004 0000 a1d0 0801 000f 0000 000f 0000     ................
 8014560:	0050 0072 006f 0063 0065 0073 0073 006f     P.r.o.c.e.s.s.o.
 8014570:	0072 0041 0052 004d 0076 0037 004d 0000     r.A.R.M.v.7.M...

08014580 <System.String_769>:
 8014580:	0004 0000 a1d0 0801 002c 0000 002c 0000     ........,...,...
 8014590:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 80145a0:	0074 002e 005a 0065 006c 0069 0067 002e     t...Z.e.l.i.g...
 80145b0:	0052 0075 006e 0074 0069 006d 0065 002e     R.u.n.t.i.m.e...
 80145c0:	0054 0061 0072 0067 0065 0074 0050 006c     T.a.r.g.e.t.P.l.
 80145d0:	0061 0074 0066 006f 0072 006d 002e 0041     a.t.f.o.r.m...A.
 80145e0:	0052 004d 0076 0037 0000 0000 0000 0000     R.M.v.7.........

080145f0 <System.String_772>:
 80145f0:	0004 0000 a1d0 0801 000e 0000 000e 0000     ................
 8014600:	0057 0061 0069 0074 0061 0062 006c 0065     W.a.i.t.a.b.l.e.
 8014610:	004f 0062 006a 0065 0063 0074 0000 0000     O.b.j.e.c.t.....

08014620 <System.String_776>:
 8014620:	0004 0000 a1d0 0801 0004 0000 0004 0000     ................
 8014630:	0045 006e 0075 006d 0000 0000 0000 0000     E.n.u.m.........

08014640 <System.String_778>:
 8014640:	0004 0000 a1d0 0801 0004 0000 0004 0000     ................
 8014650:	0054 0079 0070 0065 0000 0000 0000 0000     T.y.p.e.........

08014660 <System.String_786>:
 8014660:	0004 0000 a1d0 0801 0012 0000 0012 0000     ................
 8014670:	0042 0061 0073 0065 0052 0065 0070 0072     B.a.s.e.R.e.p.r.
 8014680:	0065 0073 0065 006e 0074 0061 0074 0069     e.s.e.n.t.a.t.i.
 8014690:	006f 006e 0000 0000 0000 0000 0000 0000     o.n.............

080146a0 <System.String_788>:
 80146a0:	0004 0000 a1d0 0801 0020 0000 0020 0000     ........ ... ...
 80146b0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 80146c0:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 80146d0:	004d 0033 004f 006e 004d 0042 0045 0044     M.3.O.n.M.B.E.D.
 80146e0:	002e 0044 0072 0069 0076 0065 0072 0073     ..D.r.i.v.e.r.s.

080146f0 <System.String_790>:
 80146f0:	0004 0000 a1d0 0801 0013 0000 0013 0000     ................
 8014700:	0049 006e 0074 0065 0072 0072 0075 0070     I.n.t.e.r.r.u.p.
 8014710:	0074 0043 006f 006e 0074 0072 006f 006c     t.C.o.n.t.r.o.l.
 8014720:	006c 0065 0072 0000 0000 0000 0000 0000     l.e.r...........

08014730 <System.String_797>:
 8014730:	0004 0000 a1d0 0801 0012 0000 0012 0000     ................
 8014740:	0043 006f 006e 0074 0065 0078 0074 0053     C.o.n.t.e.x.t.S.
 8014750:	0077 0069 0074 0063 0068 0054 0069 006d     w.i.t.c.h.T.i.m.
 8014760:	0065 0072 0000 0000 0000 0000 0000 0000     e.r.............

08014770 <System.String_800>:
 8014770:	0004 0000 a1d0 0801 0005 0000 0005 0000     ................
 8014780:	0042 006f 0061 0072 0064 0000 0000 0000     B.o.a.r.d.......

08014790 <System.String_803>:
 8014790:	0004 0000 a1d0 0801 0007 0000 0007 0000     ................
 80147a0:	0053 0079 0073 0054 0069 0063 006b 0000     S.y.s.T.i.c.k...

080147b0 <System.String_804>:
 80147b0:	0004 0000 a1d0 0801 0027 0000 0027 0000     ........'...'...
 80147c0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 80147d0:	0074 002e 0044 0065 0076 0069 0063 0065     t...D.e.v.i.c.e.
 80147e0:	004d 006f 0064 0065 006c 0073 002e 0043     M.o.d.e.l.s...C.
 80147f0:	0068 0069 0070 0073 0065 0074 002e 0043     h.i.p.s.e.t...C.
 8014800:	006f 0072 0074 0065 0078 004d 0033 0000     o.r.t.e.x.M.3...

08014810 <System.String_811>:
 8014810:	0004 0000 a1d0 0801 000d 0000 000d 0000     ................
 8014820:	0049 006e 0074 0065 0072 0072 0075 0070     I.n.t.e.r.r.u.p.
 8014830:	0074 0044 0061 0074 0061 0000 0000 0000     t.D.a.t.a.......

08014840 <System.String_813>:
 8014840:	0004 0000 a1d0 0801 0008 0000 0008 0000     ................
 8014850:	0053 0079 0073 005f 0041 0072 0063 0068     S.y.s._.A.r.c.h.

08014860 <System.String_821>:
 8014860:	0004 0000 a1d0 0801 001d 0000 001d 0000     ................
 8014870:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8014880:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 8014890:	004d 0033 004f 006e 0043 004d 0053 0049     M.3.O.n.C.M.S.I.
 80148a0:	0053 0043 006f 0072 0065 0000 0000 0000     S.C.o.r.e.......

080148b0 <System.String_823>:
 80148b0:	0004 0000 a1d0 0801 0018 0000 0018 0000     ................
 80148c0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 80148d0:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 80148e0:	004d 0034 004f 006e 004d 0042 0045 0044     M.4.O.n.M.B.E.D.

080148f0 <System.String_826>:
 80148f0:	0004 0000 a1d0 0801 0023 0000 0023 0000     ........#...#...
 8014900:	0043 006f 006e 0063 0072 0065 0074 0065     C.o.n.c.r.e.t.e.
 8014910:	0052 0065 0066 0065 0072 0065 006e 0063     R.e.f.e.r.e.n.c.
 8014920:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 8014930:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 8014940:	0069 006f 006e 0000 0000 0000 0000 0000     i.o.n...........

08014950 <System.String_829>:
 8014950:	0004 0000 a1d0 0801 000b 0000 000b 0000     ................
 8014960:	0043 006f 0064 0065 0050 006f 0069 006e     C.o.d.e.P.o.i.n.
 8014970:	0074 0065 0072 0000 0000 0000 0000 0000     t.e.r...........

08014980 <System.String_831>:
 8014980:	0004 0000 a1d0 0801 000c 0000 000c 0000     ................
 8014990:	0049 006e 0074 0065 0072 0066 0061 0063     I.n.t.e.r.f.a.c.
 80149a0:	0065 004d 0061 0070 0000 0000 0000 0000     e.M.a.p.........

080149b0 <System.String_847>:
 80149b0:	0004 0000 a1d0 0801 0023 0000 0023 0000     ........#...#...
 80149c0:	0041 0062 0073 0074 0072 0061 0063 0074     A.b.s.t.r.a.c.t.
 80149d0:	0052 0065 0066 0065 0072 0065 006e 0063     R.e.f.e.r.e.n.c.
 80149e0:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 80149f0:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 8014a00:	0069 006f 006e 0000 0000 0000 0000 0000     i.o.n...........

08014a10 <System.String_870>:
 8014a10:	0004 0000 a1d0 0801 0012 0000 0012 0000     ................
 8014a20:	004d 0061 0072 0073 0068 0061 006c 0042     M.a.r.s.h.a.l.B.
 8014a30:	0079 0052 0065 0066 004f 0062 006a 0065     y.R.e.f.O.b.j.e.
 8014a40:	0063 0074 0000 0000 0000 0000 0000 0000     c.t.............

08014a50 <System.String_874>:
 8014a50:	0004 0000 a1d0 0801 0015 0000 0015 0000     ................
 8014a60:	0041 0062 0073 0074 0072 0061 0063 0074     A.b.s.t.r.a.c.t.
 8014a70:	004d 0065 0074 0068 006f 0064 0057 0072     M.e.t.h.o.d.W.r.
 8014a80:	0061 0070 0070 0065 0072 0000 0000 0000     a.p.p.e.r.......

08014a90 <System.String_882>:
 8014a90:	0004 0000 a1d0 0801 0005 0000 0005 0000     ................
 8014aa0:	0052 0061 006e 0067 0065 0000 0000 0000     R.a.n.g.e.......

08014ab0 <System.String_884>:
 8014ab0:	0004 0000 a1d0 0801 0020 0000 0020 0000     ........ ... ...
 8014ac0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8014ad0:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 8014ae0:	004d 0034 004f 006e 004d 0042 0045 0044     M.4.O.n.M.B.E.D.
 8014af0:	002e 0044 0072 0069 0076 0065 0072 0073     ..D.r.i.v.e.r.s.

08014b00 <System.String_886>:
 8014b00:	0004 0000 a1d0 0801 0018 0000 0018 0000     ................
 8014b10:	0047 0061 0072 0062 0061 0067 0065 0043     G.a.r.b.a.g.e.C.
 8014b20:	006f 006c 006c 0065 0063 0074 0069 006f     o.l.l.e.c.t.i.o.
 8014b30:	006e 004d 0061 006e 0061 0067 0065 0072     n.M.a.n.a.g.e.r.

08014b40 <System.String_888>:
 8014b40:	0004 0000 a1d0 0801 0020 0000 0020 0000     ........ ... ...
 8014b50:	004d 0061 006e 0061 0067 0065 0064 0050     M.a.n.a.g.e.d.P.
 8014b60:	006f 0069 006e 0074 0065 0072 0054 0079     o.i.n.t.e.r.T.y.
 8014b70:	0070 0065 0052 0065 0070 0072 0065 0073     p.e.R.e.p.r.e.s.
 8014b80:	0065 006e 0074 0061 0074 0069 006f 006e     e.n.t.a.t.i.o.n.

08014b90 <System.String_902>:
 8014b90:	0004 0000 a1d0 0801 001d 0000 001d 0000     ................
 8014ba0:	0045 006e 0075 006d 0065 0072 0061 0074     E.n.u.m.e.r.a.t.
 8014bb0:	0069 006f 006e 0054 0079 0070 0065 0052     i.o.n.T.y.p.e.R.
 8014bc0:	0065 0070 0072 0065 0073 0065 006e 0074     e.p.r.e.s.e.n.t.
 8014bd0:	0061 0074 0069 006f 006e 0000 0000 0000     a.t.i.o.n.......

08014be0 <System.String_911>:
 8014be0:	0004 0000 a1d0 0801 001b 0000 001b 0000     ................
 8014bf0:	0049 006e 0074 0065 0072 0066 0061 0063     I.n.t.e.r.f.a.c.
 8014c00:	0065 0054 0079 0070 0065 0052 0065 0070     e.T.y.p.e.R.e.p.
 8014c10:	0072 0065 0073 0065 006e 0074 0061 0074     r.e.s.e.n.t.a.t.
 8014c20:	0069 006f 006e 0000 0000 0000 0000 0000     i.o.n...........

08014c30 <System.String_916>:
 8014c30:	0004 0000 a1d0 0801 0017 0000 0017 0000     ................
 8014c40:	0056 0061 006c 0075 0065 0054 0079 0070     V.a.l.u.e.T.y.p.
 8014c50:	0065 0052 0065 0070 0072 0065 0073 0065     e.R.e.p.r.e.s.e.
 8014c60:	006e 0074 0061 0074 0069 006f 006e 0000     n.t.a.t.i.o.n...

08014c70 <System.String_924>:
 8014c70:	0004 0000 a1d0 0801 002f 0000 002f 0000     ......../.../...
 8014c80:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8014c90:	0074 002e 0044 0065 0076 0069 0063 0065     t...D.e.v.i.c.e.
 8014ca0:	004d 006f 0064 0065 006c 0073 002e 0043     M.o.d.e.l.s...C.
 8014cb0:	0068 0069 0070 0073 0065 0074 002e 0043     h.i.p.s.e.t...C.
 8014cc0:	006f 0072 0074 0065 0078 004d 0034 002e     o.r.t.e.x.M.4...
 8014cd0:	0044 0072 0069 0076 0065 0072 0073 0000     D.r.i.v.e.r.s...

08014ce0 <System.String_927>:
 8014ce0:	0004 0000 a1d0 0801 0007 0000 0007 0000     ................
 8014cf0:	0048 0061 006e 0064 006c 0065 0072 0000     H.a.n.d.l.e.r...

08014d00 <System.String_929>:
 8014d00:	0004 0000 a1d0 0801 002f 0000 002f 0000     ......../.../...
 8014d10:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8014d20:	0074 002e 0044 0065 0076 0069 0063 0065     t...D.e.v.i.c.e.
 8014d30:	004d 006f 0064 0065 006c 0073 002e 0043     M.o.d.e.l.s...C.
 8014d40:	0068 0069 0070 0073 0065 0074 002e 0043     h.i.p.s.e.t...C.
 8014d50:	006f 0072 0074 0065 0078 004d 0033 002e     o.r.t.e.x.M.3...
 8014d60:	0044 0072 0069 0076 0065 0072 0073 0000     D.r.i.v.e.r.s...

08014d70 <System.String_935>:
 8014d70:	0004 0000 a1d0 0801 0018 0000 0018 0000     ................
 8014d80:	0044 0065 0066 0061 0075 006c 0074 0054     D.e.f.a.u.l.t.T.
 8014d90:	0079 0070 0065 0053 0079 0073 0074 0065     y.p.e.S.y.s.t.e.
 8014da0:	006d 004d 0061 006e 0061 0067 0065 0072     m.M.a.n.a.g.e.r.

08014db0 <System.String_952>:
 8014db0:	0004 0000 a1d0 0801 0018 0000 0018 0000     ................
 8014dc0:	0053 0063 0061 006c 0061 0072 0054 0079     S.c.a.l.a.r.T.y.
 8014dd0:	0070 0065 0052 0065 0070 0072 0065 0073     p.e.R.e.p.r.e.s.
 8014de0:	0065 006e 0074 0061 0074 0069 006f 006e     e.n.t.a.t.i.o.n.

08014df0 <System.String_960>:
 8014df0:	0004 0000 a1d0 0801 001d 0000 001d 0000     ................
 8014e00:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8014e10:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 8014e20:	004d 0034 004f 006e 0043 004d 0053 0049     M.4.O.n.C.M.S.I.
 8014e30:	0053 0043 006f 0072 0065 0000 0000 0000     S.C.o.r.e.......

08014e40 <System.String_968>:
 8014e40:	0004 0000 a1d0 0801 000e 0000 000e 0000     ................
 8014e50:	0047 0065 006e 0065 0072 0069 0063 0043     G.e.n.e.r.i.c.C.
 8014e60:	006f 006e 0074 0065 0078 0074 0000 0000     o.n.t.e.x.t.....

08014e70 <System.String_979>:
 8014e70:	0004 0000 a1d0 0801 0013 0000 0013 0000     ................
 8014e80:	004c 0069 006e 0065 0061 0072 004d 0065     L.i.n.e.a.r.M.e.
 8014e90:	006d 006f 0072 0079 004d 0061 006e 0061     m.o.r.y.M.a.n.a.
 8014ea0:	0067 0065 0072 0000 0000 0000 0000 0000     g.e.r...........

08014eb0 <System.String_1038>:
 8014eb0:	0004 0000 a1d0 0801 0027 0000 0027 0000     ........'...'...
 8014ec0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8014ed0:	0074 002e 0044 0065 0076 0069 0063 0065     t...D.e.v.i.c.e.
 8014ee0:	004d 006f 0064 0065 006c 0073 002e 0043     M.o.d.e.l.s...C.
 8014ef0:	0068 0069 0070 0073 0065 0074 002e 0043     h.i.p.s.e.t...C.
 8014f00:	006f 0072 0074 0065 0078 004d 0034 0000     o.r.t.e.x.M.4...

08014f10 <System.String_1043>:
 8014f10:	0004 0000 a1d0 0801 0013 0000 0013 0000     ................
 8014f20:	0050 0072 006f 0063 0065 0073 0073 006f     P.r.o.c.e.s.s.o.
 8014f30:	0072 0041 0052 004d 0076 0037 004d 005f     r.A.R.M.v.7.M._.
 8014f40:	0056 0046 0050 0000 0000 0000 0000 0000     V.F.P...........

08014f50 <System.String_1068>:
 8014f50:	0004 0000 a1d0 0801 0025 0000 0025 0000     ........%...%...
 8014f60:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8014f70:	0074 002e 0043 006f 0072 0074 0065 0078     t...C.o.r.t.e.x.
 8014f80:	004d 0033 004f 006e 0043 004d 0053 0049     M.3.O.n.C.M.S.I.
 8014f90:	0053 0043 006f 0072 0065 002e 0044 0072     S.C.o.r.e...D.r.
 8014fa0:	0069 0076 0065 0072 0073 0000 0000 0000     i.v.e.r.s.......

08014fb0 <System.String_1085>:
 8014fb0:	0004 0000 a1d0 0801 002f 0000 002f 0000     ......../.../...
 8014fc0:	004d 0069 0063 0072 006f 0073 006f 0066     M.i.c.r.o.s.o.f.
 8014fd0:	0074 002e 0044 0065 0076 0069 0063 0065     t...D.e.v.i.c.e.
 8014fe0:	004d 006f 0064 0065 006c 0073 002e 0043     M.o.d.e.l.s...C.
 8014ff0:	0068 0069 0070 0073 0065 0074 002e 0043     h.i.p.s.e.t...C.
 8015000:	006f 0072 0074 0065 0078 004d 0033 002e     o.r.t.e.x.M.3...
 8015010:	0052 0075 006e 0074 0069 006d 0065 0000     R.u.n.t.i.m.e...

08015020 <System.String_1115>:
 8015020:	0004 0000 a1d0 0801 0012 0000 0012 0000     ................
 8015030:	0041 0052 004d 0076 0037 0054 0068 0072     A.R.M.v.7.T.h.r.
 8015040:	0065 0061 0064 004d 0061 006e 0061 0067     e.a.d.M.a.n.a.g.
 8015050:	0065 0072 0000 0000 0000 0000 0000 0000     e.r.............

08015060 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_4>:
 8015060:	0004 0000 afe0 0801 0000 0000               ............

0801506c <System.Object[]_6>:
 801506c:	0004 0000 a0b0 0801 0000 0000               ............

08015078 <System.Threading.Thread[]_7>:
 8015078:	0004 0000 af50 0801 0000 0000 0000 0000     ....P...........
	...

08015090 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_12>:
 8015090:	0004 0000 b0d0 0801 0004 0000 0861 0800     ............a...
 80150a0:	0873 0800 087f 0800 0887 0800               s...........

080150ac <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_13>:
 80150ac:	0004 0000 b100 0801 0000 0000 0000 0000     ................
 80150bc:	0000 0000                                   ....

080150c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_15>:
 80150c0:	0004 0000 b0d0 0801 0004 0000 0861 0800     ............a...
 80150d0:	0873 0800 087f 0800 0a25 0800 0000 0000     s.......%.......

080150e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_17>:
 80150e0:	0004 0000 b0d0 0801 0004 0000 0861 0800     ............a...
 80150f0:	0873 0800 087f 0800 0a25 0800 0000 0000     s.......%.......

08015100 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_20>:
 8015100:	0004 0000 b0d0 0801 0004 0000 0861 0800     ............a...
 8015110:	0873 0800 087f 0800 0a25 0800 0000 0000     s.......%.......

08015120 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_22>:
 8015120:	0004 0000 b0d0 0801 000a 0000 0af9 0800     ................
 8015130:	0b4d 0800 0b61 0800 0b79 0800 0bc9 0800     M...a...y.......
 8015140:	0bcd 0800 0bcf 0800 0be7 0800 0c01 0800     ................
 8015150:	0c39 0800 0000 0000 0000 0000 0000 0000     9...............

08015160 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_24>:
 8015160:	0004 0000 b0d0 0801 000a 0000 0c75 0800     ............u...
 8015170:	0cc9 0800 0cd3 0800 0cdd 0800 0bc9 0800     ................
 8015180:	0bcd 0800 0bcf 0800 0be7 0800 0d41 0800     ............A...
 8015190:	0e25 0800 0000 0000 0000 0000 0000 0000     %...............

080151a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_26>:
 80151a0:	0004 0000 b0d0 0801 0004 0000 0861 0800     ............a...
 80151b0:	0873 0800 087f 0800 0a25 0800 0000 0000     s.......%.......

080151c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_29>:
 80151c0:	0004 0000 b0d0 0801 0004 0000 0861 0800     ............a...
 80151d0:	0873 0800 087f 0800 0887 0800 0000 0000     s...............

080151e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_31>:
 80151e0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 80151f0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015200 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_33>:
 8015200:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015210:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015220 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_35>:
 8015220:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015230:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015240 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_37>:
 8015240:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8015250:	12ed 0800 1369 0800 136d 0800 0000 0000     ....i...m.......

08015260 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_39>:
 8015260:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015270:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015280 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_41>:
 8015280:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8015290:	1529 0800 1585 0800 15cf 0800 0000 0000     )...............

080152a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_43>:
 80152a0:	0004 0000 b0d0 0801 0003 0000 18fd 0800     ................
 80152b0:	18cd 0800 18ff 0800 0000 0000 0000 0000     ................

080152c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_45>:
 80152c0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 80152d0:	0873 0800 087f 0800                         s.......

080152d8 <System.RuntimeType_47>:
 80152d8:	0004 0000 a890 0801 a1d0 0801 0000 0000     ................
	...

080152f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_48>:
 80152f0:	0004 0000 b0d0 0801 0003 0000 1bb5 0800     ................
 8015300:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015310 <System.Char[]_51>:
 8015310:	0004 0000 a200 0801 0019 0000 0009 000a     ................
 8015320:	000b 000c 000d 0020 0085 00a0 1680 2000     ...... ........ 
 8015330:	2001 2002 2003 2004 2005 2006 2007 2008     . . . . . . . . 
 8015340:	2009 200a 200b 2028 2029 3000 feff 0000     . . . ( ) .0....

08015350 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_52>:
 8015350:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015360:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015370 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_54>:
 8015370:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015380:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015390 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_56>:
 8015390:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 80153a0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

080153b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_58>:
 80153b0:	0004 0000 b0d0 0801 0004 0000 0861 0800     ............a...
 80153c0:	0873 0800 087f 0800 0a25 0800 0000 0000     s.......%.......

080153d0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_61>:
 80153d0:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 80153e0:	0873 0800 087f 0800 25f9 0800 0000 0000     s........%......

080153f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_63>:
 80153f0:	0004 0000 b0d0 0801 000d 0000 1015 0800     ................
 8015400:	0873 0800 087f 0800 2629 0800 2661 0800     s.......)&..a&..
 8015410:	26f5 0800 2729 0800 2737 0800 273b 0800     .&..)'..7'..;'..
 8015420:	273f 0800 2743 0800 2747 0800 274f 0800     ?'..C'..G'..O'..

08015430 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_65>:
 8015430:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015440:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015450 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_67>:
 8015450:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015460:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015470 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_69>:
 8015470:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015480:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015490 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_71>:
 8015490:	0004 0000 b0d0 0801 0005 0000 1015 0800     ................
 80154a0:	1529 0800 1585 0800 15cf 0800 27e1 0800     )............'..

080154b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_74>:
 80154b0:	0004 0000 b0d0 0801 0004 0000 0861 0800     ............a...
 80154c0:	0873 0800 087f 0800 0a25 0800 0000 0000     s.......%.......

080154d0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_79>:
 80154d0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 80154e0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

080154f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_81>:
 80154f0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015500:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015510 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_84>:
 8015510:	0004 0000 b0d0 0801 0005 0000 1015 0800     ................
 8015520:	0873 0800 087f 0800 30c3 0800 30d9 0800     s........0...0..

08015530 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_86>:
 8015530:	0004 0000 b0d0 0801 0004 0000 0861 0800     ............a...
 8015540:	0873 0800 087f 0800 0887 0800               s...........

0801554c <Microsoft.Zelig.Runtime.TargetPlatform.ARMv7.ProcessorARMv7M.MethodWrapper_96>:
 801554c:	0004 0000 b130 0801 0000 0000 0000 0000     ....0...........
 801555c:	0000 0000                                   ....

08015560 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_101>:
 8015560:	0004 0000 b0d0 0801 000a 0000 1015 0800     ................
 8015570:	0b4d 0800 0b61 0800 0b79 0800 0bc9 0800     M...a...y.......
 8015580:	0bcd 0800 0bcf 0800 0be7 0800 37f1 0800     .............7..
 8015590:	0000 0000                                   ....

08015594 <Microsoft.Llilum.STM32F411.Processor_104>:
 8015594:	0004 0000 b160 0801                         ....`...

0801559c <Microsoft.Llilum.STM32F411.Device_107>:
 801559c:	0004 0000 b1f0 0801                         ........

080155a4 <Microsoft.Zelig.Runtime.Memory.Range[]_108>:
 80155a4:	0004 0000 b250 0801 0000 0000               ....P.......

080155b0 <Microsoft.CortexM3OnMBED.Memory_109>:
 80155b0:	0004 0000 b220 0801 55a4 0801 0000 0000     .... ....U......

080155c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_111>:
 80155c0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 80155d0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

080155e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_113>:
 80155e0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 80155f0:	0873 0800 087f 0800                         s.......

080155f8 <System.RuntimeType_115>:
 80155f8:	0004 0000 a890 0801 a5c0 0801 0000 0000     ................
	...

08015610 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_116>:
 8015610:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015620:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015630 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_121>:
 8015630:	0004 0000 b0d0 0801 0004 0000 0861 0800     ............a...
 8015640:	0873 0800 087f 0800 0a25 0800 0000 0000     s.......%.......

08015650 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_123>:
 8015650:	0004 0000 b0d0 0801 0004 0000 0861 0800     ............a...
 8015660:	0873 0800 087f 0800 0a25 0800 0000 0000     s.......%.......

08015670 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_127>:
 8015670:	0004 0000 b0d0 0801 0004 0000 0861 0800     ............a...
 8015680:	0873 0800 087f 0800 0a25 0800 0000 0000     s.......%.......

08015690 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_129>:
 8015690:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 80156a0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

080156b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_131>:
 80156b0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 80156c0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

080156d0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_133>:
 80156d0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 80156e0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

080156f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_142>:
 80156f0:	0004 0000 b0d0 0801 000d 0000 1015 0800     ................
 8015700:	0873 0800 087f 0800 5525 0800 555d 0800     s.......%U..]U..
 8015710:	55f1 0800 5515 0800 5625 0800 5629 0800     .U...U..%V..)V..
 8015720:	562d 0800 5631 0800 5635 0800 563d 0800     -V..1V..5V..=V..

08015730 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_144>:
 8015730:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015740:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015750 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_146>:
 8015750:	0004 0000 b0d0 0801 0005 0000 1015 0800     ................
 8015760:	0873 0800 087f 0800 4f6d 0800 50b9 0800     s.......mO...P..

08015770 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_149>:
 8015770:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8015780:	0873 0800 087f 0800 1393 0800               s...........

0801578c <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_150>:
 801578c:	0004 0000 b0d0 0801 0001 0000 1393 0800     ................
 801579c:	0000 0000                                   ....

080157a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_151>:
 80157a0:	0004 0000 b100 0801 0001 0000 a920 0801     ............ ...
 80157b0:	578c 0801 0000 0000 0000 0000 0000 0000     .W..............

080157c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_153>:
 80157c0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 80157d0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

080157e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_155>:
 80157e0:	0004 0000 b0d0 0801 0004 0000 0861 0800     ............a...
 80157f0:	0873 0800 087f 0800 0a25 0800 0000 0000     s.......%.......

08015800 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_157>:
 8015800:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015810:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015820 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_159>:
 8015820:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015830:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015840 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_173>:
 8015840:	0004 0000 b0d0 0801 0008 0000 17f7 0800     ................
 8015850:	6ea9 0800 6ee9 0800 1679 0800 6f09 0800     .n...n..y....o..
 8015860:	6f35 0800 17f1 0800 17f5 0800 0000 0000     5o..............

08015870 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_175>:
 8015870:	0004 0000 b0d0 0801 0005 0000 1015 0800     ................
 8015880:	0873 0800 087f 0800 53c5 0800 54a5 0800     s........S...T..

08015890 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_177>:
 8015890:	0004 0000 b0d0 0801 0001 0000 0000 0000     ................

080158a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_178>:
 80158a0:	0004 0000 b0d0 0801 0001 0000 0000 0000     ................

080158b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_179>:
 80158b0:	0004 0000 b100 0801 0001 0000 a8f0 0801     ................
 80158c0:	58a0 0801                                   .X..

080158c4 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_186>:
 80158c4:	0004 0000 b0d0 0801 0001 0000 0000 0000     ................

080158d4 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_187>:
 80158d4:	0004 0000 b0d0 0801 0001 0000 0000 0000     ................
	...

080158f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_188>:
 80158f0:	0004 0000 b100 0801 0001 0000 a920 0801     ............ ...
 8015900:	58d4 0801 0000 0000 0000 0000 0000 0000     .X..............

08015910 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_190>:
 8015910:	0004 0000 b0d0 0801 0006 0000 1015 0800     ................
 8015920:	7431 0800 7479 0800 0000 0000 6f09 0800     1t..yt.......o..
 8015930:	6f35 0800 0000 0000 0000 0000 0000 0000     5o..............

08015940 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_192>:
 8015940:	0004 0000 b0d0 0801 0004 0000 0861 0800     ............a...
 8015950:	0873 0800 087f 0800 0a25 0800 0000 0000     s.......%.......

08015960 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_194>:
 8015960:	0004 0000 b0d0 0801 0005 0000 1015 0800     ................
 8015970:	0873 0800 087f 0800 7481 0800 74b1 0800     s........t...t..

08015980 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_195>:
 8015980:	0004 0000 b0d0 0801 0001 0000 7481 0800     .............t..

08015990 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_196>:
 8015990:	0004 0000 b100 0801 0001 0000 a8f0 0801     ................
 80159a0:	5980 0801                                   .Y..

080159a4 <System.RuntimeType_198>:
 80159a4:	0004 0000 a890 0801 a9e0 0801               ............

080159b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_199>:
 80159b0:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 80159c0:	0873 0800 087f 0800 7501 0800               s........u..

080159cc <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_200>:
 80159cc:	0004 0000 b0d0 0801 0001 0000 7501 0800     .............u..
 80159dc:	0000 0000                                   ....

080159e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_201>:
 80159e0:	0004 0000 b100 0801 0001 0000 a8f0 0801     ................
 80159f0:	59cc 0801 0000 0000 0000 0000 0000 0000     .Y..............

08015a00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_225>:
 8015a00:	0004 0000 b0d0 0801 0004 0000 0861 0800     ............a...
 8015a10:	0873 0800 087f 0800 0a25 0800 0000 0000     s.......%.......

08015a20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_227>:
 8015a20:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015a30:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015a40 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_229>:
 8015a40:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015a50:	79cd 0800 087f 0800 0000 0000 0000 0000     .y..............

08015a60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_248>:
 8015a60:	0004 0000 b0d0 0801 0009 0000 7c31 0800     ............1|..
 8015a70:	7c85 0800 7c8f 0800 7be1 0800 7ca7 0800     .|...|...{...|..
 8015a80:	7cab 0800 7caf 0800 7cc7 0800 7ce1 0800     .|...|...|...|..

08015a90 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_266>:
 8015a90:	0004 0000 b0d0 0801 0009 0000 1015 0800     ................
 8015aa0:	7f35 0800 7f49 0800 7ec1 0800 7f61 0800     5...I....~..a...
 8015ab0:	7f65 0800 7f69 0800 7f81 0800 7ea1 0800     e...i........~..

08015ac0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_271>:
 8015ac0:	0004 0000 b0d0 0801 0009 0000 1015 0800     ................
 8015ad0:	80d9 0800 80ed 0800 8001 0800 3a1d 0800     .............:..
 8015ae0:	0bcd 0800 7ba9 0800 7bc3 0800 37f1 0800     .....{...{...7..

08015af0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_292>:
 8015af0:	0004 0000 b0d0 0801 0000 0000 0000 0000     ................

08015b00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_294>:
 8015b00:	0004 0000 b0d0 0801 0005 0000 1015 0800     ................
 8015b10:	1529 0800 1585 0800 15cf 0800 8545 0800     )...........E...

08015b20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_298>:
 8015b20:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015b30:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015b40 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_300>:
 8015b40:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8015b50:	1529 0800 1585 0800 15cf 0800 0000 0000     )...............

08015b60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_303>:
 8015b60:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015b70:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015b80 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_305>:
 8015b80:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015b90:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015ba0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_310>:
 8015ba0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015bb0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015bc0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_312>:
 8015bc0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015bd0:	0873 0800 087f 0800                         s.......

08015bd8 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_315>:
 8015bd8:	0004 0000 b0d0 0801 0000 0000 0000 0000     ................
	...

08015bf0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_317>:
 8015bf0:	0004 0000 b0d0 0801 0004 0000 0861 0800     ............a...
 8015c00:	0873 0800 087f 0800 0a25 0800 0000 0000     s.......%.......

08015c10 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_319>:
 8015c10:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015c20:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015c30 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_322>:
 8015c30:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8015c40:	0873 0800 087f 0800 91a7 0800 0000 0000     s...............

08015c50 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_324>:
 8015c50:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015c60:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015c70 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_326>:
 8015c70:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015c80:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015c90 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_328>:
 8015c90:	0004 0000 b0d0 0801 0008 0000 1015 0800     ................
 8015ca0:	0873 0800 087f 0800 76a5 0800 7741 0800     s........v..Aw..
 8015cb0:	77bd 0800 77cb 0800 77e1 0800 0000 0000     .w...w...w......

08015cc0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_330>:
 8015cc0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015cd0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015ce0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_332>:
 8015ce0:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8015cf0:	0873 0800 087f 0800 8f1d 0800 0000 0000     s...............

08015d00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_334>:
 8015d00:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8015d10:	0873 0800 087f 0800 90dd 0800 0000 0000     s...............

08015d20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_336>:
 8015d20:	0004 0000 b0d0 0801 0005 0000 1015 0800     ................
 8015d30:	0873 0800 087f 0800 30c3 0800 30d9 0800     s........0...0..

08015d40 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_340>:
 8015d40:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015d50:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015d60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_342>:
 8015d60:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015d70:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015d80 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_344>:
 8015d80:	0004 0000 b0d0 0801 0005 0000 1015 0800     ................
 8015d90:	0873 0800 087f 0800 30c3 0800 30d9 0800     s........0...0..

08015da0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_346>:
 8015da0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015db0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015dc0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_348>:
 8015dc0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015dd0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015de0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_350>:
 8015de0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015df0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015e00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_352>:
 8015e00:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015e10:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015e20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_354>:
 8015e20:	0004 0000 b0d0 0801 000a 0000 1015 0800     ................
 8015e30:	0873 0800 087f 0800 4a83 0800 0895 0800     s........J......
 8015e40:	417d 0800 1a15 0800 1a5d 0800 08c1 0800     }A......].......
 8015e50:	054f 0800 0000 0000 0000 0000 0000 0000     O...............

08015e60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_356>:
 8015e60:	0004 0000 b0d0 0801 0016 0000 1015 0800     ................
 8015e70:	0873 0800 087f 0800 2439 0800 8a89 0800     s.......9$......
 8015e80:	8a91 0800 3c5d 0800 4a55 0800 25a5 0800     ....]<..UJ...%..
 8015e90:	4a65 0800 2d85 0800 2935 0800 3233 0800     eJ...-..5)..32..
 8015ea0:	2c85 0800 8b05 0800 32c1 0800 3339 0800     .,.......2..93..
 8015eb0:	33a5 0800 3303 0800 3329 0800 4a77 0800     .3...3..)3..wJ..
 8015ec0:	4a7b 0800 0000 0000 0000 0000 0000 0000     {J..............

08015ed0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_358>:
 8015ed0:	0004 0000 b0d0 0801 0009 0000 1015 0800     ................
 8015ee0:	0873 0800 087f 0800 892d 0800 3c4f 0800     s.......-...O<..
 8015ef0:	8a3d 0800 8a49 0800 06e1 0800 071d 0800     =...I...........

08015f00 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_360>:
 8015f00:	0004 0000 b0d0 0801 0003 0000 1849 0800     ............I...
 8015f10:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015f20 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_364>:
 8015f20:	0004 0000 b3d0 0801 ab12 abab 2001 0010     ............. ..
 8015f30:	0000 0000 2f70 0801 2fb0 0801 0000 0000     ....p/.../......
 8015f40:	0000 0000 6710 0801 9f30 0801               .....g..0...

08015f4c <System.RuntimeType_365>:
 8015f4c:	0004 0000 a890 0801 9f30 0801 0000 0000     ........0.......
 8015f5c:	0000 0000                                   ....

08015f60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_366>:
 8015f60:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015f70:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015f80 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_368>:
 8015f80:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8015f90:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08015fa0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_371>:
 8015fa0:	0004 0000 b3d0 0801 ab12 abab 2101 0010     .............!..
 8015fb0:	0000 0000 2fd0 0801 2fb0 0801 0000 0000     ...../.../......
 8015fc0:	0000 0000 7970 0801 9f60 0801               ....py..`...

08015fcc <System.RuntimeType_372>:
 8015fcc:	0004 0000 a890 0801 9f60 0801 0000 0000     ........`.......
 8015fdc:	0000 0000                                   ....

08015fe0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_374>:
 8015fe0:	0004 0000 b3d0 0801 ab12 abab 2001 0010     ............. ..
 8015ff0:	0000 0000 3010 0801 2fb0 0801 0000 0000     .....0.../......
 8016000:	0000 0000 7970 0801 9f90 0801               ....py......

0801600c <System.RuntimeType_375>:
 801600c:	0004 0000 a890 0801 9f90 0801 0000 0000     ................
 801601c:	0000 0000                                   ....

08016020 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_377>:
 8016020:	0004 0000 b3d0 0801 ab12 abab 2001 0010     ............. ..
 8016030:	0000 0000 3050 0801 2fb0 0801 0000 0000     ....P0.../......
 8016040:	0000 0000 7970 0801 9fc0 0801               ....py......

0801604c <System.RuntimeType_378>:
 801604c:	0004 0000 a890 0801 9fc0 0801 0000 0000     ................
 801605c:	0000 0000                                   ....

08016060 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_381>:
 8016060:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8016070:	0000 0000 3090 0801 30f0 0801 0000 0000     .....0...0......
 8016080:	0000 0000 6780 0801 9ff0 0801               .....g......

0801608c <System.RuntimeType_382>:
 801608c:	0004 0000 a890 0801 9ff0 0801 0000 0000     ................
 801609c:	0000 0000                                   ....

080160a0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_384>:
 80160a0:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 80160b0:	0000 0000 3150 0801 30f0 0801 0000 0000     ....P1...0......
 80160c0:	0000 0000 6780 0801 a020 0801               .....g.. ...

080160cc <System.RuntimeType_385>:
 80160cc:	0004 0000 a890 0801 a020 0801 0000 0000     ........ .......
 80160dc:	0000 0000                                   ....

080160e0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_387>:
 80160e0:	0004 0000 b3d0 0801 ab12 abab 2001 0010     ............. ..
 80160f0:	0000 0000 31b0 0801 2fb0 0801 0000 0000     .....1.../......
 8016100:	0000 0000 7970 0801 a050 0801               ....py..P...

0801610c <System.RuntimeType_388>:
 801610c:	0004 0000 a890 0801 a050 0801 0000 0000     ........P.......
 801611c:	0000 0000                                   ....

08016120 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_390>:
 8016120:	0004 0000 b3d0 0801 ab12 abab 2001 0010     ............. ..
 8016130:	0000 0000 31e0 0801 2fb0 0801 0000 0000     .....1.../......
 8016140:	0000 0000 6710 0801 a080 0801               .....g......

0801614c <System.RuntimeType_391>:
 801614c:	0004 0000 a890 0801 a080 0801 0000 0000     ................
 801615c:	0000 0000                                   ....

08016160 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_392>:
 8016160:	0004 0000 9ff0 0801 ab1d abab 0000 0000     ................
	...
 8016184:	79a0 0801 a0b0 0801 7500 0801               .y.......u..

08016190 <System.RuntimeType_393>:
 8016190:	0004 0000 a890 0801 a0b0 0801 0000 0000     ................

080161a0 <Microsoft.Zelig.Runtime.TypeSystem.BoxedValueTypeRepresentation_394>:
 80161a0:	0004 0000 aaa0 0801 ab05 abab 2109 0010     .............!..
	...
 80161c4:	79d0 0801 a0e0 0801 7a00 0801               .y.......z..

080161d0 <System.RuntimeType_395>:
 80161d0:	0004 0000 a890 0801 a0e0 0801 0000 0000     ................

080161e0 <Microsoft.Zelig.Runtime.TypeSystem.BoxedValueTypeRepresentation_396>:
 80161e0:	0004 0000 aaa0 0801 ab03 abab 2109 0010     .............!..
	...
 8016204:	79d0 0801 a110 0801 7a30 0801               .y......0z..

08016210 <System.RuntimeType_397>:
 8016210:	0004 0000 a890 0801 a110 0801 0000 0000     ................

08016220 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_399>:
 8016220:	0004 0000 b400 0801 ab12 abab 2081 0010     ............. ..
 8016230:	0000 0000 3230 0801 2fb0 0801 0000 0000     ....02.../......
 8016240:	0000 0000 7500 0801 a140 0801               .....u..@...

0801624c <System.RuntimeType_400>:
 801624c:	0004 0000 a890 0801 a140 0801 0000 0000     ........@.......
 801625c:	0000 0000                                   ....

08016260 <Microsoft.Zelig.Runtime.TypeSystem.BoxedValueTypeRepresentation_401>:
 8016260:	0004 0000 aaa0 0801 ab08 abab 2109 0010     .............!..
	...
 8016284:	79d0 0801 a170 0801 7a90 0801               .y..p....z..

08016290 <System.RuntimeType_402>:
 8016290:	0004 0000 a890 0801 a170 0801 0000 0000     ........p.......

080162a0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_404>:
 80162a0:	0004 0000 b400 0801 ab12 abab 2081 0010     ............. ..
 80162b0:	0000 0000 3250 0801 2fb0 0801 0000 0000     ....P2.../......
 80162c0:	0000 0000 6220 0801 a1a0 0801               .... b......

080162cc <System.RuntimeType_405>:
 80162cc:	0004 0000 a890 0801 a1a0 0801 0000 0000     ................
 80162dc:	0000 0000                                   ....

080162e0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_407>:
 80162e0:	0004 0000 b3d0 0801 ab0e abab 2101 0010     .............!..
 80162f0:	0000 0000 3290 0801 2fb0 0801 0000 0000     .....2.../......
 8016300:	0000 0000 7500 0801 a1d0 0801 0000 0000     .....u..........

08016310 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_408>:
 8016310:	0004 0000 9ff0 0801 ab1d abab 0000 0000     ................
	...
 8016334:	79a0 0801 a200 0801 7a30 0801               .y......0z..

08016340 <System.RuntimeType_409>:
 8016340:	0004 0000 a890 0801 a200 0801 0000 0000     ................

08016350 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_412>:
 8016350:	0004 0000 b3d0 0801 ab12 abab 2101 0010     .............!..
 8016360:	0000 0000 32b0 0801 32e0 0801 0000 0000     .....2...2......
 8016370:	0000 0000 7500 0801 a230 0801               .....u..0...

0801637c <System.RuntimeType_413>:
 801637c:	0004 0000 a890 0801 a230 0801 0000 0000     ........0.......
 801638c:	0000 0000                                   ....

08016390 <Microsoft.Zelig.Runtime.TypeSystem.BoxedValueTypeRepresentation_414>:
 8016390:	0004 0000 aaa0 0801 ab09 abab 2109 0010     .............!..
	...
 80163b4:	79d0 0801 a260 0801 7ac0 0801               .y..`....z..

080163c0 <System.RuntimeType_415>:
 80163c0:	0004 0000 a890 0801 a260 0801 0000 0000     ........`.......

080163d0 <Microsoft.Zelig.Runtime.TypeSystem.BoxedValueTypeRepresentation_416>:
 80163d0:	0004 0000 aaa0 0801 ab19 abab 2109 0010     .............!..
	...
 80163f4:	79d0 0801 a290 0801 7af0 0801               .y.......z..

08016400 <System.RuntimeType_417>:
 8016400:	0004 0000 a890 0801 a290 0801 0000 0000     ................

08016410 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_418>:
 8016410:	0004 0000 9ff0 0801 ab1d abab 0000 0000     ................
	...
 8016434:	79a0 0801 a2c0 0801 7ac0 0801               .y.......z..

08016440 <System.RuntimeType_419>:
 8016440:	0004 0000 a890 0801 a2c0 0801 0000 0000     ................

08016450 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_422>:
 8016450:	0004 0000 b3d0 0801 ab12 abab 2001 0010     ............. ..
 8016460:	0000 0000 3310 0801 3350 0801 0000 0000     .....3..P3......
 8016470:	0000 0000 7970 0801 a2f0 0801               ....py......

0801647c <System.RuntimeType_423>:
 801647c:	0004 0000 a890 0801 a2f0 0801 0000 0000     ................
 801648c:	0000 0000                                   ....

08016490 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_425>:
 8016490:	0004 0000 b3d0 0801 ab12 abab 0002 0010     ................
 80164a0:	0000 0000 3380 0801 1b14 0801 6ad0 0801     .....3.......j..
 80164b0:	0000 0000 7500 0801 a320 0801               .....u.. ...

080164bc <System.RuntimeType_426>:
 80164bc:	0004 0000 a890 0801 a320 0801 0000 0000     ........ .......
 80164cc:	0000 0000                                   ....

080164d0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_428>:
 80164d0:	0004 0000 b3d0 0801 ab12 abab 0002 0010     ................
 80164e0:	0000 0000 33a0 0801 1b14 0801 7b20 0801     .....3...... {..
 80164f0:	0000 0000 7b50 0801 a350 0801               ....P{..P...

080164fc <System.RuntimeType_429>:
 80164fc:	0004 0000 a890 0801 a350 0801 0000 0000     ........P.......
 801650c:	0000 0000                                   ....

08016510 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_432>:
 8016510:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8016520:	0000 0000 33c0 0801 33f0 0801 0000 0000     .....3...3......
 8016530:	7b8c 0801 7500 0801 a380 0801               .{...u......

0801653c <System.RuntimeType_433>:
 801653c:	0004 0000 a890 0801 a380 0801 0000 0000     ................
 801654c:	0000 0000                                   ....

08016550 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_435>:
 8016550:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8016560:	0000 0000 3430 0801 33f0 0801 0000 0000     ....04...3......
 8016570:	7bac 0801 7500 0801 a3b0 0801               .{...u......

0801657c <System.RuntimeType_436>:
 801657c:	0004 0000 a890 0801 a3b0 0801 0000 0000     ................
 801658c:	0000 0000                                   ....

08016590 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_437>:
 8016590:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 80165a0:	0000 0000 3430 0801 33f0 0801 0000 0000     ....04...3......
 80165b0:	7bcc 0801 7500 0801 a3e0 0801               .{...u......

080165bc <System.RuntimeType_438>:
 80165bc:	0004 0000 a890 0801 a3e0 0801 0000 0000     ................
 80165cc:	0000 0000                                   ....

080165d0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_440>:
 80165d0:	0004 0000 b3d0 0801 ab12 abab 0101 0000     ................
 80165e0:	0000 0000 3460 0801 3350 0801 0000 0000     ....`4..P3......
 80165f0:	0000 0000 62a0 0801 a410 0801               .....b......

080165fc <System.RuntimeType_441>:
 80165fc:	0004 0000 a890 0801 a410 0801 0000 0000     ................
 801660c:	0000 0000                                   ....

08016610 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_443>:
 8016610:	0004 0000 b3d0 0801 ab12 abab 2001 0010     ............. ..
 8016620:	0000 0000 3490 0801 2fb0 0801 0000 0000     .....4.../......
 8016630:	0000 0000 7970 0801 a440 0801               ....py..@...

0801663c <System.RuntimeType_444>:
 801663c:	0004 0000 a890 0801 a440 0801 0000 0000     ........@.......
 801664c:	0000 0000                                   ....

08016650 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_449>:
 8016650:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8016660:	0000 0000 34d0 0801 3350 0801 0000 0000     .....4..P3......
 8016670:	0000 0000 7be0 0801 a470 0801               .....{..p...

0801667c <System.RuntimeType_450>:
 801667c:	0004 0000 a890 0801 a470 0801 0000 0000     ........p.......
 801668c:	0000 0000                                   ....

08016690 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_451>:
 8016690:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 80166a0:	0000 0000 3430 0801 33f0 0801 0000 0000     ....04...3......
 80166b0:	7c1c 0801 7500 0801 a4a0 0801               .|...u......

080166bc <System.RuntimeType_452>:
 80166bc:	0004 0000 a890 0801 a4a0 0801 0000 0000     ................
 80166cc:	0000 0000                                   ....

080166d0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_454>:
 80166d0:	0004 0000 b3d0 0801 ab12 abab 0001 0014     ................
 80166e0:	0000 0000 34f0 0801 3350 0801 0000 0000     .....4..P3......
 80166f0:	0000 0000 7c30 0801 a4d0 0801               ....0|......

080166fc <System.RuntimeType_455>:
 80166fc:	0004 0000 a890 0801 a4d0 0801 0000 0000     ................
 801670c:	0000 0000                                   ....

08016710 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_457>:
 8016710:	0004 0000 b3d0 0801 ab12 abab 2001 0010     ............. ..
 8016720:	0000 0000 3520 0801 2fb0 0801 0000 0000     .... 5.../......
 8016730:	0000 0000 7970 0801 a500 0801               ....py......

0801673c <System.RuntimeType_458>:
 801673c:	0004 0000 a890 0801 a500 0801 0000 0000     ................
 801674c:	0000 0000                                   ....

08016750 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_459>:
 8016750:	0004 0000 b0d0 0801 0007 0000 1015 0800     ................
 8016760:	0873 0800 087f 0800 35b9 0800 35e9 0800     s........5...5..
 8016770:	35ed 0800 361d 0800 0000 0000 0000 0000     .5...6..........

08016780 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_462>:
 8016780:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8016790:	0000 0000 3560 0801 30f0 0801 0000 0000     ....`5...0......
 80167a0:	0000 0000 7ca0 0801 a530 0801               .....|..0...

080167ac <System.RuntimeType_463>:
 80167ac:	0004 0000 a890 0801 a530 0801 0000 0000     ........0.......
 80167bc:	0000 0000                                   ....

080167c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_464>:
 80167c0:	0004 0000 b0d0 0801 0007 0000 1015 0800     ................
 80167d0:	0873 0800 087f 0800 93c9 0800 93d5 0800     s...............
 80167e0:	34eb 0800 34fd 0800 0000 0000 0000 0000     .4...4..........

080167f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_466>:
 80167f0:	0004 0000 b0d0 0801 0009 0000 1015 0800     ................
 8016800:	0873 0800 087f 0800 3bd5 0800 3c1b 0800     s........;...<..
 8016810:	4953 0800 4659 0800 466d 0800 4771 0800     SI..YF..mF..qG..

08016820 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_468>:
 8016820:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8016830:	0873 0800 087f 0800 8a53 0800 0000 0000     s.......S.......

08016840 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_470>:
 8016840:	0004 0000 b0d0 0801 0009 0000 1015 0800     ................
 8016850:	0873 0800 087f 0800 8361 0800 4839 0800     s.......a...9H..
 8016860:	4851 0800 4869 0800 488d 0800 93b5 0800     QH..iH...H......

08016870 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_472>:
 8016870:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8016880:	0873 0800 087f 0800 837d 0800 0000 0000     s.......}.......

08016890 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_474>:
 8016890:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 80168a0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

080168b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_476>:
 80168b0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 80168c0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

080168d0 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_478>:
 80168d0:	0004 0000 9ff0 0801 ab1d abab 0000 0000     ................
	...
 80168f4:	79a0 0801 a560 0801 6910 0801               .y..`....i..

08016900 <System.RuntimeType_479>:
 8016900:	0004 0000 a890 0801 a560 0801 0000 0000     ........`.......

08016910 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_481>:
 8016910:	0004 0000 b3d0 0801 ab12 abab 0000 0010     ................
 8016920:	0000 0000 35b0 0801 33f0 0801 0000 0000     .....5...3......
 8016930:	0000 0000 7500 0801 a590 0801               .....u......

0801693c <System.RuntimeType_482>:
 801693c:	0004 0000 a890 0801 a590 0801 0000 0000     ................
 801694c:	0000 0000                                   ....

08016950 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_483>:
 8016950:	0004 0000 9ff0 0801 ab1d abab 0000 0000     ................
	...
 8016974:	79a0 0801 a5c0 0801 7a00 0801               .y.......z..

08016980 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_484>:
 8016980:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8016990:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

080169a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_486>:
 80169a0:	0004 0000 b0d0 0801 0007 0000 1015 0800     ................
 80169b0:	0873 0800 087f 0800 5505 0800 5507 0800     s........U...U..
 80169c0:	5509 0800 550d 0800 0000 0000 0000 0000     .U...U..........

080169d0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_489>:
 80169d0:	0004 0000 b3d0 0801 ab12 abab 2001 0010     ............. ..
 80169e0:	0000 0000 35e0 0801 2fb0 0801 0000 0000     .....5.../......
 80169f0:	0000 0000 7970 0801 a5f0 0801               ....py......

080169fc <System.RuntimeType_490>:
 80169fc:	0004 0000 a890 0801 a5f0 0801 0000 0000     ................
 8016a0c:	0000 0000                                   ....

08016a10 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_492>:
 8016a10:	0004 0000 b3d0 0801 ab12 abab 2001 0010     ............. ..
 8016a20:	0000 0000 3620 0801 2fb0 0801 0000 0000     .... 6.../......
 8016a30:	0000 0000 7970 0801 a620 0801               ....py.. ...

08016a3c <System.RuntimeType_493>:
 8016a3c:	0004 0000 a890 0801 a620 0801 0000 0000     ........ .......
 8016a4c:	0000 0000                                   ....

08016a50 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_495>:
 8016a50:	0004 0000 b3d0 0801 ab12 abab 2001 0010     ............. ..
 8016a60:	0000 0000 3660 0801 2fb0 0801 0000 0000     ....`6.../......
 8016a70:	0000 0000 7500 0801 a650 0801               .....u..P...

08016a7c <System.RuntimeType_496>:
 8016a7c:	0004 0000 a890 0801 a650 0801 0000 0000     ........P.......
 8016a8c:	0000 0000                                   ....

08016a90 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_497>:
 8016a90:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8016aa0:	0000 0000 33c0 0801 33f0 0801 0000 0000     .....3...3......
 8016ab0:	7ee8 0801 7500 0801 a680 0801               .~...u......

08016abc <System.RuntimeType_498>:
 8016abc:	0004 0000 a890 0801 a680 0801 0000 0000     ................
 8016acc:	0000 0000                                   ....

08016ad0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_501>:
 8016ad0:	0004 0000 b3d0 0801 ab12 abab 0101 0000     ................
 8016ae0:	0000 0000 3690 0801 36c0 0801 0000 0000     .....6...6......
 8016af0:	0000 0000 7500 0801 a6b0 0801               .....u......

08016afc <System.RuntimeType_502>:
 8016afc:	0004 0000 a890 0801 a6b0 0801 0000 0000     ................
 8016b0c:	0000 0000                                   ....

08016b10 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_503>:
 8016b10:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8016b20:	0000 0000 33c0 0801 33f0 0801 0000 0000     .....3...3......
 8016b30:	7f08 0801 7500 0801 a6e0 0801               .....u......

08016b3c <System.RuntimeType_504>:
 8016b3c:	0004 0000 a890 0801 a6e0 0801 0000 0000     ................
 8016b4c:	0000 0000                                   ....

08016b50 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_512>:
 8016b50:	0004 0000 b400 0801 ab12 abab 0082 0010     ................
 8016b60:	0000 0000 33a0 0801 1b14 0801 7f50 0801     .....3......P...
 8016b70:	0000 0000 7f80 0801 a710 0801               ............

08016b7c <System.RuntimeType_513>:
 8016b7c:	0004 0000 a890 0801 a710 0801 0000 0000     ................
 8016b8c:	0000 0000                                   ....

08016b90 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_515>:
 8016b90:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8016ba0:	0000 0000 3720 0801 36c0 0801 0000 0000     .... 7...6......
 8016bb0:	0000 0000 7500 0801 a740 0801               .....u..@...

08016bbc <System.RuntimeType_516>:
 8016bbc:	0004 0000 a890 0801 a740 0801 0000 0000     ........@.......
 8016bcc:	0000 0000                                   ....

08016bd0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_518>:
 8016bd0:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8016be0:	0000 0000 3750 0801 36c0 0801 0000 0000     ....P7...6......
 8016bf0:	0000 0000 7fb0 0801 a770 0801               ........p...

08016bfc <System.RuntimeType_519>:
 8016bfc:	0004 0000 a890 0801 a770 0801 0000 0000     ........p.......
 8016c0c:	0000 0000                                   ....

08016c10 <Microsoft.Zelig.Runtime.TypeSystem.EnumerationTypeRepresentation_521>:
 8016c10:	0004 0000 b460 0801 ab11 abab 0105 0000     ....`...........
 8016c20:	0000 0000 3780 0801 1b14 0801 6a50 0801     .....7......Pj..
 8016c30:	0000 0000 8010 0801 a7a0 0801 7a90 0801     .............z..

08016c40 <System.RuntimeType_522>:
 8016c40:	0004 0000 a890 0801 a7a0 0801 0000 0000     ................

08016c50 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_524>:
 8016c50:	0004 0000 b3d0 0801 ab12 abab 0000 0010     ................
 8016c60:	0000 0000 37c0 0801 2fb0 0801 0000 0000     .....7.../......
 8016c70:	0000 0000 7500 0801 a7d0 0801               .....u......

08016c7c <System.RuntimeType_525>:
 8016c7c:	0004 0000 a890 0801 a7d0 0801 0000 0000     ................
 8016c8c:	0000 0000                                   ....

08016c90 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_527>:
 8016c90:	0004 0000 b3d0 0801 ab12 abab 2001 0010     ............. ..
 8016ca0:	0000 0000 37e0 0801 2fb0 0801 0000 0000     .....7.../......
 8016cb0:	0000 0000 7970 0801 a800 0801               ....py......

08016cbc <System.RuntimeType_528>:
 8016cbc:	0004 0000 a890 0801 a800 0801 0000 0000     ................
 8016ccc:	0000 0000                                   ....

08016cd0 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_529>:
 8016cd0:	0004 0000 9ff0 0801 ab1d abab 0000 0000     ................
	...
 8016cf4:	79a0 0801 a830 0801 7a90 0801               .y..0....z..

08016d00 <System.RuntimeType_530>:
 8016d00:	0004 0000 a890 0801 a830 0801 0000 0000     ........0.......

08016d10 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_531>:
 8016d10:	0004 0000 9ff0 0801 ab1d abab 0000 0000     ................
	...
 8016d34:	79a0 0801 a860 0801 62e0 0801               .y..`....b..

08016d40 <System.RuntimeType_532>:
 8016d40:	0004 0000 a890 0801 a860 0801 0000 0000     ........`.......

08016d50 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_534>:
 8016d50:	0004 0000 b3d0 0801 ab12 abab 2000 0010     ............. ..
 8016d60:	0000 0000 3810 0801 2fb0 0801 0000 0000     .....8.../......
 8016d70:	0000 0000 8040 0801 a890 0801               ....@.......

08016d7c <System.RuntimeType_535>:
 8016d7c:	0004 0000 a890 0801 a890 0801 0000 0000     ................
 8016d8c:	0000 0000                                   ....

08016d90 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_537>:
 8016d90:	0004 0000 b3d0 0801 ab12 abab 0104 0010     ................
 8016da0:	0000 0000 3840 0801 1b14 0801 66d0 0801     ....@8.......f..
 8016db0:	0000 0000 7fb0 0801 a8c0 0801               ............

08016dbc <System.RuntimeType_538>:
 8016dbc:	0004 0000 a890 0801 a8c0 0801 0000 0000     ................
 8016dcc:	0000 0000                                   ....

08016dd0 <Microsoft.Zelig.Runtime.TypeSystem.InterfaceTypeRepresentation_540>:
 8016dd0:	0004 0000 b490 0801 ab12 abab 00a1 0000     ................
 8016de0:	0000 0000 3880 0801 2fb0 0801 0000 0000     .....8.../......
	...
 8016df8:	a8f0 0801                                   ....

08016dfc <System.RuntimeType_541>:
 8016dfc:	0004 0000 a890 0801 a8f0 0801 0000 0000     ................
 8016e0c:	0000 0000                                   ....

08016e10 <Microsoft.Zelig.Runtime.TypeSystem.InterfaceTypeRepresentation_545>:
 8016e10:	0004 0000 b490 0801 ab12 abab 00a1 0000     ................
 8016e20:	0000 0000 38b0 0801 2fb0 0801 0000 0000     .....8.../......
	...
 8016e38:	a920 0801                                    ...

08016e3c <System.RuntimeType_546>:
 8016e3c:	0004 0000 a890 0801 a920 0801 0000 0000     ........ .......
 8016e4c:	0000 0000                                   ....

08016e50 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_549>:
 8016e50:	0004 0000 b400 0801 ab12 abab 2081 0010     ............. ..
 8016e60:	0000 0000 38e0 0801 3910 0801 0000 0000     .....8...9......
 8016e70:	0000 0000 7500 0801 a950 0801               .....u..P...

08016e7c <System.RuntimeType_550>:
 8016e7c:	0004 0000 a890 0801 a950 0801 0000 0000     ........P.......
 8016e8c:	0000 0000                                   ....

08016e90 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_552>:
 8016e90:	0004 0000 b3d0 0801 ab12 abab 2001 0010     ............. ..
 8016ea0:	0000 0000 3950 0801 2fb0 0801 0000 0000     ....P9.../......
 8016eb0:	0000 0000 7970 0801 a980 0801               ....py......

08016ebc <System.RuntimeType_553>:
 8016ebc:	0004 0000 a890 0801 a980 0801 0000 0000     ................
 8016ecc:	0000 0000                                   ....

08016ed0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_556>:
 8016ed0:	0004 0000 b3d0 0801 ab12 abab 2001 0000     ............. ..
 8016ee0:	0000 0000 39a0 0801 39d0 0801 0000 0000     .....9...9......
 8016ef0:	0000 0000 7500 0801 a9b0 0801               .....u......

08016efc <System.RuntimeType_557>:
 8016efc:	0004 0000 a890 0801 a9b0 0801 0000 0000     ................
 8016f0c:	0000 0000                                   ....

08016f10 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_559>:
 8016f10:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8016f20:	0000 0000 3a10 0801 39d0 0801 0000 0000     .....:...9......
 8016f30:	0000 0000 7500 0801 a9e0 0801 0000 0000     .....u..........

08016f40 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_564>:
 8016f40:	0004 0000 b3d0 0801 ab12 abab 0001 0010     ................
 8016f50:	0000 0000 3a40 0801 3a90 0801 0000 0000     ....@:...:......
 8016f60:	0000 0000 6a50 0801 aa10 0801               ....Pj......

08016f6c <System.RuntimeType_565>:
 8016f6c:	0004 0000 a890 0801 aa10 0801 0000 0000     ................
 8016f7c:	0000 0000                                   ....

08016f80 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_566>:
 8016f80:	0004 0000 9ff0 0801 ab1d abab 0000 0000     ................
	...
 8016fa4:	79a0 0801 aa40 0801 68d0 0801               .y..@....h..

08016fb0 <System.RuntimeType_567>:
 8016fb0:	0004 0000 a890 0801 aa40 0801 0000 0000     ........@.......

08016fc0 <Microsoft.Zelig.Runtime.TypeSystem.ValueTypeRepresentation_569>:
 8016fc0:	0004 0000 b4c0 0801 ab11 abab 010a 0010     ................
 8016fd0:	0000 0000 3ac0 0801 1b14 0801 60a0 0801     .....:.......`..
 8016fe0:	0000 0000 79d0 0801 aa70 0801               .....y..p...

08016fec <System.RuntimeType_570>:
 8016fec:	0004 0000 a890 0801 aa70 0801 0000 0000     ........p.......
 8016ffc:	0000 0000                                   ....

08017000 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_581>:
 8017000:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8017010:	0000 0000 3af0 0801 30f0 0801 0000 0000     .....:...0......
 8017020:	0000 0000 7ca0 0801 aaa0 0801               .....|......

0801702c <System.RuntimeType_582>:
 801702c:	0004 0000 a890 0801 aaa0 0801 0000 0000     ................
 801703c:	0000 0000                                   ....

08017040 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_587>:
 8017040:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8017050:	0000 0000 3b40 0801 30f0 0801 0000 0000     ....@;...0......
 8017060:	0000 0000 7080 0801 aad0 0801               .....p......

0801706c <System.RuntimeType_588>:
 801706c:	0004 0000 a890 0801 aad0 0801 0000 0000     ................
 801707c:	0000 0000                                   ....

08017080 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_590>:
 8017080:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8017090:	0000 0000 3b90 0801 30f0 0801 0000 0000     .....;...0......
 80170a0:	0000 0000 80d0 0801 ab00 0801               ............

080170ac <System.RuntimeType_591>:
 80170ac:	0004 0000 a890 0801 ab00 0801 0000 0000     ................
 80170bc:	0000 0000                                   ....

080170c0 <Microsoft.Zelig.Runtime.TypeSystem.ManagedPointerTypeRepresentation_592>:
 80170c0:	0004 0000 b430 0801 ab10 abab 0000 0000     ....0...........
	...
 80170e8:	ab30 0801 6fc0 0801                         0....o..

080170f0 <System.RuntimeType_593>:
 80170f0:	0004 0000 a890 0801 ab30 0801 0000 0000     ........0.......

08017100 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_595>:
 8017100:	0004 0000 b3d0 0801 ab12 abab 0102 0000     ................
 8017110:	0000 0000 3bd0 0801 1b14 0801 8100 0801     .....;..........
 8017120:	0000 0000 62a0 0801 ab60 0801               .....b..`...

0801712c <System.RuntimeType_596>:
 801712c:	0004 0000 a890 0801 ab60 0801 0000 0000     ........`.......
 801713c:	0000 0000                                   ....

08017140 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_597>:
 8017140:	0004 0000 b0d0 0801 0005 0000 1015 0800     ................
 8017150:	0873 0800 087f 0800 8c09 0800 8c0f 0800     s...............

08017160 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_599>:
 8017160:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8017170:	0000 0000 3430 0801 33f0 0801 0000 0000     ....04...3......
 8017180:	8178 0801 7500 0801 ab90 0801               x....u......

0801718c <System.RuntimeType_600>:
 801718c:	0004 0000 a890 0801 ab90 0801 0000 0000     ................
 801719c:	0000 0000                                   ....

080171a0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_603>:
 80171a0:	0004 0000 b3d0 0801 ab12 abab 0101 0000     ................
 80171b0:	0000 0000 3bf0 0801 3c20 0801 0000 0000     .....;.. <......
 80171c0:	0000 0000 62a0 0801 abc0 0801               .....b......

080171cc <System.RuntimeType_604>:
 80171cc:	0004 0000 a890 0801 abc0 0801 0000 0000     ................
 80171dc:	0000 0000                                   ....

080171e0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_606>:
 80171e0:	0004 0000 b3d0 0801 ab12 abab 0002 0010     ................
 80171f0:	0000 0000 3c80 0801 1b14 0801 8100 0801     .....<..........
 8017200:	0000 0000 7500 0801 abf0 0801               .....u......

0801720c <System.RuntimeType_607>:
 801720c:	0004 0000 a890 0801 abf0 0801 0000 0000     ................
 801721c:	0000 0000                                   ....

08017220 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_608>:
 8017220:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8017230:	0000 0000 33c0 0801 33f0 0801 0000 0000     .....3...3......
 8017240:	8198 0801 7500 0801 ac20 0801               .....u.. ...

0801724c <System.RuntimeType_609>:
 801724c:	0004 0000 a890 0801 ac20 0801 0000 0000     ........ .......
 801725c:	0000 0000                                   ....

08017260 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_610>:
 8017260:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8017270:	0873 0800 087f 0800 93f5 0800 0000 0000     s...............

08017280 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_612>:
 8017280:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8017290:	0873 0800 087f 0800 93b1 0800 0000 0000     s...............

080172a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_614>:
 80172a0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 80172b0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

080172c0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_616>:
 80172c0:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 80172d0:	0000 0000 3430 0801 33f0 0801 0000 0000     ....04...3......
 80172e0:	8278 0801 7500 0801 ac50 0801               x....u..P...

080172ec <System.RuntimeType_617>:
 80172ec:	0004 0000 a890 0801 ac50 0801 0000 0000     ........P.......
 80172fc:	0000 0000                                   ....

08017300 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_619>:
 8017300:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8017310:	0000 0000 3ca0 0801 33f0 0801 0000 0000     .....<...3......
 8017320:	8298 0801 7500 0801 ac80 0801               .....u......

0801732c <System.RuntimeType_620>:
 801732c:	0004 0000 a890 0801 ac80 0801 0000 0000     ................
 801733c:	0000 0000                                   ....

08017340 <Microsoft.Zelig.Runtime.TypeSystem.ManagedPointerTypeRepresentation_621>:
 8017340:	0004 0000 b430 0801 ab10 abab 0000 0000     ....0...........
	...
 8017368:	acb0 0801 82b0 0801                         ........

08017370 <System.RuntimeType_622>:
 8017370:	0004 0000 a890 0801 acb0 0801 0000 0000     ................

08017380 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_624>:
 8017380:	0004 0000 b3d0 0801 ab12 abab 2001 0010     ............. ..
 8017390:	0000 0000 3ce0 0801 2fb0 0801 0000 0000     .....<.../......
 80173a0:	0000 0000 7970 0801 ace0 0801               ....py......

080173ac <System.RuntimeType_625>:
 80173ac:	0004 0000 a890 0801 ace0 0801 0000 0000     ................
 80173bc:	0000 0000                                   ....

080173c0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_627>:
 80173c0:	0004 0000 b3d0 0801 ab12 abab 0103 0010     ................
 80173d0:	0000 0000 3d10 0801 1b14 0801 82e0 0801     .....=..........
 80173e0:	0000 0000 7500 0801 ad10 0801               .....u......

080173ec <System.RuntimeType_628>:
 80173ec:	0004 0000 a890 0801 ad10 0801 0000 0000     ................
 80173fc:	0000 0000                                   ....

08017400 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_631>:
 8017400:	0004 0000 b3d0 0801 ab12 abab 2001 0010     ............. ..
 8017410:	0000 0000 3d50 0801 3d70 0801 0000 0000     ....P=..p=......
 8017420:	831c 0801 7500 0801 ad40 0801               .....u..@...

0801742c <System.RuntimeType_632>:
 801742c:	0004 0000 a890 0801 ad40 0801 0000 0000     ........@.......
 801743c:	0000 0000                                   ....

08017440 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_635>:
 8017440:	0004 0000 b3d0 0801 ab12 abab 0000 0010     ................
 8017450:	0000 0000 3dc0 0801 3df0 0801 0000 0000     .....=...=......
 8017460:	0000 0000 7500 0801 ad70 0801               .....u..p...

0801746c <System.RuntimeType_636>:
 801746c:	0004 0000 a890 0801 ad70 0801 0000 0000     ........p.......
 801747c:	0000 0000                                   ....

08017480 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_637>:
 8017480:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8017490:	0000 0000 3ca0 0801 33f0 0801 0000 0000     .....<...3......
 80174a0:	833c 0801 7500 0801 ada0 0801               <....u......

080174ac <System.RuntimeType_638>:
 80174ac:	0004 0000 a890 0801 ada0 0801 0000 0000     ................
 80174bc:	0000 0000                                   ....

080174c0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_641>:
 80174c0:	0004 0000 b3d0 0801 ab12 abab 2001 0010     ............. ..
 80174d0:	0000 0000 3e60 0801 3e90 0801 0000 0000     ....`>...>......
 80174e0:	0000 0000 7500 0801 add0 0801               .....u......

080174ec <System.RuntimeType_642>:
 80174ec:	0004 0000 a890 0801 add0 0801 0000 0000     ................
 80174fc:	0000 0000                                   ....

08017500 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_644>:
 8017500:	0004 0000 b3d0 0801 ab1c abab 0001 0010     ................
 8017510:	0000 0000 3ed0 0801 2fb0 0801 0000 0000     .....>.../......
	...
 8017528:	ae00 0801                                   ....

0801752c <System.RuntimeType_645>:
 801752c:	0004 0000 a890 0801 ae00 0801 0000 0000     ................
 801753c:	0000 0000                                   ....

08017540 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_647>:
 8017540:	0004 0000 b3d0 0801 ab12 abab 0000 0010     ................
 8017550:	0000 0000 3ef0 0801 3df0 0801 0000 0000     .....>...=......
 8017560:	0000 0000 7500 0801 ae30 0801               .....u..0...

0801756c <System.RuntimeType_648>:
 801756c:	0004 0000 a890 0801 ae30 0801 0000 0000     ........0.......
 801757c:	0000 0000                                   ....

08017580 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_650>:
 8017580:	0004 0000 b3d0 0801 ab12 abab 0000 0010     ................
 8017590:	0000 0000 3f20 0801 3df0 0801 0000 0000     .... ?...=......
 80175a0:	0000 0000 7500 0801 ae60 0801               .....u..`...

080175ac <System.RuntimeType_651>:
 80175ac:	0004 0000 a890 0801 ae60 0801 0000 0000     ........`.......
 80175bc:	0000 0000                                   ....

080175c0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_653>:
 80175c0:	0004 0000 b3d0 0801 ab12 abab 0101 0014     ................
 80175d0:	0000 0000 3f50 0801 3350 0801 0000 0000     ....P?..P3......
 80175e0:	0000 0000 66d0 0801 ae90 0801               .....f......

080175ec <System.RuntimeType_654>:
 80175ec:	0004 0000 a890 0801 ae90 0801 0000 0000     ................
 80175fc:	0000 0000                                   ....

08017600 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_655>:
 8017600:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8017610:	0000 0000 33c0 0801 33f0 0801 0000 0000     .....3...3......
 8017620:	835c 0801 7500 0801 aec0 0801               \....u......

0801762c <System.RuntimeType_656>:
 801762c:	0004 0000 a890 0801 aec0 0801 0000 0000     ................
 801763c:	0000 0000                                   ....

08017640 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_657>:
 8017640:	0004 0000 9ff0 0801 ab1d abab 0000 0000     ................
	...
 8017664:	79a0 0801 aef0 0801 82b0 0801               .y..........

08017670 <System.RuntimeType_658>:
 8017670:	0004 0000 a890 0801 aef0 0801 0000 0000     ................

08017680 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_660>:
 8017680:	0004 0000 b3d0 0801 ab12 abab 0101 0014     ................
 8017690:	0000 0000 3f80 0801 3350 0801 0000 0000     .....?..P3......
 80176a0:	0000 0000 66d0 0801 af20 0801               .....f.. ...

080176ac <System.RuntimeType_661>:
 80176ac:	0004 0000 a890 0801 af20 0801 0000 0000     ........ .......
 80176bc:	0000 0000                                   ....

080176c0 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_662>:
 80176c0:	0004 0000 9ff0 0801 ab1d abab 0000 0000     ................
	...
 80176e4:	79a0 0801 af50 0801 6650 0801               .y..P...Pf..

080176f0 <System.RuntimeType_663>:
 80176f0:	0004 0000 a890 0801 af50 0801 0000 0000     ........P.......

08017700 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_664>:
 8017700:	0004 0000 9ff0 0801 ab1d abab 0000 0000     ................
	...
 8017724:	79a0 0801 af80 0801 7af0 0801               .y.......z..

08017730 <System.RuntimeType_665>:
 8017730:	0004 0000 a890 0801 af80 0801 0000 0000     ................

08017740 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_667>:
 8017740:	0004 0000 b3d0 0801 ab12 abab 0001 0010     ................
 8017750:	0000 0000 3fb0 0801 30f0 0801 0000 0000     .....?...0......
 8017760:	0000 0000 7500 0801 afb0 0801               .....u......

0801776c <System.RuntimeType_668>:
 801776c:	0004 0000 a890 0801 afb0 0801 0000 0000     ................
 801777c:	0000 0000                                   ....

08017780 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_669>:
 8017780:	0004 0000 9ff0 0801 ab1d abab 0000 0000     ................
	...
 80177a4:	79a0 0801 afe0 0801 7080 0801               .y.......p..

080177b0 <System.RuntimeType_670>:
 80177b0:	0004 0000 a890 0801 afe0 0801 0000 0000     ................

080177c0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_673>:
 80177c0:	0004 0000 b3d0 0801 ab12 abab 0001 0010     ................
 80177d0:	0000 0000 3fe0 0801 4020 0801 0000 0000     .....?.. @......
 80177e0:	0000 0000 8370 0801 b010 0801               ....p.......

080177ec <System.RuntimeType_674>:
 80177ec:	0004 0000 a890 0801 b010 0801 0000 0000     ................
 80177fc:	0000 0000                                   ....

08017800 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_677>:
 8017800:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8017810:	0000 0000 4060 0801 4090 0801 0000 0000     ....`@...@......
 8017820:	0000 0000 83a0 0801 b040 0801               ........@...

0801782c <System.RuntimeType_678>:
 801782c:	0004 0000 a890 0801 b040 0801 0000 0000     ........@.......
 801783c:	0000 0000                                   ....

08017840 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_680>:
 8017840:	0004 0000 b3d0 0801 ab12 abab 0001 0010     ................
 8017850:	0000 0000 40e0 0801 4020 0801 0000 0000     .....@.. @......
 8017860:	0000 0000 83d0 0801 b070 0801               ........p...

0801786c <System.RuntimeType_681>:
 801786c:	0004 0000 a890 0801 b070 0801 0000 0000     ........p.......
 801787c:	0000 0000                                   ....

08017880 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_683>:
 8017880:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8017890:	0000 0000 4110 0801 30f0 0801 0000 0000     .....A...0......
 80178a0:	0000 0000 7500 0801 b0a0 0801               .....u......

080178ac <System.RuntimeType_684>:
 80178ac:	0004 0000 a890 0801 b0a0 0801 0000 0000     ................
 80178bc:	0000 0000                                   ....

080178c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_685>:
 80178c0:	0004 0000 b0d0 0801 0009 0000 7d25 0800     ............%}..
 80178d0:	80d9 0800 80ed 0800 8001 0800 3a1d 0800     .............:..
 80178e0:	0bcd 0800 7ba9 0800 7bc3 0800 37f1 0800     .....{...{...7..

080178f0 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_687>:
 80178f0:	0004 0000 9ff0 0801 ab1d abab 0000 0000     ................
	...
 8017914:	79a0 0801 b0d0 0801 8440 0801               .y......@...

08017920 <System.RuntimeType_688>:
 8017920:	0004 0000 a890 0801 b0d0 0801 0000 0000     ................

08017930 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_689>:
 8017930:	0004 0000 9ff0 0801 ab1d abab 0000 0000     ................
	...
 8017954:	79a0 0801 b100 0801 8470 0801               .y......p...

08017960 <System.RuntimeType_690>:
 8017960:	0004 0000 a890 0801 b100 0801 0000 0000     ................

08017970 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_692>:
 8017970:	0004 0000 b3d0 0801 ab12 abab 2001 0010     ............. ..
 8017980:	0000 0000 4130 0801 2fb0 0801 0000 0000     ....0A.../......
 8017990:	0000 0000 6a50 0801 b4f0 0801 0000 0000     ....Pj..........

080179a0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_694>:
 80179a0:	0004 0000 b400 0801 ab1d abab 2081 0010     ............. ..
 80179b0:	0000 0000 4160 0801 2fb0 0801 0000 0000     ....`A.../......
 80179c0:	0000 0000 7500 0801 b520 0801 0000 0000     .....u.. .......

080179d0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_696>:
 80179d0:	0004 0000 b400 0801 ab11 abab 2081 0010     ............. ..
 80179e0:	0000 0000 4180 0801 2fb0 0801 0000 0000     .....A.../......
 80179f0:	0000 0000 7500 0801 b550 0801 0000 0000     .....u..P.......

08017a00 <Microsoft.Zelig.Runtime.TypeSystem.ScalarTypeRepresentation_698>:
 8017a00:	0004 0000 b580 0801 ab05 abab 2109 0010     .............!..
 8017a10:	0000 0000 41b0 0801 2fb0 0801 0000 0000     .....A.../......
 8017a20:	0000 0000 79d0 0801 b5b0 0801 0000 0000     .....y..........

08017a30 <Microsoft.Zelig.Runtime.TypeSystem.ScalarTypeRepresentation_700>:
 8017a30:	0004 0000 b580 0801 ab03 abab 2109 0010     .............!..
 8017a40:	0000 0000 41d0 0801 2fb0 0801 0000 0000     .....A.../......
 8017a50:	0000 0000 79d0 0801 b5e0 0801 0000 0000     .....y..........

08017a60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_701>:
 8017a60:	0004 0000 b0d0 0801 0009 0000 7b41 0800     ............A{..
 8017a70:	80d9 0800 80ed 0800 8001 0800 3a1d 0800     .............:..
 8017a80:	0bcd 0800 7ba9 0800 7bc3 0800 37f1 0800     .....{...{...7..

08017a90 <Microsoft.Zelig.Runtime.TypeSystem.ScalarTypeRepresentation_704>:
 8017a90:	0004 0000 b580 0801 ab08 abab 2109 0010     .............!..
 8017aa0:	0000 0000 41f0 0801 2fb0 0801 0000 0000     .....A.../......
 8017ab0:	0000 0000 79d0 0801 b610 0801 0000 0000     .....y..........

08017ac0 <Microsoft.Zelig.Runtime.TypeSystem.ScalarTypeRepresentation_706>:
 8017ac0:	0004 0000 b580 0801 ab09 abab 2109 0010     .............!..
 8017ad0:	0000 0000 4210 0801 2fb0 0801 0000 0000     .....B.../......
 8017ae0:	0000 0000 79d0 0801 b640 0801 0000 0000     .....y..@.......

08017af0 <Microsoft.Zelig.Runtime.TypeSystem.ScalarTypeRepresentation_708>:
 8017af0:	0004 0000 b580 0801 ab19 abab 2109 0010     .............!..
 8017b00:	0000 0000 4230 0801 2fb0 0801 0000 0000     ....0B.../......
 8017b10:	0000 0000 79d0 0801 b670 0801 0000 0000     .....y..p.......

08017b20 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_710>:
 8017b20:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8017b30:	0000 0000 4250 0801 4090 0801 0000 0000     ....PB...@......
 8017b40:	0000 0000 86a0 0801 b160 0801 0000 0000     ........`.......

08017b50 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_711>:
 8017b50:	0004 0000 b400 0801 ab12 abab 0082 0010     ................
 8017b60:	0000 0000 33a0 0801 1b14 0801 86a0 0801     .....3..........
 8017b70:	0000 0000 86d0 0801 b6a0 0801               ............

08017b7c <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_712>:
 8017b7c:	0004 0000 afe0 0801 0001 0000 6650 0801     ............Pf..

08017b8c <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_713>:
 8017b8c:	0004 0000 b6d0 0801 7b7c 0801 0000 0000     ........|{......

08017b9c <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_714>:
 8017b9c:	0004 0000 afe0 0801 0001 0000 7fb0 0801     ................

08017bac <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_715>:
 8017bac:	0004 0000 b6d0 0801 7b9c 0801 0000 0000     .........{......

08017bbc <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_716>:
 8017bbc:	0004 0000 afe0 0801 0001 0000 6ad0 0801     .............j..

08017bcc <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_717>:
 8017bcc:	0004 0000 b6d0 0801 7bbc 0801 0000 0000     .........{......
 8017bdc:	0000 0000                                   ....

08017be0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_722>:
 8017be0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8017bf0:	0000 0000 4280 0801 42c0 0801 0000 0000     .....B...B......
 8017c00:	0000 0000 7500 0801 b700 0801               .....u......

08017c0c <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_723>:
 8017c0c:	0004 0000 afe0 0801 0001 0000 6650 0801     ............Pf..

08017c1c <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_724>:
 8017c1c:	0004 0000 b6d0 0801 7c0c 0801 0000 0000     .........|......
 8017c2c:	0000 0000                                   ....

08017c30 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_726>:
 8017c30:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8017c40:	0000 0000 4320 0801 3350 0801 0000 0000     .... C..P3......
 8017c50:	0000 0000 8780 0801 b730 0801 0000 0000     ........0.......

08017c60 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_728>:
 8017c60:	0004 0000 b3d0 0801 ab12 abab 0102 0010     ................
 8017c70:	0000 0000 4350 0801 1b14 0801 7f50 0801     ....PC......P...
 8017c80:	0000 0000 87d0 0801 b130 0801               ........0...

08017c8c <System.RuntimeType_729>:
 8017c8c:	0004 0000 a890 0801 b130 0801 0000 0000     ........0.......
 8017c9c:	0000 0000                                   ....

08017ca0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_731>:
 8017ca0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8017cb0:	0000 0000 4380 0801 30f0 0801 0000 0000     .....C...0......
 8017cc0:	0000 0000 7080 0801 b760 0801               .....p..`...

08017ccc <System.RuntimeType_732>:
 8017ccc:	0004 0000 a890 0801 b160 0801 0000 0000     ........`.......
 8017cdc:	0000 0000                                   ....

08017ce0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_734>:
 8017ce0:	0004 0000 b3d0 0801 ab12 abab 0001 0010     ................
 8017cf0:	0000 0000 43d0 0801 4020 0801 0000 0000     .....C.. @......
 8017d00:	0000 0000 8830 0801 b190 0801               ....0.......

08017d0c <System.RuntimeType_735>:
 8017d0c:	0004 0000 a890 0801 b190 0801 0000 0000     ................
 8017d1c:	0000 0000                                   ....

08017d20 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_737>:
 8017d20:	0004 0000 b3d0 0801 ab12 abab 0001 0010     ................
 8017d30:	0000 0000 4400 0801 4020 0801 0000 0000     .....D.. @......
 8017d40:	0000 0000 8860 0801 b1c0 0801               ....`.......

08017d4c <System.RuntimeType_738>:
 8017d4c:	0004 0000 a890 0801 b1c0 0801 0000 0000     ................
 8017d5c:	0000 0000                                   ....

08017d60 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_740>:
 8017d60:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8017d70:	0000 0000 4420 0801 4090 0801 0000 0000     .... D...@......
 8017d80:	0000 0000 8890 0801 b1f0 0801               ............

08017d8c <System.RuntimeType_741>:
 8017d8c:	0004 0000 a890 0801 b1f0 0801 0000 0000     ................
 8017d9c:	0000 0000                                   ....

08017da0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_743>:
 8017da0:	0004 0000 b3d0 0801 ab12 abab 0001 0010     ................
 8017db0:	0000 0000 4440 0801 4020 0801 0000 0000     ....@D.. @......
 8017dc0:	0000 0000 88c0 0801 b220 0801               ........ ...

08017dcc <System.RuntimeType_744>:
 8017dcc:	0004 0000 a890 0801 b220 0801 0000 0000     ........ .......
 8017ddc:	0000 0000                                   ....

08017de0 <Microsoft.Zelig.Runtime.TypeSystem.SzArrayReferenceTypeRepresentation_745>:
 8017de0:	0004 0000 9ff0 0801 ab1d abab 0000 0000     ................
	...
 8017e04:	79a0 0801 b250 0801 88f0 0801               .y..P.......

08017e10 <System.RuntimeType_746>:
 8017e10:	0004 0000 a890 0801 b250 0801 0000 0000     ........P.......

08017e20 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_748>:
 8017e20:	0004 0000 b3d0 0801 ab12 abab 0001 0010     ................
 8017e30:	0000 0000 4460 0801 33f0 0801 0000 0000     ....`D...3......
 8017e40:	0000 0000 7500 0801 b280 0801               .....u......

08017e4c <System.RuntimeType_749>:
 8017e4c:	0004 0000 a890 0801 b280 0801 0000 0000     ................
 8017e5c:	0000 0000                                   ....

08017e60 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_752>:
 8017e60:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8017e70:	0000 0000 4490 0801 44c0 0801 0000 0000     .....D...D......
 8017e80:	0000 0000 8920 0801 b2b0 0801               .... .......

08017e8c <System.RuntimeType_753>:
 8017e8c:	0004 0000 a890 0801 b2b0 0801 0000 0000     ................
 8017e9c:	0000 0000                                   ....

08017ea0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_755>:
 8017ea0:	0004 0000 b3d0 0801 ab12 abab 0003 0010     ................
 8017eb0:	0000 0000 4520 0801 1b14 0801 8950 0801     .... E......P...
 8017ec0:	0000 0000 8950 0801 b2e0 0801               ....P.......

08017ecc <System.RuntimeType_756>:
 8017ecc:	0004 0000 a890 0801 b2e0 0801               ............

08017ed8 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_757>:
 8017ed8:	0004 0000 afe0 0801 0001 0000 7fb0 0801     ................

08017ee8 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_758>:
 8017ee8:	0004 0000 b6d0 0801 7ed8 0801 0000 0000     .........~......

08017ef8 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_759>:
 8017ef8:	0004 0000 afe0 0801 0001 0000 6ad0 0801     .............j..

08017f08 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_760>:
 8017f08:	0004 0000 b6d0 0801 7ef8 0801 0000 0000     .........~......
	...

08017f20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_761>:
 8017f20:	0004 0000 b0d0 0801 0009 0000 7e25 0800     ............%~..
 8017f30:	7f35 0800 7f49 0800 7ec1 0800 7f61 0800     5...I....~..a...
 8017f40:	7f65 0800 7f69 0800 7f81 0800 7e79 0800     e...i.......y~..

08017f50 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_770>:
 8017f50:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8017f60:	0000 0000 4550 0801 4580 0801 0000 0000     ....PE...E......
 8017f70:	0000 0000 89c0 0801 b790 0801 0000 0000     ................

08017f80 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_771>:
 8017f80:	0004 0000 b400 0801 ab12 abab 0082 0010     ................
 8017f90:	0001 0000 33a0 0801 1b14 0801 89c0 0801     .....3..........
 8017fa0:	0000 0000 7500 0801 b7c0 0801 0000 0000     .....u..........

08017fb0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_773>:
 8017fb0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8017fc0:	0000 0000 45f0 0801 36c0 0801 0000 0000     .....E...6......
 8017fd0:	0000 0000 7500 0801 b7f0 0801 0000 0000     .....u..........

08017fe0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_774>:
 8017fe0:	0004 0000 b0d0 0801 0009 0000 7d7d 0800     ............}}..
 8017ff0:	80d9 0800 80ed 0800 8001 0800 3a1d 0800     .............:..
 8018000:	7d79 0800 7ba9 0800 7bc3 0800 37f1 0800     y}...{...{...7..

08018010 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_777>:
 8018010:	0004 0000 b3d0 0801 ab11 abab 2081 0010     ............. ..
 8018020:	0000 0000 4620 0801 2fb0 0801 0000 0000     .... F.../......
 8018030:	0000 0000 79d0 0801 b820 0801 0000 0000     .....y.. .......

08018040 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_779>:
 8018040:	0004 0000 b400 0801 ab12 abab 2081 0010     ............. ..
 8018050:	0000 0000 4640 0801 2fb0 0801 0000 0000     ....@F.../......
 8018060:	0000 0000 6e50 0801 b850 0801 0000 0000     ....Pn..P.......

08018070 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_780>:
 8018070:	0004 0000 b0d0 0801 0009 0000 7dd1 0800     .............}..
 8018080:	80d9 0800 80ed 0800 8001 0800 3a1d 0800     .............:..
 8018090:	0bcd 0800 7ba9 0800 7bc3 0800 37f1 0800     .....{...{...7..

080180a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_784>:
 80180a0:	0004 0000 b0d0 0801 0009 0000 82e5 0800     ................
 80180b0:	80d9 0800 80ed 0800 8001 0800 3a1d 0800     .............:..
 80180c0:	0bcd 0800 7ba9 0800 7bc3 0800 37f1 0800     .....{...{...7..

080180d0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_787>:
 80180d0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 80180e0:	0000 0000 4660 0801 30f0 0801 0000 0000     ....`F...0......
 80180f0:	0000 0000 7500 0801 b880 0801 0000 0000     .....u..........

08018100 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_789>:
 8018100:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8018110:	0000 0000 4490 0801 46a0 0801 0000 0000     .....D...F......
 8018120:	0000 0000 7500 0801 b8b0 0801 0000 0000     .....u..........

08018130 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_791>:
 8018130:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8018140:	0000 0000 46f0 0801 44c0 0801 0000 0000     .....F...D......
 8018150:	0000 0000 8c00 0801 b310 0801               ............

0801815c <System.RuntimeType_792>:
 801815c:	0004 0000 a890 0801 b310 0801               ............

08018168 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_793>:
 8018168:	0004 0000 afe0 0801 0001 0000 71e0 0801     .............q..

08018178 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_794>:
 8018178:	0004 0000 b6d0 0801 8168 0801 0000 0000     ........h.......

08018188 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_795>:
 8018188:	0004 0000 afe0 0801 0001 0000 71e0 0801     .............q..

08018198 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_796>:
 8018198:	0004 0000 b6d0 0801 8188 0801 0000 0000     ................
	...

080181b0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_798>:
 80181b0:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 80181c0:	0000 0000 4730 0801 44c0 0801 0000 0000     ....0G...D......
 80181d0:	0000 0000 8c30 0801 b340 0801               ....0...@...

080181dc <System.RuntimeType_799>:
 80181dc:	0004 0000 a890 0801 b340 0801 0000 0000     ........@.......
 80181ec:	0000 0000                                   ....

080181f0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_801>:
 80181f0:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8018200:	0000 0000 4770 0801 4090 0801 0000 0000     ....pG...@......
 8018210:	0000 0000 8c60 0801 b370 0801               ....`...p...

0801821c <System.RuntimeType_802>:
 801821c:	0004 0000 a890 0801 b370 0801 0000 0000     ........p.......
 801822c:	0000 0000                                   ....

08018230 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_805>:
 8018230:	0004 0000 b3d0 0801 ab12 abab 0001 0010     ................
 8018240:	0000 0000 4790 0801 47b0 0801 0000 0000     .....G...G......
 8018250:	0000 0000 7500 0801 b3a0 0801               .....u......

0801825c <System.RuntimeType_806>:
 801825c:	0004 0000 a890 0801 b3a0 0801               ............

08018268 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_807>:
 8018268:	0004 0000 afe0 0801 0001 0000 8c90 0801     ................

08018278 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_808>:
 8018278:	0004 0000 b6d0 0801 8268 0801 0000 0000     ........h.......

08018288 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_809>:
 8018288:	0004 0000 afe0 0801 0001 0000 82b0 0801     ................

08018298 <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_810>:
 8018298:	0004 0000 b6d0 0801 8288 0801 0000 0000     ................
	...

080182b0 <Microsoft.Zelig.Runtime.TypeSystem.ValueTypeRepresentation_812>:
 80182b0:	0004 0000 b4c0 0801 ab11 abab 010a 0010     ................
 80182c0:	0000 0000 4810 0801 1b14 0801 8cc0 0801     .....H..........
 80182d0:	0000 0000 79d0 0801 b8e0 0801 0000 0000     .....y..........

080182e0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_814>:
 80182e0:	0004 0000 b400 0801 ab12 abab 0181 0010     ................
 80182f0:	0000 0000 4840 0801 3df0 0801 0000 0000     ....@H...=......
 8018300:	0000 0000 7500 0801 b910 0801               .....u......

0801830c <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_815>:
 801830c:	0004 0000 afe0 0801 0001 0000 6650 0801     ............Pf..

0801831c <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_816>:
 801831c:	0004 0000 b6d0 0801 830c 0801 0000 0000     ................

0801832c <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_817>:
 801832c:	0004 0000 afe0 0801 0001 0000 7af0 0801     .............z..

0801833c <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_818>:
 801833c:	0004 0000 b6d0 0801 832c 0801 0000 0000     ........,.......

0801834c <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation[]_819>:
 801834c:	0004 0000 afe0 0801 0001 0000 8c90 0801     ................

0801835c <Microsoft.Zelig.Runtime.TypeSystem.TypeRepresentation.GenericContext_820>:
 801835c:	0004 0000 b6d0 0801 834c 0801 0000 0000     ........L.......
 801836c:	0000 0000                                   ....

08018370 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_822>:
 8018370:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8018380:	0000 0000 3fe0 0801 4860 0801 0000 0000     .....?..`H......
 8018390:	0000 0000 8d30 0801 b940 0801 0000 0000     ....0...@.......

080183a0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_824>:
 80183a0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 80183b0:	0000 0000 4060 0801 48b0 0801 0000 0000     ....`@...H......
 80183c0:	0000 0000 8da0 0801 b970 0801 0000 0000     ........p.......

080183d0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_825>:
 80183d0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 80183e0:	0000 0000 40e0 0801 4860 0801 0000 0000     .....@..`H......
 80183f0:	0000 0000 8e40 0801 b9a0 0801 0000 0000     ....@...........

08018400 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_827>:
 8018400:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8018410:	0000 0000 48f0 0801 30f0 0801 0000 0000     .....H...0......
 8018420:	0000 0000 7ca0 0801 b3d0 0801               .....|......

0801842c <System.RuntimeType_828>:
 801842c:	0004 0000 a890 0801 b3d0 0801 0000 0000     ................
 801843c:	0000 0000                                   ....

08018440 <Microsoft.Zelig.Runtime.TypeSystem.ValueTypeRepresentation_830>:
 8018440:	0004 0000 b4c0 0801 ab11 abab 0109 0010     ................
 8018450:	0000 0000 4950 0801 30f0 0801 0000 0000     ....PI...0......
 8018460:	0000 0000 79d0 0801 b9d0 0801 0000 0000     .....y..........

08018470 <Microsoft.Zelig.Runtime.TypeSystem.ValueTypeRepresentation_832>:
 8018470:	0004 0000 b4c0 0801 ab11 abab 010a 0010     ................
 8018480:	0000 0000 4980 0801 1b14 0801 7880 0801     .....I.......x..
 8018490:	0000 0000 79d0 0801 ba00 0801 0000 0000     .....y..........

080184a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_833>:
 80184a0:	0004 0000 b0d0 0801 0004 0000 0861 0800     ............a...
 80184b0:	0873 0800 087f 0800 0a25 0800 0000 0000     s.......%.......

080184c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_835>:
 80184c0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 80184d0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

080184e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_837>:
 80184e0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 80184f0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08018500 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_839>:
 8018500:	0004 0000 b0d0 0801 0009 0000 7f99 0800     ................
 8018510:	80d9 0800 80ed 0800 8001 0800 3a1d 0800     .............:..
 8018520:	0bcd 0800 7ba9 0800 7bc3 0800 37f1 0800     .....{...{...7..

08018530 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_841>:
 8018530:	0004 0000 b0d0 0801 0004 0000 10a5 0800     ................
 8018540:	1059 0800 10a1 0800 1151 0800               Y.......Q...

0801854c <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_842>:
 801854c:	0004 0000 b0d0 0801 0001 0000 1151 0800     ............Q...
 801855c:	0000 0000                                   ....

08018560 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_843>:
 8018560:	0004 0000 b100 0801 0001 0000 a920 0801     ............ ...
 8018570:	854c 0801 0000 0000 0000 0000 0000 0000     L...............

08018580 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_845>:
 8018580:	0004 0000 b0d0 0801 0003 0000 1271 0800     ............q...
 8018590:	1229 0800 1221 0800 0000 0000 0000 0000     )...!...........

080185a0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_848>:
 80185a0:	0004 0000 b3d0 0801 ab12 abab 0001 0010     ................
 80185b0:	0000 0000 49b0 0801 30f0 0801 0000 0000     .....I...0......
 80185c0:	0000 0000 7ca0 0801 b400 0801               .....|......

080185cc <System.RuntimeType_849>:
 80185cc:	0004 0000 a890 0801 b400 0801 0000 0000     ................
 80185dc:	0000 0000                                   ....

080185e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_850>:
 80185e0:	0004 0000 b0d0 0801 0005 0000 14ed 0800     ................
 80185f0:	14a1 0800 14e9 0800 14ff 0800 1511 0800     ................

08018600 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_851>:
 8018600:	0004 0000 b0d0 0801 0001 0000 1511 0800     ................

08018610 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_852>:
 8018610:	0004 0000 b100 0801 0001 0000 a920 0801     ............ ...
 8018620:	8600 0801 0000 0000 0000 0000 0000 0000     ................

08018630 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_854>:
 8018630:	0004 0000 b0d0 0801 0005 0000 2355 0800     ............U#..
 8018640:	2309 0800 2351 0800 2367 0800 2379 0800     .#..Q#..g#..y#..

08018650 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_855>:
 8018650:	0004 0000 b0d0 0801 0001 0000 2379 0800     ............y#..

08018660 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_856>:
 8018660:	0004 0000 b100 0801 0001 0000 a920 0801     ............ ...
 8018670:	8650 0801 0000 0000 0000 0000 0000 0000     P...............

08018680 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_858>:
 8018680:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8018690:	2395 0800 23dd 0800 0000 0000 0000 0000     .#...#..........

080186a0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_860>:
 80186a0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 80186b0:	0000 0000 4250 0801 48b0 0801 0000 0000     ....PB...H......
 80186c0:	0000 0000 8f80 0801 ba30 0801 0000 0000     ........0.......

080186d0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_861>:
 80186d0:	0004 0000 b400 0801 ab12 abab 0082 0010     ................
 80186e0:	0000 0000 33a0 0801 1b14 0801 8f80 0801     .....3..........
 80186f0:	0000 0000 8fe0 0801 ba60 0801 0000 0000     ........`.......

08018700 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_862>:
 8018700:	0004 0000 b0d0 0801 000d 0000 1015 0800     ................
 8018710:	0873 0800 087f 0800 2629 0800 2661 0800     s.......)&..a&..
 8018720:	26f5 0800 563f 0800 2737 0800 273b 0800     .&..?V..7'..;'..
 8018730:	273f 0800 2743 0800 2747 0800 274f 0800     ?'..C'..G'..O'..

08018740 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_864>:
 8018740:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8018750:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08018760 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_868>:
 8018760:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8018770:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08018780 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_871>:
 8018780:	0004 0000 b400 0801 ab12 abab 2081 0010     ............. ..
 8018790:	0000 0000 4a10 0801 2fb0 0801 0000 0000     .....J.../......
 80187a0:	0000 0000 7500 0801 ba90 0801 0000 0000     .....u..........

080187b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_872>:
 80187b0:	0004 0000 b0d0 0801 0005 0000 1015 0800     ................
 80187c0:	0873 0800 087f 0800 30c3 0800 30d9 0800     s........0...0..

080187d0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_875>:
 80187d0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 80187e0:	0000 0000 4a50 0801 33f0 0801 0000 0000     ....PJ...3......
 80187f0:	0000 0000 7500 0801 bac0 0801 0000 0000     .....u..........

08018800 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_876>:
 8018800:	0004 0000 b0d0 0801 0009 0000 1015 0800     ................
 8018810:	80d9 0800 80ed 0800 8001 0800 3a1d 0800     .............:..
 8018820:	0bcd 0800 7ba9 0800 7bc3 0800 37f1 0800     .....{...{...7..

08018830 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_878>:
 8018830:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8018840:	0000 0000 43d0 0801 4860 0801 0000 0000     .....C..`H......
 8018850:	0000 0000 9120 0801 baf0 0801 0000 0000     .... ...........

08018860 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_879>:
 8018860:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8018870:	0000 0000 4400 0801 4860 0801 0000 0000     .....D..`H......
 8018880:	0000 0000 9180 0801 bb20 0801 0000 0000     ........ .......

08018890 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_880>:
 8018890:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 80188a0:	0000 0000 4420 0801 48b0 0801 0000 0000     .... D...H......
 80188b0:	0000 0000 91d0 0801 bb50 0801 0000 0000     ........P.......

080188c0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_881>:
 80188c0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 80188d0:	0000 0000 4440 0801 4860 0801 0000 0000     ....@D..`H......
 80188e0:	0000 0000 9230 0801 bb80 0801 0000 0000     ....0...........

080188f0 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_883>:
 80188f0:	0004 0000 b3d0 0801 ab12 abab 0002 0010     ................
 8018900:	0000 0000 4a90 0801 1b14 0801 9230 0801     .....J......0...
 8018910:	0000 0000 7500 0801 bbb0 0801 0000 0000     .....u..........

08018920 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_885>:
 8018920:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8018930:	0000 0000 4490 0801 4ab0 0801 0000 0000     .....D...J......
 8018940:	0000 0000 8100 0801 bbe0 0801 0000 0000     ................

08018950 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_887>:
 8018950:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8018960:	0003 0000 4b00 0801 33f0 0801 0000 0000     .....K...3......
 8018970:	0000 0000 7500 0801 bc10 0801 0000 0000     .....u..........

08018980 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_889>:
 8018980:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8018990:	0000 0000 4b40 0801 30f0 0801 0000 0000     ....@K...0......
 80189a0:	0000 0000 7040 0801 b430 0801               ....@p..0...

080189ac <System.RuntimeType_890>:
 80189ac:	0004 0000 a890 0801 b430 0801 0000 0000     ........0.......
 80189bc:	0000 0000                                   ....

080189c0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_895>:
 80189c0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 80189d0:	0003 0000 4250 0801 33f0 0801 0000 0000     ....PB...3......
 80189e0:	0000 0000 7500 0801 bc40 0801 0000 0000     .....u..@.......

080189f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_896>:
 80189f0:	0004 0000 b0d0 0801 0007 0000 1015 0800     ................
 8018a00:	0873 0800 087f 0800 3449 0800 0000 0000     s.......I4......
 8018a10:	34eb 0800 34fd 0800 0000 0000 0000 0000     .4...4..........

08018a20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_898>:
 8018a20:	0004 0000 b0d0 0801 000d 0000 1015 0800     ................
 8018a30:	0873 0800 087f 0800 0000 0000 0000 0000     s...............
	...

08018a60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_900>:
 8018a60:	0004 0000 b0d0 0801 0005 0000 1015 0800     ................
 8018a70:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08018a80 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_903>:
 8018a80:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8018a90:	0000 0000 4b90 0801 30f0 0801 0000 0000     .....K...0......
 8018aa0:	0000 0000 8f00 0801 b460 0801               ........`...

08018aac <System.RuntimeType_904>:
 8018aac:	0004 0000 a890 0801 b460 0801 0000 0000     ........`.......
 8018abc:	0000 0000                                   ....

08018ac0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_905>:
 8018ac0:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8018ad0:	0873 0800 087f 0800 1393 0800               s...........

08018adc <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_906>:
 8018adc:	0004 0000 b0d0 0801 0001 0000 1393 0800     ................
 8018aec:	0000 0000                                   ....

08018af0 <Microsoft.Zelig.Runtime.TypeSystem.VTable.InterfaceMap[]_907>:
 8018af0:	0004 0000 b100 0801 0001 0000 a920 0801     ............ ...
 8018b00:	8adc 0801 0000 0000 0000 0000 0000 0000     ................

08018b10 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_909>:
 8018b10:	0004 0000 b0d0 0801 0008 0000 1015 0800     ................
 8018b20:	6ea9 0800 6ee9 0800 0000 0000 6f09 0800     .n...n.......o..
 8018b30:	6f35 0800 0000 0000 0000 0000 0000 0000     5o..............

08018b40 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_912>:
 8018b40:	0004 0000 b3d0 0801 ab12 abab 0101 0010     ................
 8018b50:	0000 0000 4be0 0801 30f0 0801 0000 0000     .....K...0......
 8018b60:	0000 0000 85a0 0801 b490 0801               ............

08018b6c <System.RuntimeType_913>:
 8018b6c:	0004 0000 a890 0801 b490 0801 0000 0000     ................
 8018b7c:	0000 0000                                   ....

08018b80 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_917>:
 8018b80:	0004 0000 b3d0 0801 ab12 abab 0001 0010     ................
 8018b90:	0000 0000 4c30 0801 30f0 0801 0000 0000     ....0L...0......
 8018ba0:	0000 0000 7080 0801 b4c0 0801               .....p......

08018bac <System.RuntimeType_918>:
 8018bac:	0004 0000 a890 0801 b4c0 0801 0000 0000     ................
 8018bbc:	0000 0000                                   ....

08018bc0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_919>:
 8018bc0:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8018bd0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08018be0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_921>:
 8018be0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8018bf0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08018c00 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_923>:
 8018c00:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8018c10:	0000 0000 46f0 0801 4ab0 0801 0000 0000     .....F...J......
 8018c20:	0000 0000 9370 0801 bc70 0801 0000 0000     ....p...p.......

08018c30 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_925>:
 8018c30:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8018c40:	0000 0000 4730 0801 4c70 0801 0000 0000     ....0G..pL......
 8018c50:	0000 0000 93c0 0801 bca0 0801 0000 0000     ................

08018c60 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_926>:
 8018c60:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8018c70:	0000 0000 4770 0801 48b0 0801 0000 0000     ....pG...H......
 8018c80:	0000 0000 9410 0801 bcd0 0801 0000 0000     ................

08018c90 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_928>:
 8018c90:	0004 0000 b3d0 0801 ab12 abab 0002 0010     ................
 8018ca0:	0000 0000 4ce0 0801 1b14 0801 8cc0 0801     .....L..........
 8018cb0:	0000 0000 7500 0801 bd00 0801 0000 0000     .....u..........

08018cc0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_930>:
 8018cc0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8018cd0:	0000 0000 46f0 0801 4d00 0801 0000 0000     .....F...M......
 8018ce0:	0000 0000 7500 0801 bd30 0801 0000 0000     .....u..0.......

08018cf0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_931>:
 8018cf0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8018d00:	8d39 0800 087f 0800 0000 0000 0000 0000     9...............

08018d10 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_933>:
 8018d10:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8018d20:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08018d30 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_936>:
 8018d30:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8018d40:	0000 0000 4d70 0801 33f0 0801 0000 0000     ....pM...3......
 8018d50:	0000 0000 94c0 0801 bd60 0801 0000 0000     ........`.......

08018d60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_937>:
 8018d60:	0004 0000 b0d0 0801 000a 0000 1015 0800     ................
 8018d70:	0873 0800 087f 0800 4a83 0800 0895 0800     s........J......
 8018d80:	417d 0800 1a15 0800 1a5d 0800 08c1 0800     }A......].......
 8018d90:	054f 0800 0000 0000 0000 0000 0000 0000     O...............

08018da0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_939>:
 8018da0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8018db0:	0000 0000 4060 0801 4020 0801 0000 0000     ....`@.. @......
 8018dc0:	0000 0000 9530 0801 bd90 0801 0000 0000     ....0...........

08018dd0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_940>:
 8018dd0:	0004 0000 b0d0 0801 0016 0000 1015 0800     ................
 8018de0:	0873 0800 087f 0800 2f27 0800 8a89 0800     s.......'/......
 8018df0:	8a91 0800 3c5d 0800 4a55 0800 25a5 0800     ....]<..UJ...%..
 8018e00:	4a65 0800 2d85 0800 2935 0800 3233 0800     eJ...-..5)..32..
 8018e10:	2c85 0800 8b05 0800 32c1 0800 3339 0800     .,.......2..93..
 8018e20:	33a5 0800 3303 0800 3329 0800 4a77 0800     .3...3..)3..wJ..
 8018e30:	4a7b 0800 0000 0000 0000 0000 0000 0000     {J..............

08018e40 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_942>:
 8018e40:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8018e50:	0003 0000 40e0 0801 33f0 0801 0000 0000     .....@...3......
 8018e60:	0000 0000 7500 0801 bdc0 0801 0000 0000     .....u..........

08018e70 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_943>:
 8018e70:	0004 0000 b0d0 0801 0009 0000 1015 0800     ................
 8018e80:	0873 0800 087f 0800 892d 0800 837f 0800     s.......-.......
 8018e90:	8a3d 0800 8a49 0800 06e1 0800 071d 0800     =...I...........

08018ea0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_945>:
 8018ea0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8018eb0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08018ec0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_947>:
 8018ec0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8018ed0:	0873 0800 087f 0800                         s.......

08018ed8 <System.RuntimeType_949>:
 8018ed8:	0004 0000 a890 0801 b4f0 0801               ............

08018ee4 <System.RuntimeType_950>:
 8018ee4:	0004 0000 a890 0801 b520 0801               ........ ...

08018ef0 <System.RuntimeType_951>:
 8018ef0:	0004 0000 a890 0801 b550 0801 0000 0000     ........P.......

08018f00 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_953>:
 8018f00:	0004 0000 b3d0 0801 ab12 abab 0001 0010     ................
 8018f10:	0000 0000 4db0 0801 30f0 0801 0000 0000     .....M...0......
 8018f20:	0000 0000 8b80 0801 b580 0801               ............

08018f2c <System.RuntimeType_954>:
 8018f2c:	0004 0000 a890 0801 b580 0801               ............

08018f38 <System.RuntimeType_955>:
 8018f38:	0004 0000 a890 0801 b5b0 0801               ............

08018f44 <System.RuntimeType_956>:
 8018f44:	0004 0000 a890 0801 b5e0 0801               ............

08018f50 <System.RuntimeType_957>:
 8018f50:	0004 0000 a890 0801 b610 0801               ............

08018f5c <System.RuntimeType_958>:
 8018f5c:	0004 0000 a890 0801 b640 0801               ........@...

08018f68 <System.RuntimeType_959>:
 8018f68:	0004 0000 a890 0801 b670 0801 0000 0000     ........p.......
	...

08018f80 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_961>:
 8018f80:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8018f90:	0000 0000 4250 0801 4df0 0801 0000 0000     ....PB...M......
 8018fa0:	0000 0000 9630 0801 bdf0 0801 0000 0000     ....0...........

08018fb0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_962>:
 8018fb0:	0004 0000 b0d0 0801 0007 0000 1015 0800     ................
 8018fc0:	0873 0800 087f 0800 3b6d 0800 0000 0000     s.......m;......
 8018fd0:	34eb 0800 34fd 0800 0000 0000 0000 0000     .4...4..........

08018fe0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_964>:
 8018fe0:	0004 0000 b400 0801 ab12 abab 0082 0010     ................
 8018ff0:	0000 0000 33a0 0801 1b14 0801 96a0 0801     .....3..........
 8019000:	0000 0000 7f80 0801 be20 0801 0000 0000     ........ .......

08019010 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_965>:
 8019010:	0004 0000 b0d0 0801 000d 0000 1015 0800     ................
 8019020:	0873 0800 087f 0800 2629 0800 2661 0800     s.......)&..a&..
 8019030:	26f5 0800 563f 0800 2737 0800 273b 0800     .&..?V..7'..;'..
 8019040:	273f 0800 2743 0800 2747 0800 274f 0800     ?'..C'..G'..O'..

08019050 <System.RuntimeType_967>:
 8019050:	0004 0000 a890 0801 b6a0 0801 0000 0000     ................

08019060 <Microsoft.Zelig.Runtime.TypeSystem.ConcreteReferenceTypeRepresentation_969>:
 8019060:	0004 0000 b3d0 0801 ab12 abab 0102 0010     ................
 8019070:	0000 0000 4e40 0801 1b14 0801 7080 0801     ....@N.......p..
 8019080:	0000 0000 7500 0801 b6d0 0801               .....u......

0801908c <System.RuntimeType_970>:
 801908c:	0004 0000 a890 0801 b6d0 0801               ............

08019098 <System.RuntimeType_972>:
 8019098:	0004 0000 a890 0801 b700 0801 0000 0000     ................
	...

080190b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_973>:
 80190b0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 80190c0:	0873 0800 087f 0800                         s.......

080190c8 <System.RuntimeType_975>:
 80190c8:	0004 0000 a890 0801 b730 0801 0000 0000     ........0.......
	...

080190e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_976>:
 80190e0:	0004 0000 b0d0 0801 0007 0000 1015 0800     ................
 80190f0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............
	...

08019108 <System.RuntimeType_978>:
 8019108:	0004 0000 a890 0801 b760 0801 0000 0000     ........`.......
	...

08019120 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_980>:
 8019120:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8019130:	0000 0000 4e70 0801 33f0 0801 0000 0000     ....pN...3......
 8019140:	0000 0000 9740 0801 be50 0801 0000 0000     ....@...P.......

08019150 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_981>:
 8019150:	0004 0000 b0d0 0801 0009 0000 1015 0800     ................
 8019160:	0873 0800 087f 0800 4609 0800 3c1b 0800     s........F...<..
 8019170:	4953 0800 4659 0800 466d 0800 4771 0800     SI..YF..mF..qG..

08019180 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_983>:
 8019180:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8019190:	0003 0000 4400 0801 33f0 0801 0000 0000     .....D...3......
 80191a0:	0000 0000 7500 0801 be80 0801 0000 0000     .....u..........

080191b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_984>:
 80191b0:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 80191c0:	0873 0800 087f 0800 8a53 0800 0000 0000     s.......S.......

080191d0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_986>:
 80191d0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 80191e0:	0000 0000 4420 0801 4020 0801 0000 0000     .... D.. @......
 80191f0:	0000 0000 97e0 0801 beb0 0801 0000 0000     ................

08019200 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_987>:
 8019200:	0004 0000 b0d0 0801 0009 0000 1015 0800     ................
 8019210:	0873 0800 087f 0800 8361 0800 4839 0800     s.......a...9H..
 8019220:	4851 0800 4869 0800 488d 0800 3cc5 0800     QH..iH...H...<..

08019230 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_989>:
 8019230:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8019240:	0003 0000 4440 0801 33f0 0801 0000 0000     ....@D...3......
 8019250:	0000 0000 7500 0801 bee0 0801 0000 0000     .....u..........

08019260 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_990>:
 8019260:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8019270:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08019280 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_992>:
 8019280:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8019290:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

080192a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_994>:
 80192a0:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 80192b0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

080192c0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_996>:
 80192c0:	0004 0000 b0d0 0801 0007 0000 1015 0800     ................
 80192d0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............
	...

080192f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1000>:
 80192f0:	0004 0000 b0d0 0801 0007 0000 1015 0800     ................
 8019300:	0873 0800 087f 0800 0000 0000 0000 0000     s...............
	...

08019318 <System.RuntimeType_1002>:
 8019318:	0004 0000 a890 0801 b790 0801               ............

08019324 <System.RuntimeType_1003>:
 8019324:	0004 0000 a890 0801 b7c0 0801               ............

08019330 <System.RuntimeType_1004>:
 8019330:	0004 0000 a890 0801 b7f0 0801               ............

0801933c <System.RuntimeType_1005>:
 801933c:	0004 0000 a890 0801 b820 0801               ........ ...

08019348 <System.RuntimeType_1006>:
 8019348:	0004 0000 a890 0801 b850 0801               ........P...

08019354 <System.RuntimeType_1008>:
 8019354:	0004 0000 a890 0801 b880 0801               ............

08019360 <System.RuntimeType_1009>:
 8019360:	0004 0000 a890 0801 b8b0 0801 0000 0000     ................

08019370 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1010>:
 8019370:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8019380:	0000 0000 46f0 0801 46a0 0801 0000 0000     .....F...F......
 8019390:	0000 0000 98b0 0801 bf10 0801 0000 0000     ................

080193a0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1011>:
 80193a0:	0004 0000 b0d0 0801 0005 0000 1015 0800     ................
 80193b0:	0873 0800 087f 0800 8c09 0800 8c0f 0800     s...............

080193c0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1013>:
 80193c0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 80193d0:	0000 0000 4730 0801 4d00 0801 0000 0000     ....0G...M......
 80193e0:	0000 0000 7500 0801 bf40 0801 0000 0000     .....u..@.......

080193f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1014>:
 80193f0:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8019400:	0873 0800 087f 0800 8c61 0800 0000 0000     s.......a.......

08019410 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1016>:
 8019410:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8019420:	0000 0000 4770 0801 4020 0801 0000 0000     ....pG.. @......
 8019430:	0000 0000 9940 0801 bf70 0801 0000 0000     ....@...p.......

08019440 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1017>:
 8019440:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8019450:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08019460 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1019>:
 8019460:	0004 0000 b0d0 0801 0003 0000 1015 0800     ................
 8019470:	0873 0800 087f 0800 0000 0000 0000 0000     s...............

08019480 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1021>:
 8019480:	0004 0000 b0d0 0801 0005 0000 1015 0800     ................
 8019490:	0873 0800 087f 0800 8c09 0800 8c0f 0800     s...............

080194a0 <System.RuntimeType_1023>:
 80194a0:	0004 0000 a890 0801 b8e0 0801               ............

080194ac <System.RuntimeType_1024>:
 80194ac:	0004 0000 a890 0801 b910 0801 0000 0000     ................
 80194bc:	0000 0000                                   ....

080194c0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1025>:
 80194c0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 80194d0:	0003 0000 3fe0 0801 33f0 0801 0000 0000     .....?...3......
 80194e0:	0000 0000 7500 0801 bfa0 0801 0000 0000     .....u..........

080194f0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1026>:
 80194f0:	0004 0000 b0d0 0801 000a 0000 1015 0800     ................
 8019500:	0873 0800 087f 0800 4a83 0800 0895 0800     s........J......
 8019510:	417d 0800 1a15 0800 1a5d 0800 08c1 0800     }A......].......
 8019520:	054f 0800                                   O...

08019524 <System.RuntimeType_1028>:
 8019524:	0004 0000 a890 0801 b940 0801               ........@...

08019530 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1029>:
 8019530:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8019540:	0000 0000 4060 0801 4860 0801 0000 0000     ....`@..`H......
 8019550:	0000 0000 99f0 0801 bfd0 0801 0000 0000     ................

08019560 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1030>:
 8019560:	0004 0000 b0d0 0801 0016 0000 1015 0800     ................
 8019570:	0873 0800 087f 0800 2f27 0800 8a89 0800     s.......'/......
 8019580:	8a91 0800 3c5d 0800 4a55 0800 25a5 0800     ....]<..UJ...%..
 8019590:	4a65 0800 2d85 0800 2935 0800 3233 0800     eJ...-..5)..32..
 80195a0:	2c85 0800 8b05 0800 32c1 0800 3339 0800     .,.......2..93..
 80195b0:	33a5 0800 3303 0800 3329 0800 4a77 0800     .3...3..)3..wJ..
 80195c0:	4a7b 0800                                   {J..

080195c4 <System.RuntimeType_1032>:
 80195c4:	0004 0000 a890 0801 b970 0801               ........p...

080195d0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1033>:
 80195d0:	0004 0000 b0d0 0801 0009 0000 1015 0800     ................
 80195e0:	0873 0800 087f 0800 0000 0000 0000 0000     s...............
	...

08019600 <System.RuntimeType_1035>:
 8019600:	0004 0000 a890 0801 b9a0 0801               ............

0801960c <System.RuntimeType_1036>:
 801960c:	0004 0000 a890 0801 b9d0 0801               ............

08019618 <System.RuntimeType_1037>:
 8019618:	0004 0000 a890 0801 ba00 0801 0000 0000     ................
	...

08019630 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1039>:
 8019630:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8019640:	0000 0000 4250 0801 4eb0 0801 0000 0000     ....PB...N......
 8019650:	0000 0000 96a0 0801 c000 0801 0000 0000     ................

08019660 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1040>:
 8019660:	0004 0000 b0d0 0801 0007 0000 1015 0800     ................
 8019670:	0873 0800 087f 0800 3b6d 0800 0000 0000     s.......m;......
 8019680:	34eb 0800 34fd 0800                         .4...4..

08019688 <System.RuntimeType_1042>:
 8019688:	0004 0000 a890 0801 ba30 0801 0000 0000     ........0.......
	...

080196a0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1044>:
 80196a0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 80196b0:	0000 0000 4f10 0801 4580 0801 0000 0000     .....O...E......
 80196c0:	0000 0000 7f50 0801 c030 0801 0000 0000     ....P...0.......

080196d0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1045>:
 80196d0:	0004 0000 b0d0 0801 000d 0000 1015 0800     ................
 80196e0:	0873 0800 087f 0800 2629 0800 2661 0800     s.......)&..a&..
 80196f0:	26f5 0800 563f 0800 2737 0800 273b 0800     .&..?V..7'..;'..
 8019700:	273f 0800 2743 0800 2747 0800 274f 0800     ?'..C'..G'..O'..

08019710 <System.RuntimeType_1047>:
 8019710:	0004 0000 a890 0801 ba60 0801               ........`...

0801971c <System.RuntimeType_1048>:
 801971c:	0004 0000 a890 0801 ba90 0801               ............

08019728 <System.RuntimeType_1049>:
 8019728:	0004 0000 a890 0801 bac0 0801 0000 0000     ................
	...

08019740 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1050>:
 8019740:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8019750:	0003 0000 43d0 0801 33f0 0801 0000 0000     .....C...3......
 8019760:	0000 0000 7500 0801 c060 0801 0000 0000     .....u..`.......

08019770 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1051>:
 8019770:	0004 0000 b0d0 0801 0009 0000 1015 0800     ................
 8019780:	0873 0800 087f 0800 4609 0800 3c1b 0800     s........F...<..
 8019790:	4953 0800 4659 0800 466d 0800 4771 0800     SI..YF..mF..qG..

080197a0 <System.RuntimeType_1053>:
 80197a0:	0004 0000 a890 0801 baf0 0801 0000 0000     ................

080197b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1054>:
 80197b0:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 80197c0:	0873 0800 087f 0800 0000 0000               s...........

080197cc <System.RuntimeType_1056>:
 80197cc:	0004 0000 a890 0801 bb20 0801 0000 0000     ........ .......
 80197dc:	0000 0000                                   ....

080197e0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1057>:
 80197e0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 80197f0:	0000 0000 4420 0801 4860 0801 0000 0000     .... D..`H......
 8019800:	0000 0000 9b70 0801 c090 0801 0000 0000     ....p...........

08019810 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1058>:
 8019810:	0004 0000 b0d0 0801 0009 0000 1015 0800     ................
 8019820:	0873 0800 087f 0800 8361 0800 4839 0800     s.......a...9H..
 8019830:	4851 0800 4869 0800 488d 0800 3cc5 0800     QH..iH...H...<..

08019840 <System.RuntimeType_1060>:
 8019840:	0004 0000 a890 0801 bb50 0801 0000 0000     ........P.......

08019850 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1061>:
 8019850:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8019860:	0873 0800 087f 0800 0000 0000               s...........

0801986c <System.RuntimeType_1063>:
 801986c:	0004 0000 a890 0801 bb80 0801               ............

08019878 <System.RuntimeType_1064>:
 8019878:	0004 0000 a890 0801 bbb0 0801               ............

08019884 <System.RuntimeType_1065>:
 8019884:	0004 0000 a890 0801 bbe0 0801               ............

08019890 <System.RuntimeType_1066>:
 8019890:	0004 0000 a890 0801 bc10 0801               ............

0801989c <System.RuntimeType_1067>:
 801989c:	0004 0000 a890 0801 bc40 0801 0000 0000     ........@.......
 80198ac:	0000 0000                                   ....

080198b0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1069>:
 80198b0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 80198c0:	0000 0000 46f0 0801 4f50 0801 0000 0000     .....F..PO......
 80198d0:	0000 0000 8cc0 0801 c0c0 0801 0000 0000     ................

080198e0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1070>:
 80198e0:	0004 0000 b0d0 0801 0005 0000 1015 0800     ................
 80198f0:	0873 0800 087f 0800 8c09 0800 8c0f 0800     s...............

08019900 <System.RuntimeType_1072>:
 8019900:	0004 0000 a890 0801 bc70 0801 0000 0000     ........p.......

08019910 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1073>:
 8019910:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8019920:	0873 0800 087f 0800 8c61 0800               s.......a...

0801992c <System.RuntimeType_1075>:
 801992c:	0004 0000 a890 0801 bca0 0801 0000 0000     ................
 801993c:	0000 0000                                   ....

08019940 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1076>:
 8019940:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8019950:	0000 0000 4770 0801 4860 0801 0000 0000     ....pG..`H......
 8019960:	0000 0000 9c30 0801 c0f0 0801 0000 0000     ....0...........

08019970 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1077>:
 8019970:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8019980:	0873 0800 087f 0800 0000 0000               s...........

0801998c <System.RuntimeType_1079>:
 801998c:	0004 0000 a890 0801 bcd0 0801               ............

08019998 <System.RuntimeType_1080>:
 8019998:	0004 0000 a890 0801 bd00 0801               ............

080199a4 <System.RuntimeType_1081>:
 80199a4:	0004 0000 a890 0801 bd30 0801               ........0...

080199b0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1082>:
 80199b0:	0004 0000 b0d0 0801 000a 0000 1015 0800     ................
 80199c0:	0873 0800 087f 0800 4a83 0800 0000 0000     s........J......
	...
 80199dc:	08c1 0800 054f 0800                         ....O...

080199e4 <System.RuntimeType_1084>:
 80199e4:	0004 0000 a890 0801 bd60 0801               ........`...

080199f0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1086>:
 80199f0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8019a00:	0000 0000 4060 0801 4fb0 0801 0000 0000     ....`@...O......
 8019a10:	0000 0000 9ca0 0801 c120 0801 0000 0000     ........ .......

08019a20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1087>:
 8019a20:	0004 0000 b0d0 0801 0016 0000 1015 0800     ................
 8019a30:	0873 0800 087f 0800 2f27 0800 8a89 0800     s.......'/......
 8019a40:	8a91 0800 8525 0800 4a55 0800 25a5 0800     ....%...UJ...%..
 8019a50:	4a65 0800 2d85 0800 2935 0800 3233 0800     eJ...-..5)..32..
 8019a60:	2c85 0800 8b05 0800 32c1 0800 3339 0800     .,.......2..93..
 8019a70:	0000 0000 3303 0800 3329 0800 4a77 0800     .....3..)3..wJ..
 8019a80:	4a7b 0800                                   {J..

08019a84 <System.RuntimeType_1089>:
 8019a84:	0004 0000 a890 0801 bd90 0801               ............

08019a90 <System.RuntimeType_1090>:
 8019a90:	0004 0000 a890 0801 bdc0 0801 0000 0000     ................

08019aa0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1091>:
 8019aa0:	0004 0000 b0d0 0801 0007 0000 1015 0800     ................
 8019ab0:	0873 0800 087f 0800 3b6d 0800 0000 0000     s.......m;......
 8019ac0:	34eb 0800 34fd 0800                         .4...4..

08019ac8 <System.RuntimeType_1093>:
 8019ac8:	0004 0000 a890 0801 bdf0 0801 0000 0000     ................
	...

08019ae0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1094>:
 8019ae0:	0004 0000 b0d0 0801 0007 0000 1015 0800     ................
 8019af0:	0873 0800 087f 0800 5369 0800 0000 0000     s.......iS......
 8019b00:	34eb 0800 34fd 0800                         .4...4..

08019b08 <System.RuntimeType_1096>:
 8019b08:	0004 0000 a890 0801 be20 0801 0000 0000     ........ .......
	...

08019b20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1097>:
 8019b20:	0004 0000 b0d0 0801 0009 0000 1015 0800     ................
 8019b30:	0873 0800 087f 0800 4611 0800 4951 0800     s........F..QI..
 8019b40:	4953 0800 4659 0800 0000 0000 0000 0000     SI..YF..........

08019b50 <System.RuntimeType_1099>:
 8019b50:	0004 0000 a890 0801 be50 0801               ........P...

08019b5c <System.RuntimeType_1100>:
 8019b5c:	0004 0000 a890 0801 be80 0801 0000 0000     ................
 8019b6c:	0000 0000                                   ....

08019b70 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1101>:
 8019b70:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8019b80:	0003 0000 4420 0801 33f0 0801 0000 0000     .... D...3......
 8019b90:	0000 0000 7500 0801 c150 0801 0000 0000     .....u..P.......

08019ba0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1102>:
 8019ba0:	0004 0000 b0d0 0801 0009 0000 1015 0800     ................
 8019bb0:	0873 0800 087f 0800 3ca1 0800 3cbd 0800     s........<...<..
 8019bc0:	3cbf 0800 3cc1 0800 3cc3 0800 3cc5 0800     .<...<...<...<..

08019bd0 <System.RuntimeType_1104>:
 8019bd0:	0004 0000 a890 0801 beb0 0801               ............

08019bdc <System.RuntimeType_1105>:
 8019bdc:	0004 0000 a890 0801 bee0 0801 0000 0000     ................
 8019bec:	0000 0000                                   ....

08019bf0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1106>:
 8019bf0:	0004 0000 b0d0 0801 0005 0000 1015 0800     ................
 8019c00:	0873 0800 087f 0800 8c09 0800 8c0f 0800     s...............

08019c10 <System.RuntimeType_1108>:
 8019c10:	0004 0000 a890 0801 bf10 0801               ............

08019c1c <System.RuntimeType_1109>:
 8019c1c:	0004 0000 a890 0801 bf40 0801 0000 0000     ........@.......
 8019c2c:	0000 0000                                   ....

08019c30 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1110>:
 8019c30:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8019c40:	0000 0000 4770 0801 47b0 0801 0000 0000     ....pG...G......
 8019c50:	0000 0000 7500 0801 c180 0801 0000 0000     .....u..........

08019c60 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1111>:
 8019c60:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8019c70:	0873 0800 087f 0800 0000 0000               s...........

08019c7c <System.RuntimeType_1113>:
 8019c7c:	0004 0000 a890 0801 bf70 0801               ........p...

08019c88 <System.RuntimeType_1114>:
 8019c88:	0004 0000 a890 0801 bfa0 0801 0000 0000     ................
	...

08019ca0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1116>:
 8019ca0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8019cb0:	0000 0000 5020 0801 33f0 0801 0000 0000     .... P...3......
 8019cc0:	0000 0000 9df0 0801 c1b0 0801 0000 0000     ................

08019cd0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1117>:
 8019cd0:	0004 0000 b0d0 0801 0016 0000 1015 0800     ................
 8019ce0:	0873 0800 087f 0800 2f27 0800 8a89 0800     s.......'/......
 8019cf0:	8a91 0800 8525 0800 4a55 0800 25a5 0800     ....%...UJ...%..
 8019d00:	4a65 0800 2d85 0800 2935 0800 3233 0800     eJ...-..5)..32..
 8019d10:	2c85 0800 8b05 0800 32c1 0800 3339 0800     .,.......2..93..
 8019d20:	0000 0000 3303 0800 3329 0800 4a77 0800     .....3..)3..wJ..
 8019d30:	4a7b 0800                                   {J..

08019d34 <System.RuntimeType_1119>:
 8019d34:	0004 0000 a890 0801 bfd0 0801               ............

08019d40 <System.RuntimeType_1120>:
 8019d40:	0004 0000 a890 0801 c000 0801               ............

08019d4c <System.RuntimeType_1121>:
 8019d4c:	0004 0000 a890 0801 c030 0801               ........0...

08019d58 <System.RuntimeType_1122>:
 8019d58:	0004 0000 a890 0801 c060 0801 0000 0000     ........`.......
	...

08019d70 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1123>:
 8019d70:	0004 0000 b0d0 0801 0009 0000 1015 0800     ................
 8019d80:	0873 0800 087f 0800 3ca1 0800 3cbd 0800     s........<...<..
 8019d90:	3cbf 0800 3cc1 0800 3cc3 0800 3cc5 0800     .<...<...<...<..

08019da0 <System.RuntimeType_1125>:
 8019da0:	0004 0000 a890 0801 c090 0801               ............

08019dac <System.RuntimeType_1126>:
 8019dac:	0004 0000 a890 0801 c0c0 0801 0000 0000     ................
 8019dbc:	0000 0000                                   ....

08019dc0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1127>:
 8019dc0:	0004 0000 b0d0 0801 0004 0000 1015 0800     ................
 8019dd0:	0873 0800 087f 0800 0000 0000               s...........

08019ddc <System.RuntimeType_1129>:
 8019ddc:	0004 0000 a890 0801 c0f0 0801 0000 0000     ................
 8019dec:	0000 0000                                   ....

08019df0 <Microsoft.Zelig.Runtime.TypeSystem.AbstractReferenceTypeRepresentation_1130>:
 8019df0:	0004 0000 b400 0801 ab12 abab 0081 0010     ................
 8019e00:	0003 0000 4060 0801 33f0 0801 0000 0000     ....`@...3......
 8019e10:	0000 0000 7500 0801 c1e0 0801 0000 0000     .....u..........

08019e20 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1131>:
 8019e20:	0004 0000 b0d0 0801 0016 0000 1015 0800     ................
 8019e30:	0873 0800 087f 0800 2f27 0800 2f31 0800     s.......'/..1/..
 8019e40:	4a4d 0800 3143 0800 4a55 0800 25a5 0800     MJ..C1..UJ...%..
 8019e50:	4a65 0800 2d85 0800 2935 0800 3233 0800     eJ...-..5)..32..
 8019e60:	2c85 0800 32af 0800 32c1 0800 3339 0800     .,...2...2..93..
	...
 8019e7c:	4a77 0800 4a7b 0800                         wJ..{J..

08019e84 <System.RuntimeType_1133>:
 8019e84:	0004 0000 a890 0801 c120 0801               ........ ...

08019e90 <System.RuntimeType_1134>:
 8019e90:	0004 0000 a890 0801 c150 0801               ........P...

08019e9c <System.RuntimeType_1135>:
 8019e9c:	0004 0000 a890 0801 c180 0801 0000 0000     ................
 8019eac:	0000 0000                                   ....

08019eb0 <Microsoft.Zelig.Runtime.TypeSystem.CodePointer[]_1136>:
 8019eb0:	0004 0000 b0d0 0801 0016 0000 1015 0800     ................
 8019ec0:	0873 0800 087f 0800 2f27 0800 2f31 0800     s.......'/..1/..
 8019ed0:	2fa1 0800 3143 0800 3145 0800 25a5 0800     ./..C1..E1...%..
 8019ee0:	2881 0800 2d85 0800 2935 0800 3233 0800     .(...-..5)..32..
 8019ef0:	2c85 0800 32af 0800 32c1 0800 3339 0800     .,...2...2..93..
	...

08019f14 <System.RuntimeType_1138>:
 8019f14:	0004 0000 a890 0801 c1b0 0801               ............

08019f20 <System.RuntimeType_1139>:
 8019f20:	0004 0000 a890 0801 c1e0 0801 0000 0000     ................

08019f30 <Microsoft.Zelig.Runtime.TypeSystem.VTable_14>:
 8019f30:	0004 0000 b0a0 0801 0008 0000 0000 0000     ................
 8019f40:	5f20 0801 5f4c 0801 ab44 abab 5090 0801      _..L_..D....P..
 8019f50:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

08019f60 <Microsoft.Zelig.Runtime.TypeSystem.VTable_16>:
 8019f60:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 8019f70:	5fa0 0801 5fcc 0801 ab44 abab 50c0 0801     ._..._..D....P..
 8019f80:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

08019f90 <Microsoft.Zelig.Runtime.TypeSystem.VTable_18>:
 8019f90:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 8019fa0:	5fe0 0801 600c 0801 ab44 abab 50e0 0801     ._...`..D....P..
 8019fb0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

08019fc0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_21>:
 8019fc0:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 8019fd0:	6020 0801 604c 0801 ab44 abab 5100 0801      `..L`..D....Q..
 8019fe0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

08019ff0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_23>:
 8019ff0:	0004 0000 b0a0 0801 0028 0000 0000 0000     ........(.......
 801a000:	6060 0801 608c 0801 ab44 abab 5120 0801     ``...`..D... Q..
 801a010:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a020 <Microsoft.Zelig.Runtime.TypeSystem.VTable_25>:
 801a020:	0004 0000 b0a0 0801 0030 0000 0000 0000     ........0.......
 801a030:	60a0 0801 60cc 0801 ab44 abab 5160 0801     .`...`..D...`Q..
 801a040:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a050 <Microsoft.Zelig.Runtime.TypeSystem.VTable_27>:
 801a050:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801a060:	60e0 0801 610c 0801 ab44 abab 51a0 0801     .`...a..D....Q..
 801a070:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a080 <Microsoft.Zelig.Runtime.TypeSystem.VTable_30>:
 801a080:	0004 0000 b0a0 0801 0008 0000 0000 0000     ................
 801a090:	6120 0801 614c 0801 ab44 abab 51c0 0801      a..La..D....Q..
 801a0a0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a0b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_32>:
 801a0b0:	0004 0000 b0a0 0801 0004 0000 0004 0000     ................
 801a0c0:	6160 0801 6190 0801 abc6 abab 51e0 0801     `a...a.......Q..
 801a0d0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a0e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_34>:
 801a0e0:	0004 0000 b0a0 0801 0001 0000 0000 0000     ................
 801a0f0:	61a0 0801 61d0 0801 ab00 abab 5200 0801     .a...a.......R..
 801a100:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a110 <Microsoft.Zelig.Runtime.TypeSystem.VTable_36>:
 801a110:	0004 0000 b0a0 0801 0002 0000 0000 0000     ................
 801a120:	61e0 0801 6210 0801 ab00 abab 5220 0801     .a...b...... R..
 801a130:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a140 <Microsoft.Zelig.Runtime.TypeSystem.VTable_38>:
 801a140:	0004 0000 b0a0 0801 0008 0000 0000 0000     ................
 801a150:	6220 0801 624c 0801 ab44 abab 5240 0801      b..Lb..D...@R..
 801a160:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a170 <Microsoft.Zelig.Runtime.TypeSystem.VTable_40>:
 801a170:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801a180:	6260 0801 6290 0801 ab00 abab 5260 0801     `b...b......`R..
 801a190:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a1a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_42>:
 801a1a0:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801a1b0:	62a0 0801 62cc 0801 ab44 abab 5280 0801     .b...b..D....R..
 801a1c0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a1d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_44>:
 801a1d0:	0004 0000 b0a0 0801 0008 0000 0002 0000     ................
 801a1e0:	62e0 0801 52d8 0801 ab44 abab 52a0 0801     .b...R..D....R..
 801a1f0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a200 <Microsoft.Zelig.Runtime.TypeSystem.VTable_46>:
 801a200:	0004 0000 b0a0 0801 0004 0000 0002 0000     ................
 801a210:	6310 0801 6340 0801 abc6 abab 52c0 0801     .c..@c.......R..
 801a220:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a230 <Microsoft.Zelig.Runtime.TypeSystem.VTable_49>:
 801a230:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801a240:	6350 0801 637c 0801 ab44 abab 52f0 0801     Pc..|c..D....R..
 801a250:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a260 <Microsoft.Zelig.Runtime.TypeSystem.VTable_53>:
 801a260:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801a270:	6390 0801 63c0 0801 ab00 abab 5350 0801     .c...c......PS..
 801a280:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a290 <Microsoft.Zelig.Runtime.TypeSystem.VTable_55>:
 801a290:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801a2a0:	63d0 0801 6400 0801 ab00 abab 5370 0801     .c...d......pS..
 801a2b0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a2c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_57>:
 801a2c0:	0004 0000 b0a0 0801 0004 0000 0004 0000     ................
 801a2d0:	6410 0801 6440 0801 abc6 abab 5390 0801     .d..@d.......S..
 801a2e0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a2f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_59>:
 801a2f0:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801a300:	6450 0801 647c 0801 ab44 abab 53b0 0801     Pd..|d..D....S..
 801a310:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a320 <Microsoft.Zelig.Runtime.TypeSystem.VTable_62>:
 801a320:	0004 0000 b0a0 0801 0014 0000 0000 0000     ................
 801a330:	6490 0801 64bc 0801 ab44 abab 53d0 0801     .d...d..D....S..
 801a340:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a350 <Microsoft.Zelig.Runtime.TypeSystem.VTable_64>:
 801a350:	0004 0000 b0a0 0801 000d 0000 0000 0000     ................
 801a360:	64d0 0801 64fc 0801 ab44 abab 53f0 0801     .d...d..D....S..
 801a370:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a380 <Microsoft.Zelig.Runtime.TypeSystem.VTable_66>:
 801a380:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801a390:	6510 0801 653c 0801 ab44 abab 5430 0801     .e..<e..D...0T..
 801a3a0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a3b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_68>:
 801a3b0:	0004 0000 b0a0 0801 0008 0000 0000 0000     ................
 801a3c0:	6550 0801 657c 0801 ab44 abab 5450 0801     Pe..|e..D...PT..
 801a3d0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a3e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_70>:
 801a3e0:	0004 0000 b0a0 0801 0008 0000 0000 0000     ................
 801a3f0:	6590 0801 65bc 0801 ab44 abab 5470 0801     .e...e..D...pT..
 801a400:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a410 <Microsoft.Zelig.Runtime.TypeSystem.VTable_72>:
 801a410:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801a420:	65d0 0801 65fc 0801 ab44 abab 5490 0801     .e...e..D....T..
 801a430:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a440 <Microsoft.Zelig.Runtime.TypeSystem.VTable_75>:
 801a440:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801a450:	6610 0801 663c 0801 ab44 abab 54b0 0801     .f..<f..D....T..
 801a460:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a470 <Microsoft.Zelig.Runtime.TypeSystem.VTable_80>:
 801a470:	0004 0000 b0a0 0801 0044 0000 0000 0000     ........D.......
 801a480:	6650 0801 667c 0801 ab44 abab 54d0 0801     Pf..|f..D....T..
 801a490:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a4a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_82>:
 801a4a0:	0004 0000 b0a0 0801 0008 0000 0000 0000     ................
 801a4b0:	6690 0801 66bc 0801 ab44 abab 54f0 0801     .f...f..D....T..
 801a4c0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a4d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_85>:
 801a4d0:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801a4e0:	66d0 0801 66fc 0801 ab44 abab 5510 0801     .f...f..D....U..
 801a4f0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a500 <Microsoft.Zelig.Runtime.TypeSystem.VTable_87>:
 801a500:	0004 0000 b0a0 0801 0008 0000 0000 0000     ................
 801a510:	6710 0801 673c 0801 ab44 abab 5530 0801     .g..<g..D...0U..
 801a520:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a530 <Microsoft.Zelig.Runtime.TypeSystem.VTable_102>:
 801a530:	0004 0000 b0a0 0801 0028 0000 0000 0000     ........(.......
 801a540:	6780 0801 67ac 0801 ab44 abab 5560 0801     .g...g..D...`U..
 801a550:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a560 <Microsoft.Zelig.Runtime.TypeSystem.VTable_112>:
 801a560:	0004 0000 b0a0 0801 0004 0000 0004 0000     ................
 801a570:	68d0 0801 6900 0801 abc6 abab 55c0 0801     .h...i.......U..
 801a580:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a590 <Microsoft.Zelig.Runtime.TypeSystem.VTable_114>:
 801a590:	0004 0000 b0a0 0801 001c 0000 0000 0000     ................
 801a5a0:	6910 0801 693c 0801 ab44 abab 55e0 0801     .i..<i..D....U..
 801a5b0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a5c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_117>:
 801a5c0:	0004 0000 b0a0 0801 0004 0000 0001 0000     ................
 801a5d0:	6950 0801 55f8 0801 abc6 abab 5610 0801     Pi...U.......V..
 801a5e0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a5f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_122>:
 801a5f0:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801a600:	69d0 0801 69fc 0801 ab44 abab 5630 0801     .i...i..D...0V..
 801a610:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a620 <Microsoft.Zelig.Runtime.TypeSystem.VTable_124>:
 801a620:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801a630:	6a10 0801 6a3c 0801 ab44 abab 5650 0801     .j..<j..D...PV..
 801a640:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a650 <Microsoft.Zelig.Runtime.TypeSystem.VTable_128>:
 801a650:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801a660:	6a50 0801 6a7c 0801 ab44 abab 5670 0801     Pj..|j..D...pV..
 801a670:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a680 <Microsoft.Zelig.Runtime.TypeSystem.VTable_130>:
 801a680:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801a690:	6a90 0801 6abc 0801 ab44 abab 5690 0801     .j...j..D....V..
 801a6a0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a6b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_132>:
 801a6b0:	0004 0000 b0a0 0801 001a 0000 0000 0000     ................
 801a6c0:	6ad0 0801 6afc 0801 ab44 abab 56b0 0801     .j...j..D....V..
 801a6d0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a6e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_134>:
 801a6e0:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801a6f0:	6b10 0801 6b3c 0801 ab44 abab 56d0 0801     .k..<k..D....V..
 801a700:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a710 <Microsoft.Zelig.Runtime.TypeSystem.VTable_143>:
 801a710:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801a720:	6b50 0801 6b7c 0801 ab44 abab 56f0 0801     Pk..|k..D....V..
 801a730:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a740 <Microsoft.Zelig.Runtime.TypeSystem.VTable_145>:
 801a740:	0004 0000 b0a0 0801 0008 0000 0000 0000     ................
 801a750:	6b90 0801 6bbc 0801 ab44 abab 5730 0801     .k...k..D...0W..
 801a760:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a770 <Microsoft.Zelig.Runtime.TypeSystem.VTable_147>:
 801a770:	0004 0000 b0a0 0801 0010 0000 0000 0000     ................
 801a780:	6bd0 0801 6bfc 0801 ab44 abab 5750 0801     .k...k..D...PW..
 801a790:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a7a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_152>:
 801a7a0:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801a7b0:	6c10 0801 6c40 0801 ab21 abab 5770 0801     .l..@l..!...pW..
 801a7c0:	57a0 0801 0000 0000 0000 0000 0000 0000     .W..............

0801a7d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_154>:
 801a7d0:	0004 0000 b0a0 0801 0010 0000 0000 0000     ................
 801a7e0:	6c50 0801 6c7c 0801 ab44 abab 57c0 0801     Pl..|l..D....W..
 801a7f0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a800 <Microsoft.Zelig.Runtime.TypeSystem.VTable_156>:
 801a800:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801a810:	6c90 0801 6cbc 0801 ab44 abab 57e0 0801     .l...l..D....W..
 801a820:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a830 <Microsoft.Zelig.Runtime.TypeSystem.VTable_158>:
 801a830:	0004 0000 b0a0 0801 0004 0000 0004 0000     ................
 801a840:	6cd0 0801 6d00 0801 abc6 abab 5800 0801     .l...m.......X..
 801a850:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a860 <Microsoft.Zelig.Runtime.TypeSystem.VTable_160>:
 801a860:	0004 0000 b0a0 0801 0004 0000 0004 0000     ................
 801a870:	6d10 0801 6d40 0801 abc6 abab 5820 0801     .m..@m...... X..
 801a880:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a890 <Microsoft.Zelig.Runtime.TypeSystem.VTable_174>:
 801a890:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801a8a0:	6d50 0801 6d7c 0801 ab44 abab 5840 0801     Pm..|m..D...@X..
 801a8b0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a8c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_176>:
 801a8c0:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801a8d0:	6d90 0801 6dbc 0801 ab44 abab 5870 0801     .m...m..D...pX..
 801a8e0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a8f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_180>:
 801a8f0:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801a900:	6dd0 0801 6dfc 0801 ab43 abab 5890 0801     .m...m..C....X..
 801a910:	58b0 0801 0000 0000 0000 0000 0000 0000     .X..............

0801a920 <Microsoft.Zelig.Runtime.TypeSystem.VTable_189>:
 801a920:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801a930:	6e10 0801 6e3c 0801 ab43 abab 58c4 0801     .n..<n..C....X..
 801a940:	58f0 0801 0000 0000 0000 0000 0000 0000     .X..............

0801a950 <Microsoft.Zelig.Runtime.TypeSystem.VTable_191>:
 801a950:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801a960:	6e50 0801 6e7c 0801 ab44 abab 5910 0801     Pn..|n..D....Y..
 801a970:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a980 <Microsoft.Zelig.Runtime.TypeSystem.VTable_193>:
 801a980:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801a990:	6e90 0801 6ebc 0801 ab44 abab 5940 0801     .n...n..D...@Y..
 801a9a0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801a9b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_197>:
 801a9b0:	0004 0000 b0a0 0801 0015 0000 0000 0000     ................
 801a9c0:	6ed0 0801 6efc 0801 ab44 abab 5960 0801     .n...n..D...`Y..
 801a9d0:	5990 0801 0000 0000 0000 0000 0000 0000     .Y..............

0801a9e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_202>:
 801a9e0:	0004 0000 b0a0 0801 0076 0000 0000 0000     ........v.......
 801a9f0:	6f10 0801 59a4 0801 ab44 abab 59b0 0801     .o...Y..D....Y..
 801aa00:	59e0 0801 0000 0000 0000 0000 0000 0000     .Y..............

0801aa10 <Microsoft.Zelig.Runtime.TypeSystem.VTable_226>:
 801aa10:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801aa20:	6f40 0801 6f6c 0801 ab44 abab 5a00 0801     @o..lo..D....Z..
 801aa30:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801aa40 <Microsoft.Zelig.Runtime.TypeSystem.VTable_228>:
 801aa40:	0004 0000 b0a0 0801 0004 0000 0004 0000     ................
 801aa50:	6f80 0801 6fb0 0801 abc6 abab 5a20 0801     .o...o...... Z..
 801aa60:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801aa70 <Microsoft.Zelig.Runtime.TypeSystem.VTable_230>:
 801aa70:	0004 0000 b0a0 0801 0008 0000 0000 0000     ................
 801aa80:	6fc0 0801 6fec 0801 ab22 abab 5a40 0801     .o...o.."...@Z..
 801aa90:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801aaa0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_249>:
 801aaa0:	0004 0000 b0a0 0801 0028 0000 0000 0000     ........(.......
 801aab0:	7000 0801 702c 0801 ab44 abab 5a60 0801     .p..,p..D...`Z..
 801aac0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801aad0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_267>:
 801aad0:	0004 0000 b0a0 0801 0028 0000 0000 0000     ........(.......
 801aae0:	7040 0801 706c 0801 ab44 abab 5a90 0801     @p..lp..D....Z..
 801aaf0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ab00 <Microsoft.Zelig.Runtime.TypeSystem.VTable_272>:
 801ab00:	0004 0000 b0a0 0801 0024 0000 0000 0000     ........$.......
 801ab10:	7080 0801 70ac 0801 ab44 abab 5ac0 0801     .p...p..D....Z..
 801ab20:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ab30 <Microsoft.Zelig.Runtime.TypeSystem.VTable_293>:
 801ab30:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801ab40:	70c0 0801 70f0 0801 ab00 abab 5af0 0801     .p...p.......Z..
 801ab50:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ab60 <Microsoft.Zelig.Runtime.TypeSystem.VTable_295>:
 801ab60:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801ab70:	7100 0801 712c 0801 ab44 abab 5b00 0801     .q..,q..D....[..
 801ab80:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ab90 <Microsoft.Zelig.Runtime.TypeSystem.VTable_299>:
 801ab90:	0004 0000 b0a0 0801 0008 0000 0000 0000     ................
 801aba0:	7160 0801 718c 0801 ab44 abab 5b20 0801     `q...q..D... [..
 801abb0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801abc0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_301>:
 801abc0:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801abd0:	71a0 0801 71cc 0801 ab44 abab 5b40 0801     .q...q..D...@[..
 801abe0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801abf0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_304>:
 801abf0:	0004 0000 b0a0 0801 0014 0000 0000 0000     ................
 801ac00:	71e0 0801 720c 0801 ab44 abab 5b60 0801     .q...r..D...`[..
 801ac10:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ac20 <Microsoft.Zelig.Runtime.TypeSystem.VTable_306>:
 801ac20:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801ac30:	7220 0801 724c 0801 ab44 abab 5b80 0801      r..Lr..D....[..
 801ac40:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ac50 <Microsoft.Zelig.Runtime.TypeSystem.VTable_311>:
 801ac50:	0004 0000 b0a0 0801 0008 0000 0000 0000     ................
 801ac60:	72c0 0801 72ec 0801 ab44 abab 5ba0 0801     .r...r..D....[..
 801ac70:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ac80 <Microsoft.Zelig.Runtime.TypeSystem.VTable_313>:
 801ac80:	0004 0000 b0a0 0801 001c 0000 0000 0000     ................
 801ac90:	7300 0801 732c 0801 ab44 abab 5bc0 0801     .s..,s..D....[..
 801aca0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801acb0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_316>:
 801acb0:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801acc0:	7340 0801 7370 0801 ab00 abab 5bd8 0801     @s..ps.......[..
 801acd0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ace0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_318>:
 801ace0:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801acf0:	7380 0801 73ac 0801 ab44 abab 5bf0 0801     .s...s..D....[..
 801ad00:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ad10 <Microsoft.Zelig.Runtime.TypeSystem.VTable_320>:
 801ad10:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801ad20:	73c0 0801 73ec 0801 ab44 abab 5c10 0801     .s...s..D....\..
 801ad30:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ad40 <Microsoft.Zelig.Runtime.TypeSystem.VTable_323>:
 801ad40:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801ad50:	7400 0801 742c 0801 ab44 abab 5c30 0801     .t..,t..D...0\..
 801ad60:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ad70 <Microsoft.Zelig.Runtime.TypeSystem.VTable_325>:
 801ad70:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801ad80:	7440 0801 746c 0801 ab44 abab 5c50 0801     @t..lt..D...P\..
 801ad90:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ada0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_327>:
 801ada0:	0004 0000 b0a0 0801 001c 0000 0000 0000     ................
 801adb0:	7480 0801 74ac 0801 ab44 abab 5c70 0801     .t...t..D...p\..
 801adc0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801add0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_329>:
 801add0:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801ade0:	74c0 0801 74ec 0801 ab44 abab 5c90 0801     .t...t..D....\..
 801adf0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ae00 <Microsoft.Zelig.Runtime.TypeSystem.VTable_331>:
 801ae00:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801ae10:	7500 0801 752c 0801 ab44 abab 5cc0 0801     .u..,u..D....\..
 801ae20:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ae30 <Microsoft.Zelig.Runtime.TypeSystem.VTable_333>:
 801ae30:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801ae40:	7540 0801 756c 0801 ab44 abab 5ce0 0801     @u..lu..D....\..
 801ae50:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ae60 <Microsoft.Zelig.Runtime.TypeSystem.VTable_335>:
 801ae60:	0004 0000 b0a0 0801 0010 0000 0000 0000     ................
 801ae70:	7580 0801 75ac 0801 ab44 abab 5d00 0801     .u...u..D....]..
 801ae80:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ae90 <Microsoft.Zelig.Runtime.TypeSystem.VTable_337>:
 801ae90:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801aea0:	75c0 0801 75ec 0801 ab44 abab 5d20 0801     .u...u..D... ]..
 801aeb0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801aec0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_341>:
 801aec0:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801aed0:	7600 0801 762c 0801 ab44 abab 5d40 0801     .v..,v..D...@]..
 801aee0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801aef0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_343>:
 801aef0:	0004 0000 b0a0 0801 0004 0000 000c 0000     ................
 801af00:	7640 0801 7670 0801 abc6 abab 5d60 0801     @v..pv......`]..
 801af10:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801af20 <Microsoft.Zelig.Runtime.TypeSystem.VTable_345>:
 801af20:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801af30:	7680 0801 76ac 0801 ab44 abab 5d80 0801     .v...v..D....]..
 801af40:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801af50 <Microsoft.Zelig.Runtime.TypeSystem.VTable_347>:
 801af50:	0004 0000 b0a0 0801 0004 0000 0004 0000     ................
 801af60:	76c0 0801 76f0 0801 abc6 abab 5da0 0801     .v...v.......]..
 801af70:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801af80 <Microsoft.Zelig.Runtime.TypeSystem.VTable_349>:
 801af80:	0004 0000 b0a0 0801 0004 0000 0004 0000     ................
 801af90:	7700 0801 7730 0801 abc6 abab 5dc0 0801     .w..0w.......]..
 801afa0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801afb0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_351>:
 801afb0:	0004 0000 b0a0 0801 010c 0000 0000 0000     ................
 801afc0:	7740 0801 776c 0801 ab44 abab 5de0 0801     @w..lw..D....]..
 801afd0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801afe0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_353>:
 801afe0:	0004 0000 b0a0 0801 0004 0000 0004 0000     ................
 801aff0:	7780 0801 77b0 0801 abc6 abab 5e00 0801     .w...w.......^..
 801b000:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b010 <Microsoft.Zelig.Runtime.TypeSystem.VTable_355>:
 801b010:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801b020:	77c0 0801 77ec 0801 ab44 abab 5e20 0801     .w...w..D... ^..
 801b030:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b040 <Microsoft.Zelig.Runtime.TypeSystem.VTable_357>:
 801b040:	0004 0000 b0a0 0801 003c 0000 0000 0000     ........<.......
 801b050:	7800 0801 782c 0801 ab44 abab 5e60 0801     .x..,x..D...`^..
 801b060:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b070 <Microsoft.Zelig.Runtime.TypeSystem.VTable_359>:
 801b070:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801b080:	7840 0801 786c 0801 ab44 abab 5ed0 0801     @x..lx..D....^..
 801b090:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b0a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_361>:
 801b0a0:	0004 0000 b0a0 0801 001c 0000 0000 0000     ................
 801b0b0:	7880 0801 78ac 0801 ab44 abab 5f00 0801     .x...x..D...._..
 801b0c0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b0d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_367>:
 801b0d0:	0004 0000 b0a0 0801 0004 0000 0004 0000     ................
 801b0e0:	78f0 0801 7920 0801 abc6 abab 5f60 0801     .x.. y......`_..
 801b0f0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b100 <Microsoft.Zelig.Runtime.TypeSystem.VTable_369>:
 801b100:	0004 0000 b0a0 0801 0004 0000 0008 0000     ................
 801b110:	7930 0801 7960 0801 abc6 abab 5f80 0801     0y..`y......._..
 801b120:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b130 <Microsoft.Zelig.Runtime.TypeSystem.VTable_460>:
 801b130:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801b140:	7c60 0801 7c8c 0801 ab44 abab 6750 0801     `|...|..D...Pg..
 801b150:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b160 <Microsoft.Zelig.Runtime.TypeSystem.VTable_465>:
 801b160:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801b170:	7b20 0801 7ccc 0801 ab44 abab 67c0 0801      {...|..D....g..
 801b180:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b190 <Microsoft.Zelig.Runtime.TypeSystem.VTable_467>:
 801b190:	0004 0000 b0a0 0801 0014 0000 0000 0000     ................
 801b1a0:	7ce0 0801 7d0c 0801 ab44 abab 67f0 0801     .|...}..D....g..
 801b1b0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b1c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_469>:
 801b1c0:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801b1d0:	7d20 0801 7d4c 0801 ab44 abab 6820 0801      }..L}..D... h..
 801b1e0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b1f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_471>:
 801b1f0:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801b200:	7d60 0801 7d8c 0801 ab44 abab 6840 0801     `}...}..D...@h..
 801b210:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b220 <Microsoft.Zelig.Runtime.TypeSystem.VTable_473>:
 801b220:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801b230:	7da0 0801 7dcc 0801 ab44 abab 6870 0801     .}...}..D...ph..
 801b240:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b250 <Microsoft.Zelig.Runtime.TypeSystem.VTable_475>:
 801b250:	0004 0000 b0a0 0801 0004 0000 0004 0000     ................
 801b260:	7de0 0801 7e10 0801 abc6 abab 6890 0801     .}...~.......h..
 801b270:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b280 <Microsoft.Zelig.Runtime.TypeSystem.VTable_477>:
 801b280:	0004 0000 b0a0 0801 0010 0000 0000 0000     ................
 801b290:	7e20 0801 7e4c 0801 ab44 abab 68b0 0801      ~..L~..D....h..
 801b2a0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b2b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_485>:
 801b2b0:	0004 0000 b0a0 0801 0014 0000 0000 0000     ................
 801b2c0:	7e60 0801 7e8c 0801 ab44 abab 6980 0801     `~...~..D....i..
 801b2d0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b2e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_487>:
 801b2e0:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801b2f0:	7ea0 0801 7ecc 0801 ab44 abab 69a0 0801     .~...~..D....i..
 801b300:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b310 <Microsoft.Zelig.Runtime.TypeSystem.VTable_598>:
 801b310:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801b320:	8130 0801 815c 0801 ab44 abab 7140 0801     0...\...D...@q..
 801b330:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b340 <Microsoft.Zelig.Runtime.TypeSystem.VTable_611>:
 801b340:	0004 0000 b0a0 0801 0009 0000 0000 0000     ................
 801b350:	81b0 0801 81dc 0801 ab44 abab 7260 0801     ........D...`r..
 801b360:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b370 <Microsoft.Zelig.Runtime.TypeSystem.VTable_613>:
 801b370:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801b380:	81f0 0801 821c 0801 ab44 abab 7280 0801     ........D....r..
 801b390:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b3a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_615>:
 801b3a0:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801b3b0:	8230 0801 825c 0801 ab44 abab 72a0 0801     0...\...D....r..
 801b3c0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b3d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_686>:
 801b3d0:	0004 0000 b0a0 0801 0024 0000 0000 0000     ........$.......
 801b3e0:	8400 0801 842c 0801 ab44 abab 78c0 0801     ....,...D....x..
 801b3f0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b400 <Microsoft.Zelig.Runtime.TypeSystem.VTable_702>:
 801b400:	0004 0000 b0a0 0801 0024 0000 0000 0000     ........$.......
 801b410:	85a0 0801 85cc 0801 ab44 abab 7a60 0801     ........D...`z..
 801b420:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b430 <Microsoft.Zelig.Runtime.TypeSystem.VTable_762>:
 801b430:	0004 0000 b0a0 0801 0028 0000 0000 0000     ........(.......
 801b440:	8980 0801 89ac 0801 ab44 abab 7f20 0801     ........D... ...
 801b450:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b460 <Microsoft.Zelig.Runtime.TypeSystem.VTable_775>:
 801b460:	0004 0000 b0a0 0801 0028 0000 0000 0000     ........(.......
 801b470:	8a80 0801 8aac 0801 ab44 abab 7fe0 0801     ........D.......
 801b480:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b490 <Microsoft.Zelig.Runtime.TypeSystem.VTable_781>:
 801b490:	0004 0000 b0a0 0801 0024 0000 0000 0000     ........$.......
 801b4a0:	8b40 0801 8b6c 0801 ab44 abab 8070 0801     @...l...D...p...
 801b4b0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b4c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_785>:
 801b4c0:	0004 0000 b0a0 0801 0024 0000 0000 0000     ........$.......
 801b4d0:	8b80 0801 8bac 0801 ab44 abab 80a0 0801     ........D.......
 801b4e0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b4f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_834>:
 801b4f0:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801b500:	7970 0801 8ed8 0801 ab44 abab 84a0 0801     py......D.......
 801b510:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b520 <Microsoft.Zelig.Runtime.TypeSystem.VTable_836>:
 801b520:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801b530:	79a0 0801 8ee4 0801 ab44 abab 84c0 0801     .y......D.......
 801b540:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b550 <Microsoft.Zelig.Runtime.TypeSystem.VTable_838>:
 801b550:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801b560:	79d0 0801 8ef0 0801 ab44 abab 84e0 0801     .y......D.......
 801b570:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b580 <Microsoft.Zelig.Runtime.TypeSystem.VTable_840>:
 801b580:	0004 0000 b0a0 0801 0024 0000 0000 0000     ........$.......
 801b590:	8f00 0801 8f2c 0801 ab44 abab 8500 0801     ....,...D.......
 801b5a0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b5b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_844>:
 801b5b0:	0004 0000 b0a0 0801 0001 0000 0000 0000     ................
 801b5c0:	7a00 0801 8f38 0801 ab21 abab 8530 0801     .z..8...!...0...
 801b5d0:	8560 0801 0000 0000 0000 0000 0000 0000     `...............

0801b5e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_846>:
 801b5e0:	0004 0000 b0a0 0801 0002 0000 0000 0000     ................
 801b5f0:	7a30 0801 8f44 0801 ab21 abab 8580 0801     0z..D...!.......
 801b600:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b610 <Microsoft.Zelig.Runtime.TypeSystem.VTable_853>:
 801b610:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801b620:	7a90 0801 8f50 0801 ab21 abab 85e0 0801     .z..P...!.......
 801b630:	8610 0801 0000 0000 0000 0000 0000 0000     ................

0801b640 <Microsoft.Zelig.Runtime.TypeSystem.VTable_857>:
 801b640:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801b650:	7ac0 0801 8f5c 0801 ab21 abab 8630 0801     .z..\...!...0...
 801b660:	8660 0801 0000 0000 0000 0000 0000 0000     `...............

0801b670 <Microsoft.Zelig.Runtime.TypeSystem.VTable_859>:
 801b670:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801b680:	7af0 0801 8f68 0801 ab21 abab 8680 0801     .z..h...!.......
 801b690:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b6a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_863>:
 801b6a0:	0004 0000 b0a0 0801 000d 0000 0000 0000     ................
 801b6b0:	7b50 0801 9050 0801 ab44 abab 8700 0801     P{..P...D.......
 801b6c0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b6d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_865>:
 801b6d0:	0004 0000 b0a0 0801 0008 0000 0000 0000     ................
 801b6e0:	9060 0801 908c 0801 ab44 abab 8740 0801     `.......D...@...
 801b6f0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b700 <Microsoft.Zelig.Runtime.TypeSystem.VTable_869>:
 801b700:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801b710:	7be0 0801 9098 0801 ab44 abab 8760 0801     .{......D...`...
 801b720:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b730 <Microsoft.Zelig.Runtime.TypeSystem.VTable_873>:
 801b730:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801b740:	7c30 0801 90c8 0801 ab44 abab 87b0 0801     0|......D.......
 801b750:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b760 <Microsoft.Zelig.Runtime.TypeSystem.VTable_877>:
 801b760:	0004 0000 b0a0 0801 0024 0000 0000 0000     ........$.......
 801b770:	7ca0 0801 9108 0801 ab44 abab 8800 0801     .|......D.......
 801b780:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b790 <Microsoft.Zelig.Runtime.TypeSystem.VTable_897>:
 801b790:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801b7a0:	7f50 0801 9318 0801 ab44 abab 89f0 0801     P.......D.......
 801b7b0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b7c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_899>:
 801b7c0:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801b7d0:	7f80 0801 9324 0801 ab44 abab 8a20 0801     ....$...D... ...
 801b7e0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b7f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_901>:
 801b7f0:	0004 0000 b0a0 0801 0008 0000 0000 0000     ................
 801b800:	7fb0 0801 9330 0801 ab44 abab 8a60 0801     ....0...D...`...
 801b810:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b820 <Microsoft.Zelig.Runtime.TypeSystem.VTable_908>:
 801b820:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801b830:	8010 0801 933c 0801 ab44 abab 8ac0 0801     ....<...D.......
 801b840:	8af0 0801 0000 0000 0000 0000 0000 0000     ................

0801b850 <Microsoft.Zelig.Runtime.TypeSystem.VTable_910>:
 801b850:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801b860:	8040 0801 9348 0801 ab44 abab 8b10 0801     @...H...D.......
 801b870:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b880 <Microsoft.Zelig.Runtime.TypeSystem.VTable_920>:
 801b880:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801b890:	80d0 0801 9354 0801 ab44 abab 8bc0 0801     ....T...D.......
 801b8a0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b8b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_922>:
 801b8b0:	0004 0000 b0a0 0801 0014 0000 0000 0000     ................
 801b8c0:	8100 0801 9360 0801 ab44 abab 8be0 0801     ....`...D.......
 801b8d0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b8e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_932>:
 801b8e0:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801b8f0:	82b0 0801 94a0 0801 ab22 abab 8cf0 0801     ........".......
 801b900:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b910 <Microsoft.Zelig.Runtime.TypeSystem.VTable_934>:
 801b910:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801b920:	82e0 0801 94ac 0801 ab44 abab 8d10 0801     ........D.......
 801b930:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b940 <Microsoft.Zelig.Runtime.TypeSystem.VTable_938>:
 801b940:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801b950:	8370 0801 9524 0801 ab44 abab 8d60 0801     p...$...D...`...
 801b960:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b970 <Microsoft.Zelig.Runtime.TypeSystem.VTable_941>:
 801b970:	0004 0000 b0a0 0801 003c 0000 0000 0000     ........<.......
 801b980:	83a0 0801 95c4 0801 ab44 abab 8dd0 0801     ........D.......
 801b990:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b9a0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_944>:
 801b9a0:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801b9b0:	83d0 0801 9600 0801 ab44 abab 8e70 0801     ........D...p...
 801b9c0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801b9d0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_946>:
 801b9d0:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801b9e0:	8440 0801 960c 0801 ab22 abab 8ea0 0801     @.......".......
 801b9f0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ba00 <Microsoft.Zelig.Runtime.TypeSystem.VTable_948>:
 801ba00:	0004 0000 b0a0 0801 0008 0000 0000 0000     ................
 801ba10:	8470 0801 9618 0801 ab22 abab 8ec0 0801     p.......".......
 801ba20:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ba30 <Microsoft.Zelig.Runtime.TypeSystem.VTable_963>:
 801ba30:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801ba40:	86a0 0801 9688 0801 ab44 abab 8fb0 0801     ........D.......
 801ba50:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ba60 <Microsoft.Zelig.Runtime.TypeSystem.VTable_966>:
 801ba60:	0004 0000 b0a0 0801 000d 0000 0000 0000     ................
 801ba70:	86d0 0801 9710 0801 ab44 abab 9010 0801     ........D.......
 801ba80:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801ba90 <Microsoft.Zelig.Runtime.TypeSystem.VTable_974>:
 801ba90:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801baa0:	8780 0801 971c 0801 ab44 abab 90b0 0801     ........D.......
 801bab0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bac0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_977>:
 801bac0:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801bad0:	87d0 0801 9728 0801 ab44 abab 90e0 0801     ....(...D.......
 801bae0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801baf0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_982>:
 801baf0:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801bb00:	8830 0801 97a0 0801 ab44 abab 9150 0801     0.......D...P...
 801bb10:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bb20 <Microsoft.Zelig.Runtime.TypeSystem.VTable_985>:
 801bb20:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801bb30:	8860 0801 97cc 0801 ab44 abab 91b0 0801     `.......D.......
 801bb40:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bb50 <Microsoft.Zelig.Runtime.TypeSystem.VTable_988>:
 801bb50:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801bb60:	8890 0801 9840 0801 ab44 abab 9200 0801     ....@...D.......
 801bb70:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bb80 <Microsoft.Zelig.Runtime.TypeSystem.VTable_991>:
 801bb80:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801bb90:	88c0 0801 986c 0801 ab44 abab 9260 0801     ....l...D...`...
 801bba0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bbb0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_993>:
 801bbb0:	0004 0000 b0a0 0801 0010 0000 0000 0000     ................
 801bbc0:	88f0 0801 9878 0801 ab44 abab 9280 0801     ....x...D.......
 801bbd0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bbe0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_995>:
 801bbe0:	0004 0000 b0a0 0801 0014 0000 0000 0000     ................
 801bbf0:	8920 0801 9884 0801 ab44 abab 92a0 0801      .......D.......
 801bc00:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bc10 <Microsoft.Zelig.Runtime.TypeSystem.VTable_997>:
 801bc10:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801bc20:	8950 0801 9890 0801 ab44 abab 92c0 0801     P.......D.......
 801bc30:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bc40 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1001>:
 801bc40:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801bc50:	89c0 0801 989c 0801 ab44 abab 92f0 0801     ........D.......
 801bc60:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bc70 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1012>:
 801bc70:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801bc80:	8c00 0801 9900 0801 ab44 abab 93a0 0801     ........D.......
 801bc90:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bca0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1015>:
 801bca0:	0004 0000 b0a0 0801 0009 0000 0000 0000     ................
 801bcb0:	8c30 0801 992c 0801 ab44 abab 93f0 0801     0...,...D.......
 801bcc0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bcd0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1018>:
 801bcd0:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801bce0:	8c60 0801 998c 0801 ab44 abab 9440 0801     `.......D...@...
 801bcf0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bd00 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1020>:
 801bd00:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801bd10:	8c90 0801 9998 0801 ab44 abab 9460 0801     ........D...`...
 801bd20:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bd30 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1022>:
 801bd30:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801bd40:	8cc0 0801 99a4 0801 ab44 abab 9480 0801     ........D.......
 801bd50:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bd60 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1027>:
 801bd60:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801bd70:	8d30 0801 99e4 0801 ab44 abab 94f0 0801     0.......D.......
 801bd80:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bd90 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1031>:
 801bd90:	0004 0000 b0a0 0801 003c 0000 0000 0000     ........<.......
 801bda0:	8da0 0801 9a84 0801 ab44 abab 9560 0801     ........D...`...
 801bdb0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bdc0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1034>:
 801bdc0:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801bdd0:	8e40 0801 9a90 0801 ab44 abab 95d0 0801     @.......D.......
 801bde0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bdf0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1041>:
 801bdf0:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801be00:	8f80 0801 9ac8 0801 ab44 abab 9660 0801     ........D...`...
 801be10:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801be20 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1046>:
 801be20:	0004 0000 b0a0 0801 000d 0000 0000 0000     ................
 801be30:	8fe0 0801 9b08 0801 ab44 abab 96d0 0801     ........D.......
 801be40:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801be50 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1052>:
 801be50:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801be60:	9120 0801 9b50 0801 ab44 abab 9770 0801      ...P...D...p...
 801be70:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801be80 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1055>:
 801be80:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801be90:	9180 0801 9b5c 0801 ab44 abab 97b0 0801     ....\...D.......
 801bea0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801beb0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1059>:
 801beb0:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801bec0:	91d0 0801 9bd0 0801 ab44 abab 9810 0801     ........D.......
 801bed0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bee0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1062>:
 801bee0:	0004 0000 b0a0 0801 0004 0000 0000 0000     ................
 801bef0:	9230 0801 9bdc 0801 ab44 abab 9850 0801     0.......D...P...
 801bf00:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bf10 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1071>:
 801bf10:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801bf20:	9370 0801 9c10 0801 ab44 abab 98e0 0801     p.......D.......
 801bf30:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bf40 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1074>:
 801bf40:	0004 0000 b0a0 0801 0009 0000 0000 0000     ................
 801bf50:	93c0 0801 9c1c 0801 ab44 abab 9910 0801     ........D.......
 801bf60:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bf70 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1078>:
 801bf70:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801bf80:	9410 0801 9c7c 0801 ab44 abab 9970 0801     ....|...D...p...
 801bf90:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bfa0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1083>:
 801bfa0:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801bfb0:	94c0 0801 9c88 0801 ab44 abab 99b0 0801     ........D.......
 801bfc0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801bfd0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1088>:
 801bfd0:	0004 0000 b0a0 0801 0038 0000 0000 0000     ........8.......
 801bfe0:	9530 0801 9d34 0801 ab44 abab 9a20 0801     0...4...D... ...
 801bff0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801c000 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1092>:
 801c000:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801c010:	9630 0801 9d40 0801 ab44 abab 9aa0 0801     0...@...D.......
 801c020:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801c030 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1095>:
 801c030:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801c040:	96a0 0801 9d4c 0801 ab44 abab 9ae0 0801     ....L...D.......
 801c050:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801c060 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1098>:
 801c060:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801c070:	9740 0801 9d58 0801 ab44 abab 9b20 0801     @...X...D... ...
 801c080:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801c090 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1103>:
 801c090:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801c0a0:	97e0 0801 9da0 0801 ab44 abab 9ba0 0801     ........D.......
 801c0b0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801c0c0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1107>:
 801c0c0:	0004 0000 b0a0 0801 000c 0000 0000 0000     ................
 801c0d0:	98b0 0801 9dac 0801 ab44 abab 9bf0 0801     ........D.......
 801c0e0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801c0f0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1112>:
 801c0f0:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801c100:	9940 0801 9ddc 0801 ab44 abab 9c60 0801     @.......D...`...
 801c110:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801c120 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1118>:
 801c120:	0004 0000 b0a0 0801 0038 0000 0000 0000     ........8.......
 801c130:	99f0 0801 9e84 0801 ab44 abab 9cd0 0801     ........D.......
 801c140:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801c150 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1124>:
 801c150:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801c160:	9b70 0801 9e90 0801 ab44 abab 9d70 0801     p.......D...p...
 801c170:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801c180 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1128>:
 801c180:	0004 0000 b0a0 0801 0000 0000 0000 0000     ................
 801c190:	9c30 0801 9e9c 0801 ab44 abab 9dc0 0801     0.......D.......
 801c1a0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801c1b0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1132>:
 801c1b0:	0004 0000 b0a0 0801 0034 0000 0000 0000     ........4.......
 801c1c0:	9ca0 0801 9f14 0801 ab44 abab 9e20 0801     ........D... ...
 801c1d0:	50ac 0801 0000 0000 0000 0000 0000 0000     .P..............

0801c1e0 <Microsoft.Zelig.Runtime.TypeSystem.VTable_1137>:
 801c1e0:	0004 0000 b0a0 0801 0030 0000 0000 0000     ........0.......
 801c1f0:	9df0 0801 9f20 0801 ab44 abab 9eb0 0801     .... ...D.......
 801c200:	50ac 0801 626f 2d6a 703e 6e69 2120 203d     .P..obj->pin != 
 801c210:	5028 6e69 614e 656d 4e29 0043 3a47 4c5c     (PinName)NC.G:\L
 801c220:	696c 756c 526d 7065 5c6f 6c6c 6c69 6d75     lilumRepo\llilum
 801c230:	5a5c 6c65 6769 6d5c 6562 2f64 4154 4752     \Zelig\mbed/TARG
 801c240:	5445 4e5f 4355 454c 5f4f 3446 3131 4552     ET_NUCLEO_F411RE
 801c250:	542f 5241 4547 5f54 5453 2f4d 4154 4752     /TARGET_STM/TARG
 801c260:	5445 535f 4d54 3233 3446 672f 6970 5f6f     ET_STM32F4/gpio_
 801c270:	626f 656a 7463 682e 0000 0000 7325 0000     object.h....%s..
 801c280:	5245 4f52 3a52 4d20 5841 4f4c 5347 5254     ERROR: MAXLOGSTR
 801c290:	4e49 5347 5a49 2045 7865 6563 6465 6465     INGSIZE exceeded
 801c2a0:	0000 0000 3a43 435c 646f 5c65 6967 5f74     ....C:\Code\git_
 801c2b0:	6572 6f70 675c 7469 7568 5c62 626d 6465     repo\github\mbed
 801c2c0:	6f2d 6666 6369 6169 5c6c 7562 6c69 5c64     -official\build\
 801c2d0:	626d 6465 545c 5241 4547 5f54 554e 4c43     mbed\TARGET_NUCL
 801c2e0:	4f45 465f 3134 5231 5c45 4154 4752 5445     EO_F411RE\TARGET
 801c2f0:	535f 4d54 545c 5241 4547 5f54 5453 334d     _STM\TARGET_STM3
 801c300:	4632 2f34 7067 6f69 6f5f 6a62 6365 2e74     2F4/gpio_object.
 801c310:	0068 0000                                   h...

0801c314 <APBAHBPrescTable>:
 801c314:	0000 0000 0201 0403 0201 0403 0706 0908     ................

0801c324 <AHBPrescTable>:
	...
 801c32c:	0201 0403 0706 0908 6970 206e 3d21 2820     ........pin != (
 801c33c:	6950 4e6e 6d61 2965 434e 0000 3a43 435c     PinName)NC..C:\C
 801c34c:	646f 5c65 6967 5f74 6572 6f70 675c 7469     ode\git_repo\git
 801c35c:	7568 5c62 626d 6465 6f2d 6666 6369 6169     hub\mbed-officia
 801c36c:	5c6c 696c 7262 7261 6569 5c73 626d 6465     l\libraries\mbed
 801c37c:	745c 7261 6567 7374 685c 6c61 545c 5241     \targets\hal\TAR
 801c38c:	4547 5f54 5453 5c4d 4154 4752 5445 535f     GET_STM\TARGET_S
 801c39c:	4d54 3233 3446 675c 6970 5f6f 7061 2e69     TM32F4\gpio_api.
 801c3ac:	0063 0000                                   c...

0801c3b0 <gpio_mode>:
 801c3b0:	0000 0000 0001 0000 0011 0000 0002 0000     ................
 801c3c0:	0012 0000 0003 0000 0000 1011 0000 1021     ..............!.
 801c3d0:	0000 1031 0000 1012 0000 1022 0000 1032     ..1......."...2.
 801c3e0:	0000 1000 6950 6d6e 7061 6520 7272 726f     ....Pinmap error
 801c3f0:	203a 7277 6e6f 2067 6f70 7472 6e20 6d75     : wrong port num
 801c400:	6562 2e72 0000 0000 3a43 435c 646f 5c65     ber.....C:\Code\
 801c410:	6967 5f74 6572 6f70 675c 7469 7568 5c62     git_repo\github\
 801c420:	626d 6465 6f2d 6666 6369 6169 5c6c 696c     mbed-official\li
 801c430:	7262 7261 6569 5c73 626d 6465 745c 7261     braries\mbed\tar
 801c440:	6567 7374 685c 6c61 545c 5241 4547 5f54     gets\hal\TARGET_
 801c450:	5453 5c4d 4154 4752 5445 535f 4d54 3233     STM\TARGET_STM32
 801c460:	3446 705c 6e69 616d 2e70 0063 6143 6e6e     F4\pinmap.c.Cann
 801c470:	746f 6920 696e 6974 6c61 7a69 2065 4155     ot initialize UA
 801c480:	5452 0000 626f 2d6a 753e 7261 2074 3d21     RT..obj->uart !=
 801c490:	2820 4155 5452 614e 656d 4e29 0043 0000      (UARTName)NC...
 801c4a0:	3a43 435c 646f 5c65 6967 5f74 6572 6f70     C:\Code\git_repo
 801c4b0:	675c 7469 7568 5c62 626d 6465 6f2d 6666     \github\mbed-off
 801c4c0:	6369 6169 5c6c 696c 7262 7261 6569 5c73     icial\libraries\
 801c4d0:	626d 6465 745c 7261 6567 7374 685c 6c61     mbed\targets\hal
 801c4e0:	545c 5241 4547 5f54 5453 5c4d 4154 4752     \TARGET_STM\TARG
 801c4f0:	5445 535f 4d54 3233 3446 735c 7265 6169     ET_STM32F4\seria
 801c500:	5f6c 7061 2e69 0063 626d 6465 6120 7373     l_api.c.mbed ass
 801c510:	7265 6174 6974 6e6f 6620 6961 656c 3a64     ertation failed:
 801c520:	2520 2c73 6620 6c69 3a65 2520 2c73 6c20      %s, file: %s, l
 801c530:	6e69 2065 6425 0a20 0000 0000 6f63 6c75     ine %d .....coul
 801c540:	2064 6f6e 2074 6970 6f6e 7475 0000 0000     d not pinout....
 801c550:	6970 6d6e 7061 6d20 7369 6d2d 7461 6863     pinmap mis-match
 801c560:	0000 0000 6970 6d6e 7061 6e20 746f 6620     ....pinmap not f
 801c570:	756f 646e 6620 726f 7020 7265 7069 6568     ound for periphe
 801c580:	6172 006c 6970 6d6e 7061 6e20 746f 6620     ral.pinmap not f
 801c590:	756f 646e 6620 726f 6620 6e75 7463 6f69     ound for functio
 801c5a0:	006e 0000                                   n...

0801c5a4 <us_interface>:
 801c5a4:	b151 0800 b175 0800 b1b1 0800 b1c5 0800     Q...u...........
 801c5b4:	b19d 0800                                   ....

0801c5b8 <us_data>:
 801c5b8:	c5a4 0801 0cf0 2000                         ....... 

0801c5c0 <PinMap_UART_RX>:
 801c5c0:	0003 0000 4400 4000 0393 0000 000a 0000     .....D.@........
 801c5d0:	1000 4001 0393 0000 000c 0000 1400 4001     ...@...........@
 801c5e0:	0413 0000 0013 0000 1000 4001 0393 0000     ...........@....
 801c5f0:	0017 0000 1000 4001 0393 0000 0027 0000     .......@....'...
 801c600:	1400 4001 0413 0000 00ff 0000 ffff ffff     ...@............
 801c610:	0000 0000                                   ....

0801c614 <PinMap_UART_TX>:
 801c614:	0002 0000 4400 4000 0393 0000 0009 0000     .....D.@........
 801c624:	1000 4001 0393 0000 000b 0000 1400 4001     ...@...........@
 801c634:	0413 0000 000f 0000 1000 4001 0393 0000     ...........@....
 801c644:	0016 0000 1000 4001 0393 0000 0026 0000     .......@....&...
 801c654:	1400 4001 0413 0000 00ff 0000 ffff ffff     ...@............
 801c664:	0000 0000                                   ....

0801c668 <__sf_fake_stdin>:
	...

0801c688 <__sf_fake_stdout>:
	...

0801c6a8 <__sf_fake_stderr>:
	...
 801c6c8:	0043 0000                                   C...

0801c6cc <_global_impure_ptr>:
 801c6cc:	0a60 2000 2d23 2b30 0020 6c68 004c 6665     `.. #-0+ .hlL.ef
 801c6dc:	4567 4746 4900 464e 6900 666e 4e00 4e41     gEFG.INF.inf.NAN
 801c6ec:	6e00 6e61 3000 3000 3231 3433 3635 3837     .nan.0.012345678
 801c6fc:	4139 4342 4544 0046 3130 3332 3534 3736     9ABCDEF.01234567
 801c70c:	3938 6261 6463 6665 6500 6c25 0064 0000     89abcdef.e%ld...

0801c71c <fpinan.5315>:
 801c71c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 801c72c:	0000 0000                                   ....

0801c730 <tinytens>:
 801c730:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 801c740:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 801c750:	6f43 64ac 0628 1168                         Co.d(.h.

0801c758 <fpi.5279>:
 801c758:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 801c768:	0000 0000                                   ....

0801c76c <_ctype_>:
 801c76c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 801c77c:	2020 2020 2020 2020 2020 2020 2020 2020                     
 801c78c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 801c79c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 801c7ac:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 801c7bc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 801c7cc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 801c7dc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 801c7ec:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 801c86c:	4900 666e 6e69 7469 0079 614e 004e 4f50     .Infinity.NaN.PO
 801c87c:	4953 0058 002e 0000 0000 0000               SIX.........

0801c888 <__mprec_tens>:
 801c888:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 801c898:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 801c8a8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 801c8b8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 801c8c8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 801c8d8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 801c8e8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 801c8f8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 801c908:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 801c918:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 801c928:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 801c938:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 801c948:	9db4 79d9 7843 44ea                         ...yCx.D

0801c950 <__mprec_bigtens>:
 801c950:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 801c960:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 801c970:	bf3c 7f73 4fdd 7515                         <.s..O.u

0801c978 <p05.5314>:
 801c978:	0005 0000 0019 0000 007d 0000               ........}...

0801c984 <__EH_FRAME_BEGIN__>:
 801c984:	0000 0000                                   ....
